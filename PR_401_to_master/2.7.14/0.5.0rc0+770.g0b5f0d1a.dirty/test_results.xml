<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="0" name="pytest" skips="76" tests="9029" time="1134.427"><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid0]" time="0.00244474411011"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid1]" time="0.00113296508789"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid2]" time="0.00140595436096"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid3]" time="0.00107908248901"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid4]" time="0.00136876106262"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid5]" time="0.00127911567688"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid6]" time="0.00104069709778"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid7]" time="0.00110411643982"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid8]" time="0.00106430053711"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid9]" time="0.00121593475342"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid10]" time="0.0013120174408"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid11]" time="0.00124073028564"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid12]" time="0.00141286849976"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid13]" time="0.00120639801025"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid14]" time="0.00181198120117"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid15]" time="0.00121307373047"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid16]" time="0.00124502182007"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid17]" time="0.00121068954468"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid18]" time="0.00130105018616"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid19]" time="0.00148391723633"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid20]" time="0.00146889686584"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid21]" time="0.00135183334351"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid22]" time="0.0013120174408"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid23]" time="0.00152993202209"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid24]" time="0.000820159912109"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid25]" time="0.000829935073853"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid26]" time="0.000911951065063"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid27]" time="0.000838994979858"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid28]" time="0.000771284103394"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid29]" time="0.000835180282593"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid30]" time="0.00127291679382"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid31]" time="0.00150799751282"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid32]" time="0.00126695632935"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid33]" time="0.00161409378052"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid34]" time="0.00138306617737"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid35]" time="0.00139808654785"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid36]" time="0.00140786170959"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid37]" time="0.00159072875977"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid38]" time="0.00166869163513"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid39]" time="0.00247120857239"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid40]" time="0.00281929969788"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid41]" time="0.0022087097168"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="28" name="test_reference_element_wrong_arguments[grid42]" time="0.00087308883667"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid0]" time="0.00125694274902"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid1]" time="0.000915050506592"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid2]" time="0.00139713287354"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid3]" time="0.00131607055664"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid4]" time="0.00114703178406"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid5]" time="0.00106406211853"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid6]" time="0.00143575668335"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid7]" time="0.00145578384399"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid8]" time="0.0011100769043"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid9]" time="0.00106310844421"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid10]" time="0.00157713890076"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid11]" time="0.00104427337646"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid12]" time="0.00119709968567"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid13]" time="0.00115203857422"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid14]" time="0.00131320953369"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid15]" time="0.00115704536438"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid16]" time="0.00119519233704"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid17]" time="0.00155282020569"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid18]" time="0.00115704536438"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid19]" time="0.00113964080811"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid20]" time="0.00118803977966"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid21]" time="0.00124192237854"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid22]" time="0.00132298469543"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid23]" time="0.00143218040466"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid24]" time="0.000982999801636"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid25]" time="0.00075888633728"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid26]" time="0.000760793685913"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid27]" time="0.000749826431274"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid28]" time="0.000742197036743"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid29]" time="0.000827074050903"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid30]" time="0.00117492675781"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid31]" time="0.00140571594238"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid32]" time="0.00124788284302"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid33]" time="0.00139808654785"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid34]" time="0.0013792514801"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid35]" time="0.00138473510742"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid36]" time="0.00147128105164"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid37]" time="0.00141406059265"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid38]" time="0.00162196159363"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid39]" time="0.00242614746094"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid40]" time="0.00282025337219"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid41]" time="0.0022566318512"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="36" name="test_reference_element_type[grid42]" time="0.000813245773315"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid0]" time="0.00111532211304"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid1]" time="0.000946044921875"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid2]" time="0.00147294998169"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid3]" time="0.000972747802734"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid4]" time="0.00107884407043"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid5]" time="0.00095796585083"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid6]" time="0.000985860824585"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid7]" time="0.00112676620483"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid8]" time="0.00102281570435"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid9]" time="0.00127029418945"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid10]" time="0.00130414962769"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid11]" time="0.00108408927917"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid12]" time="0.00120091438293"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid13]" time="0.00106287002563"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid14]" time="0.00133895874023"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid15]" time="0.00112915039062"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid16]" time="0.00138807296753"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid17]" time="0.00121283531189"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid18]" time="0.00118207931519"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid19]" time="0.0011739730835"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid20]" time="0.00117897987366"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid21]" time="0.0012891292572"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid22]" time="0.00131416320801"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid23]" time="0.00142407417297"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid24]" time="0.000736951828003"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid25]" time="0.000835418701172"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid26]" time="0.000842094421387"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid27]" time="0.000764846801758"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid28]" time="0.000740051269531"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid29]" time="0.000785112380981"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid30]" time="0.00131392478943"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid31]" time="0.00115585327148"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid32]" time="0.00115513801575"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid33]" time="0.00148701667786"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid34]" time="0.00147104263306"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid35]" time="0.00126600265503"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid36]" time="0.00145387649536"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid37]" time="0.00154113769531"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid38]" time="0.00149011611938"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid39]" time="0.00256204605103"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid40]" time="0.00280404090881"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid41]" time="0.00230884552002"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="42" name="test_reference_element_transitivity[grid42]" time="0.000807046890259"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid0]" time="0.0143730640411"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid1]" time="0.00264430046082"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid2]" time="0.00216484069824"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid3]" time="0.00176978111267"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid4]" time="0.00285792350769"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid5]" time="0.00182271003723"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid6]" time="0.00207591056824"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid7]" time="0.00177192687988"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid8]" time="0.0019257068634"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid9]" time="0.00187206268311"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid10]" time="0.00211095809937"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid11]" time="0.00190305709839"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid12]" time="0.00253796577454"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid13]" time="0.00203418731689"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid14]" time="0.00248289108276"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid15]" time="0.00197505950928"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid16]" time="0.00195002555847"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid17]" time="0.00214385986328"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid18]" time="0.00191712379456"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid19]" time="0.00228309631348"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid20]" time="0.00206398963928"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid21]" time="0.0021710395813"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid22]" time="0.00224804878235"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid23]" time="0.00242686271667"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid24]" time="0.00149297714233"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid25]" time="0.00184202194214"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid26]" time="0.00154209136963"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid27]" time="0.00144624710083"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid28]" time="0.00153017044067"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid29]" time="0.00163221359253"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid30]" time="0.00187277793884"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid31]" time="0.0019268989563"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid32]" time="0.00221180915833"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid33]" time="0.00213193893433"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid34]" time="0.00216913223267"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid35]" time="0.00231695175171"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid36]" time="0.00213313102722"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid37]" time="0.0023341178894"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid38]" time="0.00227308273315"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid39]" time="0.0032160282135"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid40]" time="0.00364899635315"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid41]" time="0.00307512283325"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="48" name="test_embeddings_wrong_arguments[grid42]" time="0.00155282020569"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid0]" time="0.00379180908203"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid1]" time="0.00372219085693"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid2]" time="0.0125241279602"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid3]" time="0.00365519523621"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid4]" time="0.00384783744812"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid5]" time="0.0037100315094"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid6]" time="0.00384879112244"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid7]" time="0.00359082221985"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid8]" time="0.00367832183838"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid9]" time="0.0103940963745"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid10]" time="0.0108189582825"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid11]" time="0.0103437900543"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid12]" time="0.00417375564575"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid13]" time="0.00408983230591"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid14]" time="0.0321929454803"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid15]" time="0.00540494918823"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid16]" time="0.00454187393188"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid17]" time="0.00422620773315"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid18]" time="0.00409197807312"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid19]" time="0.00413513183594"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid20]" time="0.00409507751465"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid21]" time="0.0239799022675"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid22]" time="0.0255007743835"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid23]" time="0.0255961418152"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid24]" time="0.00279474258423"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid25]" time="0.00205516815186"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid26]" time="0.00184512138367"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid27]" time="0.00201797485352"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid28]" time="0.00188302993774"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid29]" time="0.00274276733398"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid30]" time="0.00400018692017"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid31]" time="0.00386691093445"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid32]" time="0.00424385070801"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid33]" time="0.00414323806763"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid34]" time="0.00405883789062"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid35]" time="0.00430130958557"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid36]" time="0.00460481643677"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid37]" time="0.0052502155304"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid38]" time="0.00443434715271"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid39]" time="0.0141899585724"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid40]" time="0.0139060020447"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid41]" time="0.00911784172058"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="56" name="test_embeddings_shape[grid42]" time="0.00374007225037"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid0]" time="0.010801076889"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid1]" time="0.00589895248413"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid2]" time="0.904154062271"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid3]" time="0.0109441280365"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid4]" time="0.0114359855652"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid5]" time="0.00861477851868"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid6]" time="0.00612902641296"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid7]" time="0.00628209114075"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid8]" time="0.00734806060791"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid9]" time="0.628149032593"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid10]" time="0.634971857071"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid11]" time="0.615617275238"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid12]" time="0.0186700820923"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid13]" time="0.00866317749023"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid14]" time="2.35175085068"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid15]" time="0.0179889202118"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid16]" time="0.0186069011688"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid17]" time="0.017276763916"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid18]" time="0.0100700855255"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid19]" time="0.00846791267395"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid20]" time="0.0104699134827"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid21]" time="1.71878290176"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid22]" time="1.67100286484"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid23]" time="1.65409231186"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid24]" time="0.00544595718384"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid25]" time="0.0153362751007"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid26]" time="0.0155670642853"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid27]" time="0.00496387481689"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid28]" time="0.00370788574219"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid29]" time="1.24770784378"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid30]" time="0.00824308395386"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid31]" time="0.00650691986084"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid32]" time="0.006432056427"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid33]" time="0.00760102272034"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid34]" time="0.006502866745"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid35]" time="0.00598406791687"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid36]" time="0.041818857193"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid37]" time="0.0338218212128"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid38]" time="0.0237581729889"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid39]" time="0.794818878174"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid40]" time="0.638854026794"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid41]" time="0.413508892059"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="66" name="test_embeddings_transitivity[grid42]" time="0.00847172737122"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid0]" time="0.00213408470154"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid1]" time="0.00164198875427"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid2]" time="0.00197696685791"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid3]" time="0.00171804428101"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid4]" time="0.00181484222412"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid5]" time="0.00182199478149"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid6]" time="0.00193810462952"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid7]" time="0.00178861618042"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid8]" time="0.00179624557495"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid9]" time="0.00196385383606"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid10]" time="0.00186014175415"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid11]" time="0.00180006027222"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid12]" time="0.00191402435303"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid13]" time="0.00247669219971"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid14]" time="0.00218605995178"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid15]" time="0.00187087059021"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid16]" time="0.00190186500549"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid17]" time="0.00187993049622"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid18]" time="0.00179529190063"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid19]" time="0.00216007232666"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid20]" time="0.00188875198364"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid21]" time="0.00196099281311"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid22]" time="0.00196886062622"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid23]" time="0.00214219093323"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid24]" time="0.0014169216156"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid25]" time="0.00133204460144"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid26]" time="0.00167083740234"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid27]" time="0.00143384933472"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid28]" time="0.00141310691833"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid29]" time="0.00153303146362"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid30]" time="0.00185322761536"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid31]" time="0.00195908546448"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid32]" time="0.00205731391907"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid33]" time="0.00193333625793"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid34]" time="0.00201201438904"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid35]" time="0.00202417373657"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid36]" time="0.00214600563049"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid37]" time="0.00209999084473"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid38]" time="0.0020751953125"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid39]" time="0.0032811164856"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid40]" time="0.0037739276886"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid41]" time="0.00281691551208"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="79" name="test_jacobian_inverse_transposed_wrong_arguments[grid42]" time="0.00142002105713"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid0]" time="0.00388717651367"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid1]" time="0.00272297859192"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid2]" time="0.160594940186"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid3]" time="0.00520706176758"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid4]" time="0.00381207466125"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid5]" time="0.00361824035645"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid6]" time="0.00293588638306"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid7]" time="0.00308704376221"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid8]" time="0.00328373908997"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid9]" time="0.11398601532"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid10]" time="0.114856004715"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid11]" time="0.117319107056"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid12]" time="0.0070629119873"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid13]" time="0.00345873832703"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid14]" time="0.474739789963"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid15]" time="0.00724411010742"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid16]" time="0.00555205345154"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid17]" time="0.0052649974823"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid18]" time="0.00381302833557"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid19]" time="0.00337100028992"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid20]" time="0.00389909744263"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid21]" time="0.333673000336"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid22]" time="0.336908102036"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid23]" time="0.339301109314"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid24]" time="0.00254607200623"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid25]" time="0.00563287734985"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid26]" time="0.00581693649292"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid27]" time="0.00157880783081"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid28]" time="0.00154185295105"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid29]" time="0.396983146667"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid30]" time="0.00511908531189"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid31]" time="0.00313997268677"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid32]" time="0.00301361083984"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid33]" time="0.00332283973694"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid34]" time="0.00317883491516"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid35]" time="0.0031111240387"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid36]" time="0.00962996482849"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid37]" time="0.00760698318481"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid38]" time="0.00564813613892"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid39]" time="0.156732082367"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid40]" time="0.122642040253"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid41]" time="0.0731930732727"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="89" name="test_jacobian_inverse_transposed_shape[grid42]" time="0.00453186035156"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid0]" time="0.00987482070923"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid1]" time="0.00402593612671"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid2]" time="1.0364177227"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid3]" time="0.0105648040771"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid4]" time="0.0106608867645"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid5]" time="0.00973796844482"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid6]" time="0.00504803657532"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid7]" time="0.00481128692627"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid8]" time="0.00607800483704"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid9]" time="0.752505064011"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid10]" time="0.773134231567"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid11]" time="0.757580280304"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid12]" time="0.023478269577"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid13]" time="0.0071120262146"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid14]" time="3.52142095566"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid15]" time="0.0220921039581"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid16]" time="0.0228269100189"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid17]" time="0.0213429927826"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid18]" time="0.00924277305603"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid19]" time="0.00936794281006"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid20]" time="0.0131561756134"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid21]" time="2.50133800507"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid22]" time="2.48479008675"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid23]" time="2.44299411774"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid24]" time="0.00479984283447"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid25]" time="0.0207512378693"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid26]" time="0.0229911804199"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid27]" time="0.00465106964111"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid28]" time="0.00352501869202"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid29]" time="1.91385579109"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid30]" time="0.00584530830383"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid31]" time="0.00434017181396"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid32]" time="0.00429701805115"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid33]" time="0.00606417655945"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid34]" time="0.00476694107056"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid35]" time="0.00410580635071"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid36]" time="0.0446929931641"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid37]" time="0.0311152935028"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid38]" time="0.0198569297791"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid39]" time="1.13100814819"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid40]" time="0.764800071716"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid41]" time="0.414989233017"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="95" name="test_jacobian_inverse_transposed_values[grid42]" time="0.00637030601501"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid0]" time="0.00169277191162"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid1]" time="0.00142765045166"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid2]" time="0.00206995010376"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid3]" time="0.00146985054016"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid4]" time="0.00158309936523"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid5]" time="0.00166392326355"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid6]" time="0.00150609016418"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid7]" time="0.00154304504395"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid8]" time="0.00156092643738"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid9]" time="0.00197887420654"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid10]" time="0.00167512893677"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid11]" time="0.00164985656738"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid12]" time="0.00160241127014"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid13]" time="0.00158905982971"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid14]" time="0.00197911262512"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid15]" time="0.00162506103516"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid16]" time="0.00164771080017"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid17]" time="0.00159478187561"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid18]" time="0.00166201591492"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid19]" time="0.00165367126465"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid20]" time="0.00164699554443"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid21]" time="0.00177001953125"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid22]" time="0.00204110145569"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid23]" time="0.00171303749084"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid24]" time="0.00133991241455"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid25]" time="0.0013530254364"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid26]" time="0.00127506256104"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid27]" time="0.00133609771729"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid28]" time="0.00120711326599"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid29]" time="0.0019862651825"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid30]" time="0.00175499916077"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid31]" time="0.0016987323761"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid32]" time="0.00170707702637"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid33]" time="0.00183296203613"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid34]" time="0.00181531906128"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid35]" time="0.00182604789734"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid36]" time="0.00214815139771"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid37]" time="0.00186491012573"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid38]" time="0.00184488296509"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid39]" time="0.00294589996338"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid40]" time="0.00339508056641"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid41]" time="0.00269913673401"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="104" name="test_integration_elements_wrong_arguments[grid42]" time="0.00132966041565"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid0]" time="0.00282096862793"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid1]" time="0.00273489952087"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid2]" time="0.00433802604675"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid3]" time="0.00274157524109"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid4]" time="0.00274658203125"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid5]" time="0.00261688232422"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid6]" time="0.0029559135437"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid7]" time="0.00276374816895"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid8]" time="0.00291013717651"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid9]" time="0.00397801399231"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid10]" time="0.00398206710815"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid11]" time="0.00384187698364"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid12]" time="0.00308799743652"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid13]" time="0.00268888473511"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid14]" time="0.00801992416382"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid15]" time="0.00274586677551"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid16]" time="0.00280618667603"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid17]" time="0.00279712677002"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid18]" time="0.00267004966736"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid19]" time="0.00306797027588"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid20]" time="0.00273084640503"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid21]" time="0.00658297538757"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid22]" time="0.00656509399414"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid23]" time="0.00636601448059"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid24]" time="0.00106120109558"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid25]" time="0.00143909454346"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid26]" time="0.00102090835571"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid27]" time="0.00107502937317"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid28]" time="0.00103783607483"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid29]" time="0.00122117996216"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid30]" time="0.00283193588257"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid31]" time="0.0027232170105"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid32]" time="0.00301790237427"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid33]" time="0.00290632247925"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid34]" time="0.00290369987488"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid35]" time="0.00290703773499"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid36]" time="0.00312781333923"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid37]" time="0.00306391716003"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid38]" time="0.0031270980835"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid39]" time="0.00616097450256"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid40]" time="0.00585603713989"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid41]" time="0.00449705123901"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="112" name="test_integration_elements_shape[grid42]" time="0.00264382362366"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid0]" time="0.00302910804749"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid1]" time="0.00189328193665"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid2]" time="0.214134931564"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid3]" time="0.00439190864563"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid4]" time="0.00305509567261"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid5]" time="0.00313472747803"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid6]" time="0.00211596488953"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid7]" time="0.00204563140869"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid8]" time="0.00228905677795"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid9]" time="0.153178930283"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid10]" time="0.154305696487"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid11]" time="0.157301902771"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid12]" time="0.007404088974"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid13]" time="0.00239729881287"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid14]" time="0.835158109665"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid15]" time="0.00761699676514"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid16]" time="0.00594425201416"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid17]" time="0.00594520568848"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid18]" time="0.00295805931091"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid19]" time="0.00288081169128"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid20]" time="0.00388097763062"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid21]" time="0.60986828804"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid22]" time="0.609282016754"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid23]" time="0.605803966522"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid24]" time="0.00194811820984"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid25]" time="0.0016131401062"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid26]" time="0.00128507614136"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid27]" time="0.00124216079712"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid28]" time="0.00124382972717"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid29]" time="0.00180101394653"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid30]" time="0.00227308273315"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid31]" time="0.0021641254425"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid32]" time="0.00211691856384"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid33]" time="0.00258302688599"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid34]" time="0.00235104560852"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid35]" time="0.00221300125122"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid36]" time="0.0104260444641"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid37]" time="0.00783085823059"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid38]" time="0.00414609909058"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid39]" time="0.278465032578"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid40]" time="0.143161773682"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid41]" time="0.0740070343018"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="118" name="test_integration_elements_values[grid42]" time="0.00319600105286"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid0]" time="0.00176906585693"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid1]" time="0.00165367126465"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid2]" time="0.00183844566345"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid3]" time="0.00154805183411"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid4]" time="0.00156378746033"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid5]" time="0.00172305107117"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid6]" time="0.00193667411804"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid7]" time="0.00160193443298"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid8]" time="0.00161194801331"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid9]" time="0.00164604187012"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid10]" time="0.00170803070068"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid11]" time="0.00172567367554"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid12]" time="0.00162172317505"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid13]" time="0.00181412696838"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid14]" time="0.00195670127869"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid15]" time="0.00161981582642"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid16]" time="0.00166392326355"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid17]" time="0.00162696838379"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid18]" time="0.00160908699036"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid19]" time="0.00168704986572"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid20]" time="0.00169777870178"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid21]" time="0.00176787376404"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid22]" time="0.00189638137817"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid23]" time="0.00183081626892"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid24]" time="0.00132393836975"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid25]" time="0.0012788772583"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid26]" time="0.00151467323303"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid27]" time="0.00122594833374"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid28]" time="0.00126910209656"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid29]" time="0.0013382434845"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid30]" time="0.00174307823181"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid31]" time="0.0017352104187"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid32]" time="0.00175094604492"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid33]" time="0.00209093093872"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid34]" time="0.00189018249512"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid35]" time="0.00186014175415"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid36]" time="0.00201988220215"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid37]" time="0.00183415412903"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid38]" time="0.0019199848175"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid39]" time="0.00299310684204"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid40]" time="0.00338387489319"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid41]" time="0.00268983840942"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="128" name="test_volumes_wrong_arguments[grid42]" time="0.00132083892822"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid0]" time="0.00311684608459"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid1]" time="0.00316500663757"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid2]" time="0.00474190711975"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid3]" time="0.00336885452271"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid4]" time="0.00299382209778"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid5]" time="0.0029571056366"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid6]" time="0.0030472278595"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid7]" time="0.00298404693604"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid8]" time="0.00296878814697"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid9]" time="0.00458288192749"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid10]" time="0.00434517860413"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid11]" time="0.00415110588074"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid12]" time="0.00324201583862"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid13]" time="0.00304698944092"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid14]" time="0.00882029533386"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid15]" time="0.00323390960693"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid16]" time="0.00383901596069"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid17]" time="0.00318098068237"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid18]" time="0.0102243423462"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid19]" time="0.00317907333374"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid20]" time="0.00329494476318"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid21]" time="0.00715136528015"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid22]" time="0.00717329978943"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid23]" time="0.0068941116333"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid24]" time="0.00133991241455"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid25]" time="0.00127506256104"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid26]" time="0.00132727622986"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid27]" time="0.00140905380249"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid28]" time="0.00123691558838"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid29]" time="0.00157880783081"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid30]" time="0.00325512886047"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid31]" time="0.00309491157532"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid32]" time="0.00335025787354"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid33]" time="0.00329375267029"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid34]" time="0.00322818756104"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid35]" time="0.00336623191833"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid36]" time="0.0036609172821"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid37]" time="0.00346684455872"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid38]" time="0.00340700149536"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid39]" time="0.00614333152771"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid40]" time="0.00596475601196"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid41]" time="0.00470781326294"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="136" name="test_volumes_shape[grid42]" time="0.00299572944641"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid0]" time="0.00191473960876"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid1]" time="0.00170588493347"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid2]" time="0.00270485877991"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid3]" time="0.00189995765686"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid4]" time="0.00192713737488"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid5]" time="0.00189971923828"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid6]" time="0.00209593772888"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid7]" time="0.00184106826782"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid8]" time="0.00186514854431"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid9]" time="0.00239706039429"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid10]" time="0.0023500919342"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid11]" time="0.00234985351562"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid12]" time="0.00196003913879"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid13]" time="0.00184679031372"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid14]" time="0.00603675842285"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid15]" time="0.00199508666992"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid16]" time="0.00206899642944"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid17]" time="0.00202012062073"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid18]" time="0.00197792053223"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid19]" time="0.00217318534851"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid20]" time="0.00195693969727"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid21]" time="0.00373911857605"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid22]" time="0.00384402275085"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid23]" time="0.00377631187439"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid24]" time="0.000779151916504"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid25]" time="0.000829696655273"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid26]" time="0.0010290145874"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid27]" time="0.000796794891357"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid28]" time="0.000829696655273"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid29]" time="0.000833034515381"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid30]" time="0.00199723243713"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid31]" time="0.00196409225464"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid32]" time="0.00202488899231"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid33]" time="0.00245809555054"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid34]" time="0.00219058990479"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid35]" time="0.00209498405457"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid36]" time="0.00218319892883"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid37]" time="0.00238490104675"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid38]" time="0.00223898887634"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid39]" time="0.00429892539978"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid40]" time="0.00401926040649"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid41]" time="0.00321888923645"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="142" name="test_volumes_values[grid42]" time="0.00168108940125"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid0]" time="0.00197315216064"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid1]" time="0.00174999237061"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid2]" time="0.00209498405457"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid3]" time="0.0021448135376"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid4]" time="0.00185799598694"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid5]" time="0.00179314613342"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid6]" time="0.00187611579895"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid7]" time="0.00195002555847"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid8]" time="0.00188899040222"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid9]" time="0.00284695625305"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid10]" time="0.00203680992126"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid11]" time="0.00201392173767"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid12]" time="0.00207090377808"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid13]" time="0.00188589096069"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid14]" time="0.00237441062927"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid15]" time="0.00198197364807"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid16]" time="0.0022611618042"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid17]" time="0.00207734107971"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid18]" time="0.00201797485352"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid19]" time="0.00198817253113"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid20]" time="0.00195908546448"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid21]" time="0.00232625007629"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid22]" time="0.00239896774292"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid23]" time="0.00212287902832"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid24]" time="0.00159382820129"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid25]" time="0.00160312652588"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid26]" time="0.00154089927673"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid27]" time="0.00158596038818"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid28]" time="0.0015664100647"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid29]" time="0.00198411941528"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid30]" time="0.00211977958679"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid31]" time="0.00213503837585"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid32]" time="0.00202202796936"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid33]" time="0.00220513343811"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid34]" time="0.00208306312561"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid35]" time="0.00244402885437"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid36]" time="0.00214719772339"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid37]" time="0.00232410430908"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid38]" time="0.00221514701843"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid39]" time="0.00324821472168"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid40]" time="0.00365614891052"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid41]" time="0.00288510322571"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="150" name="test_volumes_inverse_wrong_arguments[grid42]" time="0.00185298919678"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid0]" time="0.00348877906799"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid1]" time="0.00325202941895"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid2]" time="0.00499415397644"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid3]" time="0.00339984893799"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid4]" time="0.00339508056641"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid5]" time="0.00362992286682"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid6]" time="0.00335788726807"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid7]" time="0.0034761428833"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid8]" time="0.00371694564819"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid9]" time="0.00478601455688"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid10]" time="0.00461459159851"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid11]" time="0.00450587272644"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid12]" time="0.00349140167236"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid13]" time="0.00336408615112"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid14]" time="0.00894379615784"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid15]" time="0.00357508659363"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid16]" time="0.00343179702759"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid17]" time="0.00365614891052"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid18]" time="0.00363516807556"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid19]" time="0.00346779823303"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid20]" time="0.00363087654114"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid21]" time="0.00754594802856"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid22]" time="0.00739312171936"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid23]" time="0.00722312927246"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid24]" time="0.00171971321106"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid25]" time="0.00141096115112"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid26]" time="0.00138306617737"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid27]" time="0.00148320198059"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid28]" time="0.00148892402649"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid29]" time="0.00151109695435"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid30]" time="0.00369501113892"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid31]" time="0.00390601158142"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid32]" time="0.00369119644165"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid33]" time="0.00361084938049"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid34]" time="0.00358510017395"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid35]" time="0.00354790687561"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid36]" time="0.00376105308533"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid37]" time="0.00390577316284"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid38]" time="0.00370502471924"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid39]" time="0.00635695457458"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid40]" time="0.00623631477356"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid41]" time="0.00519609451294"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="158" name="test_volumes_inverse_shape[grid42]" time="0.00303721427917"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid0]" time="0.00207829475403"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid1]" time="0.00267601013184"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid2]" time="0.00282907485962"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid3]" time="0.00207090377808"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid4]" time="0.00201988220215"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid5]" time="0.00204229354858"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid6]" time="0.00195479393005"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid7]" time="0.00204658508301"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid8]" time="0.00201416015625"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid9]" time="0.00249099731445"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid10]" time="0.00263667106628"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid11]" time="0.00256586074829"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid12]" time="0.00211691856384"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid13]" time="0.00207591056824"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid14]" time="0.00505471229553"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid15]" time="0.00223326683044"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid16]" time="0.00218796730042"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid17]" time="0.00212621688843"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid18]" time="0.00213408470154"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid19]" time="0.00212407112122"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid20]" time="0.0021641254425"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid21]" time="0.00430464744568"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid22]" time="0.00401520729065"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid23]" time="0.00411820411682"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid24]" time="0.000821113586426"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid25]" time="0.000808238983154"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid26]" time="0.000747203826904"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid27]" time="0.000759124755859"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid28]" time="0.00104928016663"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid29]" time="0.000853776931763"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid30]" time="0.00224900245667"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid31]" time="0.00216674804688"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid32]" time="0.00231790542603"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid33]" time="0.00235390663147"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid34]" time="0.00231027603149"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid35]" time="0.00259900093079"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid36]" time="0.00245404243469"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid37]" time="0.00258183479309"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid38]" time="0.00237202644348"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid39]" time="0.00421619415283"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid40]" time="0.00436091423035"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid41]" time="0.00366687774658"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="164" name="test_volumes_inverse_values[grid42]" time="0.00174689292908"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid0]" time="0.00210523605347"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid1]" time="0.00161814689636"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid2]" time="0.0757858753204"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid3]" time="0.00325798988342"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid4]" time="0.00215482711792"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid5]" time="0.00231170654297"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid6]" time="0.00171804428101"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid7]" time="0.00177717208862"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid8]" time="0.00176405906677"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid9]" time="0.054135799408"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid10]" time="0.0556690692902"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid11]" time="0.0551731586456"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid12]" time="0.00455689430237"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid13]" time="0.00184798240662"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid14]" time="0.217385053635"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid15]" time="0.00433897972107"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid16]" time="0.00277018547058"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid17]" time="0.0027768611908"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid18]" time="0.00203990936279"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid19]" time="0.0020580291748"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid20]" time="0.00227618217468"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid21]" time="0.157683134079"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid22]" time="0.157705307007"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid23]" time="0.156716823578"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid24]" time="0.00347113609314"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid25]" time="0.00797986984253"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid26]" time="0.00744104385376"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid27]" time="0.00213694572449"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid28]" time="0.00207614898682"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid29]" time="0.585262060165"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid30]" time="0.00316309928894"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid31]" time="0.0021538734436"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid32]" time="0.00234484672546"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid33]" time="0.00220084190369"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid34]" time="0.00198483467102"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid35]" time="0.00195384025574"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid36]" time="0.00467109680176"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid37]" time="0.00337982177734"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid38]" time="0.00275897979736"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid39]" time="0.0753819942474"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid40]" time="0.041613817215"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid41]" time="0.0224459171295"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="172" name="test_unit_outer_normals_shape[grid42]" time="0.00222992897034"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid0]" time="0.00259804725647"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid1]" time="0.00178909301758"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid2]" time="0.0737161636353"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid3]" time="0.00345206260681"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid4]" time="0.00223588943481"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid5]" time="0.00212693214417"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid6]" time="0.00189971923828"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid7]" time="0.00193810462952"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid8]" time="0.00192523002625"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid9]" time="0.054759979248"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid10]" time="0.0559110641479"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid11]" time="0.0560119152069"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid12]" time="0.00447916984558"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid13]" time="0.00202417373657"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid14]" time="0.221998929977"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid15]" time="0.00457620620728"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid16]" time="0.00330638885498"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid17]" time="0.00300717353821"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid18]" time="0.00230288505554"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid19]" time="0.00221419334412"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid20]" time="0.00252103805542"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid21]" time="0.159396886826"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid22]" time="0.159666061401"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid23]" time="0.160883903503"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid24]" time="0.00394797325134"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid25]" time="0.00789618492126"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid26]" time="0.00785183906555"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid27]" time="0.00231409072876"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid28]" time="0.00221180915833"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid29]" time="0.585872650146"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid30]" time="0.00348210334778"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid31]" time="0.00214648246765"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid32]" time="0.00204586982727"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid33]" time="0.00221514701843"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid34]" time="0.00224089622498"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid35]" time="0.00214505195618"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid36]" time="0.00514698028564"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid37]" time="0.00345587730408"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid38]" time="0.00285696983337"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid39]" time="0.0753629207611"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid40]" time="0.0413961410522"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid41]" time="0.0232076644897"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="178" name="test_unit_outer_normals_normed[grid42]" time="0.00259590148926"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid0]" time="0.00349497795105"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid1]" time="0.00294995307922"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid2]" time="0.0786356925964"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid3]" time="0.00487923622131"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid4]" time="0.00339889526367"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid5]" time="0.00327897071838"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid6]" time="0.00326490402222"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid7]" time="0.00306820869446"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid8]" time="0.00307512283325"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid9]" time="0.0575017929077"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid10]" time="0.0565347671509"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid11]" time="0.0574109554291"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid12]" time="0.00593495368958"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid13]" time="0.00312089920044"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid14]" time="0.224123239517"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid15]" time="0.00571393966675"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid16]" time="0.00409364700317"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid17]" time="0.00414896011353"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid18]" time="0.00330400466919"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid19]" time="0.00372719764709"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid20]" time="0.00373291969299"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid21]" time="0.161151885986"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid22]" time="0.158539772034"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid23]" time="0.162086963654"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid24]" time="0.00499391555786"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid25]" time="0.00902819633484"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid26]" time="0.00910210609436"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid27]" time="0.0031418800354"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid28]" time="0.00313496589661"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid29]" time="0.588931083679"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid30]" time="0.00483798980713"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid31]" time="0.0032479763031"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid32]" time="0.00409293174744"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid33]" time="0.00339078903198"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid34]" time="0.00339984893799"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid35]" time="0.00329113006592"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid36]" time="0.00605201721191"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid37]" time="0.00472593307495"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid38]" time="0.00430297851562"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid39]" time="0.0772290229797"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid40]" time="0.0426471233368"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid41]" time="0.024169921875"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="184" name="test_unit_outer_normals_normal[grid42]" time="0.00420379638672"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid0]" time="0.0041139125824"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid1]" time="0.00247097015381"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid2]" time="0.414178133011"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid3]" time="0.00622820854187"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid4]" time="0.0042359828949"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid5]" time="0.00460910797119"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid6]" time="0.00300550460815"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid7]" time="0.00300073623657"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid8]" time="0.00382709503174"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid9]" time="0.291379928589"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid10]" time="0.299769163132"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid11]" time="0.297965764999"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid12]" time="0.0101721286774"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid13]" time="0.00444078445435"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid14]" time="1.23212623596"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid15]" time="0.0107209682465"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid16]" time="0.00951313972473"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid17]" time="0.00890159606934"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid18]" time="0.00394725799561"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid19]" time="0.00392293930054"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid20]" time="0.00566339492798"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid21]" time="0.885941028595"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid22]" time="0.89487195015"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid23]" time="0.884902715683"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid24]" time="0.0053448677063"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid25]" time="0.0175440311432"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid26]" time="0.0174999237061"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid27]" time="0.00514602661133"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid28]" time="0.00419616699219"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid29]" time="1.50495386124"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid30]" time="0.00422430038452"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid31]" time="0.00270509719849"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid32]" time="0.00269722938538"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid33]" time="0.0033872127533"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid34]" time="0.00275087356567"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid35]" time="0.00266695022583"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid36]" time="0.0166540145874"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid37]" time="0.00921082496643"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid38]" time="0.00471687316895"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid39]" time="0.40576004982"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid40]" time="0.129501104355"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid41]" time="0.050822019577"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="193" name="test_unit_outer_normals_neighbours[grid42]" time="0.00402593612671"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid0]" time="0.00167322158813"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid1]" time="0.00156998634338"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid2]" time="0.001708984375"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid3]" time="0.00158619880676"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid4]" time="0.00153994560242"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid5]" time="0.00176405906677"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid6]" time="0.00155234336853"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid7]" time="0.00163531303406"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid8]" time="0.00158619880676"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid9]" time="0.00171089172363"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid10]" time="0.00169515609741"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid11]" time="0.00169706344604"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid12]" time="0.00189399719238"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid13]" time="0.00156712532043"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid14]" time="0.00196599960327"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid15]" time="0.00166201591492"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid16]" time="0.00165295600891"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid17]" time="0.00162696838379"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid18]" time="0.00159621238708"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid19]" time="0.00169205665588"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid20]" time="0.00164771080017"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid21]" time="0.00188684463501"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid22]" time="0.00177693367004"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid23]" time="0.00188398361206"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid24]" time="0.00122308731079"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid25]" time="0.00196623802185"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid26]" time="0.00129699707031"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid27]" time="0.001216173172"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid28]" time="0.00127196311951"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid29]" time="0.00136828422546"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid30]" time="0.00176692008972"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid31]" time="0.00177192687988"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid32]" time="0.00190019607544"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid33]" time="0.00184893608093"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid34]" time="0.0019998550415"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid35]" time="0.00180172920227"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid36]" time="0.00184011459351"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid37]" time="0.00188302993774"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid38]" time="0.00189900398254"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid39]" time="0.00331020355225"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid40]" time="0.00336313247681"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid41]" time="0.00264692306519"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="206" name="test_centers_wrong_arguments[grid42]" time="0.00127410888672"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid0]" time="0.00269937515259"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid1]" time="0.00256299972534"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid2]" time="0.00429320335388"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid3]" time="0.00260186195374"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid4]" time="0.00264406204224"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid5]" time="0.00265693664551"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid6]" time="0.00258326530457"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid7]" time="0.00254392623901"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid8]" time="0.00250625610352"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid9]" time="0.00403714179993"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid10]" time="0.00367116928101"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid11]" time="0.00374221801758"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid12]" time="0.00279521942139"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid13]" time="0.00278949737549"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid14]" time="0.00691485404968"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid15]" time="0.00337600708008"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid16]" time="0.00274181365967"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid17]" time="0.00289988517761"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid18]" time="0.00284600257874"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid19]" time="0.00279068946838"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid20]" time="0.00279092788696"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid21]" time="0.00586724281311"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid22]" time="0.00579786300659"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid23]" time="0.00567007064819"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid24]" time="0.00103807449341"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid25]" time="0.00105023384094"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid26]" time="0.00108623504639"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid27]" time="0.00103187561035"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid28]" time="0.00120711326599"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid29]" time="0.00171113014221"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid30]" time="0.00300073623657"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid31]" time="0.0028281211853"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid32]" time="0.00296378135681"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid33]" time="0.00283408164978"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid34]" time="0.00286984443665"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid35]" time="0.00280594825745"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid36]" time="0.003005027771"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid37]" time="0.00305986404419"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid38]" time="0.00287294387817"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid39]" time="0.00537014007568"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid40]" time="0.00519108772278"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid41]" time="0.00424194335938"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="214" name="test_centers_shape[grid42]" time="0.0026330947876"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid0]" time="0.00333285331726"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid1]" time="0.00305509567261"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid2]" time="0.00509095191956"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid3]" time="0.00304532051086"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid4]" time="0.00321102142334"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid5]" time="0.00341391563416"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid6]" time="0.00308513641357"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid7]" time="0.00317883491516"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid8]" time="0.00304913520813"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid9]" time="0.00450205802917"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid10]" time="0.00442409515381"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid11]" time="0.00452876091003"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid12]" time="0.00381922721863"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid13]" time="0.00319314002991"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid14]" time="0.00911164283752"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid15]" time="0.00330662727356"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid16]" time="0.00318884849548"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid17]" time="0.0032377243042"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid18]" time="0.00404477119446"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid19]" time="0.00325083732605"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid20]" time="0.00313377380371"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid21]" time="0.00731420516968"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid22]" time="0.00719118118286"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid23]" time="0.00790500640869"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid24]" time="0.00123906135559"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid25]" time="0.00150990486145"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid26]" time="0.00115871429443"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid27]" time="0.00115180015564"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid28]" time="0.00118708610535"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid29]" time="0.00194692611694"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid30]" time="0.00344085693359"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid31]" time="0.00344681739807"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid32]" time="0.00362682342529"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid33]" time="0.00351691246033"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid34]" time="0.00339293479919"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid35]" time="0.00327277183533"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid36]" time="0.0035388469696"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid37]" time="0.00372314453125"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid38]" time="0.003990650177"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid39]" time="0.00680589675903"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid40]" time="0.00625205039978"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid41]" time="0.00515604019165"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="220" name="test_centers_values[grid42]" time="0.00294613838196"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid0]" time="0.00163388252258"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid1]" time="0.00151419639587"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid2]" time="0.00191831588745"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid3]" time="0.0014910697937"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid4]" time="0.00164103507996"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid5]" time="0.00151371955872"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid6]" time="0.00160717964172"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid7]" time="0.00149297714233"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid8]" time="0.00160908699036"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid9]" time="0.00198698043823"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid10]" time="0.00166773796082"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid11]" time="0.0016188621521"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid12]" time="0.00168323516846"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid13]" time="0.00162672996521"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid14]" time="0.00190997123718"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid15]" time="0.00159478187561"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid16]" time="0.00197386741638"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid17]" time="0.00164794921875"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid18]" time="0.00158786773682"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid19]" time="0.00161504745483"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid20]" time="0.00164699554443"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid21]" time="0.00183343887329"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid22]" time="0.00173687934875"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid23]" time="0.0017306804657"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid24]" time="0.00129079818726"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid25]" time="0.00124382972717"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid26]" time="0.00121927261353"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid27]" time="0.00122022628784"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid28]" time="0.00123834609985"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid29]" time="0.00160312652588"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid30]" time="0.0018298625946"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid31]" time="0.00165700912476"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid32]" time="0.0017147064209"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid33]" time="0.00185298919678"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid34]" time="0.0018150806427"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid35]" time="0.00178503990173"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid36]" time="0.00213503837585"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid37]" time="0.00190997123718"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid38]" time="0.00186371803284"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid39]" time="0.00316309928894"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid40]" time="0.00343203544617"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid41]" time="0.00270509719849"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="227" name="test_diameters_wrong_arguments[grid42]" time="0.00136804580688"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid0]" time="0.00332617759705"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid1]" time="0.00288796424866"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid2]" time="0.0719649791718"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid3]" time="0.00529813766479"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid4]" time="0.00355076789856"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid5]" time="0.00361013412476"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid6]" time="0.00328803062439"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid7]" time="0.00295996665955"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid8]" time="0.00317597389221"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid9]" time="0.051949262619"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid10]" time="0.0527329444885"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid11]" time="0.052149772644"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid12]" time="0.00712704658508"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid13]" time="0.0033130645752"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid14]" time="0.307509183884"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid15]" time="0.00646662712097"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid16]" time="0.00473833084106"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid17]" time="0.00476717948914"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid18]" time="0.00353312492371"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid19]" time="0.00387597084045"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid20]" time="0.00379395484924"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid21]" time="0.221682071686"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid22]" time="0.223643064499"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid23]" time="0.221841096878"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid24]" time="0.00219583511353"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid25]" time="0.00242066383362"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid26]" time="0.00212526321411"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid27]" time="0.00125503540039"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid28]" time="0.00119304656982"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid29]" time="0.0966169834137"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid30]" time="0.00474810600281"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid31]" time="0.00318622589111"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid32]" time="0.00335788726807"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid33]" time="0.00348567962646"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid34]" time="0.00353479385376"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid35]" time="0.00335884094238"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid36]" time="0.0058171749115"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid37]" time="0.004887342453"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid38]" time="0.00408887863159"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid39]" time="0.105170965195"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid40]" time="0.0650269985199"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid41]" time="0.0375051498413"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="235" name="test_diameters_shape[grid42]" time="0.00423288345337"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid0]" time="0.00178074836731"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid1]" time="0.0014591217041"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid2]" time="0.0350069999695"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid3]" time="0.00297284126282"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid4]" time="0.00191760063171"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid5]" time="0.00169920921326"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid6]" time="0.00168991088867"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid7]" time="0.00167894363403"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid8]" time="0.00155377388"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid9]" time="0.0263659954071"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid10]" time="0.0270390510559"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid11]" time="0.0269742012024"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid12]" time="0.00406384468079"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid13]" time="0.00169396400452"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid14]" time="0.203788995743"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid15]" time="0.0041663646698"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid16]" time="0.00301790237427"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid17]" time="0.00267601013184"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid18]" time="0.00189995765686"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid19]" time="0.00186228752136"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid20]" time="0.00209093093872"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid21]" time="0.144852161407"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid22]" time="0.14600110054"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid23]" time="0.148065090179"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid24]" time="0.00137615203857"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid25]" time="0.00114607810974"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid26]" time="0.000824928283691"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid27]" time="0.000785112380981"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid28]" time="0.000850200653076"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid29]" time="0.000903129577637"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid30]" time="0.00187206268311"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid31]" time="0.00173997879028"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid32]" time="0.00176596641541"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid33]" time="0.00198888778687"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid34]" time="0.00203943252563"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid35]" time="0.00189089775085"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid36]" time="0.00344681739807"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid37]" time="0.00252389907837"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid38]" time="0.00217008590698"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid39]" time="0.0696039199829"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid40]" time="0.0388853549957"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid41]" time="0.0209639072418"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="241" name="test_diameters_non_negative[grid42]" time="0.00237321853638"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid0]" time="0.00264072418213"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid1]" time="0.00260400772095"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid2]" time="0.0692160129547"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid3]" time="0.00356411933899"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid4]" time="0.00233483314514"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid5]" time="0.00219678878784"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid6]" time="0.0018949508667"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid7]" time="0.00269484519958"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid8]" time="0.00190162658691"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid9]" time="0.0511629581451"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid10]" time="0.0524439811707"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid11]" time="0.0519230365753"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid12]" time="0.00562191009521"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid13]" time="0.00228381156921"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid14]" time="0.406832695007"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid15]" time="0.0057098865509"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid16]" time="0.00393795967102"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid17]" time="0.00404691696167"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid18]" time="0.00260901451111"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid19]" time="0.00252103805542"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid20]" time="0.00306081771851"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid21]" time="0.290440797806"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid22]" time="0.292422056198"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid23]" time="0.289976596832"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid24]" time="0.00126767158508"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid25]" time="0.00113201141357"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid26]" time="0.000813961029053"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid27]" time="0.00110411643982"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid28]" time="0.000797986984253"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid29]" time="0.000904083251953"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid30]" time="0.00220584869385"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid31]" time="0.00200223922729"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid32]" time="0.00197911262512"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid33]" time="0.0024688243866"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid34]" time="0.00268697738647"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid35]" time="0.00233697891235"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid36]" time="0.00484800338745"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid37]" time="0.00348877906799"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid38]" time="0.00294733047485"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid39]" time="0.133472919464"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid40]" time="0.0706889629364"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid41]" time="0.0369229316711"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="247" name="test_diameters_values[grid42]" time="0.00289988517761"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid0]" time="0.00650906562805"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid1]" time="0.00321316719055"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid2]" time="0.00388979911804"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid3]" time="0.00328993797302"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid4]" time="0.00332498550415"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid5]" time="0.00352215766907"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid6]" time="0.00328803062439"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid7]" time="0.00330996513367"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid8]" time="0.00340390205383"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid9]" time="0.00377798080444"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid10]" time="0.00350689888"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid11]" time="0.00341892242432"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid12]" time="0.00356197357178"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid13]" time="0.00377511978149"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid14]" time="0.00390219688416"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid15]" time="0.0039541721344"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid16]" time="0.00368976593018"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid17]" time="0.00379991531372"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid18]" time="0.00353813171387"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid19]" time="0.00388669967651"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid20]" time="0.00375413894653"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid21]" time="0.00392389297485"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid22]" time="0.00422024726868"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid23]" time="0.00391697883606"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid24]" time="0.00190305709839"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid25]" time="0.00192308425903"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid26]" time="0.00205779075623"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid27]" time="0.00209403038025"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid28]" time="0.00203895568848"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid29]" time="0.0025041103363"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid30]" time="0.00358271598816"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid31]" time="0.00357174873352"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid32]" time="0.00365281105042"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid33]" time="0.00390100479126"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid34]" time="0.00379085540771"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid35]" time="0.00409913063049"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid36]" time="0.00379109382629"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid37]" time="0.00365924835205"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid38]" time="0.0037248134613"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid39]" time="0.00515413284302"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid40]" time="0.00555777549744"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid41]" time="0.00475788116455"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="254" name="test_quadrature_points_wrong_arguments[grid42]" time="0.00420212745667"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid0]" time="0.0218167304993"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid1]" time="0.0235018730164"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid2]" time="0.0628931522369"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid3]" time="0.0236780643463"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid4]" time="0.0233767032623"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid5]" time="0.0236389636993"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid6]" time="0.0230808258057"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid7]" time="0.0227122306824"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid8]" time="0.0233449935913"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid9]" time="0.0504429340363"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid10]" time="0.0521748065948"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid11]" time="0.054808139801"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid12]" time="0.0159499645233"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid13]" time="0.0160489082336"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid14]" time="0.0655770301819"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid15]" time="0.0160641670227"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid16]" time="0.0159289836884"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid17]" time="0.0159509181976"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid18]" time="0.0156998634338"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid19]" time="0.0156660079956"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid20]" time="0.0155923366547"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid21]" time="0.0471880435944"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid22]" time="0.0500128269196"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid23]" time="0.0505092144012"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid24]" time="0.00958204269409"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid25]" time="0.00939607620239"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid26]" time="0.00788307189941"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid27]" time="0.00802779197693"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid28]" time="0.007728099823"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid29]" time="0.0153670310974"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid30]" time="0.0218951702118"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid31]" time="0.0231380462646"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid32]" time="0.0237398147583"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid33]" time="0.0163412094116"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid34]" time="0.0194981098175"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid35]" time="0.0160460472107"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid36]" time="0.0246062278748"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid37]" time="0.0243599414825"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid38]" time="0.0237710475922"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid39]" time="0.0297613143921"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid40]" time="0.0248708724976"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid41]" time="0.0206310749054"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="269" name="test_quadrature_points_shape[grid42]" time="0.0146720409393"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid0]" time="0.030748128891"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid1]" time="0.0291881561279"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid2]" time="0.188229084015"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid3]" time="0.0311470031738"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid4]" time="0.0309278964996"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid5]" time="0.0315968990326"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid6]" time="0.0300161838531"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid7]" time="0.0295689105988"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid8]" time="0.0300352573395"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid9]" time="0.143976926804"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid10]" time="0.146114110947"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid11]" time="0.143816947937"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid12]" time="0.0207080841064"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid13]" time="0.0196311473846"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid14]" time="0.133414983749"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid15]" time="0.0204696655273"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid16]" time="0.0202388763428"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid17]" time="0.0210437774658"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid18]" time="0.0196158885956"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid19]" time="0.0196101665497"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid20]" time="0.0195741653442"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid21]" time="0.100490808487"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid22]" time="0.1017100811"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid23]" time="0.102137088776"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid24]" time="0.012805223465"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid25]" time="0.0129079818726"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid26]" time="0.013040304184"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid27]" time="0.0124661922455"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid28]" time="0.0124809741974"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid29]" time="0.0528469085693"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid30]" time="0.0299410820007"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid31]" time="0.0297029018402"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid32]" time="0.0301177501678"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid33]" time="0.0195887088776"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid34]" time="0.0210421085358"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid35]" time="0.0198802947998"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid36]" time="0.0371968746185"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid37]" time="0.0343410968781"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid38]" time="0.0322408676147"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid39]" time="0.0599370002747"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid40]" time="0.0484120845795"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid41]" time="0.0380239486694"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="279" name="test_quadrature_points_values[grid42]" time="0.0190088748932"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid0]" time="0.005774974823"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid1]" time="0.00390601158142"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid2]" time="0.0142185688019"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid3]" time="0.00538802146912"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid4]" time="0.00417709350586"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid5]" time="0.00422072410583"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid6]" time="0.00417518615723"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid7]" time="0.00397896766663"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid8]" time="0.0040979385376"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid9]" time="0.0110521316528"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid10]" time="0.011234998703"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid11]" time="0.0128030776978"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid12]" time="0.00466513633728"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid13]" time="0.00413513183594"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid14]" time="0.0320270061493"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid15]" time="0.00617384910583"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid16]" time="0.00457882881165"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid17]" time="0.00449895858765"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid18]" time="0.00417995452881"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid19]" time="0.00436925888062"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid20]" time="0.00434589385986"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid21]" time="0.0250408649445"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid22]" time="0.0262589454651"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid23]" time="0.0263595581055"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid24]" time="0.00359296798706"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid25]" time="0.00247812271118"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid26]" time="0.00270199775696"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid27]" time="0.00236988067627"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid28]" time="0.00257110595703"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid29]" time="0.00345993041992"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid30]" time="0.00467705726624"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid31]" time="0.00453186035156"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid32]" time="0.00473570823669"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid33]" time="0.00485873222351"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid34]" time="0.00489687919617"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid35]" time="0.00469398498535"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid36]" time="0.00513482093811"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid37]" time="0.00525188446045"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid38]" time="0.00487494468689"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid39]" time="0.014995098114"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid40]" time="0.0153639316559"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid41]" time="0.0113708972931"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="292" name="test_bounding_box[grid42]" time="0.00430202484131"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="301" name="test_orthogonal_centers[grid_with_orthogonal_centers0]" time="0.00392293930054"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="301" name="test_orthogonal_centers[grid_with_orthogonal_centers1]" time="0.00162529945374"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="301" name="test_orthogonal_centers[grid_with_orthogonal_centers2]" time="0.357701063156"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="301" name="test_orthogonal_centers[grid_with_orthogonal_centers3]" time="0.00647282600403"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="301" name="test_orthogonal_centers[grid_with_orthogonal_centers4]" time="0.00560021400452"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="301" name="test_orthogonal_centers[grid_with_orthogonal_centers5]" time="0.00468492507935"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="301" name="test_orthogonal_centers[grid_with_orthogonal_centers6]" time="0.00292491912842"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="301" name="test_orthogonal_centers[grid_with_orthogonal_centers7]" time="0.00313472747803"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="301" name="test_orthogonal_centers[grid_with_orthogonal_centers8]" time="0.00364589691162"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="301" name="test_orthogonal_centers[grid_with_orthogonal_centers9]" time="0.258783102036"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="301" name="test_orthogonal_centers[grid_with_orthogonal_centers10]" time="0.261345148087"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="301" name="test_orthogonal_centers[grid_with_orthogonal_centers11]" time="0.264732122421"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="301" name="test_orthogonal_centers[grid_with_orthogonal_centers12]" time="0.00438618659973"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="301" name="test_orthogonal_centers[grid_with_orthogonal_centers13]" time="0.00738596916199"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="301" name="test_orthogonal_centers[grid_with_orthogonal_centers14]" time="0.00748991966248"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="301" name="test_orthogonal_centers[grid_with_orthogonal_centers15]" time="0.0028829574585"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="301" name="test_orthogonal_centers[grid_with_orthogonal_centers16]" time="0.00279998779297"></testcase><testcase classname="src.pymortests.affine_grid" file="src/pymortests/affine_grid.py" line="301" name="test_orthogonal_centers[grid_with_orthogonal_centers17]" time="0.510452032089"></testcase><testcase classname="src.pymortests.analyticalproblem" file="src/pymortests/analyticalproblem.py" line="11" name="test_pickle[analytical_problem0]" time="0.0321860313416"></testcase><testcase classname="src.pymortests.analyticalproblem" file="src/pymortests/analyticalproblem.py" line="11" name="test_pickle[analytical_problem1]" time="0.0067937374115"></testcase><testcase classname="src.pymortests.analyticalproblem" file="src/pymortests/analyticalproblem.py" line="11" name="test_pickle[analytical_problem2]" time="0.0021870136261"></testcase><testcase classname="src.pymortests.analyticalproblem" file="src/pymortests/analyticalproblem.py" line="11" name="test_pickle[analytical_problem3]" time="0.00381541252136"></testcase><testcase classname="src.pymortests.analyticalproblem" file="src/pymortests/analyticalproblem.py" line="11" name="test_pickle[analytical_problem4]" time="0.0107181072235"></testcase><testcase classname="src.pymortests.analyticalproblem" file="src/pymortests/analyticalproblem.py" line="11" name="test_pickle[analytical_problem5]" time="0.00730013847351"></testcase><testcase classname="src.pymortests.analyticalproblem" file="src/pymortests/analyticalproblem.py" line="11" name="test_pickle[analytical_problem6]" time="0.00500297546387"></testcase><testcase classname="src.pymortests.analyticalproblem" file="src/pymortests/analyticalproblem.py" line="11" name="test_pickle[analytical_problem7]" time="0.0020580291748"></testcase><testcase classname="src.pymortests.analyticalproblem" file="src/pymortests/analyticalproblem.py" line="11" name="test_pickle[analytical_problem8]" time="0.00388693809509"></testcase><testcase classname="src.pymortests.analyticalproblem" file="src/pymortests/analyticalproblem.py" line="11" name="test_pickle[analytical_problem9]" time="0.00355100631714"></testcase><testcase classname="src.pymortests.analyticalproblem" file="src/pymortests/analyticalproblem.py" line="11" name="test_pickle[analytical_problem10]" time="0.00285887718201"></testcase><testcase classname="src.pymortests.analyticalproblem" file="src/pymortests/analyticalproblem.py" line="11" name="test_pickle[analytical_problem11]" time="0.002610206604"></testcase><testcase classname="src.pymortests.analyticalproblem" file="src/pymortests/analyticalproblem.py" line="11" name="test_pickle[analytical_problem12]" time="0.00250124931335"></testcase><testcase classname="src.pymortests.analyticalproblem" file="src/pymortests/analyticalproblem.py" line="11" name="test_pickle[analytical_problem13]" time="0.00284004211426"></testcase><testcase classname="src.pymortests.analyticalproblem" file="src/pymortests/analyticalproblem.py" line="11" name="test_pickle[analytical_problem14]" time="0.00285387039185"></testcase><testcase classname="src.pymortests.analyticalproblem" file="src/pymortests/analyticalproblem.py" line="11" name="test_pickle[analytical_problem15]" time="0.00270199775696"></testcase><testcase classname="src.pymortests.analyticalproblem" file="src/pymortests/analyticalproblem.py" line="15" name="test_pickle_without_dumps_function[picklable_analytical_problem0]" time="0.00126457214355"></testcase><testcase classname="src.pymortests.analyticalproblem" file="src/pymortests/analyticalproblem.py" line="15" name="test_pickle_without_dumps_function[picklable_analytical_problem1]" time="0.00364089012146"></testcase><testcase classname="src.pymortests.analyticalproblem" file="src/pymortests/analyticalproblem.py" line="15" name="test_pickle_without_dumps_function[picklable_analytical_problem2]" time="0.00787878036499"></testcase><testcase classname="src.pymortests.analyticalproblem" file="src/pymortests/analyticalproblem.py" line="15" name="test_pickle_without_dumps_function[picklable_analytical_problem3]" time="0.00501441955566"></testcase><testcase classname="src.pymortests.analyticalproblem" file="src/pymortests/analyticalproblem.py" line="15" name="test_pickle_without_dumps_function[picklable_analytical_problem4]" time="0.00205421447754"></testcase><testcase classname="src.pymortests.analyticalproblem" file="src/pymortests/analyticalproblem.py" line="15" name="test_pickle_without_dumps_function[picklable_analytical_problem5]" time="0.00369191169739"></testcase><testcase classname="src.pymortests.analyticalproblem" file="src/pymortests/analyticalproblem.py" line="15" name="test_pickle_without_dumps_function[picklable_analytical_problem6]" time="0.0023365020752"></testcase><testcase classname="src.pymortests.analyticalproblem" file="src/pymortests/analyticalproblem.py" line="15" name="test_pickle_without_dumps_function[picklable_analytical_problem7]" time="0.00244045257568"></testcase><testcase classname="src.pymortests.analyticalproblem" file="src/pymortests/analyticalproblem.py" line="15" name="test_pickle_without_dumps_function[picklable_analytical_problem8]" time="0.00266695022583"></testcase><testcase classname="src.pymortests.analyticalproblem" file="src/pymortests/analyticalproblem.py" line="15" name="test_pickle_without_dumps_function[picklable_analytical_problem9]" time="0.00244331359863"></testcase><testcase classname="src.pymortests.analyticalproblem" file="src/pymortests/analyticalproblem.py" line="15" name="test_pickle_without_dumps_function[picklable_analytical_problem10]" time="0.00257086753845"></testcase><testcase classname="src.pymortests.analyticalproblem" file="src/pymortests/analyticalproblem.py" line="15" name="test_pickle_without_dumps_function[picklable_analytical_problem11]" time="0.002601146698"></testcase><testcase classname="src.pymortests.basic" file="src/pymortests/basic.py" line="9" name="test_importable" time="0.000799894332886"></testcase><testcase classname="src.pymortests.block" file="src/pymortests/block.py" line="16" name="test_hstack" time="0.00127410888672"></testcase><testcase classname="src.pymortests.block" file="src/pymortests/block.py" line="27" name="test_vstack" time="0.00178289413452"></testcase><testcase classname="src.pymortests.block" file="src/pymortests/block.py" line="38" name="test_apply" time="0.00166606903076"></testcase><testcase classname="src.pymortests.block" file="src/pymortests/block.py" line="64" name="test_apply_transpose" time="0.00157594680786"></testcase><testcase classname="src.pymortests.block" file="src/pymortests/block.py" line="90" name="test_block_diagonal" time="0.000998020172119"></testcase><testcase classname="src.pymortests.block" file="src/pymortests/block.py" line="101" name="test_blk_diag_apply_inverse" time="0.0018150806427"></testcase><testcase classname="src.pymortests.block" file="src/pymortests/block.py" line="123" name="test_blk_diag_apply_inverse_transpose" time="0.0018048286438"></testcase><testcase classname="src.pymortests.cache.TestCache" file="src/pymortests/cache.py" line="60" name="test_runtime" time="1.01201486588"></testcase><testcase classname="src.pymortests.cache.TestCache" file="src/pymortests/cache.py" line="86" name="test_region_api" time="0.00951194763184"></testcase><testcase classname="src.pymortests.complex_values" file="src/pymortests/complex_values.py" line="14" name="test_complex" time="0.107306003571"></testcase><testcase classname="src.pymortests.complex_values" file="src/pymortests/complex_values.py" line="68" name="test_real_imag" time="0.000827789306641"></testcase><testcase classname="src.pymortests.complex_values" file="src/pymortests/complex_values.py" line="85" name="test_scal" time="0.000843048095703"></testcase><testcase classname="src.pymortests.complex_values" file="src/pymortests/complex_values.py" line="98" name="test_axpy" time="0.000971794128418"></testcase><testcase classname="src.pymortests.complex_values" file="src/pymortests/complex_values.py" line="110" name="test_dot" time="0.000800848007202"></testcase><testcase classname="src.pymortests.complex_values" file="src/pymortests/complex_values.py" line="117" name="test_pairwise_dot" time="0.000818014144897"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args0]" time="0.83687210083"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>Discretize ...
Tria-Grid on domain [0,1] x [0,1]
x0-intervals: 32, x1-intervals: 32
elements: 4096, edges: 6208, vertices: 2113

Solve ...
</system-out><system-err>01:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:10 DiffusionOperatorP1: Determine global dofs ...
01:10 DiffusionOperatorP1: Boundary treatment ...
01:10 DiffusionOperatorP1: Assemble system matrix ...
01:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:10 DiffusionOperatorP1: Determine global dofs ...
01:10 DiffusionOperatorP1: Boundary treatment ...
01:10 DiffusionOperatorP1: Assemble system matrix ...
01:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:10 DiffusionOperatorP1: Determine global dofs ...
01:10 DiffusionOperatorP1: Boundary treatment ...
01:10 DiffusionOperatorP1: Assemble system matrix ...
01:10 L2ProductP1: Integrate the products of the shape functions on each element
01:10 L2ProductP1: Determine global dofs ...
01:10 L2ProductP1: Boundary treatment ...
01:10 L2ProductP1: Assemble system matrix ...
01:10 L2ProductP1: Integrate the products of the shape functions on each element
01:10 L2ProductP1: Determine global dofs ...
01:10 L2ProductP1: Boundary treatment ...
01:10 L2ProductP1: Assemble system matrix ...
01:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:10 DiffusionOperatorP1: Determine global dofs ...
01:10 DiffusionOperatorP1: Boundary treatment ...
01:10 DiffusionOperatorP1: Assemble system matrix ...
01:10 StationaryDiscretization: Solving StationaryProblem_CG for {} ...
</system-err><system-out>Discretize ...
Tria-Grid on domain [0,1] x [0,1]
x0-intervals: 32, x1-intervals: 32
elements: 4096, edges: 6208, vertices: 2113

Solve ...
</system-out><system-err>01:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:10 DiffusionOperatorP1: Determine global dofs ...
01:10 DiffusionOperatorP1: Boundary treatment ...
01:10 DiffusionOperatorP1: Assemble system matrix ...
01:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:10 DiffusionOperatorP1: Determine global dofs ...
01:10 DiffusionOperatorP1: Boundary treatment ...
01:10 DiffusionOperatorP1: Assemble system matrix ...
01:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:10 DiffusionOperatorP1: Determine global dofs ...
01:10 DiffusionOperatorP1: Boundary treatment ...
01:10 DiffusionOperatorP1: Assemble system matrix ...
01:10 L2ProductP1: Integrate the products of the shape functions on each element
01:10 L2ProductP1: Determine global dofs ...
01:10 L2ProductP1: Boundary treatment ...
01:10 L2ProductP1: Assemble system matrix ...
01:10 L2ProductP1: Integrate the products of the shape functions on each element
01:10 L2ProductP1: Determine global dofs ...
01:10 L2ProductP1: Boundary treatment ...
01:10 L2ProductP1: Assemble system matrix ...
01:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:10 DiffusionOperatorP1: Determine global dofs ...
01:10 DiffusionOperatorP1: Boundary treatment ...
01:10 DiffusionOperatorP1: Assemble system matrix ...
01:10 StationaryDiscretization: Solving StationaryProblem_CG for {} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args1]" time="0.12140083313"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>Discretize ...
Tria-Grid on domain [0,1] x [0,1]
x0-intervals: 32, x1-intervals: 32
elements: 4096, edges: 6208, vertices: 2113

Solve ...
</system-out><system-err>01:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:10 DiffusionOperatorP1: Determine global dofs ...
01:10 DiffusionOperatorP1: Boundary treatment ...
01:10 DiffusionOperatorP1: Assemble system matrix ...
01:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:10 DiffusionOperatorP1: Determine global dofs ...
01:10 DiffusionOperatorP1: Boundary treatment ...
01:10 DiffusionOperatorP1: Assemble system matrix ...
01:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:10 DiffusionOperatorP1: Determine global dofs ...
01:10 DiffusionOperatorP1: Boundary treatment ...
01:10 DiffusionOperatorP1: Assemble system matrix ...
01:10 L2ProductP1: Integrate the products of the shape functions on each element
01:10 L2ProductP1: Determine global dofs ...
01:10 L2ProductP1: Boundary treatment ...
01:10 L2ProductP1: Assemble system matrix ...
01:10 L2ProductP1: Integrate the products of the shape functions on each element
01:10 L2ProductP1: Determine global dofs ...
01:10 L2ProductP1: Boundary treatment ...
01:10 L2ProductP1: Assemble system matrix ...
01:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:10 DiffusionOperatorP1: Determine global dofs ...
01:10 DiffusionOperatorP1: Boundary treatment ...
01:10 DiffusionOperatorP1: Assemble system matrix ...
01:10 StationaryDiscretization: Solving StationaryProblem_CG for {} ...
</system-err><system-out>Discretize ...
Tria-Grid on domain [0,1] x [0,1]
x0-intervals: 32, x1-intervals: 32
elements: 4096, edges: 6208, vertices: 2113

Solve ...
</system-out><system-err>01:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:10 DiffusionOperatorP1: Determine global dofs ...
01:10 DiffusionOperatorP1: Boundary treatment ...
01:10 DiffusionOperatorP1: Assemble system matrix ...
01:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:10 DiffusionOperatorP1: Determine global dofs ...
01:10 DiffusionOperatorP1: Boundary treatment ...
01:10 DiffusionOperatorP1: Assemble system matrix ...
01:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:10 DiffusionOperatorP1: Determine global dofs ...
01:10 DiffusionOperatorP1: Boundary treatment ...
01:10 DiffusionOperatorP1: Assemble system matrix ...
01:10 L2ProductP1: Integrate the products of the shape functions on each element
01:10 L2ProductP1: Determine global dofs ...
01:10 L2ProductP1: Boundary treatment ...
01:10 L2ProductP1: Assemble system matrix ...
01:10 L2ProductP1: Integrate the products of the shape functions on each element
01:10 L2ProductP1: Determine global dofs ...
01:10 L2ProductP1: Boundary treatment ...
01:10 L2ProductP1: Assemble system matrix ...
01:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:10 DiffusionOperatorP1: Determine global dofs ...
01:10 DiffusionOperatorP1: Boundary treatment ...
01:10 DiffusionOperatorP1: Assemble system matrix ...
01:10 StationaryDiscretization: Solving StationaryProblem_CG for {} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args2]" time="0.075122833252"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>Discretize ...
Rect-Grid on domain [0,1] x [0,1]
x0-intervals: 32, x1-intervals: 32
faces: 1024, edges: 2112, vertices: 1089

Solve ...
</system-out><system-err>01:10 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
01:10 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
01:10 DiffusionOperatorQ1: Determine global dofs ...
01:10 DiffusionOperatorQ1: Boundary treatment ...
01:10 DiffusionOperatorQ1: Assemble system matrix ...
01:11 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
01:11 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
01:11 DiffusionOperatorQ1: Determine global dofs ...
01:11 DiffusionOperatorQ1: Boundary treatment ...
01:11 DiffusionOperatorQ1: Assemble system matrix ...
01:11 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
01:11 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
01:11 DiffusionOperatorQ1: Determine global dofs ...
01:11 DiffusionOperatorQ1: Boundary treatment ...
01:11 DiffusionOperatorQ1: Assemble system matrix ...
01:11 L2ProductQ1: Integrate the products of the shape functions on each element
01:11 L2ProductQ1: Determine global dofs ...
01:11 L2ProductQ1: Boundary treatment ...
01:11 L2ProductQ1: Assemble system matrix ...
01:11 L2ProductQ1: Integrate the products of the shape functions on each element
01:11 L2ProductQ1: Determine global dofs ...
01:11 L2ProductQ1: Boundary treatment ...
01:11 L2ProductQ1: Assemble system matrix ...
01:11 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
01:11 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
01:11 DiffusionOperatorQ1: Determine global dofs ...
01:11 DiffusionOperatorQ1: Boundary treatment ...
01:11 DiffusionOperatorQ1: Assemble system matrix ...
01:11 StationaryDiscretization: Solving StationaryProblem_CG for {} ...
</system-err><system-out>Discretize ...
Rect-Grid on domain [0,1] x [0,1]
x0-intervals: 32, x1-intervals: 32
faces: 1024, edges: 2112, vertices: 1089

Solve ...
</system-out><system-err>01:10 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
01:10 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
01:10 DiffusionOperatorQ1: Determine global dofs ...
01:10 DiffusionOperatorQ1: Boundary treatment ...
01:10 DiffusionOperatorQ1: Assemble system matrix ...
01:11 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
01:11 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
01:11 DiffusionOperatorQ1: Determine global dofs ...
01:11 DiffusionOperatorQ1: Boundary treatment ...
01:11 DiffusionOperatorQ1: Assemble system matrix ...
01:11 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
01:11 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
01:11 DiffusionOperatorQ1: Determine global dofs ...
01:11 DiffusionOperatorQ1: Boundary treatment ...
01:11 DiffusionOperatorQ1: Assemble system matrix ...
01:11 L2ProductQ1: Integrate the products of the shape functions on each element
01:11 L2ProductQ1: Determine global dofs ...
01:11 L2ProductQ1: Boundary treatment ...
01:11 L2ProductQ1: Assemble system matrix ...
01:11 L2ProductQ1: Integrate the products of the shape functions on each element
01:11 L2ProductQ1: Determine global dofs ...
01:11 L2ProductQ1: Boundary treatment ...
01:11 L2ProductQ1: Assemble system matrix ...
01:11 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
01:11 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
01:11 DiffusionOperatorQ1: Determine global dofs ...
01:11 DiffusionOperatorQ1: Boundary treatment ...
01:11 DiffusionOperatorQ1: Assemble system matrix ...
01:11 StationaryDiscretization: Solving StationaryProblem_CG for {} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args3]" time="0.125586986542"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>Discretize ...
Tria-Grid on domain [0,1] x [0,1]
x0-intervals: 32, x1-intervals: 32
elements: 4096, edges: 6208, vertices: 2113

Solve ...
</system-out><system-err>01:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:11 DiffusionOperatorP1: Determine global dofs ...
01:11 DiffusionOperatorP1: Boundary treatment ...
01:11 DiffusionOperatorP1: Assemble system matrix ...
01:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:11 DiffusionOperatorP1: Determine global dofs ...
01:11 DiffusionOperatorP1: Boundary treatment ...
01:11 DiffusionOperatorP1: Assemble system matrix ...
01:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:11 DiffusionOperatorP1: Determine global dofs ...
01:11 DiffusionOperatorP1: Boundary treatment ...
01:11 DiffusionOperatorP1: Assemble system matrix ...
01:11 L2ProductP1: Integrate the products of the shape functions on each element
01:11 L2ProductP1: Determine global dofs ...
01:11 L2ProductP1: Boundary treatment ...
01:11 L2ProductP1: Assemble system matrix ...
01:11 L2ProductP1: Integrate the products of the shape functions on each element
01:11 L2ProductP1: Determine global dofs ...
01:11 L2ProductP1: Boundary treatment ...
01:11 L2ProductP1: Assemble system matrix ...
01:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:11 DiffusionOperatorP1: Determine global dofs ...
01:11 DiffusionOperatorP1: Boundary treatment ...
01:11 DiffusionOperatorP1: Assemble system matrix ...
01:11 StationaryDiscretization: Solving StationaryProblem_CG for {} ...
</system-err><system-out>Discretize ...
Tria-Grid on domain [0,1] x [0,1]
x0-intervals: 32, x1-intervals: 32
elements: 4096, edges: 6208, vertices: 2113

Solve ...
</system-out><system-err>01:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:11 DiffusionOperatorP1: Determine global dofs ...
01:11 DiffusionOperatorP1: Boundary treatment ...
01:11 DiffusionOperatorP1: Assemble system matrix ...
01:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:11 DiffusionOperatorP1: Determine global dofs ...
01:11 DiffusionOperatorP1: Boundary treatment ...
01:11 DiffusionOperatorP1: Assemble system matrix ...
01:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:11 DiffusionOperatorP1: Determine global dofs ...
01:11 DiffusionOperatorP1: Boundary treatment ...
01:11 DiffusionOperatorP1: Assemble system matrix ...
01:11 L2ProductP1: Integrate the products of the shape functions on each element
01:11 L2ProductP1: Determine global dofs ...
01:11 L2ProductP1: Boundary treatment ...
01:11 L2ProductP1: Assemble system matrix ...
01:11 L2ProductP1: Integrate the products of the shape functions on each element
01:11 L2ProductP1: Determine global dofs ...
01:11 L2ProductP1: Boundary treatment ...
01:11 L2ProductP1: Assemble system matrix ...
01:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:11 DiffusionOperatorP1: Determine global dofs ...
01:11 DiffusionOperatorP1: Boundary treatment ...
01:11 DiffusionOperatorP1: Assemble system matrix ...
01:11 StationaryDiscretization: Solving StationaryProblem_CG for {} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args4]" time="0.180382013321"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>Discretize ...
Tria-Grid on domain [0,1] x [0,1]
x0-intervals: 32, x1-intervals: 32
elements: 4096, edges: 6208, vertices: 2113

Solve ...
</system-out><system-err>01:11 StationaryDiscretization: Solving StationaryProblem_FV for {} ...
</system-err><system-out>Discretize ...
Tria-Grid on domain [0,1] x [0,1]
x0-intervals: 32, x1-intervals: 32
elements: 4096, edges: 6208, vertices: 2113

Solve ...
</system-out><system-err>01:11 StationaryDiscretization: Solving StationaryProblem_FV for {} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args5]" time="0.181512832642"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>Discretize ...
Tria-Grid on domain [0,1] x [0,1]
x0-intervals: 32, x1-intervals: 32
elements: 4096, edges: 6208, vertices: 2113

Solve ...
</system-out><system-err>01:11 StationaryDiscretization: Solving StationaryProblem_FV for {} ...
</system-err><system-out>Discretize ...
Tria-Grid on domain [0,1] x [0,1]
x0-intervals: 32, x1-intervals: 32
elements: 4096, edges: 6208, vertices: 2113

Solve ...
</system-out><system-err>01:11 StationaryDiscretization: Solving StationaryProblem_FV for {} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args6]" time="0.0731959342957"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>Discretize ...
Rect-Grid on domain [0,1] x [0,1]
x0-intervals: 32, x1-intervals: 32
faces: 1024, edges: 2112, vertices: 1089

Solve ...
</system-out><system-err>01:11 StationaryDiscretization: Solving StationaryProblem_FV for {} ...
</system-err><system-out>Discretize ...
Rect-Grid on domain [0,1] x [0,1]
x0-intervals: 32, x1-intervals: 32
faces: 1024, edges: 2112, vertices: 1089

Solve ...
</system-out><system-err>01:11 StationaryDiscretization: Solving StationaryProblem_FV for {} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args7]" time="0.182207107544"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>Discretize ...
Tria-Grid on domain [0,1] x [0,1]
x0-intervals: 32, x1-intervals: 32
elements: 4096, edges: 6208, vertices: 2113

Solve ...
</system-out><system-err>01:11 StationaryDiscretization: Solving StationaryProblem_FV for {} ...
</system-err><system-out>Discretize ...
Tria-Grid on domain [0,1] x [0,1]
x0-intervals: 32, x1-intervals: 32
elements: 4096, edges: 6208, vertices: 2113

Solve ...
</system-out><system-err>01:11 StationaryDiscretization: Solving StationaryProblem_FV for {} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args8]" time="0.0970032215118"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>Discretize ...
Tria-Grid on domain [0,1] x [0,1]
x0-intervals: 20, x1-intervals: 20
elements: 1600, edges: 2440, vertices: 841

Solve ...
</system-out><system-err>01:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:11 DiffusionOperatorP1: Determine global dofs ...
01:11 DiffusionOperatorP1: Boundary treatment ...
01:11 DiffusionOperatorP1: Assemble system matrix ...
01:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:11 DiffusionOperatorP1: Determine global dofs ...
01:11 DiffusionOperatorP1: Boundary treatment ...
01:11 DiffusionOperatorP1: Assemble system matrix ...
01:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:11 DiffusionOperatorP1: Determine global dofs ...
01:11 DiffusionOperatorP1: Boundary treatment ...
01:11 DiffusionOperatorP1: Assemble system matrix ...
01:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:11 DiffusionOperatorP1: Determine global dofs ...
01:11 DiffusionOperatorP1: Boundary treatment ...
01:11 DiffusionOperatorP1: Assemble system matrix ...
01:11 L2ProductP1: Integrate the products of the shape functions on each element
01:11 L2ProductP1: Determine global dofs ...
01:11 L2ProductP1: Boundary treatment ...
01:11 L2ProductP1: Assemble system matrix ...
01:11 L2ProductP1: Integrate the products of the shape functions on each element
01:11 L2ProductP1: Determine global dofs ...
01:11 L2ProductP1: Boundary treatment ...
01:11 L2ProductP1: Assemble system matrix ...
01:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:11 DiffusionOperatorP1: Determine global dofs ...
01:11 DiffusionOperatorP1: Boundary treatment ...
01:11 DiffusionOperatorP1: Assemble system matrix ...
01:11 StationaryDiscretization: Solving 2DProblem_CG for {diffusionl: 0.1} ...
01:11 StationaryDiscretization: Solving 2DProblem_CG for {diffusionl: 0.2} ...
01:11 StationaryDiscretization: Solving 2DProblem_CG for {diffusionl: 0.3} ...
01:11 StationaryDiscretization: Solving 2DProblem_CG for {diffusionl: 0.4} ...
01:11 StationaryDiscretization: Solving 2DProblem_CG for {diffusionl: 0.5} ...
01:11 StationaryDiscretization: Solving 2DProblem_CG for {diffusionl: 0.6} ...
01:11 StationaryDiscretization: Solving 2DProblem_CG for {diffusionl: 0.7} ...
01:11 StationaryDiscretization: Solving 2DProblem_CG for {diffusionl: 0.8} ...
01:11 StationaryDiscretization: Solving 2DProblem_CG for {diffusionl: 0.9} ...
01:11 StationaryDiscretization: Solving 2DProblem_CG for {diffusionl: 1.0} ...
</system-err><system-out>Discretize ...
Tria-Grid on domain [0,1] x [0,1]
x0-intervals: 20, x1-intervals: 20
elements: 1600, edges: 2440, vertices: 841

Solve ...
</system-out><system-err>01:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:11 DiffusionOperatorP1: Determine global dofs ...
01:11 DiffusionOperatorP1: Boundary treatment ...
01:11 DiffusionOperatorP1: Assemble system matrix ...
01:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:11 DiffusionOperatorP1: Determine global dofs ...
01:11 DiffusionOperatorP1: Boundary treatment ...
01:11 DiffusionOperatorP1: Assemble system matrix ...
01:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:11 DiffusionOperatorP1: Determine global dofs ...
01:11 DiffusionOperatorP1: Boundary treatment ...
01:11 DiffusionOperatorP1: Assemble system matrix ...
01:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:11 DiffusionOperatorP1: Determine global dofs ...
01:11 DiffusionOperatorP1: Boundary treatment ...
01:11 DiffusionOperatorP1: Assemble system matrix ...
01:11 L2ProductP1: Integrate the products of the shape functions on each element
01:11 L2ProductP1: Determine global dofs ...
01:11 L2ProductP1: Boundary treatment ...
01:11 L2ProductP1: Assemble system matrix ...
01:11 L2ProductP1: Integrate the products of the shape functions on each element
01:11 L2ProductP1: Determine global dofs ...
01:11 L2ProductP1: Boundary treatment ...
01:11 L2ProductP1: Assemble system matrix ...
01:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:11 DiffusionOperatorP1: Determine global dofs ...
01:11 DiffusionOperatorP1: Boundary treatment ...
01:11 DiffusionOperatorP1: Assemble system matrix ...
01:11 StationaryDiscretization: Solving 2DProblem_CG for {diffusionl: 0.1} ...
01:11 StationaryDiscretization: Solving 2DProblem_CG for {diffusionl: 0.2} ...
01:11 StationaryDiscretization: Solving 2DProblem_CG for {diffusionl: 0.3} ...
01:11 StationaryDiscretization: Solving 2DProblem_CG for {diffusionl: 0.4} ...
01:11 StationaryDiscretization: Solving 2DProblem_CG for {diffusionl: 0.5} ...
01:11 StationaryDiscretization: Solving 2DProblem_CG for {diffusionl: 0.6} ...
01:11 StationaryDiscretization: Solving 2DProblem_CG for {diffusionl: 0.7} ...
01:11 StationaryDiscretization: Solving 2DProblem_CG for {diffusionl: 0.8} ...
01:11 StationaryDiscretization: Solving 2DProblem_CG for {diffusionl: 0.9} ...
01:11 StationaryDiscretization: Solving 2DProblem_CG for {diffusionl: 1.0} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args9]" time="0.127390623093"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>Discretize ...
Tria-Grid on domain [0,1] x [0,1]
x0-intervals: 20, x1-intervals: 20
elements: 1600, edges: 2440, vertices: 841

Solve ...
</system-out><system-err>01:12 StationaryDiscretization: Solving 2DProblem_FV for {diffusionl: 0.1} ...
01:12 StationaryDiscretization: Solving 2DProblem_FV for {diffusionl: 0.2} ...
01:12 StationaryDiscretization: Solving 2DProblem_FV for {diffusionl: 0.3} ...
01:12 StationaryDiscretization: Solving 2DProblem_FV for {diffusionl: 0.4} ...
01:12 StationaryDiscretization: Solving 2DProblem_FV for {diffusionl: 0.5} ...
01:12 StationaryDiscretization: Solving 2DProblem_FV for {diffusionl: 0.6} ...
01:12 StationaryDiscretization: Solving 2DProblem_FV for {diffusionl: 0.7} ...
01:12 StationaryDiscretization: Solving 2DProblem_FV for {diffusionl: 0.8} ...
01:12 StationaryDiscretization: Solving 2DProblem_FV for {diffusionl: 0.9} ...
01:12 StationaryDiscretization: Solving 2DProblem_FV for {diffusionl: 1.0} ...
</system-err><system-out>Discretize ...
Tria-Grid on domain [0,1] x [0,1]
x0-intervals: 20, x1-intervals: 20
elements: 1600, edges: 2440, vertices: 841

Solve ...
</system-out><system-err>01:12 StationaryDiscretization: Solving 2DProblem_FV for {diffusionl: 0.1} ...
01:12 StationaryDiscretization: Solving 2DProblem_FV for {diffusionl: 0.2} ...
01:12 StationaryDiscretization: Solving 2DProblem_FV for {diffusionl: 0.3} ...
01:12 StationaryDiscretization: Solving 2DProblem_FV for {diffusionl: 0.4} ...
01:12 StationaryDiscretization: Solving 2DProblem_FV for {diffusionl: 0.5} ...
01:12 StationaryDiscretization: Solving 2DProblem_FV for {diffusionl: 0.6} ...
01:12 StationaryDiscretization: Solving 2DProblem_FV for {diffusionl: 0.7} ...
01:12 StationaryDiscretization: Solving 2DProblem_FV for {diffusionl: 0.8} ...
01:12 StationaryDiscretization: Solving 2DProblem_FV for {diffusionl: 0.9} ...
01:12 StationaryDiscretization: Solving 2DProblem_FV for {diffusionl: 1.0} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args10]" time="0.0359799861908"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>Discretize ...
OnedGrid, domain [0,1], 20 elements, 21 vertices

Solve ...
</system-out><system-err>01:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:12 DiffusionOperatorP1: Determine global dofs ...
01:12 DiffusionOperatorP1: Boundary treatment ...
01:12 DiffusionOperatorP1: Assemble system matrix ...
01:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:12 DiffusionOperatorP1: Determine global dofs ...
01:12 DiffusionOperatorP1: Boundary treatment ...
01:12 DiffusionOperatorP1: Assemble system matrix ...
01:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:12 DiffusionOperatorP1: Determine global dofs ...
01:12 DiffusionOperatorP1: Boundary treatment ...
01:12 DiffusionOperatorP1: Assemble system matrix ...
01:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:12 DiffusionOperatorP1: Determine global dofs ...
01:12 DiffusionOperatorP1: Boundary treatment ...
01:12 DiffusionOperatorP1: Assemble system matrix ...
01:12 L2ProductP1: Integrate the products of the shape functions on each element
01:12 L2ProductP1: Determine global dofs ...
01:12 L2ProductP1: Boundary treatment ...
01:12 L2ProductP1: Assemble system matrix ...
01:12 L2ProductP1: Integrate the products of the shape functions on each element
01:12 L2ProductP1: Determine global dofs ...
01:12 L2ProductP1: Boundary treatment ...
01:12 L2ProductP1: Assemble system matrix ...
01:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:12 DiffusionOperatorP1: Determine global dofs ...
01:12 DiffusionOperatorP1: Boundary treatment ...
01:12 DiffusionOperatorP1: Assemble system matrix ...
01:12 StationaryDiscretization: Solving 1DProblem_CG for {diffusionl: 0.1} ...
01:12 StationaryDiscretization: Solving 1DProblem_CG for {diffusionl: 0.2} ...
01:12 StationaryDiscretization: Solving 1DProblem_CG for {diffusionl: 0.3} ...
01:12 StationaryDiscretization: Solving 1DProblem_CG for {diffusionl: 0.4} ...
01:12 StationaryDiscretization: Solving 1DProblem_CG for {diffusionl: 0.5} ...
01:12 StationaryDiscretization: Solving 1DProblem_CG for {diffusionl: 0.6} ...
01:12 StationaryDiscretization: Solving 1DProblem_CG for {diffusionl: 0.7} ...
01:12 StationaryDiscretization: Solving 1DProblem_CG for {diffusionl: 0.8} ...
01:12 StationaryDiscretization: Solving 1DProblem_CG for {diffusionl: 0.9} ...
01:12 StationaryDiscretization: Solving 1DProblem_CG for {diffusionl: 1.0} ...
</system-err><system-out>Discretize ...
OnedGrid, domain [0,1], 20 elements, 21 vertices

Solve ...
</system-out><system-err>01:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:12 DiffusionOperatorP1: Determine global dofs ...
01:12 DiffusionOperatorP1: Boundary treatment ...
01:12 DiffusionOperatorP1: Assemble system matrix ...
01:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:12 DiffusionOperatorP1: Determine global dofs ...
01:12 DiffusionOperatorP1: Boundary treatment ...
01:12 DiffusionOperatorP1: Assemble system matrix ...
01:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:12 DiffusionOperatorP1: Determine global dofs ...
01:12 DiffusionOperatorP1: Boundary treatment ...
01:12 DiffusionOperatorP1: Assemble system matrix ...
01:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:12 DiffusionOperatorP1: Determine global dofs ...
01:12 DiffusionOperatorP1: Boundary treatment ...
01:12 DiffusionOperatorP1: Assemble system matrix ...
01:12 L2ProductP1: Integrate the products of the shape functions on each element
01:12 L2ProductP1: Determine global dofs ...
01:12 L2ProductP1: Boundary treatment ...
01:12 L2ProductP1: Assemble system matrix ...
01:12 L2ProductP1: Integrate the products of the shape functions on each element
01:12 L2ProductP1: Determine global dofs ...
01:12 L2ProductP1: Boundary treatment ...
01:12 L2ProductP1: Assemble system matrix ...
01:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:12 DiffusionOperatorP1: Determine global dofs ...
01:12 DiffusionOperatorP1: Boundary treatment ...
01:12 DiffusionOperatorP1: Assemble system matrix ...
01:12 StationaryDiscretization: Solving 1DProblem_CG for {diffusionl: 0.1} ...
01:12 StationaryDiscretization: Solving 1DProblem_CG for {diffusionl: 0.2} ...
01:12 StationaryDiscretization: Solving 1DProblem_CG for {diffusionl: 0.3} ...
01:12 StationaryDiscretization: Solving 1DProblem_CG for {diffusionl: 0.4} ...
01:12 StationaryDiscretization: Solving 1DProblem_CG for {diffusionl: 0.5} ...
01:12 StationaryDiscretization: Solving 1DProblem_CG for {diffusionl: 0.6} ...
01:12 StationaryDiscretization: Solving 1DProblem_CG for {diffusionl: 0.7} ...
01:12 StationaryDiscretization: Solving 1DProblem_CG for {diffusionl: 0.8} ...
01:12 StationaryDiscretization: Solving 1DProblem_CG for {diffusionl: 0.9} ...
01:12 StationaryDiscretization: Solving 1DProblem_CG for {diffusionl: 1.0} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args11]" time="0.029284954071"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>Discretize ...
OnedGrid, domain [0,1], 20 elements, 21 vertices

Solve ...
</system-out><system-err>01:12 StationaryDiscretization: Solving 1DProblem_FV for {diffusionl: 0.1} ...
01:12 StationaryDiscretization: Solving 1DProblem_FV for {diffusionl: 0.2} ...
01:12 StationaryDiscretization: Solving 1DProblem_FV for {diffusionl: 0.3} ...
01:12 StationaryDiscretization: Solving 1DProblem_FV for {diffusionl: 0.4} ...
01:12 StationaryDiscretization: Solving 1DProblem_FV for {diffusionl: 0.5} ...
01:12 StationaryDiscretization: Solving 1DProblem_FV for {diffusionl: 0.6} ...
01:12 StationaryDiscretization: Solving 1DProblem_FV for {diffusionl: 0.7} ...
01:12 StationaryDiscretization: Solving 1DProblem_FV for {diffusionl: 0.8} ...
01:12 StationaryDiscretization: Solving 1DProblem_FV for {diffusionl: 0.9} ...
01:12 StationaryDiscretization: Solving 1DProblem_FV for {diffusionl: 1.0} ...
</system-err><system-out>Discretize ...
OnedGrid, domain [0,1], 20 elements, 21 vertices

Solve ...
</system-out><system-err>01:12 StationaryDiscretization: Solving 1DProblem_FV for {diffusionl: 0.1} ...
01:12 StationaryDiscretization: Solving 1DProblem_FV for {diffusionl: 0.2} ...
01:12 StationaryDiscretization: Solving 1DProblem_FV for {diffusionl: 0.3} ...
01:12 StationaryDiscretization: Solving 1DProblem_FV for {diffusionl: 0.4} ...
01:12 StationaryDiscretization: Solving 1DProblem_FV for {diffusionl: 0.5} ...
01:12 StationaryDiscretization: Solving 1DProblem_FV for {diffusionl: 0.6} ...
01:12 StationaryDiscretization: Solving 1DProblem_FV for {diffusionl: 0.7} ...
01:12 StationaryDiscretization: Solving 1DProblem_FV for {diffusionl: 0.8} ...
01:12 StationaryDiscretization: Solving 1DProblem_FV for {diffusionl: 0.9} ...
01:12 StationaryDiscretization: Solving 1DProblem_FV for {diffusionl: 1.0} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args12]" time="0.722575902939"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>Setup Problem ...
Discretize ...
Rect-Grid on domain [0,2] x [0,1]
x0-intervals: 120, x1-intervals: 60
faces: 7200, edges: 14400, vertices: 7200
The parameter type is {exponent: ()}
Solving for exponent = 0.1 ... 
Solving took 0.702345132828s
</system-out><system-err>01:12 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 0.1} ...
</system-err><system-out>Setup Problem ...
Discretize ...
Rect-Grid on domain [0,2] x [0,1]
x0-intervals: 120, x1-intervals: 60
faces: 7200, edges: 14400, vertices: 7200
The parameter type is {exponent: ()}
Solving for exponent = 0.1 ... 
Solving took 0.702345132828s
</system-out><system-err>01:12 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 0.1} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args13]" time="1.3189971447"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>Setup Problem ...
Discretize ...
Rect-Grid on domain [0,2] x [0,1]
x0-intervals: 120, x1-intervals: 60
faces: 7200, edges: 14400, vertices: 7200
The parameter type is {exponent: ()}
Solving for exponent = 0.1 ... 
Solving took 1.30489611626s
</system-out><system-err>01:13 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 0.1} ...
</system-err><system-out>Setup Problem ...
Discretize ...
Rect-Grid on domain [0,2] x [0,1]
x0-intervals: 120, x1-intervals: 60
faces: 7200, edges: 14400, vertices: 7200
The parameter type is {exponent: ()}
Solving for exponent = 0.1 ... 
Solving took 1.30489611626s
</system-out><system-err>01:13 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 0.1} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args14]" time="0.71187877655"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>Setup Problem ...
Discretize ...
Rect-Grid on domain [0,2] x [0,1]
x0-intervals: 120, x1-intervals: 60
faces: 7200, edges: 14400, vertices: 7200
The parameter type is {exponent: ()}
Solving for exponent = 0.1 ... 
Solving took 0.697014093399s
</system-out><system-err>01:14 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 0.1} ...
</system-err><system-out>Setup Problem ...
Discretize ...
Rect-Grid on domain [0,2] x [0,1]
x0-intervals: 120, x1-intervals: 60
faces: 7200, edges: 14400, vertices: 7200
The parameter type is {exponent: ()}
Solving for exponent = 0.1 ... 
Solving took 0.697014093399s
</system-out><system-err>01:14 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 0.1} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args15]" time="2.39025878906"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>Discretize ...
Tria-Grid on domain [0,1] x [0,1]
x0-intervals: 100, x1-intervals: 100
elements: 40000, edges: 60200, vertices: 20201

Solve ...
</system-out><system-err>01:15 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:15 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:15 DiffusionOperatorP1: Determine global dofs ...
01:15 DiffusionOperatorP1: Boundary treatment ...
01:15 DiffusionOperatorP1: Assemble system matrix ...
01:15 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:15 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:15 DiffusionOperatorP1: Determine global dofs ...
01:15 DiffusionOperatorP1: Boundary treatment ...
01:15 DiffusionOperatorP1: Assemble system matrix ...
01:15 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:15 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:15 DiffusionOperatorP1: Determine global dofs ...
01:15 DiffusionOperatorP1: Boundary treatment ...
01:15 DiffusionOperatorP1: Assemble system matrix ...
01:15 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:15 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:15 DiffusionOperatorP1: Determine global dofs ...
01:15 DiffusionOperatorP1: Boundary treatment ...
01:15 DiffusionOperatorP1: Assemble system matrix ...
01:15 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:15 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:15 DiffusionOperatorP1: Determine global dofs ...
01:15 DiffusionOperatorP1: Boundary treatment ...
01:15 DiffusionOperatorP1: Assemble system matrix ...
01:15 L2ProductP1: Integrate the products of the shape functions on each element
01:16 L2ProductP1: Determine global dofs ...
01:16 L2ProductP1: Boundary treatment ...
01:16 L2ProductP1: Assemble system matrix ...
01:16 L2ProductP1: Integrate the products of the shape functions on each element
01:16 L2ProductP1: Determine global dofs ...
01:16 L2ProductP1: Boundary treatment ...
01:16 L2ProductP1: Assemble system matrix ...
01:16 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:16 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:16 DiffusionOperatorP1: Determine global dofs ...
01:16 DiffusionOperatorP1: Boundary treatment ...
01:16 DiffusionOperatorP1: Assemble system matrix ...
01:16 InstationaryDiscretization: Solving instationary_StationaryProblem_CG for {top: 1.0} ...
</system-err><system-out>Discretize ...
Tria-Grid on domain [0,1] x [0,1]
x0-intervals: 100, x1-intervals: 100
elements: 40000, edges: 60200, vertices: 20201

Solve ...
</system-out><system-err>01:15 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:15 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:15 DiffusionOperatorP1: Determine global dofs ...
01:15 DiffusionOperatorP1: Boundary treatment ...
01:15 DiffusionOperatorP1: Assemble system matrix ...
01:15 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:15 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:15 DiffusionOperatorP1: Determine global dofs ...
01:15 DiffusionOperatorP1: Boundary treatment ...
01:15 DiffusionOperatorP1: Assemble system matrix ...
01:15 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:15 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:15 DiffusionOperatorP1: Determine global dofs ...
01:15 DiffusionOperatorP1: Boundary treatment ...
01:15 DiffusionOperatorP1: Assemble system matrix ...
01:15 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:15 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:15 DiffusionOperatorP1: Determine global dofs ...
01:15 DiffusionOperatorP1: Boundary treatment ...
01:15 DiffusionOperatorP1: Assemble system matrix ...
01:15 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:15 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:15 DiffusionOperatorP1: Determine global dofs ...
01:15 DiffusionOperatorP1: Boundary treatment ...
01:15 DiffusionOperatorP1: Assemble system matrix ...
01:15 L2ProductP1: Integrate the products of the shape functions on each element
01:16 L2ProductP1: Determine global dofs ...
01:16 L2ProductP1: Boundary treatment ...
01:16 L2ProductP1: Assemble system matrix ...
01:16 L2ProductP1: Integrate the products of the shape functions on each element
01:16 L2ProductP1: Determine global dofs ...
01:16 L2ProductP1: Boundary treatment ...
01:16 L2ProductP1: Assemble system matrix ...
01:16 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:16 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:16 DiffusionOperatorP1: Determine global dofs ...
01:16 DiffusionOperatorP1: Boundary treatment ...
01:16 DiffusionOperatorP1: Assemble system matrix ...
01:16 InstationaryDiscretization: Solving instationary_StationaryProblem_CG for {top: 1.0} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args16]" time="1.02828001976"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>Discretize ...
Rect-Grid on domain [0,1] x [0,1]
x0-intervals: 100, x1-intervals: 100
faces: 10000, edges: 20200, vertices: 10201

Solve ...
</system-out><system-err>01:17 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
01:17 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
01:17 DiffusionOperatorQ1: Determine global dofs ...
01:17 DiffusionOperatorQ1: Boundary treatment ...
01:17 DiffusionOperatorQ1: Assemble system matrix ...
01:17 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
01:17 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
01:17 DiffusionOperatorQ1: Determine global dofs ...
01:17 DiffusionOperatorQ1: Boundary treatment ...
01:17 DiffusionOperatorQ1: Assemble system matrix ...
01:17 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
01:17 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
01:17 DiffusionOperatorQ1: Determine global dofs ...
01:17 DiffusionOperatorQ1: Boundary treatment ...
01:17 DiffusionOperatorQ1: Assemble system matrix ...
01:17 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
01:17 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
01:17 DiffusionOperatorQ1: Determine global dofs ...
01:17 DiffusionOperatorQ1: Boundary treatment ...
01:17 DiffusionOperatorQ1: Assemble system matrix ...
01:17 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
01:17 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
01:17 DiffusionOperatorQ1: Determine global dofs ...
01:17 DiffusionOperatorQ1: Boundary treatment ...
01:17 DiffusionOperatorQ1: Assemble system matrix ...
01:17 L2ProductQ1: Integrate the products of the shape functions on each element
01:17 L2ProductQ1: Determine global dofs ...
01:17 L2ProductQ1: Boundary treatment ...
01:17 L2ProductQ1: Assemble system matrix ...
01:17 L2ProductQ1: Integrate the products of the shape functions on each element
01:17 L2ProductQ1: Determine global dofs ...
01:17 L2ProductQ1: Boundary treatment ...
01:17 L2ProductQ1: Assemble system matrix ...
01:17 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
01:18 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
01:18 DiffusionOperatorQ1: Determine global dofs ...
01:18 DiffusionOperatorQ1: Boundary treatment ...
01:18 DiffusionOperatorQ1: Assemble system matrix ...
01:18 InstationaryDiscretization: Solving instationary_StationaryProblem_CG for {top: 1.0} ...
</system-err><system-out>Discretize ...
Rect-Grid on domain [0,1] x [0,1]
x0-intervals: 100, x1-intervals: 100
faces: 10000, edges: 20200, vertices: 10201

Solve ...
</system-out><system-err>01:17 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
01:17 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
01:17 DiffusionOperatorQ1: Determine global dofs ...
01:17 DiffusionOperatorQ1: Boundary treatment ...
01:17 DiffusionOperatorQ1: Assemble system matrix ...
01:17 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
01:17 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
01:17 DiffusionOperatorQ1: Determine global dofs ...
01:17 DiffusionOperatorQ1: Boundary treatment ...
01:17 DiffusionOperatorQ1: Assemble system matrix ...
01:17 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
01:17 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
01:17 DiffusionOperatorQ1: Determine global dofs ...
01:17 DiffusionOperatorQ1: Boundary treatment ...
01:17 DiffusionOperatorQ1: Assemble system matrix ...
01:17 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
01:17 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
01:17 DiffusionOperatorQ1: Determine global dofs ...
01:17 DiffusionOperatorQ1: Boundary treatment ...
01:17 DiffusionOperatorQ1: Assemble system matrix ...
01:17 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
01:17 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
01:17 DiffusionOperatorQ1: Determine global dofs ...
01:17 DiffusionOperatorQ1: Boundary treatment ...
01:17 DiffusionOperatorQ1: Assemble system matrix ...
01:17 L2ProductQ1: Integrate the products of the shape functions on each element
01:17 L2ProductQ1: Determine global dofs ...
01:17 L2ProductQ1: Boundary treatment ...
01:17 L2ProductQ1: Assemble system matrix ...
01:17 L2ProductQ1: Integrate the products of the shape functions on each element
01:17 L2ProductQ1: Determine global dofs ...
01:17 L2ProductQ1: Boundary treatment ...
01:17 L2ProductQ1: Assemble system matrix ...
01:17 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
01:18 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
01:18 DiffusionOperatorQ1: Determine global dofs ...
01:18 DiffusionOperatorQ1: Boundary treatment ...
01:18 DiffusionOperatorQ1: Assemble system matrix ...
01:18 InstationaryDiscretization: Solving instationary_StationaryProblem_CG for {top: 1.0} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args17]" time="2.84413909912"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>Discretize ...
Tria-Grid on domain [0,1] x [0,1]
x0-intervals: 100, x1-intervals: 100
elements: 40000, edges: 60200, vertices: 20201

Solve ...
</system-out><system-err>01:20 InstationaryDiscretization: Solving instationary_StationaryProblem_FV for {top: 1.0} ...
</system-err><system-out>Discretize ...
Tria-Grid on domain [0,1] x [0,1]
x0-intervals: 100, x1-intervals: 100
elements: 40000, edges: 60200, vertices: 20201

Solve ...
</system-out><system-err>01:20 InstationaryDiscretization: Solving instationary_StationaryProblem_FV for {top: 1.0} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args18]" time="0.831807136536"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>Discretize ...
Rect-Grid on domain [0,1] x [0,1]
x0-intervals: 100, x1-intervals: 100
faces: 10000, edges: 20200, vertices: 10201

Solve ...
</system-out><system-err>01:21 InstationaryDiscretization: Solving instationary_StationaryProblem_FV for {top: 1.0} ...
</system-err><system-out>Discretize ...
Rect-Grid on domain [0,1] x [0,1]
x0-intervals: 100, x1-intervals: 100
faces: 10000, edges: 20200, vertices: 10201

Solve ...
</system-out><system-err>01:21 InstationaryDiscretization: Solving instationary_StationaryProblem_FV for {top: 1.0} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args19]" time="2.29712510109"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>Discretize ...
Tria-Grid on domain [0,1] x [0,1]
x0-intervals: 100, x1-intervals: 100
elements: 40000, edges: 60200, vertices: 20201

Solve ...
</system-out><system-err>01:22 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:22 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:22 DiffusionOperatorP1: Determine global dofs ...
01:22 DiffusionOperatorP1: Boundary treatment ...
01:22 DiffusionOperatorP1: Assemble system matrix ...
01:22 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:22 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:22 DiffusionOperatorP1: Determine global dofs ...
01:22 DiffusionOperatorP1: Boundary treatment ...
01:22 DiffusionOperatorP1: Assemble system matrix ...
01:22 AdvectionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:22 AdvectionOperatorP1: Calculate all local scalar products beween gradients ...
01:22 AdvectionOperatorP1: Determine global dofs ...
01:22 AdvectionOperatorP1: Boundary treatment ...
01:22 AdvectionOperatorP1: Assemble system matrix ...
01:22 L2ProductP1: Integrate the products of the shape functions on each element
01:22 L2ProductP1: Determine global dofs ...
01:22 L2ProductP1: Boundary treatment ...
01:22 L2ProductP1: Assemble system matrix ...
01:23 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:23 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:23 DiffusionOperatorP1: Determine global dofs ...
01:23 DiffusionOperatorP1: Boundary treatment ...
01:23 DiffusionOperatorP1: Assemble system matrix ...
01:23 L2ProductP1: Integrate the products of the shape functions on each element
01:23 L2ProductP1: Determine global dofs ...
01:23 L2ProductP1: Boundary treatment ...
01:23 L2ProductP1: Assemble system matrix ...
01:23 L2ProductP1: Integrate the products of the shape functions on each element
01:23 L2ProductP1: Determine global dofs ...
01:23 L2ProductP1: Boundary treatment ...
01:23 L2ProductP1: Assemble system matrix ...
01:23 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:23 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:23 DiffusionOperatorP1: Determine global dofs ...
01:23 DiffusionOperatorP1: Boundary treatment ...
01:23 DiffusionOperatorP1: Assemble system matrix ...
01:23 InstationaryDiscretization: Solving instationary_StationaryProblem_CG for {speed: 1.0} ...
</system-err><system-out>Discretize ...
Tria-Grid on domain [0,1] x [0,1]
x0-intervals: 100, x1-intervals: 100
elements: 40000, edges: 60200, vertices: 20201

Solve ...
</system-out><system-err>01:22 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:22 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:22 DiffusionOperatorP1: Determine global dofs ...
01:22 DiffusionOperatorP1: Boundary treatment ...
01:22 DiffusionOperatorP1: Assemble system matrix ...
01:22 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:22 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:22 DiffusionOperatorP1: Determine global dofs ...
01:22 DiffusionOperatorP1: Boundary treatment ...
01:22 DiffusionOperatorP1: Assemble system matrix ...
01:22 AdvectionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:22 AdvectionOperatorP1: Calculate all local scalar products beween gradients ...
01:22 AdvectionOperatorP1: Determine global dofs ...
01:22 AdvectionOperatorP1: Boundary treatment ...
01:22 AdvectionOperatorP1: Assemble system matrix ...
01:22 L2ProductP1: Integrate the products of the shape functions on each element
01:22 L2ProductP1: Determine global dofs ...
01:22 L2ProductP1: Boundary treatment ...
01:22 L2ProductP1: Assemble system matrix ...
01:23 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:23 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:23 DiffusionOperatorP1: Determine global dofs ...
01:23 DiffusionOperatorP1: Boundary treatment ...
01:23 DiffusionOperatorP1: Assemble system matrix ...
01:23 L2ProductP1: Integrate the products of the shape functions on each element
01:23 L2ProductP1: Determine global dofs ...
01:23 L2ProductP1: Boundary treatment ...
01:23 L2ProductP1: Assemble system matrix ...
01:23 L2ProductP1: Integrate the products of the shape functions on each element
01:23 L2ProductP1: Determine global dofs ...
01:23 L2ProductP1: Boundary treatment ...
01:23 L2ProductP1: Assemble system matrix ...
01:23 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:23 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:23 DiffusionOperatorP1: Determine global dofs ...
01:23 DiffusionOperatorP1: Boundary treatment ...
01:23 DiffusionOperatorP1: Assemble system matrix ...
01:23 InstationaryDiscretization: Solving instationary_StationaryProblem_CG for {speed: 1.0} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args20]" time="0.966957092285"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>Discretize ...
Rect-Grid on domain [0,1] x [0,1]
x0-intervals: 100, x1-intervals: 100
faces: 10000, edges: 20200, vertices: 10201

Solve ...
</system-out><system-err>01:24 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
01:24 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
01:24 DiffusionOperatorQ1: Determine global dofs ...
01:24 DiffusionOperatorQ1: Boundary treatment ...
01:24 DiffusionOperatorQ1: Assemble system matrix ...
01:24 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
01:24 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
01:24 DiffusionOperatorQ1: Determine global dofs ...
01:24 DiffusionOperatorQ1: Boundary treatment ...
01:24 DiffusionOperatorQ1: Assemble system matrix ...
01:24 AdvectionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
01:24 AdvectionOperatorQ1: Calculate all local scalar products beween gradients ...
01:24 AdvectionOperatorQ1: Determine global dofs ...
01:24 AdvectionOperatorQ1: Boundary treatment ...
01:24 AdvectionOperatorQ1: Assemble system matrix ...
01:24 L2ProductQ1: Integrate the products of the shape functions on each element
01:24 L2ProductQ1: Determine global dofs ...
01:24 L2ProductQ1: Boundary treatment ...
01:24 L2ProductQ1: Assemble system matrix ...
01:24 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
01:24 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
01:24 DiffusionOperatorQ1: Determine global dofs ...
01:24 DiffusionOperatorQ1: Boundary treatment ...
01:24 DiffusionOperatorQ1: Assemble system matrix ...
01:24 L2ProductQ1: Integrate the products of the shape functions on each element
01:24 L2ProductQ1: Determine global dofs ...
01:24 L2ProductQ1: Boundary treatment ...
01:24 L2ProductQ1: Assemble system matrix ...
01:24 L2ProductQ1: Integrate the products of the shape functions on each element
01:25 L2ProductQ1: Determine global dofs ...
01:25 L2ProductQ1: Boundary treatment ...
01:25 L2ProductQ1: Assemble system matrix ...
01:25 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
01:25 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
01:25 DiffusionOperatorQ1: Determine global dofs ...
01:25 DiffusionOperatorQ1: Boundary treatment ...
01:25 DiffusionOperatorQ1: Assemble system matrix ...
01:25 InstationaryDiscretization: Solving instationary_StationaryProblem_CG for {speed: 1.0} ...
</system-err><system-out>Discretize ...
Rect-Grid on domain [0,1] x [0,1]
x0-intervals: 100, x1-intervals: 100
faces: 10000, edges: 20200, vertices: 10201

Solve ...
</system-out><system-err>01:24 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
01:24 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
01:24 DiffusionOperatorQ1: Determine global dofs ...
01:24 DiffusionOperatorQ1: Boundary treatment ...
01:24 DiffusionOperatorQ1: Assemble system matrix ...
01:24 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
01:24 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
01:24 DiffusionOperatorQ1: Determine global dofs ...
01:24 DiffusionOperatorQ1: Boundary treatment ...
01:24 DiffusionOperatorQ1: Assemble system matrix ...
01:24 AdvectionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
01:24 AdvectionOperatorQ1: Calculate all local scalar products beween gradients ...
01:24 AdvectionOperatorQ1: Determine global dofs ...
01:24 AdvectionOperatorQ1: Boundary treatment ...
01:24 AdvectionOperatorQ1: Assemble system matrix ...
01:24 L2ProductQ1: Integrate the products of the shape functions on each element
01:24 L2ProductQ1: Determine global dofs ...
01:24 L2ProductQ1: Boundary treatment ...
01:24 L2ProductQ1: Assemble system matrix ...
01:24 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
01:24 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
01:24 DiffusionOperatorQ1: Determine global dofs ...
01:24 DiffusionOperatorQ1: Boundary treatment ...
01:24 DiffusionOperatorQ1: Assemble system matrix ...
01:24 L2ProductQ1: Integrate the products of the shape functions on each element
01:24 L2ProductQ1: Determine global dofs ...
01:24 L2ProductQ1: Boundary treatment ...
01:24 L2ProductQ1: Assemble system matrix ...
01:24 L2ProductQ1: Integrate the products of the shape functions on each element
01:25 L2ProductQ1: Determine global dofs ...
01:25 L2ProductQ1: Boundary treatment ...
01:25 L2ProductQ1: Assemble system matrix ...
01:25 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
01:25 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
01:25 DiffusionOperatorQ1: Determine global dofs ...
01:25 DiffusionOperatorQ1: Boundary treatment ...
01:25 DiffusionOperatorQ1: Assemble system matrix ...
01:25 InstationaryDiscretization: Solving instationary_StationaryProblem_CG for {speed: 1.0} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args21]" time="1.37910318375"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>Discretize ...
Info    : Running &apos;gmsh /tmp/tmpWdkfnR.geo -2 -algo del2d -clscale 0.1  -o /tmp/tmp5VunAU.msh&apos; [Gmsh 2.15.0, 1 node, max. 1 thread]
Info    : Started on Tue Oct 24 13:58:40 2017
Info    : Reading &apos;/tmp/tmpWdkfnR.geo&apos;...
Info    : Done reading &apos;/tmp/tmpWdkfnR.geo&apos;
Info    : Finalized high order topology of periodic connections
Info    : Meshing 1D...
Info    : Meshing curve 1 (Line)
Info    : Meshing curve 2 (Line)
Info    : Meshing curve 3 (Line)
Info    : Meshing curve 4 (Line)
Info    : Meshing curve 5 (Line)
Info    : Meshing curve 6 (Line)
Info    : Meshing curve 7 (Line)
Info    : Meshing curve 8 (Line)
Info    : Meshing curve 9 (Line)
Info    : Meshing curve 10 (Line)
Info    : Meshing curve 11 (Line)
Info    : Meshing curve 12 (Line)
Info    : Meshing curve 13 (Line)
Info    : Meshing curve 14 (Line)
Info    : Meshing curve 15 (Line)
Info    : Meshing curve 16 (Line)
Info    : Meshing curve 17 (Line)
Info    : Done meshing 1D (0.004 s)
Info    : Meshing 2D...
Info    : Meshing surface 19 (Plane, Delaunay)
Info    : Done meshing 2D (0.238083 s)
Info    : 5430 vertices 10875 elements
Info    : Writing &apos;/tmp/tmp5VunAU.msh&apos;...
Info    : Done writing &apos;/tmp/tmp5VunAU.msh&apos;
Info    : Stopped on Tue Oct 24 13:58:40 2017
GmshGrid with 10561 triangles, 15990 edges, 5430 vertices

Solve ...
</system-out><system-err>01:25 discretize_gmsh: Checking for Gmsh ...
01:25 discretize_gmsh: Found version 2.15.0
01:25 discretize_gmsh: Writing Gmsh geometry file ...
01:25 discretize_gmsh: Calling Gmsh ...
01:26 discretize_gmsh: Gmsh took 0.494415044785 s
01:26 load_gmsh: Parsing gmsh file ...
01:26 load_gmsh: Create GmshGrid ...
01:26 GmshGrid: Checking if grid is a 2d triangular grid ...
01:26 load_gmsh: Create GmshBoundaryInfo ...
01:26 load_gmsh: Parsing took 0.133643865585 s; Grid creation took 0.15450501442 s; BoundaryInfo creation took 0.0441842079163 s
01:26 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:26 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:26 DiffusionOperatorP1: Determine global dofs ...
01:26 DiffusionOperatorP1: Boundary treatment ...
01:26 DiffusionOperatorP1: Assemble system matrix ...
01:26 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:26 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:26 DiffusionOperatorP1: Determine global dofs ...
01:26 DiffusionOperatorP1: Boundary treatment ...
01:26 DiffusionOperatorP1: Assemble system matrix ...
01:26 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:26 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:26 DiffusionOperatorP1: Determine global dofs ...
01:26 DiffusionOperatorP1: Boundary treatment ...
01:26 DiffusionOperatorP1: Assemble system matrix ...
01:26 L2ProductP1: Integrate the products of the shape functions on each element
01:26 L2ProductP1: Determine global dofs ...
01:26 L2ProductP1: Boundary treatment ...
01:26 L2ProductP1: Assemble system matrix ...
01:26 L2ProductP1: Integrate the products of the shape functions on each element
01:26 L2ProductP1: Determine global dofs ...
01:26 L2ProductP1: Boundary treatment ...
01:26 L2ProductP1: Assemble system matrix ...
01:26 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:26 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:26 DiffusionOperatorP1: Determine global dofs ...
01:26 DiffusionOperatorP1: Boundary treatment ...
01:26 DiffusionOperatorP1: Assemble system matrix ...
01:26 StationaryDiscretization: Solving StationaryProblem_CG for {} ...
</system-err><system-out>Discretize ...
Info    : Running &apos;gmsh /tmp/tmpWdkfnR.geo -2 -algo del2d -clscale 0.1  -o /tmp/tmp5VunAU.msh&apos; [Gmsh 2.15.0, 1 node, max. 1 thread]
Info    : Started on Tue Oct 24 13:58:40 2017
Info    : Reading &apos;/tmp/tmpWdkfnR.geo&apos;...
Info    : Done reading &apos;/tmp/tmpWdkfnR.geo&apos;
Info    : Finalized high order topology of periodic connections
Info    : Meshing 1D...
Info    : Meshing curve 1 (Line)
Info    : Meshing curve 2 (Line)
Info    : Meshing curve 3 (Line)
Info    : Meshing curve 4 (Line)
Info    : Meshing curve 5 (Line)
Info    : Meshing curve 6 (Line)
Info    : Meshing curve 7 (Line)
Info    : Meshing curve 8 (Line)
Info    : Meshing curve 9 (Line)
Info    : Meshing curve 10 (Line)
Info    : Meshing curve 11 (Line)
Info    : Meshing curve 12 (Line)
Info    : Meshing curve 13 (Line)
Info    : Meshing curve 14 (Line)
Info    : Meshing curve 15 (Line)
Info    : Meshing curve 16 (Line)
Info    : Meshing curve 17 (Line)
Info    : Done meshing 1D (0.004 s)
Info    : Meshing 2D...
Info    : Meshing surface 19 (Plane, Delaunay)
Info    : Done meshing 2D (0.238083 s)
Info    : 5430 vertices 10875 elements
Info    : Writing &apos;/tmp/tmp5VunAU.msh&apos;...
Info    : Done writing &apos;/tmp/tmp5VunAU.msh&apos;
Info    : Stopped on Tue Oct 24 13:58:40 2017
GmshGrid with 10561 triangles, 15990 edges, 5430 vertices

Solve ...
</system-out><system-err>01:25 discretize_gmsh: Checking for Gmsh ...
01:25 discretize_gmsh: Found version 2.15.0
01:25 discretize_gmsh: Writing Gmsh geometry file ...
01:25 discretize_gmsh: Calling Gmsh ...
01:26 discretize_gmsh: Gmsh took 0.494415044785 s
01:26 load_gmsh: Parsing gmsh file ...
01:26 load_gmsh: Create GmshGrid ...
01:26 GmshGrid: Checking if grid is a 2d triangular grid ...
01:26 load_gmsh: Create GmshBoundaryInfo ...
01:26 load_gmsh: Parsing took 0.133643865585 s; Grid creation took 0.15450501442 s; BoundaryInfo creation took 0.0441842079163 s
01:26 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:26 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:26 DiffusionOperatorP1: Determine global dofs ...
01:26 DiffusionOperatorP1: Boundary treatment ...
01:26 DiffusionOperatorP1: Assemble system matrix ...
01:26 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:26 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:26 DiffusionOperatorP1: Determine global dofs ...
01:26 DiffusionOperatorP1: Boundary treatment ...
01:26 DiffusionOperatorP1: Assemble system matrix ...
01:26 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:26 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:26 DiffusionOperatorP1: Determine global dofs ...
01:26 DiffusionOperatorP1: Boundary treatment ...
01:26 DiffusionOperatorP1: Assemble system matrix ...
01:26 L2ProductP1: Integrate the products of the shape functions on each element
01:26 L2ProductP1: Determine global dofs ...
01:26 L2ProductP1: Boundary treatment ...
01:26 L2ProductP1: Assemble system matrix ...
01:26 L2ProductP1: Integrate the products of the shape functions on each element
01:26 L2ProductP1: Determine global dofs ...
01:26 L2ProductP1: Boundary treatment ...
01:26 L2ProductP1: Assemble system matrix ...
01:26 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:26 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:26 DiffusionOperatorP1: Determine global dofs ...
01:26 DiffusionOperatorP1: Boundary treatment ...
01:26 DiffusionOperatorP1: Assemble system matrix ...
01:26 StationaryDiscretization: Solving StationaryProblem_CG for {} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args22]" time="1.65496611595"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>Discretize ...
Showing some solutions
Solving for diffusion = 
[[ 0.43708611  0.95564288]
 [ 0.75879455  0.63879264]] ... 
Solving for diffusion = 
[[ 0.24041678  0.24039507]
 [ 0.15227525  0.87955853]] ... 
</system-out><system-err>01:27 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:27 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:27 DiffusionOperatorP1: Determine global dofs ...
01:27 DiffusionOperatorP1: Boundary treatment ...
01:27 DiffusionOperatorP1: Assemble system matrix ...
01:27 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:27 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:27 DiffusionOperatorP1: Determine global dofs ...
01:27 DiffusionOperatorP1: Boundary treatment ...
01:27 DiffusionOperatorP1: Assemble system matrix ...
01:27 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:27 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:27 DiffusionOperatorP1: Determine global dofs ...
01:27 DiffusionOperatorP1: Boundary treatment ...
01:27 DiffusionOperatorP1: Assemble system matrix ...
01:27 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:27 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:27 DiffusionOperatorP1: Determine global dofs ...
01:27 DiffusionOperatorP1: Boundary treatment ...
01:27 DiffusionOperatorP1: Assemble system matrix ...
01:27 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:27 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:27 DiffusionOperatorP1: Determine global dofs ...
01:27 DiffusionOperatorP1: Boundary treatment ...
01:27 DiffusionOperatorP1: Assemble system matrix ...
01:27 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:27 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:27 DiffusionOperatorP1: Determine global dofs ...
01:27 DiffusionOperatorP1: Boundary treatment ...
01:27 DiffusionOperatorP1: Assemble system matrix ...
01:27 L2ProductP1: Integrate the products of the shape functions on each element
01:27 L2ProductP1: Determine global dofs ...
01:27 L2ProductP1: Boundary treatment ...
01:28 L2ProductP1: Assemble system matrix ...
01:28 L2ProductP1: Integrate the products of the shape functions on each element
01:28 L2ProductP1: Determine global dofs ...
01:28 L2ProductP1: Boundary treatment ...
01:28 L2ProductP1: Assemble system matrix ...
01:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:28 DiffusionOperatorP1: Determine global dofs ...
01:28 DiffusionOperatorP1: Boundary treatment ...
01:28 DiffusionOperatorP1: Assemble system matrix ...
01:28 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
01:28 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
</system-err><system-out>Discretize ...
Showing some solutions
Solving for diffusion = 
[[ 0.43708611  0.95564288]
 [ 0.75879455  0.63879264]] ... 
Solving for diffusion = 
[[ 0.24041678  0.24039507]
 [ 0.15227525  0.87955853]] ... 
</system-out><system-err>01:27 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:27 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:27 DiffusionOperatorP1: Determine global dofs ...
01:27 DiffusionOperatorP1: Boundary treatment ...
01:27 DiffusionOperatorP1: Assemble system matrix ...
01:27 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:27 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:27 DiffusionOperatorP1: Determine global dofs ...
01:27 DiffusionOperatorP1: Boundary treatment ...
01:27 DiffusionOperatorP1: Assemble system matrix ...
01:27 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:27 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:27 DiffusionOperatorP1: Determine global dofs ...
01:27 DiffusionOperatorP1: Boundary treatment ...
01:27 DiffusionOperatorP1: Assemble system matrix ...
01:27 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:27 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:27 DiffusionOperatorP1: Determine global dofs ...
01:27 DiffusionOperatorP1: Boundary treatment ...
01:27 DiffusionOperatorP1: Assemble system matrix ...
01:27 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:27 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:27 DiffusionOperatorP1: Determine global dofs ...
01:27 DiffusionOperatorP1: Boundary treatment ...
01:27 DiffusionOperatorP1: Assemble system matrix ...
01:27 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:27 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:27 DiffusionOperatorP1: Determine global dofs ...
01:27 DiffusionOperatorP1: Boundary treatment ...
01:27 DiffusionOperatorP1: Assemble system matrix ...
01:27 L2ProductP1: Integrate the products of the shape functions on each element
01:27 L2ProductP1: Determine global dofs ...
01:27 L2ProductP1: Boundary treatment ...
01:28 L2ProductP1: Assemble system matrix ...
01:28 L2ProductP1: Integrate the products of the shape functions on each element
01:28 L2ProductP1: Determine global dofs ...
01:28 L2ProductP1: Boundary treatment ...
01:28 L2ProductP1: Assemble system matrix ...
01:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:28 DiffusionOperatorP1: Determine global dofs ...
01:28 DiffusionOperatorP1: Boundary treatment ...
01:28 DiffusionOperatorP1: Assemble system matrix ...
01:28 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
01:28 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args23]" time="0.00145196914673"><skipped message="skipped test due to missing fenics" type="pytest.skip">/src/src/pymortests/demos.py:107: &lt;py._xmlgen.raw object at 0x7f25e1b57e90&gt;</skipped></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args24]" time="9.8206217289"><system-out>Discretize ...
RB generation ...

Searching for maximum error on random snapshots ...
..........

*** RESULTS ***

pyMOR discretization:
   number of blocks: 3x1
   grid intervals:   100
   ListVectorArray:  False

Greedy basis generation:
   size of training set:   8
   error estimator used:   False
   extension method:       gram_schmidt
   prescribed basis size:  5
   actual basis size:      5
   elapsed time:           7.09419488907

Stochastic error estimation:
    number of samples:                  10
    maximum NumpyMatrixOperator-norm:   5.3963819e-01 (mu = {diffusion: [0.776163239888, 0.187380949091, 0.471122009481]})
    maximum NumpyMatrixOperator-error:  1.4962135e-02 (mu = {diffusion: [0.776163239888, 0.187380949091, 0.471122009481]})
    maximum NumpyMatrixOperator-norm:   1.0796872e-01 (mu = {diffusion: [0.776163239888, 0.187380949091, 0.471122009481]})
    maximum NumpyMatrixOperator-error:  6.6545623e-04 (mu = {diffusion: [0.776163239888, 0.187380949091, 0.471122009481]})
    maximum estimated error:            3.2501130e-02 (mu = {diffusion: [0.776163239888, 0.187380949091, 0.471122009481]})
    minimum estimator effectivity:      2.2968487e-01 (mu = {diffusion: [0.130059337922, 0.918325039247, 0.464644598394]})
    maximum estimator effectivity:      8.5530738e-01 (mu = {diffusion: [0.484642852697, 0.598947231188, 0.66531387023]})
    maximum system matrix condition:    6.9153103e+00 (mu = {diffusion: [0.130059337922, 0.918325039247, 0.464644598394]})
    elapsed time:                       1.43185091019
</system-out><system-err>01:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:28 DiffusionOperatorP1: Determine global dofs ...
01:28 DiffusionOperatorP1: Boundary treatment ...
01:28 DiffusionOperatorP1: Assemble system matrix ...
01:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:29 DiffusionOperatorP1: Determine global dofs ...
01:29 DiffusionOperatorP1: Boundary treatment ...
01:29 DiffusionOperatorP1: Assemble system matrix ...
01:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:29 DiffusionOperatorP1: Determine global dofs ...
01:29 DiffusionOperatorP1: Boundary treatment ...
01:29 DiffusionOperatorP1: Assemble system matrix ...
01:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:29 DiffusionOperatorP1: Determine global dofs ...
01:29 DiffusionOperatorP1: Boundary treatment ...
01:29 DiffusionOperatorP1: Assemble system matrix ...
01:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:29 DiffusionOperatorP1: Determine global dofs ...
01:29 DiffusionOperatorP1: Boundary treatment ...
01:29 DiffusionOperatorP1: Assemble system matrix ...
01:29 L2ProductP1: Integrate the products of the shape functions on each element
01:29 L2ProductP1: Determine global dofs ...
01:29 L2ProductP1: Boundary treatment ...
01:29 L2ProductP1: Assemble system matrix ...
01:29 L2ProductP1: Integrate the products of the shape functions on each element
01:29 L2ProductP1: Determine global dofs ...
01:29 L2ProductP1: Boundary treatment ...
01:29 L2ProductP1: Assemble system matrix ...
01:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:29 DiffusionOperatorP1: Determine global dofs ...
01:29 DiffusionOperatorP1: Boundary treatment ...
01:29 DiffusionOperatorP1: Assemble system matrix ...
01:29 greedy: Started greedy search on 8 samples
01:29 greedy: Reducing ...
01:29 |   CoerciveRBReductor: RB projection ...
01:29 |   CoerciveRBReductor: Assembling error estimator ...
01:29 |   |   ResidualReductor: Estimating residual range ...
01:29 |   |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
01:30 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
01:30 |   |   ResidualReductor: Projecting residual operator ...
01:30 greedy: Estimating errors ...
01:30 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 0.1, 0.1]} ...
01:30 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 0.1, 1.0]} ...
01:30 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 1.0, 0.1]} ...
01:30 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 1.0, 1.0]} ...
01:30 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 0.1, 0.1]} ...
01:30 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 0.1, 1.0]} ...
01:31 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 1.0, 0.1]} ...
01:31 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 1.0, 1.0]} ...
01:31 greedy: Maximum error after 0 extensions: 1.87457318215 (mu = {diffusion: [0.1, 0.1, 0.1]})
01:31 greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.1, 0.1]} ...
01:31 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 0.1, 0.1]} ...
01:31 greedy: Extending basis with solution snapshot ...
      
01:31 greedy: Reducing ...
01:31 |   CoerciveRBReductor: RB projection ...
01:31 |   CoerciveRBReductor: Assembling error estimator ...
01:31 |   |   ResidualReductor: Estimating residual range ...
01:31 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
01:31 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
01:31 |   |   |   |   gram_schmidt: Removing vector 1 of norm 0.0
01:31 |   |   |   |   gram_schmidt: Removing linear dependent vector 4
01:31 |   |   ResidualReductor: Projecting residual operator ...
01:31 greedy: Estimating errors ...
01:31 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 0.1, 0.1]} ...
01:31 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 0.1, 1.0]} ...
01:31 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 1.0, 0.1]} ...
01:31 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 1.0, 1.0]} ...
01:32 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 0.1, 0.1]} ...
01:32 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 0.1, 1.0]} ...
01:32 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 1.0, 0.1]} ...
01:32 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 1.0, 1.0]} ...
01:32 greedy: Maximum error after 1 extensions: 0.922095064104 (mu = {diffusion: [1.0, 0.1, 0.1]})
01:32 greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 0.1]} ...
01:32 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 0.1, 0.1]} ...
01:32 greedy: Extending basis with solution snapshot ...
      
01:32 greedy: Reducing ...
01:32 |   CoerciveRBReductor: RB projection ...
01:32 |   CoerciveRBReductor: Assembling error estimator ...
01:32 |   |   ResidualReductor: Estimating residual range ...
01:32 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
01:32 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
01:32 |   |   |   |   gram_schmidt: Removing vector 3 of norm 1.03514656995e-18
01:32 |   |   |   |   gram_schmidt: Orthonormalizing vector 4 again
01:32 |   |   |   |   gram_schmidt: Orthonormalizing vector 6 again
01:32 |   |   ResidualReductor: Projecting residual operator ...
01:32 greedy: Estimating errors ...
01:32 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 0.1, 0.1]} ...
01:32 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 0.1, 1.0]} ...
01:33 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 1.0, 0.1]} ...
01:33 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 1.0, 1.0]} ...
01:33 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 0.1, 0.1]} ...
01:33 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 0.1, 1.0]} ...
01:33 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 1.0, 0.1]} ...
01:33 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 1.0, 1.0]} ...
01:33 greedy: Maximum error after 2 extensions: 0.515273016321 (mu = {diffusion: [0.1, 0.1, 1.0]})
01:33 greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.1, 1.0]} ...
01:33 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 0.1, 1.0]} ...
01:34 greedy: Extending basis with solution snapshot ...
      
01:34 greedy: Reducing ...
01:34 |   CoerciveRBReductor: RB projection ...
01:34 |   CoerciveRBReductor: Assembling error estimator ...
01:34 |   |   ResidualReductor: Estimating residual range ...
01:34 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
01:34 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
01:34 |   |   |   |   gram_schmidt: Removing vector 6 of norm 1.74203942869e-17
01:34 |   |   |   |   gram_schmidt: Orthonormalizing vector 9 again
01:34 |   |   ResidualReductor: Projecting residual operator ...
01:34 greedy: Estimating errors ...
01:34 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 0.1, 0.1]} ...
01:34 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 0.1, 1.0]} ...
01:34 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 1.0, 0.1]} ...
01:34 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 1.0, 1.0]} ...
01:34 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 0.1, 0.1]} ...
01:34 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 0.1, 1.0]} ...
01:35 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 1.0, 0.1]} ...
01:35 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 1.0, 1.0]} ...
01:35 greedy: Maximum error after 3 extensions: 0.498063471053 (mu = {diffusion: [0.1, 1.0, 0.1]})
01:35 greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 0.1]} ...
01:35 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 1.0, 0.1]} ...
01:35 greedy: Extending basis with solution snapshot ...
      
01:35 greedy: Reducing ...
01:35 |   CoerciveRBReductor: RB projection ...
01:35 |   CoerciveRBReductor: Assembling error estimator ...
01:35 |   |   ResidualReductor: Estimating residual range ...
01:35 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 3 ...
01:35 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
01:35 |   |   |   |   gram_schmidt: Removing vector 9 of norm 6.58150146845e-18
01:35 |   |   |   |   gram_schmidt: Orthonormalizing vector 11 again
01:35 |   |   |   |   gram_schmidt: Orthonormalizing vector 12 again
01:35 |   |   ResidualReductor: Projecting residual operator ...
01:35 greedy: Estimating errors ...
01:35 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 0.1, 0.1]} ...
01:35 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 0.1, 1.0]} ...
01:35 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 1.0, 0.1]} ...
01:35 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 1.0, 1.0]} ...
01:36 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 0.1, 0.1]} ...
01:36 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 0.1, 1.0]} ...
01:36 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 1.0, 0.1]} ...
01:36 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 1.0, 1.0]} ...
01:36 greedy: Maximum error after 4 extensions: 0.335849856403 (mu = {diffusion: [1.0, 1.0, 0.1]})
01:36 greedy: Computing solution snapshot for mu = {diffusion: [1.0, 1.0, 0.1]} ...
01:36 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 1.0, 0.1]} ...
01:36 greedy: Extending basis with solution snapshot ...
      
01:36 greedy: Maximum number of 5 extensions reached.
01:36 greedy: Reducing once more ...
01:36 |   CoerciveRBReductor: RB projection ...
01:36 |   CoerciveRBReductor: Assembling error estimator ...
01:36 |   |   ResidualReductor: Estimating residual range ...
01:36 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 4 ...
01:36 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
01:36 |   |   |   |   gram_schmidt: Removing vector 12 of norm 1.53047838438e-17
01:36 |   |   |   |   gram_schmidt: Orthonormalizing vector 13 again
01:36 |   |   |   |   gram_schmidt: Orthonormalizing vector 14 again
01:36 |   |   |   |   gram_schmidt: Orthonormalizing vector 15 again
01:36 |   |   ResidualReductor: Projecting residual operator ...
01:36 greedy: Greedy search took 7.09419488907 seconds
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args25]" time="14.6495792866"><system-out>Discretize ...
RB generation ...
Solving on training set ...
Performing POD ...
Reducing ...

Searching for maximum error on random snapshots ...
..........

*** RESULTS ***

pyMOR discretization:
   number of blocks: 2x2
   grid intervals:   100
   ListVectorArray:  False

POD basis generation:
   size of training set:   81
   prescribed basis size:  5
   actual basis size:      5
   elapsed time:           11.7538678646

Stochastic error estimation:
    number of samples:                  10
    maximum NumpyMatrixOperator-norm:   6.2469480e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    maximum NumpyMatrixOperator-error:  1.8527955e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    maximum NumpyMatrixOperator-norm:   1.2572252e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    maximum NumpyMatrixOperator-error:  1.7197486e-02 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    maximum estimated error:            5.2448967e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    minimum estimator effectivity:      3.2318767e-01 (mu = {diffusion: [0.66531387023, 0.727653649775, 0.810954719993, 0.218701317605]})
    maximum estimator effectivity:      7.0287777e-01 (mu = {diffusion: [0.918325039247, 0.464644598394, 0.784391923305, 0.526382538185]})
    maximum system matrix condition:    3.3938010e+00 (mu = {diffusion: [0.408493406469, 0.281403649734, 0.736591807092, 0.130059337922]})
    elapsed time:                       1.44289302826
</system-out><system-err>01:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:38 DiffusionOperatorP1: Determine global dofs ...
01:38 DiffusionOperatorP1: Boundary treatment ...
01:38 DiffusionOperatorP1: Assemble system matrix ...
01:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:38 DiffusionOperatorP1: Determine global dofs ...
01:38 DiffusionOperatorP1: Boundary treatment ...
01:38 DiffusionOperatorP1: Assemble system matrix ...
01:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:38 DiffusionOperatorP1: Determine global dofs ...
01:38 DiffusionOperatorP1: Boundary treatment ...
01:38 DiffusionOperatorP1: Assemble system matrix ...
01:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:39 DiffusionOperatorP1: Determine global dofs ...
01:39 DiffusionOperatorP1: Boundary treatment ...
01:39 DiffusionOperatorP1: Assemble system matrix ...
01:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:39 DiffusionOperatorP1: Determine global dofs ...
01:39 DiffusionOperatorP1: Boundary treatment ...
01:39 DiffusionOperatorP1: Assemble system matrix ...
01:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:39 DiffusionOperatorP1: Determine global dofs ...
01:39 DiffusionOperatorP1: Boundary treatment ...
01:39 DiffusionOperatorP1: Assemble system matrix ...
01:39 L2ProductP1: Integrate the products of the shape functions on each element
01:39 L2ProductP1: Determine global dofs ...
01:39 L2ProductP1: Boundary treatment ...
01:39 L2ProductP1: Assemble system matrix ...
01:39 L2ProductP1: Integrate the products of the shape functions on each element
01:39 L2ProductP1: Determine global dofs ...
01:39 L2ProductP1: Boundary treatment ...
01:39 L2ProductP1: Assemble system matrix ...
01:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:39 DiffusionOperatorP1: Determine global dofs ...
01:39 DiffusionOperatorP1: Boundary treatment ...
01:39 DiffusionOperatorP1: Assemble system matrix ...
01:39 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.1, 0.1]} ...
01:39 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.1, 0.55]} ...
01:40 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.1, 1.0]} ...
01:40 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.55, 0.1]} ...
01:40 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.55, 0.55]} ...
01:40 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.55, 1.0]} ...
01:40 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 1.0, 0.1]} ...
01:40 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 1.0, 0.55]} ...
01:40 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 1.0, 1.0]} ...
01:41 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 0.1, 0.1]} ...
01:41 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 0.1, 0.55]} ...
01:41 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 0.1, 1.0]} ...
01:41 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 0.55, 0.1]} ...
01:41 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 0.55, 0.55]} ...
01:41 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 0.55, 1.0]} ...
01:41 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 1.0, 0.1]} ...
01:42 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 1.0, 0.55]} ...
01:42 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 1.0, 1.0]} ...
01:42 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.1, 0.1]} ...
01:42 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.1, 0.55]} ...
01:42 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.1, 1.0]} ...
01:42 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.55, 0.1]} ...
01:42 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.55, 0.55]} ...
01:42 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.55, 1.0]} ...
01:43 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 1.0, 0.1]} ...
01:43 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 1.0, 0.55]} ...
01:43 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 1.0, 1.0]} ...
01:43 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 0.1, 0.1]} ...
01:43 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 0.1, 0.55]} ...
01:43 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 0.1, 1.0]} ...
01:43 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 0.55, 0.1]} ...
01:44 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 0.55, 0.55]} ...
01:44 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 0.55, 1.0]} ...
01:44 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 1.0, 0.1]} ...
01:44 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 1.0, 0.55]} ...
01:44 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 1.0, 1.0]} ...
01:44 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.55, 0.1, 0.1]} ...
01:44 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.55, 0.1, 0.55]} ...
01:45 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.55, 0.1, 1.0]} ...
01:45 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.55, 0.55, 0.1]} ...
01:45 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.55, 0.55, 0.55]} ...
01:45 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.55, 0.55, 1.0]} ...
01:45 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.55, 1.0, 0.1]} ...
01:45 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.55, 1.0, 0.55]} ...
01:45 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.55, 1.0, 1.0]} ...
01:45 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 0.1, 0.1]} ...
01:46 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 0.1, 0.55]} ...
01:46 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 0.1, 1.0]} ...
01:46 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 0.55, 0.1]} ...
01:46 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 0.55, 0.55]} ...
01:46 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 0.55, 1.0]} ...
01:46 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 1.0, 0.1]} ...
01:46 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 1.0, 0.55]} ...
01:47 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 1.0, 1.0]} ...
01:47 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.1, 0.1]} ...
01:47 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.1, 0.55]} ...
01:47 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.1, 1.0]} ...
01:47 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.55, 0.1]} ...
01:47 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.55, 0.55]} ...
01:47 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.55, 1.0]} ...
01:48 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 1.0, 0.1]} ...
01:48 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 1.0, 0.55]} ...
01:48 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 1.0, 1.0]} ...
01:48 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.55, 0.1, 0.1]} ...
01:48 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.55, 0.1, 0.55]} ...
01:48 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.55, 0.1, 1.0]} ...
01:48 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.55, 0.55, 0.1]} ...
01:48 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.55, 0.55, 0.55]} ...
01:49 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.55, 0.55, 1.0]} ...
01:49 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.55, 1.0, 0.1]} ...
01:49 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.55, 1.0, 0.55]} ...
01:49 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.55, 1.0, 1.0]} ...
01:49 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 0.1, 0.1]} ...
01:49 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 0.1, 0.55]} ...
01:49 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 0.1, 1.0]} ...
01:50 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 0.55, 0.1]} ...
01:50 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 0.55, 0.55]} ...
01:50 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 0.55, 1.0]} ...
01:50 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 1.0, 0.1]} ...
01:50 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 1.0, 0.55]} ...
01:50 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 1.0, 1.0]} ...
01:50 pod: Computing Gramian (81 vectors) ...
01:50 pod: Computing eigenvalue decomposition ...
01:50 pod: Computing left-singular vectors (5 vectors) ...
01:50 pod: Re-orthonormalizing POD modes ...
01:50 pod: Checking orthonormality ...
01:50 CoerciveRBReductor: RB projection ...
01:50 CoerciveRBReductor: Assembling error estimator ...
01:50 |   ResidualReductor: Estimating residual range ...
01:50 |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
01:51 |   |   estimate_image_hierarchical: Orthonormalizing ...
01:51 |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
01:51 |   |   estimate_image_hierarchical: Orthonormalizing ...
01:51 |   |   |   gram_schmidt: Removing vector 1 of norm 9.11320469415e-19
01:51 |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
01:51 |   |   estimate_image_hierarchical: Orthonormalizing ...
01:51 |   |   |   gram_schmidt: Removing vector 5 of norm 2.41500587868e-18
01:51 |   |   |   gram_schmidt: Orthonormalizing vector 7 again
01:51 |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
01:51 |   |   estimate_image_hierarchical: Orthonormalizing ...
01:51 |   |   |   gram_schmidt: Removing vector 9 of norm 1.45881741773e-18
01:51 |   |   |   gram_schmidt: Orthonormalizing vector 10 again
01:51 |   |   |   gram_schmidt: Orthonormalizing vector 11 again
01:51 |   |   |   gram_schmidt: Removing linear dependent vector 12
01:51 |   |   |   gram_schmidt: Removing linear dependent vector 13
01:51 |   |   estimate_image_hierarchical: Estimating image for basis vector 3 ...
01:51 |   |   estimate_image_hierarchical: Orthonormalizing ...
01:51 |   |   |   gram_schmidt: Removing vector 11 of norm 2.6502297411e-18
01:51 |   |   |   gram_schmidt: Orthonormalizing vector 12 again
01:51 |   |   |   gram_schmidt: Orthonormalizing vector 13 again
01:51 |   |   |   gram_schmidt: Orthonormalizing vector 14 again
01:51 |   |   |   gram_schmidt: Removing linear dependent vector 15
01:51 |   |   estimate_image_hierarchical: Estimating image for basis vector 4 ...
01:51 |   |   estimate_image_hierarchical: Orthonormalizing ...
01:51 |   |   |   gram_schmidt: Removing vector 14 of norm 3.93833219203e-18
01:51 |   |   |   gram_schmidt: Orthonormalizing vector 15 again
01:51 |   |   |   gram_schmidt: Orthonormalizing vector 16 again
01:51 |   |   |   gram_schmidt: Orthonormalizing vector 17 again
01:51 |   |   |   gram_schmidt: Removing linear dependent vector 18
01:51 |   ResidualReductor: Projecting residual operator ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args26]" time="21.0500400066"><system-out>Discretize ...
RB generation ...

Searching for maximum error on random snapshots ...
..........

*** RESULTS ***

pyMOR discretization:
   number of blocks: 2x2
   grid intervals:   100
   ListVectorArray:  False

Adaptive greedy basis generation:
   initial size of validation set:  11
   error estimator used:            True
   extension method:                gram_schmidt
   prescribed basis size:           30
   actual basis size:               30
   elapsed time:                    18.1517429352

Stochastic error estimation:
    number of samples:                  10
    maximum NumpyMatrixOperator-norm:   6.2469480e-01 (mu = {diffusion: [0.353475066304, 0.451250002531, 0.883998288648, 0.173120605533]})
    maximum NumpyMatrixOperator-error:  2.9750898e-13 (mu = {diffusion: [0.353475066304, 0.451250002531, 0.883998288648, 0.173120605533]})
    maximum NumpyMatrixOperator-norm:   1.2572252e-01 (mu = {diffusion: [0.35764848791, 0.557431748776, 0.233155662347, 0.27679058631]})
    maximum NumpyMatrixOperator-error:  1.2308123e-14 (mu = {diffusion: [0.35764848791, 0.557431748776, 0.233155662347, 0.27679058631]})
    maximum estimated error:            7.1987308e-13 (mu = {diffusion: [0.353475066304, 0.451250002531, 0.883998288648, 0.173120605533]})
    minimum estimator effectivity:      3.5637444e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    maximum estimator effectivity:      4.7616459e+00 (mu = {diffusion: [0.35764848791, 0.557431748776, 0.233155662347, 0.27679058631]})
    maximum system matrix condition:    8.2874401e+00 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    elapsed time:                       1.4467279911
</system-out><system-err>01:53 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:53 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:53 DiffusionOperatorP1: Determine global dofs ...
01:53 DiffusionOperatorP1: Boundary treatment ...
01:53 DiffusionOperatorP1: Assemble system matrix ...
01:53 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:53 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:53 DiffusionOperatorP1: Determine global dofs ...
01:53 DiffusionOperatorP1: Boundary treatment ...
01:53 DiffusionOperatorP1: Assemble system matrix ...
01:53 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:53 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:53 DiffusionOperatorP1: Determine global dofs ...
01:53 DiffusionOperatorP1: Boundary treatment ...
01:53 DiffusionOperatorP1: Assemble system matrix ...
01:53 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:53 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:53 DiffusionOperatorP1: Determine global dofs ...
01:53 DiffusionOperatorP1: Boundary treatment ...
01:53 DiffusionOperatorP1: Assemble system matrix ...
01:53 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:53 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:53 DiffusionOperatorP1: Determine global dofs ...
01:53 DiffusionOperatorP1: Boundary treatment ...
01:53 DiffusionOperatorP1: Assemble system matrix ...
01:54 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:54 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:54 DiffusionOperatorP1: Determine global dofs ...
01:54 DiffusionOperatorP1: Boundary treatment ...
01:54 DiffusionOperatorP1: Assemble system matrix ...
01:54 L2ProductP1: Integrate the products of the shape functions on each element
01:54 L2ProductP1: Determine global dofs ...
01:54 L2ProductP1: Boundary treatment ...
01:54 L2ProductP1: Assemble system matrix ...
01:54 L2ProductP1: Integrate the products of the shape functions on each element
01:54 L2ProductP1: Determine global dofs ...
01:54 L2ProductP1: Boundary treatment ...
01:54 L2ProductP1: Assemble system matrix ...
01:54 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
01:54 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
01:54 DiffusionOperatorP1: Determine global dofs ...
01:54 DiffusionOperatorP1: Boundary treatment ...
01:54 DiffusionOperatorP1: Assemble system matrix ...
01:54 adaptive_greedy: Training set size: 16. Validation set size: 11
01:54 adaptive_greedy: Reducing ...
01:54 |   CoerciveRBReductor: RB projection ...
01:54 |   CoerciveRBReductor: Assembling error estimator ...
01:54 |   |   ResidualReductor: Estimating residual range ...
01:54 |   |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
01:54 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
01:54 |   |   ResidualReductor: Projecting residual operator ...
01:54 adaptive_greedy: Estimating errors ...
01:54 adaptive_greedy: Maximum error after 0 extensions: 1.87457318215 (mu = {diffusion: [0.1, 0.1, 0.1, 0.1]})
01:54 adaptive_greedy: Maximum validation error: 1.58157068707
01:54 adaptive_greedy: Validation error to training error ratio: 8.437e-01
01:54 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.1, 0.1, 0.1]} ...
01:54 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.1, 0.1]} ...
01:54 adaptive_greedy: Extending basis with solution snapshot ...
      
01:54 adaptive_greedy: Reducing ...
01:54 |   CoerciveRBReductor: RB projection ...
01:54 |   CoerciveRBReductor: Assembling error estimator ...
01:54 |   |   ResidualReductor: Estimating residual range ...
01:54 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
01:55 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
01:55 |   |   |   |   gram_schmidt: Removing vector 1 of norm 0.0
01:55 |   |   |   |   gram_schmidt: Removing linear dependent vector 5
01:55 |   |   ResidualReductor: Projecting residual operator ...
01:55 adaptive_greedy: Estimating errors ...
01:55 adaptive_greedy: Maximum error after 1 extensions: 1.33811391464 (mu = {diffusion: [0.1, 0.1, 0.1, 1.0]})
01:55 adaptive_greedy: Maximum validation error: 0.558357537285
01:55 adaptive_greedy: Validation error to training error ratio: 4.173e-01
01:55 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.1, 0.1, 1.0]} ...
01:55 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.1, 1.0]} ...
01:55 adaptive_greedy: Extending basis with solution snapshot ...
      
01:55 adaptive_greedy: Reducing ...
01:55 |   CoerciveRBReductor: RB projection ...
01:55 |   CoerciveRBReductor: Assembling error estimator ...
01:55 |   |   ResidualReductor: Estimating residual range ...
01:55 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
01:55 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
01:55 |   |   |   |   gram_schmidt: Removing vector 4 of norm 5.12939122542e-18
01:55 |   |   |   |   gram_schmidt: Orthonormalizing vector 8 again
01:55 |   |   ResidualReductor: Projecting residual operator ...
01:55 adaptive_greedy: Estimating errors ...
01:55 adaptive_greedy: Maximum error after 2 extensions: 1.25686364725 (mu = {diffusion: [0.1, 1.0, 0.1, 0.1]})
01:55 adaptive_greedy: Maximum validation error: 0.458363458823
01:55 adaptive_greedy: Validation error to training error ratio: 3.647e-01
01:55 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 0.1, 0.1]} ...
01:55 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.1, 0.1]} ...
01:55 adaptive_greedy: Extending basis with solution snapshot ...
      
01:55 adaptive_greedy: Reducing ...
01:55 |   CoerciveRBReductor: RB projection ...
01:55 |   CoerciveRBReductor: Assembling error estimator ...
01:55 |   |   ResidualReductor: Estimating residual range ...
01:55 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
01:55 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
01:55 |   |   |   |   gram_schmidt: Removing vector 8 of norm 6.70392869889e-18
01:55 |   |   |   |   gram_schmidt: Removing linear dependent vector 11
01:55 |   |   |   |   gram_schmidt: Removing linear dependent vector 12
01:55 |   |   ResidualReductor: Projecting residual operator ...
01:55 adaptive_greedy: Estimating errors ...
01:55 adaptive_greedy: Maximum error after 3 extensions: 1.21164585976 (mu = {diffusion: [0.1, 1.0, 0.1, 1.0]})
01:55 adaptive_greedy: Maximum validation error: 0.463663281283
01:55 adaptive_greedy: Validation error to training error ratio: 3.827e-01
01:55 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 0.1, 1.0]} ...
01:55 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.1, 1.0]} ...
01:55 adaptive_greedy: Extending basis with solution snapshot ...
      
01:55 adaptive_greedy: Reducing ...
01:55 |   CoerciveRBReductor: RB projection ...
01:55 |   CoerciveRBReductor: Assembling error estimator ...
01:55 |   |   ResidualReductor: Estimating residual range ...
01:55 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 3 ...
01:55 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
01:55 |   |   |   |   gram_schmidt: Removing vector 10 of norm 2.05701825966e-17
01:55 |   |   |   |   gram_schmidt: Orthonormalizing vector 12 again
01:55 |   |   |   |   gram_schmidt: Orthonormalizing vector 13 again
01:55 |   |   |   |   gram_schmidt: Removing linear dependent vector 14
01:55 |   |   ResidualReductor: Projecting residual operator ...
01:55 adaptive_greedy: Estimating errors ...
01:55 adaptive_greedy: Maximum error after 4 extensions: 0.810666824023 (mu = {diffusion: [1.0, 0.1, 0.1, 0.1]})
01:55 adaptive_greedy: Maximum validation error: 0.43155548551
01:55 adaptive_greedy: Validation error to training error ratio: 5.323e-01
01:55 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 0.1, 0.1]} ...
01:55 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.1, 0.1]} ...
01:55 adaptive_greedy: Extending basis with solution snapshot ...
      
01:55 adaptive_greedy: Reducing ...
01:55 |   CoerciveRBReductor: RB projection ...
01:56 |   CoerciveRBReductor: Assembling error estimator ...
01:56 |   |   ResidualReductor: Estimating residual range ...
01:56 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 4 ...
01:56 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
01:56 |   |   |   |   gram_schmidt: Removing vector 13 of norm 8.12177779512e-18
01:56 |   |   |   |   gram_schmidt: Removing linear dependent vector 15
01:56 |   |   |   |   gram_schmidt: Removing linear dependent vector 17
01:56 |   |   ResidualReductor: Projecting residual operator ...
01:56 adaptive_greedy: Estimating errors ...
01:56 adaptive_greedy: Maximum error after 5 extensions: 0.945236144361 (mu = {diffusion: [1.0, 0.1, 1.0, 0.1]})
01:56 adaptive_greedy: Maximum validation error: 0.469918909741
01:56 adaptive_greedy: Validation error to training error ratio: 4.971e-01
01:56 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 1.0, 0.1]} ...
01:56 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 1.0, 0.1]} ...
01:56 adaptive_greedy: Extending basis with solution snapshot ...
      
01:56 adaptive_greedy: Reducing ...
01:56 |   CoerciveRBReductor: RB projection ...
01:56 |   CoerciveRBReductor: Assembling error estimator ...
01:56 |   |   ResidualReductor: Estimating residual range ...
01:56 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 5 ...
01:56 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
01:56 |   |   |   |   gram_schmidt: Removing vector 15 of norm 5.72504129153e-18
01:56 |   |   |   |   gram_schmidt: Removing linear dependent vector 16
01:56 |   |   |   |   gram_schmidt: Removing linear dependent vector 17
01:56 |   |   |   |   gram_schmidt: Removing linear dependent vector 18
01:56 |   |   |   |   gram_schmidt: Orthonormalizing vector 19 again
01:56 |   |   ResidualReductor: Projecting residual operator ...
01:56 adaptive_greedy: Estimating errors ...
01:56 adaptive_greedy: Maximum error after 6 extensions: 0.744411529945 (mu = {diffusion: [1.0, 0.1, 0.1, 1.0]})
01:56 adaptive_greedy: Maximum validation error: 0.405314452605
01:56 adaptive_greedy: Validation error to training error ratio: 5.445e-01
01:56 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 0.1, 1.0]} ...
01:56 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.1, 1.0]} ...
01:56 adaptive_greedy: Extending basis with solution snapshot ...
      
01:56 adaptive_greedy: Reducing ...
01:56 |   CoerciveRBReductor: RB projection ...
01:56 |   CoerciveRBReductor: Assembling error estimator ...
01:56 |   |   ResidualReductor: Estimating residual range ...
01:56 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 6 ...
01:56 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
01:56 |   |   |   |   gram_schmidt: Removing vector 16 of norm 1.63054269844e-17
01:56 |   |   |   |   gram_schmidt: Orthonormalizing vector 17 again
01:56 |   |   |   |   gram_schmidt: Removing linear dependent vector 18
01:56 |   |   |   |   gram_schmidt: Removing linear dependent vector 19
01:56 |   |   |   |   gram_schmidt: Orthonormalizing vector 20 again
01:56 |   |   ResidualReductor: Projecting residual operator ...
01:56 adaptive_greedy: Estimating errors ...
01:56 adaptive_greedy: Maximum error after 7 extensions: 0.658623198628 (mu = {diffusion: [0.1, 1.0, 1.0, 0.1]})
01:56 adaptive_greedy: Maximum validation error: 0.4004733607
01:56 adaptive_greedy: Validation error to training error ratio: 6.080e-01
01:56 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 1.0, 0.1]} ...
01:56 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 1.0, 0.1]} ...
01:56 adaptive_greedy: Extending basis with solution snapshot ...
      
01:56 adaptive_greedy: Reducing ...
01:56 |   CoerciveRBReductor: RB projection ...
01:56 |   CoerciveRBReductor: Assembling error estimator ...
01:56 |   |   ResidualReductor: Estimating residual range ...
01:56 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 7 ...
01:56 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
01:56 |   |   |   |   gram_schmidt: Removing vector 18 of norm 2.207125561e-17
01:56 |   |   |   |   gram_schmidt: Removing linear dependent vector 19
01:57 |   |   |   |   gram_schmidt: Removing linear dependent vector 20
01:57 |   |   |   |   gram_schmidt: Orthonormalizing vector 21 again
01:57 |   |   |   |   gram_schmidt: Removing linear dependent vector 22
01:57 |   |   ResidualReductor: Projecting residual operator ...
01:57 adaptive_greedy: Estimating errors ...
01:57 adaptive_greedy: Maximum error after 8 extensions: 0.601851045213 (mu = {diffusion: [1.0, 0.1, 1.0, 1.0]})
01:57 adaptive_greedy: Maximum validation error: 0.396076805105
01:57 adaptive_greedy: Validation error to training error ratio: 6.581e-01
01:57 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 1.0, 1.0]} ...
01:57 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 1.0, 1.0]} ...
01:57 adaptive_greedy: Extending basis with solution snapshot ...
      
01:57 adaptive_greedy: Reducing ...
01:57 |   CoerciveRBReductor: RB projection ...
01:57 |   CoerciveRBReductor: Assembling error estimator ...
01:57 |   |   ResidualReductor: Estimating residual range ...
01:57 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 8 ...
01:57 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
01:57 |   |   |   |   gram_schmidt: Removing vector 19 of norm 3.065336727e-17
01:57 |   |   |   |   gram_schmidt: Orthonormalizing vector 20 again
01:57 |   |   |   |   gram_schmidt: Orthonormalizing vector 21 again
01:57 |   |   |   |   gram_schmidt: Orthonormalizing vector 22 again
01:57 |   |   |   |   gram_schmidt: Orthonormalizing vector 23 again
01:57 |   |   ResidualReductor: Projecting residual operator ...
01:57 adaptive_greedy: Estimating errors ...
01:57 adaptive_greedy: Maximum error after 9 extensions: 0.397415815023 (mu = {diffusion: [1.0, 1.0, 1.0, 0.1]})
01:57 adaptive_greedy: Maximum validation error: 0.128908134741
01:57 adaptive_greedy: Validation error to training error ratio: 3.244e-01
01:57 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 1.0, 1.0, 0.1]} ...
01:57 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 1.0, 0.1]} ...
01:57 adaptive_greedy: Extending basis with solution snapshot ...
      
01:57 adaptive_greedy: Reducing ...
01:57 |   CoerciveRBReductor: RB projection ...
01:57 |   CoerciveRBReductor: Assembling error estimator ...
01:57 |   |   ResidualReductor: Estimating residual range ...
01:57 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 9 ...
01:57 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
01:57 |   |   |   |   gram_schmidt: Removing vector 23 of norm 1.19934432999e-16
01:57 |   |   |   |   gram_schmidt: Orthonormalizing vector 24 again
01:57 |   |   |   |   gram_schmidt: Orthonormalizing vector 25 again
01:57 |   |   |   |   gram_schmidt: Orthonormalizing vector 26 again
01:57 |   |   |   |   gram_schmidt: Orthonormalizing vector 27 again
01:57 |   |   ResidualReductor: Projecting residual operator ...
01:57 adaptive_greedy: Estimating errors ...
01:57 adaptive_greedy: Maximum error after 10 extensions: 0.204648291154 (mu = {diffusion: [0.1, 0.1, 1.0, 1.0]})
01:57 adaptive_greedy: Maximum validation error: 0.0178917469215
01:57 adaptive_greedy: Validation error to training error ratio: 8.743e-02
01:57 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.1, 1.0, 1.0]} ...
01:57 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 1.0, 1.0]} ...
01:57 adaptive_greedy: Extending basis with solution snapshot ...
01:58 |   gram_schmidt: Orthonormalizing vector 10 again
      
01:58 adaptive_greedy: Reducing ...
01:58 |   CoerciveRBReductor: RB projection ...
01:58 |   CoerciveRBReductor: Assembling error estimator ...
01:58 |   |   ResidualReductor: Estimating residual range ...
01:58 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 10 ...
01:58 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
01:58 |   |   |   |   gram_schmidt: Removing vector 27 of norm 2.06772421639e-16
01:58 |   |   |   |   gram_schmidt: Orthonormalizing vector 28 again
01:58 |   |   |   |   gram_schmidt: Orthonormalizing vector 29 again
01:58 |   |   |   |   gram_schmidt: Orthonormalizing vector 30 again
01:58 |   |   |   |   gram_schmidt: Orthonormalizing vector 31 again
01:58 |   |   ResidualReductor: Projecting residual operator ...
01:58 adaptive_greedy: Estimating errors ...
01:58 adaptive_greedy: Maximum error after 11 extensions: 0.191531150322 (mu = {diffusion: [1.0, 1.0, 0.1, 0.1]})
01:58 adaptive_greedy: Maximum validation error: 0.00930921344781
01:58 adaptive_greedy: Validation error to training error ratio: 4.860e-02
01:58 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 1.0, 0.1, 0.1]} ...
01:58 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 0.1, 0.1]} ...
01:58 adaptive_greedy: Extending basis with solution snapshot ...
01:58 |   gram_schmidt: Orthonormalizing vector 11 again
      
01:58 adaptive_greedy: Reducing ...
01:58 |   CoerciveRBReductor: RB projection ...
01:58 |   CoerciveRBReductor: Assembling error estimator ...
01:58 |   |   ResidualReductor: Estimating residual range ...
01:58 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 11 ...
01:58 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
01:58 |   |   |   |   gram_schmidt: Removing vector 31 of norm 1.60497556687e-16
01:58 |   |   |   |   gram_schmidt: Orthonormalizing vector 32 again
01:58 |   |   |   |   gram_schmidt: Orthonormalizing vector 33 again
01:58 |   |   |   |   gram_schmidt: Orthonormalizing vector 34 again
01:58 |   |   |   |   gram_schmidt: Orthonormalizing vector 35 again
01:58 |   |   ResidualReductor: Projecting residual operator ...
01:58 adaptive_greedy: Estimating errors ...
01:58 adaptive_greedy: Maximum error after 12 extensions: 0.00206891524656 (mu = {diffusion: [1.0, 1.0, 0.1, 1.0]})
01:58 adaptive_greedy: Maximum validation error: 0.00273295911723
01:58 adaptive_greedy: Validation error to training error ratio: 1.321e+00
01:58 |INFO2|adaptive_greedy: Overfitting detected. Computing element indicators ...
01:58 adaptive_greedy: Refining 1 elements: [0]
01:58 adaptive_greedy: New training set size: 81. New validation set size: 26
01:58 adaptive_greedy: Number of refinements: 1
      
01:58 adaptive_greedy: Estimating errors ...
01:58 adaptive_greedy: Maximum error after 12 extensions: 0.00925691045303 (mu = {diffusion: [1.0, 0.1, 0.1, 0.55]})
01:58 adaptive_greedy: Maximum validation error: 0.00273295911723
01:58 adaptive_greedy: Validation error to training error ratio: 2.952e-01
01:58 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 0.1, 0.55]} ...
01:58 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.1, 0.55]} ...
01:58 adaptive_greedy: Extending basis with solution snapshot ...
01:58 |   gram_schmidt: Orthonormalizing vector 12 again
      
01:58 adaptive_greedy: Reducing ...
01:58 |   CoerciveRBReductor: RB projection ...
01:59 |   CoerciveRBReductor: Assembling error estimator ...
01:59 |   |   ResidualReductor: Estimating residual range ...
01:59 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 12 ...
01:59 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
01:59 |   |   |   |   gram_schmidt: Removing vector 35 of norm 1.88441281344e-15
01:59 |   |   |   |   gram_schmidt: Orthonormalizing vector 36 again
01:59 |   |   |   |   gram_schmidt: Orthonormalizing vector 37 again
01:59 |   |   |   |   gram_schmidt: Orthonormalizing vector 38 again
01:59 |   |   |   |   gram_schmidt: Orthonormalizing vector 39 again
01:59 |   |   ResidualReductor: Projecting residual operator ...
01:59 adaptive_greedy: Estimating errors ...
01:59 adaptive_greedy: Maximum error after 13 extensions: 0.00925680481254 (mu = {diffusion: [0.1, 0.55, 1.0, 0.1]})
01:59 adaptive_greedy: Maximum validation error: 0.00263542238613
01:59 adaptive_greedy: Validation error to training error ratio: 2.847e-01
01:59 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.55, 1.0, 0.1]} ...
01:59 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 1.0, 0.1]} ...
01:59 adaptive_greedy: Extending basis with solution snapshot ...
01:59 |   gram_schmidt: Orthonormalizing vector 13 again
      
01:59 adaptive_greedy: Reducing ...
01:59 |   CoerciveRBReductor: RB projection ...
01:59 |   CoerciveRBReductor: Assembling error estimator ...
01:59 |   |   ResidualReductor: Estimating residual range ...
01:59 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 13 ...
01:59 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
01:59 |   |   |   |   gram_schmidt: Removing vector 39 of norm 2.46794997245e-15
01:59 |   |   |   |   gram_schmidt: Orthonormalizing vector 40 again
01:59 |   |   |   |   gram_schmidt: Orthonormalizing vector 41 again
01:59 |   |   |   |   gram_schmidt: Orthonormalizing vector 42 again
01:59 |   |   |   |   gram_schmidt: Orthonormalizing vector 43 again
01:59 |   |   ResidualReductor: Projecting residual operator ...
01:59 adaptive_greedy: Estimating errors ...
01:59 adaptive_greedy: Maximum error after 14 extensions: 0.00530753862259 (mu = {diffusion: [1.0, 0.55, 0.1, 0.55]})
01:59 adaptive_greedy: Maximum validation error: 0.00259566746335
01:59 adaptive_greedy: Validation error to training error ratio: 4.891e-01
01:59 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.55, 0.1, 0.55]} ...
01:59 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.55, 0.1, 0.55]} ...
02:00 adaptive_greedy: Extending basis with solution snapshot ...
02:00 |   gram_schmidt: Orthonormalizing vector 14 again
      
02:00 adaptive_greedy: Reducing ...
02:00 |   CoerciveRBReductor: RB projection ...
02:00 |   CoerciveRBReductor: Assembling error estimator ...
02:00 |   |   ResidualReductor: Estimating residual range ...
02:00 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 14 ...
02:00 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:00 |   |   |   |   gram_schmidt: Removing vector 43 of norm 4.89834300469e-15
02:00 |   |   |   |   gram_schmidt: Orthonormalizing vector 44 again
02:00 |   |   |   |   gram_schmidt: Orthonormalizing vector 45 again
02:00 |   |   |   |   gram_schmidt: Orthonormalizing vector 46 again
02:00 |   |   |   |   gram_schmidt: Orthonormalizing vector 47 again
02:00 |   |   ResidualReductor: Projecting residual operator ...
02:00 adaptive_greedy: Estimating errors ...
02:00 adaptive_greedy: Maximum error after 15 extensions: 0.00443042223028 (mu = {diffusion: [0.55, 0.1, 0.1, 1.0]})
02:00 adaptive_greedy: Maximum validation error: 0.00151878973202
02:00 adaptive_greedy: Validation error to training error ratio: 3.428e-01
02:00 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.55, 0.1, 0.1, 1.0]} ...
02:00 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 0.1, 1.0]} ...
02:00 adaptive_greedy: Extending basis with solution snapshot ...
02:00 |   gram_schmidt: Orthonormalizing vector 15 again
      
02:00 adaptive_greedy: Reducing ...
02:00 |   CoerciveRBReductor: RB projection ...
02:00 |   CoerciveRBReductor: Assembling error estimator ...
02:00 |   |   ResidualReductor: Estimating residual range ...
02:00 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 15 ...
02:00 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:00 |   |   |   |   gram_schmidt: Removing vector 47 of norm 6.54445509128e-15
02:00 |   |   |   |   gram_schmidt: Orthonormalizing vector 48 again
02:00 |   |   |   |   gram_schmidt: Orthonormalizing vector 49 again
02:00 |   |   |   |   gram_schmidt: Orthonormalizing vector 50 again
02:00 |   |   |   |   gram_schmidt: Orthonormalizing vector 51 again
02:00 |   |   ResidualReductor: Projecting residual operator ...
02:00 adaptive_greedy: Estimating errors ...
02:00 adaptive_greedy: Maximum error after 16 extensions: 0.000364046586956 (mu = {diffusion: [0.55, 0.1, 0.55, 1.0]})
02:01 adaptive_greedy: Maximum validation error: 0.000206953549587
02:01 adaptive_greedy: Validation error to training error ratio: 5.685e-01
02:01 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.55, 0.1, 0.55, 1.0]} ...
02:01 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 0.55, 1.0]} ...
02:01 adaptive_greedy: Extending basis with solution snapshot ...
02:01 |   gram_schmidt: Orthonormalizing vector 16 again
      
02:01 adaptive_greedy: Reducing ...
02:01 |   CoerciveRBReductor: RB projection ...
02:01 |   CoerciveRBReductor: Assembling error estimator ...
02:01 |   |   ResidualReductor: Estimating residual range ...
02:01 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 16 ...
02:01 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:01 |   |   |   |   gram_schmidt: Orthonormalizing vector 52 again
02:01 |   |   |   |   gram_schmidt: Orthonormalizing vector 53 again
02:01 |   |   |   |   gram_schmidt: Orthonormalizing vector 54 again
02:01 |   |   |   |   gram_schmidt: Orthonormalizing vector 55 again
02:01 |   |   ResidualReductor: Projecting residual operator ...
02:01 adaptive_greedy: Estimating errors ...
02:01 adaptive_greedy: Maximum error after 17 extensions: 0.000261408694572 (mu = {diffusion: [1.0, 1.0, 0.1, 1.0]})
02:01 adaptive_greedy: Maximum validation error: 0.000103815221625
02:01 adaptive_greedy: Validation error to training error ratio: 3.971e-01
02:01 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 1.0, 0.1, 1.0]} ...
02:01 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 0.1, 1.0]} ...
02:01 adaptive_greedy: Extending basis with solution snapshot ...
02:01 |   gram_schmidt: Orthonormalizing vector 17 again
      
02:01 adaptive_greedy: Reducing ...
02:01 |   CoerciveRBReductor: RB projection ...
02:01 |   CoerciveRBReductor: Assembling error estimator ...
02:01 |   |   ResidualReductor: Estimating residual range ...
02:01 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 17 ...
02:01 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:01 |   |   |   |   gram_schmidt: Orthonormalizing vector 57 again
02:01 |   |   |   |   gram_schmidt: Orthonormalizing vector 58 again
02:02 |   |   |   |   gram_schmidt: Orthonormalizing vector 59 again
02:02 |   |   |   |   gram_schmidt: Orthonormalizing vector 60 again
02:02 |   |   ResidualReductor: Projecting residual operator ...
02:02 adaptive_greedy: Estimating errors ...
02:02 adaptive_greedy: Maximum error after 18 extensions: 0.000126405064348 (mu = {diffusion: [0.1, 0.1, 1.0, 0.55]})
02:02 adaptive_greedy: Maximum validation error: 7.45902243388e-05
02:02 adaptive_greedy: Validation error to training error ratio: 5.901e-01
02:02 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.1, 1.0, 0.55]} ...
02:02 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 1.0, 0.55]} ...
02:02 adaptive_greedy: Extending basis with solution snapshot ...
02:02 |   gram_schmidt: Orthonormalizing vector 18 again
      
02:02 adaptive_greedy: Reducing ...
02:02 |   CoerciveRBReductor: RB projection ...
02:02 |   CoerciveRBReductor: Assembling error estimator ...
02:02 |   |   ResidualReductor: Estimating residual range ...
02:02 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 18 ...
02:02 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:02 |   |   |   |   gram_schmidt: Orthonormalizing vector 62 again
02:02 |   |   |   |   gram_schmidt: Orthonormalizing vector 63 again
02:02 |   |   |   |   gram_schmidt: Orthonormalizing vector 64 again
02:02 |   |   |   |   gram_schmidt: Orthonormalizing vector 65 again
02:02 |   |   ResidualReductor: Projecting residual operator ...
02:02 adaptive_greedy: Estimating errors ...
02:02 adaptive_greedy: Maximum error after 19 extensions: 4.26671354046e-05 (mu = {diffusion: [0.1, 1.0, 0.55, 1.0]})
02:02 adaptive_greedy: Maximum validation error: 2.15516785836e-05
02:02 adaptive_greedy: Validation error to training error ratio: 5.051e-01
02:02 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 0.55, 1.0]} ...
02:02 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.55, 1.0]} ...
02:03 adaptive_greedy: Extending basis with solution snapshot ...
02:03 |   gram_schmidt: Orthonormalizing vector 19 again
      
02:03 adaptive_greedy: Reducing ...
02:03 |   CoerciveRBReductor: RB projection ...
02:03 |   CoerciveRBReductor: Assembling error estimator ...
02:03 |   |   ResidualReductor: Estimating residual range ...
02:03 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 19 ...
02:03 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:03 |   |   |   |   gram_schmidt: Orthonormalizing vector 67 again
02:03 |   |   |   |   gram_schmidt: Orthonormalizing vector 68 again
02:03 |   |   |   |   gram_schmidt: Orthonormalizing vector 69 again
02:03 |   |   |   |   gram_schmidt: Orthonormalizing vector 70 again
02:03 |   |   ResidualReductor: Projecting residual operator ...
02:03 adaptive_greedy: Estimating errors ...
02:03 adaptive_greedy: Maximum error after 20 extensions: 3.1066491852e-06 (mu = {diffusion: [0.1, 0.55, 0.1, 1.0]})
02:03 adaptive_greedy: Maximum validation error: 1.19872878832e-06
02:03 adaptive_greedy: Validation error to training error ratio: 3.859e-01
02:03 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.55, 0.1, 1.0]} ...
02:03 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 0.1, 1.0]} ...
02:03 adaptive_greedy: Extending basis with solution snapshot ...
02:03 |   gram_schmidt: Orthonormalizing vector 20 again
      
02:03 adaptive_greedy: Reducing ...
02:03 |   CoerciveRBReductor: RB projection ...
02:03 |   CoerciveRBReductor: Assembling error estimator ...
02:03 |   |   ResidualReductor: Estimating residual range ...
02:03 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 20 ...
02:03 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:04 |   |   |   |   gram_schmidt: Orthonormalizing vector 72 again
02:04 |   |   |   |   gram_schmidt: Orthonormalizing vector 73 again
02:04 |   |   |   |   gram_schmidt: Orthonormalizing vector 74 again
02:04 |   |   |   |   gram_schmidt: Orthonormalizing vector 75 again
02:04 |   |   ResidualReductor: Projecting residual operator ...
02:04 adaptive_greedy: Estimating errors ...
02:04 adaptive_greedy: Maximum error after 21 extensions: 2.05705788439e-06 (mu = {diffusion: [0.1, 1.0, 0.55, 0.55]})
02:04 adaptive_greedy: Maximum validation error: 1.06830925922e-06
02:04 adaptive_greedy: Validation error to training error ratio: 5.193e-01
02:04 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 0.55, 0.55]} ...
02:04 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.55, 0.55]} ...
02:04 adaptive_greedy: Extending basis with solution snapshot ...
02:04 |   gram_schmidt: Orthonormalizing vector 21 again
      
02:04 adaptive_greedy: Reducing ...
02:04 |   CoerciveRBReductor: RB projection ...
02:04 |   CoerciveRBReductor: Assembling error estimator ...
02:04 |   |   ResidualReductor: Estimating residual range ...
02:04 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 21 ...
02:04 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:04 |   |   |   |   gram_schmidt: Orthonormalizing vector 77 again
02:04 |   |   |   |   gram_schmidt: Orthonormalizing vector 78 again
02:04 |   |   |   |   gram_schmidt: Orthonormalizing vector 79 again
02:05 |   |   |   |   gram_schmidt: Orthonormalizing vector 80 again
02:05 |   |   ResidualReductor: Projecting residual operator ...
02:05 adaptive_greedy: Estimating errors ...
02:05 adaptive_greedy: Maximum error after 22 extensions: 8.97667262468e-07 (mu = {diffusion: [1.0, 0.1, 0.55, 0.1]})
02:05 adaptive_greedy: Maximum validation error: 2.1817473867e-07
02:05 adaptive_greedy: Validation error to training error ratio: 2.430e-01
02:05 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 0.55, 0.1]} ...
02:05 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.55, 0.1]} ...
02:05 adaptive_greedy: Extending basis with solution snapshot ...
02:05 |   gram_schmidt: Orthonormalizing vector 22 again
      
02:05 adaptive_greedy: Reducing ...
02:05 |   CoerciveRBReductor: RB projection ...
02:05 |   CoerciveRBReductor: Assembling error estimator ...
02:05 |   |   ResidualReductor: Estimating residual range ...
02:05 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 22 ...
02:05 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:05 |   |   |   |   gram_schmidt: Orthonormalizing vector 82 again
02:05 |   |   |   |   gram_schmidt: Orthonormalizing vector 83 again
02:05 |   |   |   |   gram_schmidt: Orthonormalizing vector 84 again
02:05 |   |   |   |   gram_schmidt: Orthonormalizing vector 85 again
02:05 |   |   ResidualReductor: Projecting residual operator ...
02:05 adaptive_greedy: Estimating errors ...
02:06 adaptive_greedy: Maximum error after 23 extensions: 4.05366543145e-08 (mu = {diffusion: [1.0, 1.0, 0.1, 0.55]})
02:06 adaptive_greedy: Maximum validation error: 1.17112421124e-08
02:06 adaptive_greedy: Validation error to training error ratio: 2.889e-01
02:06 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 1.0, 0.1, 0.55]} ...
02:06 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 0.1, 0.55]} ...
02:06 adaptive_greedy: Extending basis with solution snapshot ...
02:06 |   gram_schmidt: Orthonormalizing vector 23 again
      
02:06 adaptive_greedy: Reducing ...
02:06 |   CoerciveRBReductor: RB projection ...
02:06 |   CoerciveRBReductor: Assembling error estimator ...
02:06 |   |   ResidualReductor: Estimating residual range ...
02:06 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 23 ...
02:06 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:06 |   |   |   |   gram_schmidt: Orthonormalizing vector 87 again
02:06 |   |   |   |   gram_schmidt: Orthonormalizing vector 88 again
02:06 |   |   |   |   gram_schmidt: Orthonormalizing vector 89 again
02:06 |   |   |   |   gram_schmidt: Orthonormalizing vector 90 again
02:06 |   |   ResidualReductor: Projecting residual operator ...
02:06 adaptive_greedy: Estimating errors ...
02:06 adaptive_greedy: Maximum error after 24 extensions: 1.15720962552e-08 (mu = {diffusion: [0.55, 0.1, 1.0, 0.1]})
02:06 adaptive_greedy: Maximum validation error: 2.92425512493e-09
02:06 adaptive_greedy: Validation error to training error ratio: 2.527e-01
02:06 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.55, 0.1, 1.0, 0.1]} ...
02:06 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 1.0, 0.1]} ...
02:07 adaptive_greedy: Extending basis with solution snapshot ...
02:07 |   gram_schmidt: Orthonormalizing vector 24 again
      
02:07 adaptive_greedy: Reducing ...
02:07 |   CoerciveRBReductor: RB projection ...
02:07 |   CoerciveRBReductor: Assembling error estimator ...
02:07 |   |   ResidualReductor: Estimating residual range ...
02:07 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 24 ...
02:07 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:07 |   |   |   |   gram_schmidt: Orthonormalizing vector 92 again
02:07 |   |   |   |   gram_schmidt: Orthonormalizing vector 93 again
02:07 |   |   |   |   gram_schmidt: Orthonormalizing vector 94 again
02:07 |   |   |   |   gram_schmidt: Orthonormalizing vector 95 again
02:07 |   |   ResidualReductor: Projecting residual operator ...
02:07 adaptive_greedy: Estimating errors ...
02:07 adaptive_greedy: Maximum error after 25 extensions: 8.51785649375e-09 (mu = {diffusion: [0.1, 0.55, 1.0, 1.0]})
02:07 adaptive_greedy: Maximum validation error: 2.79910872422e-09
02:07 adaptive_greedy: Validation error to training error ratio: 3.286e-01
02:07 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.55, 1.0, 1.0]} ...
02:07 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 1.0, 1.0]} ...
02:07 adaptive_greedy: Extending basis with solution snapshot ...
02:07 |   gram_schmidt: Orthonormalizing vector 25 again
      
02:07 adaptive_greedy: Reducing ...
02:07 |   CoerciveRBReductor: RB projection ...
02:08 |   CoerciveRBReductor: Assembling error estimator ...
02:08 |   |   ResidualReductor: Estimating residual range ...
02:08 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 25 ...
02:08 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:08 |   |   |   |   gram_schmidt: Orthonormalizing vector 97 again
02:08 |   |   |   |   gram_schmidt: Orthonormalizing vector 98 again
02:08 |   |   |   |   gram_schmidt: Orthonormalizing vector 99 again
02:08 |   |   |   |   gram_schmidt: Orthonormalizing vector 100 again
02:08 |   |   ResidualReductor: Projecting residual operator ...
02:08 adaptive_greedy: Estimating errors ...
02:08 adaptive_greedy: Maximum error after 26 extensions: 4.68405114168e-09 (mu = {diffusion: [0.55, 1.0, 1.0, 0.1]})
02:08 adaptive_greedy: Maximum validation error: 4.27641043201e-10
02:08 adaptive_greedy: Validation error to training error ratio: 9.130e-02
02:08 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.55, 1.0, 1.0, 0.1]} ...
02:08 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 1.0, 0.1]} ...
02:08 adaptive_greedy: Extending basis with solution snapshot ...
02:08 |   gram_schmidt: Orthonormalizing vector 26 again
      
02:08 adaptive_greedy: Reducing ...
02:08 |   CoerciveRBReductor: RB projection ...
02:09 |   CoerciveRBReductor: Assembling error estimator ...
02:09 |   |   ResidualReductor: Estimating residual range ...
02:09 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 26 ...
02:09 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:09 |   |   |   |   gram_schmidt: Orthonormalizing vector 102 again
02:09 |   |   |   |   gram_schmidt: Orthonormalizing vector 103 again
02:09 |   |   |   |   gram_schmidt: Orthonormalizing vector 104 again
02:09 |   |   |   |   gram_schmidt: Orthonormalizing vector 105 again
02:09 |   |   ResidualReductor: Projecting residual operator ...
02:09 adaptive_greedy: Estimating errors ...
02:09 adaptive_greedy: Maximum error after 27 extensions: 1.23545920529e-11 (mu = {diffusion: [1.0, 0.1, 0.55, 1.0]})
02:09 adaptive_greedy: Maximum validation error: 2.24278412904e-12
02:09 adaptive_greedy: Validation error to training error ratio: 1.815e-01
02:09 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 0.55, 1.0]} ...
02:09 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.55, 1.0]} ...
02:09 adaptive_greedy: Extending basis with solution snapshot ...
02:09 |   gram_schmidt: Orthonormalizing vector 27 again
      
02:09 adaptive_greedy: Reducing ...
02:09 |   CoerciveRBReductor: RB projection ...
02:09 |   CoerciveRBReductor: Assembling error estimator ...
02:09 |   |   ResidualReductor: Estimating residual range ...
02:09 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 27 ...
02:10 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:10 |   |   |   |   gram_schmidt: Orthonormalizing vector 107 again
02:10 |   |   |   |   gram_schmidt: Orthonormalizing vector 108 again
02:10 |   |   |   |   gram_schmidt: Orthonormalizing vector 109 again
02:10 |   |   |   |   gram_schmidt: Orthonormalizing vector 110 again
02:10 |   |   ResidualReductor: Projecting residual operator ...
02:10 adaptive_greedy: Estimating errors ...
02:10 adaptive_greedy: Maximum error after 28 extensions: 8.48876667106e-12 (mu = {diffusion: [0.55, 1.0, 0.1, 0.1]})
02:10 adaptive_greedy: Maximum validation error: 2.0736510951e-12
02:10 adaptive_greedy: Validation error to training error ratio: 2.443e-01
02:10 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.55, 1.0, 0.1, 0.1]} ...
02:10 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 0.1, 0.1]} ...
02:10 adaptive_greedy: Extending basis with solution snapshot ...
02:10 |   gram_schmidt: Orthonormalizing vector 28 again
      
02:10 adaptive_greedy: Reducing ...
02:10 |   CoerciveRBReductor: RB projection ...
02:10 |   CoerciveRBReductor: Assembling error estimator ...
02:10 |   |   ResidualReductor: Estimating residual range ...
02:10 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 28 ...
02:10 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:11 |   |   |   |   gram_schmidt: Orthonormalizing vector 111 again
02:11 |   |   |   |   gram_schmidt: Orthonormalizing vector 112 again
02:11 |   |   |   |   gram_schmidt: Orthonormalizing vector 113 again
02:11 |   |   |   |   gram_schmidt: Orthonormalizing vector 114 again
02:11 |   |   |   |   gram_schmidt: Orthonormalizing vector 115 again
02:11 |   |   ResidualReductor: Projecting residual operator ...
02:11 adaptive_greedy: Estimating errors ...
02:11 adaptive_greedy: Maximum error after 29 extensions: 2.3379829668e-12 (mu = {diffusion: [0.1, 1.0, 1.0, 0.55]})
02:11 adaptive_greedy: Maximum validation error: 1.48658047129e-12
02:11 adaptive_greedy: Validation error to training error ratio: 6.358e-01
02:11 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 1.0, 0.55]} ...
02:11 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 1.0, 0.55]} ...
02:11 adaptive_greedy: Extending basis with solution snapshot ...
02:11 |   gram_schmidt: Orthonormalizing vector 29 again
      
02:11 adaptive_greedy: Maximum number of 30 extensions reached.
02:11 adaptive_greedy: Reducing once more ...
02:11 |   CoerciveRBReductor: RB projection ...
02:12 |   CoerciveRBReductor: Assembling error estimator ...
02:12 |   |   ResidualReductor: Estimating residual range ...
02:12 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 29 ...
02:12 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:12 |   |   |   |   gram_schmidt: Orthonormalizing vector 116 again
02:12 |   |   |   |   gram_schmidt: Orthonormalizing vector 117 again
02:12 |   |   |   |   gram_schmidt: Orthonormalizing vector 118 again
02:12 |   |   |   |   gram_schmidt: Orthonormalizing vector 119 again
02:12 |   |   |   |   gram_schmidt: Orthonormalizing vector 120 again
02:12 |   |   ResidualReductor: Projecting residual operator ...
02:12 adaptive_greedy: Greedy search took 18.1517429352 seconds
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args27]" time="4.10798811913"><system-out>Discretize ...
RB generation ...

Searching for maximum error on random snapshots ...
..........

*** RESULTS ***

pyMOR discretization:
   number of blocks: 2x2
   grid intervals:   100
   ListVectorArray:  False

Naive basis generation:
   basis size set: 5
   elapsed time:   1.22214889526

Stochastic error estimation:
    number of samples:                  10
    maximum NumpyMatrixOperator-norm:   6.2469480e-01 (mu = {diffusion: [0.408493406469, 0.281403649734, 0.736591807092, 0.130059337922]})
    maximum NumpyMatrixOperator-error:  2.0249720e-01 (mu = {diffusion: [0.408493406469, 0.281403649734, 0.736591807092, 0.130059337922]})
    maximum NumpyMatrixOperator-norm:   1.2572252e-01 (mu = {diffusion: [0.408493406469, 0.281403649734, 0.736591807092, 0.130059337922]})
    maximum NumpyMatrixOperator-error:  2.1356484e-02 (mu = {diffusion: [0.408493406469, 0.281403649734, 0.736591807092, 0.130059337922]})
    maximum estimated error:            5.3178606e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    minimum estimator effectivity:      3.2366706e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    maximum estimator effectivity:      7.9208874e-01 (mu = {diffusion: [0.66531387023, 0.727653649775, 0.810954719993, 0.218701317605]})
    maximum system matrix condition:    9.9116076e+03 (mu = {diffusion: [0.181832736497, 0.399003112714, 0.484642852697, 0.598947231188]})
    elapsed time:                       1.43840503693
</system-out><system-err>02:14 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:14 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:14 DiffusionOperatorP1: Determine global dofs ...
02:14 DiffusionOperatorP1: Boundary treatment ...
02:14 DiffusionOperatorP1: Assemble system matrix ...
02:14 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:14 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:14 DiffusionOperatorP1: Determine global dofs ...
02:14 DiffusionOperatorP1: Boundary treatment ...
02:14 DiffusionOperatorP1: Assemble system matrix ...
02:14 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:14 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:14 DiffusionOperatorP1: Determine global dofs ...
02:14 DiffusionOperatorP1: Boundary treatment ...
02:14 DiffusionOperatorP1: Assemble system matrix ...
02:14 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:14 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:14 DiffusionOperatorP1: Determine global dofs ...
02:14 DiffusionOperatorP1: Boundary treatment ...
02:14 DiffusionOperatorP1: Assemble system matrix ...
02:14 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:14 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:14 DiffusionOperatorP1: Determine global dofs ...
02:14 DiffusionOperatorP1: Boundary treatment ...
02:14 DiffusionOperatorP1: Assemble system matrix ...
02:15 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:15 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:15 DiffusionOperatorP1: Determine global dofs ...
02:15 DiffusionOperatorP1: Boundary treatment ...
02:15 DiffusionOperatorP1: Assemble system matrix ...
02:15 L2ProductP1: Integrate the products of the shape functions on each element
02:15 L2ProductP1: Determine global dofs ...
02:15 L2ProductP1: Boundary treatment ...
02:15 L2ProductP1: Assemble system matrix ...
02:15 L2ProductP1: Integrate the products of the shape functions on each element
02:15 L2ProductP1: Determine global dofs ...
02:15 L2ProductP1: Boundary treatment ...
02:15 L2ProductP1: Assemble system matrix ...
02:15 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:15 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:15 DiffusionOperatorP1: Determine global dofs ...
02:15 DiffusionOperatorP1: Boundary treatment ...
02:15 DiffusionOperatorP1: Assemble system matrix ...
02:15 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
02:15 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
02:15 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ...
02:15 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ...
02:16 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args28]" time="6.98594927788"><system-out>Discretize ...
RB generation ...

Searching for maximum error on random snapshots ...
..........

*** RESULTS ***

Problem:
   number of blocks:                   2x2
   h:                                  sqrt(2)/100

Greedy basis generation:
   estimator disabled:                 False
   extension method:                   gram_schmidt
   product:                            h1
   prescribed basis size:              10
   actual basis size:                  10
   elapsed time:                       3.86068892479

Stochastic error estimation:
    number of samples:                  10
    maximum NumpyMatrixOperator-norm:   1.2298570e+00 (mu = {diffusion: [0.437086106963, 0.955642875769]})
    maximum NumpyMatrixOperator-error:  6.3882885e-04 (mu = {diffusion: [0.437086106963, 0.955642875769]})
    maximum estimated error:            1.5034873e-03 (mu = {diffusion: [0.152275250951, 0.879558531197]})
    minimum estimator effectivity:      1.6730841e-01 (mu = {diffusion: [0.118526044866, 0.972918866946]})
    maximum estimator effectivity:      8.2657601e-01 (mu = {diffusion: [0.641003510569, 0.737265320016]})
    maximum system matrix condition:    1.0020946e+01 (mu = {diffusion: [0.84919837672, 0.29110519961]})
    elapsed time:                       1.43951010704
</system-out><system-err>02:18 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:18 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:18 DiffusionOperatorP1: Determine global dofs ...
02:18 DiffusionOperatorP1: Boundary treatment ...
02:18 DiffusionOperatorP1: Assemble system matrix ...
02:18 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:18 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:18 DiffusionOperatorP1: Determine global dofs ...
02:18 DiffusionOperatorP1: Boundary treatment ...
02:18 DiffusionOperatorP1: Assemble system matrix ...
02:18 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:18 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:18 DiffusionOperatorP1: Determine global dofs ...
02:18 DiffusionOperatorP1: Boundary treatment ...
02:18 DiffusionOperatorP1: Assemble system matrix ...
02:18 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:18 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:18 DiffusionOperatorP1: Determine global dofs ...
02:18 DiffusionOperatorP1: Boundary treatment ...
02:18 DiffusionOperatorP1: Assemble system matrix ...
02:19 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:19 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:19 DiffusionOperatorP1: Determine global dofs ...
02:19 DiffusionOperatorP1: Boundary treatment ...
02:19 DiffusionOperatorP1: Assemble system matrix ...
02:19 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:19 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:19 DiffusionOperatorP1: Determine global dofs ...
02:19 DiffusionOperatorP1: Boundary treatment ...
02:19 DiffusionOperatorP1: Assemble system matrix ...
02:19 L2ProductP1: Integrate the products of the shape functions on each element
02:19 L2ProductP1: Determine global dofs ...
02:19 L2ProductP1: Boundary treatment ...
02:19 L2ProductP1: Assemble system matrix ...
02:19 L2ProductP1: Integrate the products of the shape functions on each element
02:19 L2ProductP1: Determine global dofs ...
02:19 L2ProductP1: Boundary treatment ...
02:19 L2ProductP1: Assemble system matrix ...
02:19 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:19 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:19 DiffusionOperatorP1: Determine global dofs ...
02:19 DiffusionOperatorP1: Boundary treatment ...
02:19 DiffusionOperatorP1: Assemble system matrix ...
02:19 adaptive_greedy: Training set size: 4. Validation set size: 1
02:19 adaptive_greedy: Reducing ...
02:19 |   CoerciveRBReductor: RB projection ...
02:19 |   CoerciveRBReductor: Assembling error estimator ...
02:19 |   |   ResidualReductor: Estimating residual range ...
02:19 |   |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
02:19 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:19 |   |   ResidualReductor: Projecting residual operator ...
02:19 adaptive_greedy: Estimating errors ...
02:19 adaptive_greedy: Maximum error after 0 extensions: 18.7457318215 (mu = {diffusion: [0.1, 0.1]})
02:19 adaptive_greedy: Maximum validation error: 0.619693613934
02:19 adaptive_greedy: Validation error to training error ratio: 3.306e-02
02:19 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.1]} ...
02:19 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1]} ...
02:20 adaptive_greedy: Extending basis with solution snapshot ...
      
02:20 adaptive_greedy: Reducing ...
02:20 |   CoerciveRBReductor: RB projection ...
02:20 |   CoerciveRBReductor: Assembling error estimator ...
02:20 |   |   ResidualReductor: Estimating residual range ...
02:20 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
02:20 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:20 |   |   |   |   gram_schmidt: Removing vector 1 of norm 0.0
02:20 |   |   |   |   gram_schmidt: Removing linear dependent vector 5
02:20 |   |   ResidualReductor: Projecting residual operator ...
02:20 adaptive_greedy: Estimating errors ...
02:20 adaptive_greedy: Maximum error after 1 extensions: 14.030259401 (mu = {diffusion: [1.0, 0.1]})
02:20 adaptive_greedy: Maximum validation error: 0.382818187893
02:20 adaptive_greedy: Validation error to training error ratio: 2.729e-02
02:20 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1]} ...
02:20 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1]} ...
02:20 adaptive_greedy: Extending basis with solution snapshot ...
      
02:20 adaptive_greedy: Reducing ...
02:20 |   CoerciveRBReductor: RB projection ...
02:20 |   CoerciveRBReductor: Assembling error estimator ...
02:20 |   |   ResidualReductor: Estimating residual range ...
02:20 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
02:20 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:20 |   |   |   |   gram_schmidt: Removing vector 4 of norm 3.09427801544e-18
02:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 5 again
02:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 7 again
02:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 8 again
02:20 |   |   ResidualReductor: Projecting residual operator ...
02:20 adaptive_greedy: Estimating errors ...
02:20 adaptive_greedy: Maximum error after 2 extensions: 1.04105273543 (mu = {diffusion: [0.1, 1.0]})
02:20 adaptive_greedy: Maximum validation error: 0.185107038419
02:20 adaptive_greedy: Validation error to training error ratio: 1.778e-01
02:20 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0]} ...
02:20 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0]} ...
02:20 adaptive_greedy: Extending basis with solution snapshot ...
      
02:20 adaptive_greedy: Reducing ...
02:20 |   CoerciveRBReductor: RB projection ...
02:20 |   CoerciveRBReductor: Assembling error estimator ...
02:20 |   |   ResidualReductor: Estimating residual range ...
02:20 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
02:20 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:20 |   |   |   |   gram_schmidt: Removing vector 8 of norm 9.94561094677e-18
02:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 10 again
02:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 11 again
02:20 |   |   |   |   gram_schmidt: Removing linear dependent vector 12
02:20 |   |   ResidualReductor: Projecting residual operator ...
02:20 adaptive_greedy: Estimating errors ...
02:20 adaptive_greedy: Maximum error after 3 extensions: 0.0638355277164 (mu = {diffusion: [1.0, 1.0]})
02:20 adaptive_greedy: Maximum validation error: 0.179233062961
02:20 adaptive_greedy: Validation error to training error ratio: 2.808e+00
02:20 |INFO2|adaptive_greedy: Overfitting detected. Computing element indicators ...
02:20 adaptive_greedy: Refining 1 elements: [0]
02:20 adaptive_greedy: New training set size: 9. New validation set size: 4
02:20 adaptive_greedy: Number of refinements: 1
      
02:20 adaptive_greedy: Estimating errors ...
02:20 adaptive_greedy: Maximum error after 3 extensions: 1.04338737641 (mu = {diffusion: [0.55, 0.1]})
02:20 adaptive_greedy: Maximum validation error: 0.432695575375
02:20 adaptive_greedy: Validation error to training error ratio: 4.147e-01
02:20 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.55, 0.1]} ...
02:20 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1]} ...
02:20 adaptive_greedy: Extending basis with solution snapshot ...
02:20 |   gram_schmidt: Orthonormalizing vector 3 again
      
02:20 adaptive_greedy: Reducing ...
02:20 |   CoerciveRBReductor: RB projection ...
02:20 |   CoerciveRBReductor: Assembling error estimator ...
02:20 |   |   ResidualReductor: Estimating residual range ...
02:20 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 3 ...
02:20 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:20 |   |   |   |   gram_schmidt: Removing vector 11 of norm 1.25393810684e-16
02:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 12 again
02:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 14 again
02:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 15 again
02:20 |   |   ResidualReductor: Projecting residual operator ...
02:20 adaptive_greedy: Estimating errors ...
02:20 adaptive_greedy: Maximum error after 4 extensions: 0.321549666353 (mu = {diffusion: [0.1, 0.55]})
02:20 adaptive_greedy: Maximum validation error: 0.411444119967
02:20 adaptive_greedy: Validation error to training error ratio: 1.280e+00
02:20 |INFO2|adaptive_greedy: Overfitting detected. Computing element indicators ...
02:20 adaptive_greedy: Refining 1 elements: [1]
02:20 adaptive_greedy: New training set size: 14. New validation set size: 7
02:20 adaptive_greedy: Number of refinements: 2
      
02:20 adaptive_greedy: Estimating errors ...
02:20 adaptive_greedy: Maximum error after 4 extensions: 0.41217282983 (mu = {diffusion: [1.0, 0.325]})
02:21 adaptive_greedy: Maximum validation error: 0.708260021093
02:21 adaptive_greedy: Validation error to training error ratio: 1.718e+00
02:21 |INFO3|adaptive_greedy: Overfitting detected after refinement. Computing element indicators ...
02:21 adaptive_greedy: Refining 1 elements: [2]
02:21 adaptive_greedy: New training set size: 19. New validation set size: 10
02:21 adaptive_greedy: Number of refinements: 3
      
02:21 adaptive_greedy: Estimating errors ...
02:21 adaptive_greedy: Maximum error after 4 extensions: 0.708503632729 (mu = {diffusion: [1.0, 0.2125]})
02:21 adaptive_greedy: Maximum validation error: 0.854171744757
02:21 adaptive_greedy: Validation error to training error ratio: 1.206e+00
02:21 |INFO3|adaptive_greedy: Overfitting detected after refinement. Computing element indicators ...
02:21 adaptive_greedy: Refining 1 elements: [3]
02:21 adaptive_greedy: New training set size: 24. New validation set size: 13
02:21 adaptive_greedy: Number of refinements: 4
      
02:21 adaptive_greedy: Estimating errors ...
02:21 adaptive_greedy: Maximum error after 4 extensions: 0.854268618214 (mu = {diffusion: [1.0, 0.15625]})
02:21 adaptive_greedy: Maximum validation error: 0.853958687552
02:21 adaptive_greedy: Validation error to training error ratio: 9.996e-01
02:21 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.15625]} ...
02:21 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.15625]} ...
02:21 adaptive_greedy: Extending basis with solution snapshot ...
      
02:21 adaptive_greedy: Reducing ...
02:21 |   CoerciveRBReductor: RB projection ...
02:21 |   CoerciveRBReductor: Assembling error estimator ...
02:21 |   |   ResidualReductor: Estimating residual range ...
02:21 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 4 ...
02:21 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:21 |   |   |   |   gram_schmidt: Removing vector 15 of norm 4.63447143988e-17
02:21 |   |   |   |   gram_schmidt: Orthonormalizing vector 16 again
02:21 |   |   |   |   gram_schmidt: Orthonormalizing vector 17 again
02:21 |   |   |   |   gram_schmidt: Orthonormalizing vector 18 again
02:21 |   |   |   |   gram_schmidt: Orthonormalizing vector 19 again
02:21 |   |   ResidualReductor: Projecting residual operator ...
02:21 adaptive_greedy: Estimating errors ...
02:21 adaptive_greedy: Maximum error after 5 extensions: 0.0390730527357 (mu = {diffusion: [0.1, 0.55]})
02:21 adaptive_greedy: Maximum validation error: 0.0311068386114
02:21 adaptive_greedy: Validation error to training error ratio: 7.961e-01
02:21 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.55]} ...
02:21 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55]} ...
02:21 adaptive_greedy: Extending basis with solution snapshot ...
02:21 |   gram_schmidt: Orthonormalizing vector 5 again
      
02:21 adaptive_greedy: Reducing ...
02:21 |   CoerciveRBReductor: RB projection ...
02:21 |   CoerciveRBReductor: Assembling error estimator ...
02:21 |   |   ResidualReductor: Estimating residual range ...
02:21 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 5 ...
02:21 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:21 |   |   |   |   gram_schmidt: Removing vector 19 of norm 5.99289228299e-16
02:21 |   |   |   |   gram_schmidt: Orthonormalizing vector 20 again
02:21 |   |   |   |   gram_schmidt: Orthonormalizing vector 21 again
02:21 |   |   |   |   gram_schmidt: Orthonormalizing vector 22 again
02:21 |   |   |   |   gram_schmidt: Orthonormalizing vector 23 again
02:21 |   |   ResidualReductor: Projecting residual operator ...
02:21 adaptive_greedy: Estimating errors ...
02:21 adaptive_greedy: Maximum error after 6 extensions: 0.0326448815863 (mu = {diffusion: [1.0, 0.325]})
02:21 adaptive_greedy: Maximum validation error: 0.0307228183982
02:21 adaptive_greedy: Validation error to training error ratio: 9.411e-01
02:21 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.325]} ...
02:21 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.325]} ...
02:21 adaptive_greedy: Extending basis with solution snapshot ...
02:21 |   gram_schmidt: Orthonormalizing vector 6 again
      
02:21 adaptive_greedy: Reducing ...
02:21 |   CoerciveRBReductor: RB projection ...
02:21 |   CoerciveRBReductor: Assembling error estimator ...
02:21 |   |   ResidualReductor: Estimating residual range ...
02:21 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 6 ...
02:21 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:21 |   |   |   |   gram_schmidt: Removing vector 23 of norm 6.27573251231e-16
02:21 |   |   |   |   gram_schmidt: Orthonormalizing vector 24 again
02:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 25 again
02:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 26 again
02:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 27 again
02:22 |   |   ResidualReductor: Projecting residual operator ...
02:22 adaptive_greedy: Estimating errors ...
02:22 adaptive_greedy: Maximum error after 7 extensions: 0.00487591375065 (mu = {diffusion: [0.775, 0.1]})
02:22 adaptive_greedy: Maximum validation error: 0.00535771962555
02:22 adaptive_greedy: Validation error to training error ratio: 1.099e+00
02:22 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.775, 0.1]} ...
02:22 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.775, 0.1]} ...
02:22 adaptive_greedy: Extending basis with solution snapshot ...
02:22 |   gram_schmidt: Orthonormalizing vector 7 again
      
02:22 adaptive_greedy: Reducing ...
02:22 |   CoerciveRBReductor: RB projection ...
02:22 |   CoerciveRBReductor: Assembling error estimator ...
02:22 |   |   ResidualReductor: Estimating residual range ...
02:22 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 7 ...
02:22 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:22 |   |   |   |   gram_schmidt: Removing vector 27 of norm 2.66112049966e-14
02:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 28 again
02:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 29 again
02:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 30 again
02:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 31 again
02:22 |   |   ResidualReductor: Projecting residual operator ...
02:22 adaptive_greedy: Estimating errors ...
02:22 adaptive_greedy: Maximum error after 8 extensions: 0.00401631832072 (mu = {diffusion: [0.55, 0.325]})
02:22 adaptive_greedy: Maximum validation error: 0.00535717962277
02:22 adaptive_greedy: Validation error to training error ratio: 1.334e+00
02:22 |INFO2|adaptive_greedy: Overfitting detected. Computing element indicators ...
02:22 adaptive_greedy: Refining 1 elements: [0]
02:22 adaptive_greedy: New training set size: 28. New validation set size: 16
02:22 adaptive_greedy: Number of refinements: 5
      
02:22 adaptive_greedy: Estimating errors ...
02:22 adaptive_greedy: Maximum error after 8 extensions: 0.00535717962277 (mu = {diffusion: [0.325, 0.325]})
02:22 adaptive_greedy: Maximum validation error: 0.00796417862383
02:22 adaptive_greedy: Validation error to training error ratio: 1.487e+00
02:22 |INFO3|adaptive_greedy: Overfitting detected after refinement. Computing element indicators ...
02:22 adaptive_greedy: Refining 1 elements: [0]
02:22 adaptive_greedy: New training set size: 33. New validation set size: 19
02:22 adaptive_greedy: Number of refinements: 6
      
02:22 adaptive_greedy: Estimating errors ...
02:22 adaptive_greedy: Maximum error after 8 extensions: 0.00798632807208 (mu = {diffusion: [0.325, 0.2125]})
02:22 adaptive_greedy: Maximum validation error: 0.00970364122633
02:22 adaptive_greedy: Validation error to training error ratio: 1.215e+00
02:22 |INFO3|adaptive_greedy: Overfitting detected after refinement. Computing element indicators ...
02:22 adaptive_greedy: Refining 1 elements: [1]
02:22 adaptive_greedy: New training set size: 38. New validation set size: 22
02:22 adaptive_greedy: Number of refinements: 7
      
02:22 adaptive_greedy: Estimating errors ...
02:22 adaptive_greedy: Maximum error after 8 extensions: 0.0100699552517 (mu = {diffusion: [0.2125, 0.15625]})
02:22 adaptive_greedy: Maximum validation error: 0.00933775962084
02:22 adaptive_greedy: Validation error to training error ratio: 9.273e-01
02:22 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.2125, 0.15625]} ...
02:22 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.2125, 0.15625]} ...
02:22 adaptive_greedy: Extending basis with solution snapshot ...
02:22 |   gram_schmidt: Orthonormalizing vector 8 again
      
02:22 adaptive_greedy: Reducing ...
02:22 |   CoerciveRBReductor: RB projection ...
02:22 |   CoerciveRBReductor: Assembling error estimator ...
02:22 |   |   ResidualReductor: Estimating residual range ...
02:22 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 8 ...
02:22 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:22 |   |   |   |   gram_schmidt: Removing vector 31 of norm 2.16814095775e-14
02:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 32 again
02:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 33 again
02:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 34 again
02:23 |   |   |   |   gram_schmidt: Orthonormalizing vector 35 again
02:23 |   |   ResidualReductor: Projecting residual operator ...
02:23 adaptive_greedy: Estimating errors ...
02:23 adaptive_greedy: Maximum error after 9 extensions: 0.00243322288677 (mu = {diffusion: [0.1, 0.2125]})
02:23 adaptive_greedy: Maximum validation error: 0.00101078872453
02:23 adaptive_greedy: Validation error to training error ratio: 4.154e-01
02:23 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.2125]} ...
02:23 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.2125]} ...
02:23 adaptive_greedy: Extending basis with solution snapshot ...
02:23 |   gram_schmidt: Orthonormalizing vector 9 again
      
02:23 adaptive_greedy: Maximum number of 10 extensions reached.
02:23 adaptive_greedy: Reducing once more ...
02:23 |   CoerciveRBReductor: RB projection ...
02:23 |   CoerciveRBReductor: Assembling error estimator ...
02:23 |   |   ResidualReductor: Estimating residual range ...
02:23 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 9 ...
02:23 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:23 |   |   |   |   gram_schmidt: Orthonormalizing vector 36 again
02:23 |   |   |   |   gram_schmidt: Orthonormalizing vector 37 again
02:23 |   |   |   |   gram_schmidt: Orthonormalizing vector 38 again
02:23 |   |   |   |   gram_schmidt: Orthonormalizing vector 39 again
02:23 |   |   ResidualReductor: Projecting residual operator ...
02:23 adaptive_greedy: Greedy search took 3.86068892479 seconds
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args29]" time="11.3643801212"><system-out>Discretize ...
RB generation ...

Searching for maximum error on random snapshots ...
..........

*** RESULTS ***

Problem:
   number of blocks:                   2x2
   h:                                  sqrt(2)/100

Greedy basis generation:
   estimator disabled:                 False
   extension method:                   gram_schmidt
   product:                            h1
   prescribed basis size:              10
   actual basis size:                  10
   elapsed time:                       8.2869451046

Stochastic error estimation:
    number of samples:                  10
    maximum NumpyMatrixOperator-norm:   1.2298570e+00 (mu = {diffusion: [0.437086106963, 0.955642875769]})
    maximum NumpyMatrixOperator-error:  6.3882885e-04 (mu = {diffusion: [0.437086106963, 0.955642875769]})
    maximum estimated error:            1.5034873e-03 (mu = {diffusion: [0.152275250951, 0.879558531197]})
    minimum estimator effectivity:      1.6730841e-01 (mu = {diffusion: [0.118526044866, 0.972918866946]})
    maximum estimator effectivity:      8.2657601e-01 (mu = {diffusion: [0.641003510569, 0.737265320016]})
    maximum system matrix condition:    1.0020946e+01 (mu = {diffusion: [0.84919837672, 0.29110519961]})
    elapsed time:                       1.46846199036
</system-out><system-err>02:25 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:25 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:25 DiffusionOperatorP1: Determine global dofs ...
02:25 DiffusionOperatorP1: Boundary treatment ...
02:25 DiffusionOperatorP1: Assemble system matrix ...
02:25 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:25 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:25 DiffusionOperatorP1: Determine global dofs ...
02:25 DiffusionOperatorP1: Boundary treatment ...
02:25 DiffusionOperatorP1: Assemble system matrix ...
02:25 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:25 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:25 DiffusionOperatorP1: Determine global dofs ...
02:25 DiffusionOperatorP1: Boundary treatment ...
02:25 DiffusionOperatorP1: Assemble system matrix ...
02:25 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:25 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:25 DiffusionOperatorP1: Determine global dofs ...
02:25 DiffusionOperatorP1: Boundary treatment ...
02:25 DiffusionOperatorP1: Assemble system matrix ...
02:25 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:25 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:26 DiffusionOperatorP1: Determine global dofs ...
02:26 DiffusionOperatorP1: Boundary treatment ...
02:26 DiffusionOperatorP1: Assemble system matrix ...
02:26 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:26 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:26 DiffusionOperatorP1: Determine global dofs ...
02:26 DiffusionOperatorP1: Boundary treatment ...
02:26 DiffusionOperatorP1: Assemble system matrix ...
02:26 L2ProductP1: Integrate the products of the shape functions on each element
02:26 L2ProductP1: Determine global dofs ...
02:26 L2ProductP1: Boundary treatment ...
02:26 L2ProductP1: Assemble system matrix ...
02:26 L2ProductP1: Integrate the products of the shape functions on each element
02:26 L2ProductP1: Determine global dofs ...
02:26 L2ProductP1: Boundary treatment ...
02:26 L2ProductP1: Assemble system matrix ...
02:26 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:26 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:26 DiffusionOperatorP1: Determine global dofs ...
02:26 DiffusionOperatorP1: Boundary treatment ...
02:26 DiffusionOperatorP1: Assemble system matrix ...
02:26 adaptive_greedy: Training set size: 4. Validation set size: 1
02:26 adaptive_greedy: Reducing ...
02:26 |   CoerciveRBReductor: RB projection ...
02:26 |   CoerciveRBReductor: Assembling error estimator ...
02:26 |   |   ResidualReductor: Estimating residual range ...
02:26 |   |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
02:26 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:26 |   |   ResidualReductor: Projecting residual operator ...
02:26 adaptive_greedy: Estimating errors ...
02:26 adaptive_greedy: Maximum error after 0 extensions: 18.7457318215 (mu = {diffusion: [0.1, 0.1]})
02:26 adaptive_greedy: Maximum validation error: 0.619693613934
02:26 adaptive_greedy: Validation error to training error ratio: 3.306e-02
02:26 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.1]} ...
02:26 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1]} ...
02:27 adaptive_greedy: Extending basis with solution snapshot ...
      
02:27 adaptive_greedy: Reducing ...
02:27 |   CoerciveRBReductor: RB projection ...
02:27 |   CoerciveRBReductor: Assembling error estimator ...
02:27 |   |   ResidualReductor: Estimating residual range ...
02:27 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
02:27 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:27 |   |   |   |   gram_schmidt: Removing vector 1 of norm 0.0
02:27 |   |   |   |   gram_schmidt: Removing linear dependent vector 5
02:27 |   |   ResidualReductor: Projecting residual operator ...
02:27 adaptive_greedy: Estimating errors ...
02:27 adaptive_greedy: Maximum error after 1 extensions: 14.030259401 (mu = {diffusion: [1.0, 0.1]})
02:27 adaptive_greedy: Maximum validation error: 0.382818187893
02:27 adaptive_greedy: Validation error to training error ratio: 2.729e-02
02:27 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1]} ...
02:27 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1]} ...
02:27 adaptive_greedy: Extending basis with solution snapshot ...
      
02:27 adaptive_greedy: Reducing ...
02:27 |   CoerciveRBReductor: RB projection ...
02:27 |   CoerciveRBReductor: Assembling error estimator ...
02:27 |   |   ResidualReductor: Estimating residual range ...
02:27 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
02:27 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:27 |   |   |   |   gram_schmidt: Removing vector 4 of norm 3.09427801544e-18
02:27 |   |   |   |   gram_schmidt: Orthonormalizing vector 5 again
02:27 |   |   |   |   gram_schmidt: Orthonormalizing vector 7 again
02:27 |   |   |   |   gram_schmidt: Orthonormalizing vector 8 again
02:27 |   |   ResidualReductor: Projecting residual operator ...
02:27 adaptive_greedy: Estimating errors ...
02:27 adaptive_greedy: Maximum error after 2 extensions: 1.04105273543 (mu = {diffusion: [0.1, 1.0]})
02:27 adaptive_greedy: Maximum validation error: 0.185107038419
02:27 adaptive_greedy: Validation error to training error ratio: 1.778e-01
02:27 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0]} ...
02:27 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0]} ...
02:27 adaptive_greedy: Extending basis with solution snapshot ...
      
02:27 adaptive_greedy: Reducing ...
02:27 |   CoerciveRBReductor: RB projection ...
02:27 |   CoerciveRBReductor: Assembling error estimator ...
02:27 |   |   ResidualReductor: Estimating residual range ...
02:27 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
02:27 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:27 |   |   |   |   gram_schmidt: Removing vector 8 of norm 9.94561094677e-18
02:27 |   |   |   |   gram_schmidt: Orthonormalizing vector 10 again
02:27 |   |   |   |   gram_schmidt: Orthonormalizing vector 11 again
02:27 |   |   |   |   gram_schmidt: Removing linear dependent vector 12
02:27 |   |   ResidualReductor: Projecting residual operator ...
02:27 adaptive_greedy: Estimating errors ...
02:27 adaptive_greedy: Maximum error after 3 extensions: 0.0638355277164 (mu = {diffusion: [1.0, 1.0]})
02:27 adaptive_greedy: Maximum validation error: 0.179233062961
02:27 adaptive_greedy: Validation error to training error ratio: 2.808e+00
02:27 |INFO2|adaptive_greedy: Overfitting detected. Computing element indicators ...
02:27 adaptive_greedy: Refining 1 elements: [0]
02:28 adaptive_greedy: New training set size: 9. New validation set size: 4
02:28 adaptive_greedy: Number of refinements: 1
      
02:28 adaptive_greedy: Estimating errors ...
02:28 adaptive_greedy: Maximum error after 3 extensions: 1.04338737641 (mu = {diffusion: [0.55, 0.1]})
02:28 adaptive_greedy: Maximum validation error: 0.432695575375
02:28 adaptive_greedy: Validation error to training error ratio: 4.147e-01
02:28 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.55, 0.1]} ...
02:28 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1]} ...
02:28 adaptive_greedy: Extending basis with solution snapshot ...
02:28 |   gram_schmidt: Orthonormalizing vector 3 again
      
02:28 adaptive_greedy: Reducing ...
02:28 |   CoerciveRBReductor: RB projection ...
02:28 |   CoerciveRBReductor: Assembling error estimator ...
02:28 |   |   ResidualReductor: Estimating residual range ...
02:28 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 3 ...
02:28 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:28 |   |   |   |   gram_schmidt: Removing vector 11 of norm 1.25393810684e-16
02:28 |   |   |   |   gram_schmidt: Orthonormalizing vector 12 again
02:28 |   |   |   |   gram_schmidt: Orthonormalizing vector 14 again
02:28 |   |   |   |   gram_schmidt: Orthonormalizing vector 15 again
02:28 |   |   ResidualReductor: Projecting residual operator ...
02:28 adaptive_greedy: Estimating errors ...
02:28 adaptive_greedy: Maximum error after 4 extensions: 0.321549666353 (mu = {diffusion: [0.1, 0.55]})
02:28 adaptive_greedy: Maximum validation error: 0.411444119967
02:28 adaptive_greedy: Validation error to training error ratio: 1.280e+00
02:28 |INFO2|adaptive_greedy: Overfitting detected. Computing element indicators ...
02:28 adaptive_greedy: Refining 1 elements: [1]
02:29 adaptive_greedy: New training set size: 14. New validation set size: 7
02:29 adaptive_greedy: Number of refinements: 2
      
02:29 adaptive_greedy: Estimating errors ...
02:29 adaptive_greedy: Maximum error after 4 extensions: 0.41217282983 (mu = {diffusion: [1.0, 0.325]})
02:29 adaptive_greedy: Maximum validation error: 0.708260021093
02:29 adaptive_greedy: Validation error to training error ratio: 1.718e+00
02:29 |INFO3|adaptive_greedy: Overfitting detected after refinement. Computing element indicators ...
02:29 adaptive_greedy: Refining 1 elements: [2]
02:29 adaptive_greedy: New training set size: 19. New validation set size: 10
02:29 adaptive_greedy: Number of refinements: 3
      
02:29 adaptive_greedy: Estimating errors ...
02:29 adaptive_greedy: Maximum error after 4 extensions: 0.708503632729 (mu = {diffusion: [1.0, 0.2125]})
02:29 adaptive_greedy: Maximum validation error: 0.854171744757
02:29 adaptive_greedy: Validation error to training error ratio: 1.206e+00
02:29 |INFO3|adaptive_greedy: Overfitting detected after refinement. Computing element indicators ...
02:29 adaptive_greedy: Refining 1 elements: [3]
02:30 adaptive_greedy: New training set size: 24. New validation set size: 13
02:30 adaptive_greedy: Number of refinements: 4
      
02:30 adaptive_greedy: Estimating errors ...
02:30 adaptive_greedy: Maximum error after 4 extensions: 0.854268618214 (mu = {diffusion: [1.0, 0.15625]})
02:30 adaptive_greedy: Maximum validation error: 0.853958687552
02:30 adaptive_greedy: Validation error to training error ratio: 9.996e-01
02:30 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.15625]} ...
02:30 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.15625]} ...
02:30 adaptive_greedy: Extending basis with solution snapshot ...
      
02:30 adaptive_greedy: Reducing ...
02:30 |   CoerciveRBReductor: RB projection ...
02:30 |   CoerciveRBReductor: Assembling error estimator ...
02:30 |   |   ResidualReductor: Estimating residual range ...
02:30 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 4 ...
02:30 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:30 |   |   |   |   gram_schmidt: Removing vector 15 of norm 4.63447143988e-17
02:30 |   |   |   |   gram_schmidt: Orthonormalizing vector 16 again
02:30 |   |   |   |   gram_schmidt: Orthonormalizing vector 17 again
02:30 |   |   |   |   gram_schmidt: Orthonormalizing vector 18 again
02:30 |   |   |   |   gram_schmidt: Orthonormalizing vector 19 again
02:30 |   |   ResidualReductor: Projecting residual operator ...
02:30 adaptive_greedy: Estimating errors ...
02:30 adaptive_greedy: Maximum error after 5 extensions: 0.0390730527357 (mu = {diffusion: [0.1, 0.55]})
02:30 adaptive_greedy: Maximum validation error: 0.0311068386114
02:30 adaptive_greedy: Validation error to training error ratio: 7.961e-01
02:30 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.55]} ...
02:30 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55]} ...
02:30 adaptive_greedy: Extending basis with solution snapshot ...
02:30 |   gram_schmidt: Orthonormalizing vector 5 again
      
02:30 adaptive_greedy: Reducing ...
02:30 |   CoerciveRBReductor: RB projection ...
02:30 |   CoerciveRBReductor: Assembling error estimator ...
02:30 |   |   ResidualReductor: Estimating residual range ...
02:30 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 5 ...
02:30 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:30 |   |   |   |   gram_schmidt: Removing vector 19 of norm 5.99289228299e-16
02:30 |   |   |   |   gram_schmidt: Orthonormalizing vector 20 again
02:30 |   |   |   |   gram_schmidt: Orthonormalizing vector 21 again
02:31 |   |   |   |   gram_schmidt: Orthonormalizing vector 22 again
02:31 |   |   |   |   gram_schmidt: Orthonormalizing vector 23 again
02:31 |   |   ResidualReductor: Projecting residual operator ...
02:31 adaptive_greedy: Estimating errors ...
02:31 adaptive_greedy: Maximum error after 6 extensions: 0.0326448815863 (mu = {diffusion: [1.0, 0.325]})
02:31 adaptive_greedy: Maximum validation error: 0.0307228183982
02:31 adaptive_greedy: Validation error to training error ratio: 9.411e-01
02:31 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.325]} ...
02:31 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.325]} ...
02:31 adaptive_greedy: Extending basis with solution snapshot ...
02:31 |   gram_schmidt: Orthonormalizing vector 6 again
      
02:31 adaptive_greedy: Reducing ...
02:31 |   CoerciveRBReductor: RB projection ...
02:31 |   CoerciveRBReductor: Assembling error estimator ...
02:31 |   |   ResidualReductor: Estimating residual range ...
02:31 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 6 ...
02:31 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:31 |   |   |   |   gram_schmidt: Removing vector 23 of norm 6.27573251231e-16
02:31 |   |   |   |   gram_schmidt: Orthonormalizing vector 24 again
02:31 |   |   |   |   gram_schmidt: Orthonormalizing vector 25 again
02:31 |   |   |   |   gram_schmidt: Orthonormalizing vector 26 again
02:31 |   |   |   |   gram_schmidt: Orthonormalizing vector 27 again
02:31 |   |   ResidualReductor: Projecting residual operator ...
02:31 adaptive_greedy: Estimating errors ...
02:31 adaptive_greedy: Maximum error after 7 extensions: 0.00487591375065 (mu = {diffusion: [0.775, 0.1]})
02:31 adaptive_greedy: Maximum validation error: 0.00535771962555
02:31 adaptive_greedy: Validation error to training error ratio: 1.099e+00
02:31 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.775, 0.1]} ...
02:31 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.775, 0.1]} ...
02:31 adaptive_greedy: Extending basis with solution snapshot ...
02:31 |   gram_schmidt: Orthonormalizing vector 7 again
      
02:31 adaptive_greedy: Reducing ...
02:31 |   CoerciveRBReductor: RB projection ...
02:31 |   CoerciveRBReductor: Assembling error estimator ...
02:31 |   |   ResidualReductor: Estimating residual range ...
02:31 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 7 ...
02:31 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:31 |   |   |   |   gram_schmidt: Removing vector 27 of norm 2.66112049966e-14
02:31 |   |   |   |   gram_schmidt: Orthonormalizing vector 28 again
02:31 |   |   |   |   gram_schmidt: Orthonormalizing vector 29 again
02:31 |   |   |   |   gram_schmidt: Orthonormalizing vector 30 again
02:31 |   |   |   |   gram_schmidt: Orthonormalizing vector 31 again
02:31 |   |   ResidualReductor: Projecting residual operator ...
02:31 adaptive_greedy: Estimating errors ...
02:31 adaptive_greedy: Maximum error after 8 extensions: 0.00401631832072 (mu = {diffusion: [0.55, 0.325]})
02:31 adaptive_greedy: Maximum validation error: 0.00535717962277
02:31 adaptive_greedy: Validation error to training error ratio: 1.334e+00
02:31 |INFO2|adaptive_greedy: Overfitting detected. Computing element indicators ...
02:31 adaptive_greedy: Refining 1 elements: [0]
02:32 adaptive_greedy: New training set size: 28. New validation set size: 16
02:32 adaptive_greedy: Number of refinements: 5
      
02:32 adaptive_greedy: Estimating errors ...
02:32 adaptive_greedy: Maximum error after 8 extensions: 0.00535717962277 (mu = {diffusion: [0.325, 0.325]})
02:32 adaptive_greedy: Maximum validation error: 0.00796417862383
02:32 adaptive_greedy: Validation error to training error ratio: 1.487e+00
02:32 |INFO3|adaptive_greedy: Overfitting detected after refinement. Computing element indicators ...
02:32 adaptive_greedy: Refining 1 elements: [0]
02:33 adaptive_greedy: New training set size: 33. New validation set size: 19
02:33 adaptive_greedy: Number of refinements: 6
      
02:33 adaptive_greedy: Estimating errors ...
02:33 adaptive_greedy: Maximum error after 8 extensions: 0.00798632807208 (mu = {diffusion: [0.325, 0.2125]})
02:33 adaptive_greedy: Maximum validation error: 0.00970364122633
02:33 adaptive_greedy: Validation error to training error ratio: 1.215e+00
02:33 |INFO3|adaptive_greedy: Overfitting detected after refinement. Computing element indicators ...
02:33 adaptive_greedy: Refining 1 elements: [1]
02:34 adaptive_greedy: New training set size: 38. New validation set size: 22
02:34 adaptive_greedy: Number of refinements: 7
      
02:34 adaptive_greedy: Estimating errors ...
02:34 adaptive_greedy: Maximum error after 8 extensions: 0.0100699552517 (mu = {diffusion: [0.2125, 0.15625]})
02:34 adaptive_greedy: Maximum validation error: 0.00933775962084
02:34 adaptive_greedy: Validation error to training error ratio: 9.273e-01
02:34 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.2125, 0.15625]} ...
02:34 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.2125, 0.15625]} ...
02:34 adaptive_greedy: Extending basis with solution snapshot ...
02:34 |   gram_schmidt: Orthonormalizing vector 8 again
      
02:34 adaptive_greedy: Reducing ...
02:34 |   CoerciveRBReductor: RB projection ...
02:34 |   CoerciveRBReductor: Assembling error estimator ...
02:34 |   |   ResidualReductor: Estimating residual range ...
02:34 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 8 ...
02:34 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:34 |   |   |   |   gram_schmidt: Removing vector 31 of norm 2.16814095775e-14
02:34 |   |   |   |   gram_schmidt: Orthonormalizing vector 32 again
02:34 |   |   |   |   gram_schmidt: Orthonormalizing vector 33 again
02:34 |   |   |   |   gram_schmidt: Orthonormalizing vector 34 again
02:34 |   |   |   |   gram_schmidt: Orthonormalizing vector 35 again
02:34 |   |   ResidualReductor: Projecting residual operator ...
02:34 adaptive_greedy: Estimating errors ...
02:34 adaptive_greedy: Maximum error after 9 extensions: 0.00243322288677 (mu = {diffusion: [0.1, 0.2125]})
02:34 adaptive_greedy: Maximum validation error: 0.00101078872453
02:34 adaptive_greedy: Validation error to training error ratio: 4.154e-01
02:34 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.2125]} ...
02:34 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.2125]} ...
02:34 adaptive_greedy: Extending basis with solution snapshot ...
02:34 |   gram_schmidt: Orthonormalizing vector 9 again
      
02:34 adaptive_greedy: Maximum number of 10 extensions reached.
02:34 adaptive_greedy: Reducing once more ...
02:34 |   CoerciveRBReductor: RB projection ...
02:34 |   CoerciveRBReductor: Assembling error estimator ...
02:34 |   |   ResidualReductor: Estimating residual range ...
02:34 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 9 ...
02:34 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:34 |   |   |   |   gram_schmidt: Orthonormalizing vector 36 again
02:34 |   |   |   |   gram_schmidt: Orthonormalizing vector 37 again
02:34 |   |   |   |   gram_schmidt: Orthonormalizing vector 38 again
02:34 |   |   |   |   gram_schmidt: Orthonormalizing vector 39 again
02:34 |   |   ResidualReductor: Projecting residual operator ...
02:34 adaptive_greedy: Greedy search took 8.2869451046 seconds
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args30]" time="6.20746397972"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>..........
Stochastic error estimation:
    number of samples:                  10
    maximum NumpyMatrixOperator-norm:   6.2469480e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    maximum NumpyMatrixOperator-error:  6.9614742e-02 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    maximum estimated error:            3.0415820e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    minimum estimator effectivity:      2.2887675e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    maximum estimator effectivity:      7.5270522e-01 (mu = {diffusion: [0.918325039247, 0.464644598394, 0.784391923305, 0.526382538185]})
    maximum system matrix condition:    1.8797219e+06 (mu = {diffusion: [0.408493406469, 0.281403649734, 0.736591807092, 0.130059337922]})
    elapsed time:                       1.94542312622
</system-out><system-err>02:36 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:36 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:36 DiffusionOperatorP1: Determine global dofs ...
02:36 DiffusionOperatorP1: Boundary treatment ...
02:36 DiffusionOperatorP1: Assemble system matrix ...
02:36 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:36 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:36 DiffusionOperatorP1: Determine global dofs ...
02:36 DiffusionOperatorP1: Boundary treatment ...
02:36 DiffusionOperatorP1: Assemble system matrix ...
02:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:37 DiffusionOperatorP1: Determine global dofs ...
02:37 DiffusionOperatorP1: Boundary treatment ...
02:37 DiffusionOperatorP1: Assemble system matrix ...
02:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:37 DiffusionOperatorP1: Determine global dofs ...
02:37 DiffusionOperatorP1: Boundary treatment ...
02:37 DiffusionOperatorP1: Assemble system matrix ...
02:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:37 DiffusionOperatorP1: Determine global dofs ...
02:37 DiffusionOperatorP1: Boundary treatment ...
02:37 DiffusionOperatorP1: Assemble system matrix ...
02:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:37 DiffusionOperatorP1: Determine global dofs ...
02:37 DiffusionOperatorP1: Boundary treatment ...
02:37 DiffusionOperatorP1: Assemble system matrix ...
02:37 L2ProductP1: Integrate the products of the shape functions on each element
02:37 L2ProductP1: Determine global dofs ...
02:37 L2ProductP1: Boundary treatment ...
02:37 L2ProductP1: Assemble system matrix ...
02:37 L2ProductP1: Integrate the products of the shape functions on each element
02:37 L2ProductP1: Determine global dofs ...
02:37 L2ProductP1: Boundary treatment ...
02:37 L2ProductP1: Assemble system matrix ...
02:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:37 DiffusionOperatorP1: Determine global dofs ...
02:37 DiffusionOperatorP1: Boundary treatment ...
02:37 DiffusionOperatorP1: Assemble system matrix ...
02:37 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
02:38 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
02:38 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ...
02:38 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ...
02:38 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ...
02:38 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.65066760525, 0.225544474587, 0.362930183682, 0.429725658964]} ...
02:38 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.510462985795, 0.806658365254, 0.279706403943, 0.562810994572]} ...
02:38 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.633173111976, 0.141805371448, 0.646790366711, 0.253471711319]} ...
02:39 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.158546433687, 0.953996983528, 0.969068829767, 0.827557613305]} ...
02:39 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.374152392256, 0.187904902606, 0.715809723861, 0.496137244366]} ...
02:39 CoerciveRBReductor: RB projection ...
02:39 CoerciveRBReductor: Assembling error estimator ...
02:39 |   ResidualReductor: Estimating residual range ...
02:39 |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
02:39 |   |   estimate_image_hierarchical: Orthonormalizing ...
02:39 |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
02:39 |   |   estimate_image_hierarchical: Orthonormalizing ...
02:39 |   |   |   gram_schmidt: Removing vector 1 of norm 5.16466546028e-18
02:39 |   |   |   gram_schmidt: Removing linear dependent vector 5
02:39 |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
02:39 |   |   estimate_image_hierarchical: Orthonormalizing ...
02:39 |   |   |   gram_schmidt: Removing vector 4 of norm 0.0
02:39 |   |   |   gram_schmidt: Removing linear dependent vector 8
02:39 |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
02:39 |   |   estimate_image_hierarchical: Orthonormalizing ...
02:39 |   |   |   gram_schmidt: Removing vector 7 of norm 2.66651262782e-18
02:39 |   |   |   gram_schmidt: Orthonormalizing vector 9 again
02:39 |   |   |   gram_schmidt: Orthonormalizing vector 10 again
02:39 |   |   |   gram_schmidt: Removing linear dependent vector 11
02:39 |   |   estimate_image_hierarchical: Estimating image for basis vector 3 ...
02:39 |   |   estimate_image_hierarchical: Orthonormalizing ...
02:39 |   |   |   gram_schmidt: Removing vector 10 of norm 0.0
02:39 |   |   |   gram_schmidt: Orthonormalizing vector 11 again
02:39 |   |   |   gram_schmidt: Orthonormalizing vector 13 again
02:39 |   |   |   gram_schmidt: Removing linear dependent vector 14
02:39 |   |   estimate_image_hierarchical: Estimating image for basis vector 4 ...
02:39 |   |   estimate_image_hierarchical: Orthonormalizing ...
02:39 |   |   |   gram_schmidt: Removing vector 13 of norm 0.0
02:39 |   |   |   gram_schmidt: Orthonormalizing vector 14 again
02:39 |   |   |   gram_schmidt: Orthonormalizing vector 15 again
02:39 |   |   |   gram_schmidt: Orthonormalizing vector 16 again
02:39 |   |   |   gram_schmidt: Removing linear dependent vector 17
02:39 |   |   estimate_image_hierarchical: Estimating image for basis vector 5 ...
02:40 |   |   estimate_image_hierarchical: Orthonormalizing ...
02:40 |   |   |   gram_schmidt: Removing vector 16 of norm 0.0
02:40 |   |   |   gram_schmidt: Orthonormalizing vector 17 again
02:40 |   |   |   gram_schmidt: Orthonormalizing vector 18 again
02:40 |   |   |   gram_schmidt: Orthonormalizing vector 19 again
02:40 |   |   |   gram_schmidt: Removing linear dependent vector 20
02:40 |   |   estimate_image_hierarchical: Estimating image for basis vector 6 ...
02:40 |   |   estimate_image_hierarchical: Orthonormalizing ...
02:40 |   |   |   gram_schmidt: Removing vector 19 of norm 0.0
02:40 |   |   |   gram_schmidt: Orthonormalizing vector 20 again
02:40 |   |   |   gram_schmidt: Orthonormalizing vector 21 again
02:40 |   |   |   gram_schmidt: Orthonormalizing vector 22 again
02:40 |   |   |   gram_schmidt: Removing linear dependent vector 23
02:40 |   |   estimate_image_hierarchical: Estimating image for basis vector 7 ...
02:40 |   |   estimate_image_hierarchical: Orthonormalizing ...
02:40 |   |   |   gram_schmidt: Removing vector 22 of norm 0.0
02:40 |   |   |   gram_schmidt: Orthonormalizing vector 23 again
02:40 |   |   |   gram_schmidt: Orthonormalizing vector 24 again
02:40 |   |   |   gram_schmidt: Orthonormalizing vector 25 again
02:40 |   |   |   gram_schmidt: Removing linear dependent vector 26
02:40 |   |   estimate_image_hierarchical: Estimating image for basis vector 8 ...
02:40 |   |   estimate_image_hierarchical: Orthonormalizing ...
02:40 |   |   |   gram_schmidt: Removing vector 25 of norm 3.08282820705e-18
02:40 |   |   |   gram_schmidt: Orthonormalizing vector 26 again
02:40 |   |   |   gram_schmidt: Orthonormalizing vector 27 again
02:40 |   |   |   gram_schmidt: Orthonormalizing vector 28 again
02:40 |   |   |   gram_schmidt: Removing linear dependent vector 29
02:40 |   |   estimate_image_hierarchical: Estimating image for basis vector 9 ...
02:40 |   |   estimate_image_hierarchical: Orthonormalizing ...
02:40 |   |   |   gram_schmidt: Removing vector 28 of norm 0.0
02:40 |   |   |   gram_schmidt: Orthonormalizing vector 29 again
02:40 |   |   |   gram_schmidt: Orthonormalizing vector 30 again
02:40 |   |   |   gram_schmidt: Orthonormalizing vector 31 again
02:40 |   |   |   gram_schmidt: Removing linear dependent vector 32
02:40 |   ResidualReductor: Projecting residual operator ...
02:42 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]} ...
</system-err><system-out>..........
Stochastic error estimation:
    number of samples:                  10
    maximum NumpyMatrixOperator-norm:   6.2469480e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    maximum NumpyMatrixOperator-error:  6.9614742e-02 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    maximum estimated error:            3.0415820e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    minimum estimator effectivity:      2.2887675e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    maximum estimator effectivity:      7.5270522e-01 (mu = {diffusion: [0.918325039247, 0.464644598394, 0.784391923305, 0.526382538185]})
    maximum system matrix condition:    1.8797219e+06 (mu = {diffusion: [0.408493406469, 0.281403649734, 0.736591807092, 0.130059337922]})
    elapsed time:                       1.94542312622
</system-out><system-err>02:36 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:36 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:36 DiffusionOperatorP1: Determine global dofs ...
02:36 DiffusionOperatorP1: Boundary treatment ...
02:36 DiffusionOperatorP1: Assemble system matrix ...
02:36 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:36 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:36 DiffusionOperatorP1: Determine global dofs ...
02:36 DiffusionOperatorP1: Boundary treatment ...
02:36 DiffusionOperatorP1: Assemble system matrix ...
02:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:37 DiffusionOperatorP1: Determine global dofs ...
02:37 DiffusionOperatorP1: Boundary treatment ...
02:37 DiffusionOperatorP1: Assemble system matrix ...
02:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:37 DiffusionOperatorP1: Determine global dofs ...
02:37 DiffusionOperatorP1: Boundary treatment ...
02:37 DiffusionOperatorP1: Assemble system matrix ...
02:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:37 DiffusionOperatorP1: Determine global dofs ...
02:37 DiffusionOperatorP1: Boundary treatment ...
02:37 DiffusionOperatorP1: Assemble system matrix ...
02:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:37 DiffusionOperatorP1: Determine global dofs ...
02:37 DiffusionOperatorP1: Boundary treatment ...
02:37 DiffusionOperatorP1: Assemble system matrix ...
02:37 L2ProductP1: Integrate the products of the shape functions on each element
02:37 L2ProductP1: Determine global dofs ...
02:37 L2ProductP1: Boundary treatment ...
02:37 L2ProductP1: Assemble system matrix ...
02:37 L2ProductP1: Integrate the products of the shape functions on each element
02:37 L2ProductP1: Determine global dofs ...
02:37 L2ProductP1: Boundary treatment ...
02:37 L2ProductP1: Assemble system matrix ...
02:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:37 DiffusionOperatorP1: Determine global dofs ...
02:37 DiffusionOperatorP1: Boundary treatment ...
02:37 DiffusionOperatorP1: Assemble system matrix ...
02:37 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
02:38 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
02:38 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ...
02:38 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ...
02:38 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ...
02:38 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.65066760525, 0.225544474587, 0.362930183682, 0.429725658964]} ...
02:38 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.510462985795, 0.806658365254, 0.279706403943, 0.562810994572]} ...
02:38 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.633173111976, 0.141805371448, 0.646790366711, 0.253471711319]} ...
02:39 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.158546433687, 0.953996983528, 0.969068829767, 0.827557613305]} ...
02:39 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.374152392256, 0.187904902606, 0.715809723861, 0.496137244366]} ...
02:39 CoerciveRBReductor: RB projection ...
02:39 CoerciveRBReductor: Assembling error estimator ...
02:39 |   ResidualReductor: Estimating residual range ...
02:39 |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
02:39 |   |   estimate_image_hierarchical: Orthonormalizing ...
02:39 |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
02:39 |   |   estimate_image_hierarchical: Orthonormalizing ...
02:39 |   |   |   gram_schmidt: Removing vector 1 of norm 5.16466546028e-18
02:39 |   |   |   gram_schmidt: Removing linear dependent vector 5
02:39 |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
02:39 |   |   estimate_image_hierarchical: Orthonormalizing ...
02:39 |   |   |   gram_schmidt: Removing vector 4 of norm 0.0
02:39 |   |   |   gram_schmidt: Removing linear dependent vector 8
02:39 |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
02:39 |   |   estimate_image_hierarchical: Orthonormalizing ...
02:39 |   |   |   gram_schmidt: Removing vector 7 of norm 2.66651262782e-18
02:39 |   |   |   gram_schmidt: Orthonormalizing vector 9 again
02:39 |   |   |   gram_schmidt: Orthonormalizing vector 10 again
02:39 |   |   |   gram_schmidt: Removing linear dependent vector 11
02:39 |   |   estimate_image_hierarchical: Estimating image for basis vector 3 ...
02:39 |   |   estimate_image_hierarchical: Orthonormalizing ...
02:39 |   |   |   gram_schmidt: Removing vector 10 of norm 0.0
02:39 |   |   |   gram_schmidt: Orthonormalizing vector 11 again
02:39 |   |   |   gram_schmidt: Orthonormalizing vector 13 again
02:39 |   |   |   gram_schmidt: Removing linear dependent vector 14
02:39 |   |   estimate_image_hierarchical: Estimating image for basis vector 4 ...
02:39 |   |   estimate_image_hierarchical: Orthonormalizing ...
02:39 |   |   |   gram_schmidt: Removing vector 13 of norm 0.0
02:39 |   |   |   gram_schmidt: Orthonormalizing vector 14 again
02:39 |   |   |   gram_schmidt: Orthonormalizing vector 15 again
02:39 |   |   |   gram_schmidt: Orthonormalizing vector 16 again
02:39 |   |   |   gram_schmidt: Removing linear dependent vector 17
02:39 |   |   estimate_image_hierarchical: Estimating image for basis vector 5 ...
02:40 |   |   estimate_image_hierarchical: Orthonormalizing ...
02:40 |   |   |   gram_schmidt: Removing vector 16 of norm 0.0
02:40 |   |   |   gram_schmidt: Orthonormalizing vector 17 again
02:40 |   |   |   gram_schmidt: Orthonormalizing vector 18 again
02:40 |   |   |   gram_schmidt: Orthonormalizing vector 19 again
02:40 |   |   |   gram_schmidt: Removing linear dependent vector 20
02:40 |   |   estimate_image_hierarchical: Estimating image for basis vector 6 ...
02:40 |   |   estimate_image_hierarchical: Orthonormalizing ...
02:40 |   |   |   gram_schmidt: Removing vector 19 of norm 0.0
02:40 |   |   |   gram_schmidt: Orthonormalizing vector 20 again
02:40 |   |   |   gram_schmidt: Orthonormalizing vector 21 again
02:40 |   |   |   gram_schmidt: Orthonormalizing vector 22 again
02:40 |   |   |   gram_schmidt: Removing linear dependent vector 23
02:40 |   |   estimate_image_hierarchical: Estimating image for basis vector 7 ...
02:40 |   |   estimate_image_hierarchical: Orthonormalizing ...
02:40 |   |   |   gram_schmidt: Removing vector 22 of norm 0.0
02:40 |   |   |   gram_schmidt: Orthonormalizing vector 23 again
02:40 |   |   |   gram_schmidt: Orthonormalizing vector 24 again
02:40 |   |   |   gram_schmidt: Orthonormalizing vector 25 again
02:40 |   |   |   gram_schmidt: Removing linear dependent vector 26
02:40 |   |   estimate_image_hierarchical: Estimating image for basis vector 8 ...
02:40 |   |   estimate_image_hierarchical: Orthonormalizing ...
02:40 |   |   |   gram_schmidt: Removing vector 25 of norm 3.08282820705e-18
02:40 |   |   |   gram_schmidt: Orthonormalizing vector 26 again
02:40 |   |   |   gram_schmidt: Orthonormalizing vector 27 again
02:40 |   |   |   gram_schmidt: Orthonormalizing vector 28 again
02:40 |   |   |   gram_schmidt: Removing linear dependent vector 29
02:40 |   |   estimate_image_hierarchical: Estimating image for basis vector 9 ...
02:40 |   |   estimate_image_hierarchical: Orthonormalizing ...
02:40 |   |   |   gram_schmidt: Removing vector 28 of norm 0.0
02:40 |   |   |   gram_schmidt: Orthonormalizing vector 29 again
02:40 |   |   |   gram_schmidt: Orthonormalizing vector 30 again
02:40 |   |   |   gram_schmidt: Orthonormalizing vector 31 again
02:40 |   |   |   gram_schmidt: Removing linear dependent vector 32
02:40 |   ResidualReductor: Projecting residual operator ...
02:42 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args31]" time="0.00119304656982"><skipped message="skipped test due to missing fenics" type="pytest.skip">/src/src/pymortests/demos.py:107: &lt;py._xmlgen.raw object at 0x7f25eae5eb10&gt;</skipped></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args32]" time="0.000815153121948"><skipped message="skipped test due to missing ngsolve" type="pytest.skip">/src/src/pymortests/demos.py:107: &lt;py._xmlgen.raw object at 0x7f25db4a7950&gt;</skipped></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args33]" time="7.65262699127"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>...
Stochastic error estimation:
    number of samples:                  3
    maximum NumpyMatrixOperator-norm:   1.2292658e+02 (mu = {diffusion: [0.810954719993, 0.218701317605, 0.408493406469, 0.281403649734, 0.736591807092]})
    maximum NumpyMatrixOperator-error:  3.2708598e+01 (mu = {diffusion: [0.810954719993, 0.218701317605, 0.408493406469, 0.281403649734, 0.736591807092]})
    maximum estimated error:            6.6091448e+01 (mu = {diffusion: [0.810954719993, 0.218701317605, 0.408493406469, 0.281403649734, 0.736591807092]})
    minimum estimator effectivity:      4.6507537e-01 (mu = {diffusion: [0.823085236072, 0.574770066114, 0.207200318525, 0.675713299818, 0.181832736497]})
    maximum estimator effectivity:      6.2928399e-01 (mu = {diffusion: [0.399003112714, 0.484642852697, 0.598947231188, 0.66531387023, 0.727653649775]})
    maximum system matrix condition:    2.5969642e+00 (mu = {diffusion: [0.810954719993, 0.218701317605, 0.408493406469, 0.281403649734, 0.736591807092]})
    elapsed time:                       1.06804490089
</system-out><system-err>02:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:43 DiffusionOperatorP1: Determine global dofs ...
02:43 DiffusionOperatorP1: Boundary treatment ...
02:43 DiffusionOperatorP1: Assemble system matrix ...
02:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:43 DiffusionOperatorP1: Determine global dofs ...
02:43 DiffusionOperatorP1: Boundary treatment ...
02:43 DiffusionOperatorP1: Assemble system matrix ...
02:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:43 DiffusionOperatorP1: Determine global dofs ...
02:43 DiffusionOperatorP1: Boundary treatment ...
02:43 DiffusionOperatorP1: Assemble system matrix ...
02:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:44 DiffusionOperatorP1: Determine global dofs ...
02:44 DiffusionOperatorP1: Boundary treatment ...
02:44 DiffusionOperatorP1: Assemble system matrix ...
02:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:44 DiffusionOperatorP1: Determine global dofs ...
02:44 DiffusionOperatorP1: Boundary treatment ...
02:44 DiffusionOperatorP1: Assemble system matrix ...
02:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:44 DiffusionOperatorP1: Determine global dofs ...
02:44 DiffusionOperatorP1: Boundary treatment ...
02:44 DiffusionOperatorP1: Assemble system matrix ...
02:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:45 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:45 DiffusionOperatorP1: Determine global dofs ...
02:45 DiffusionOperatorP1: Boundary treatment ...
02:45 DiffusionOperatorP1: Assemble system matrix ...
02:45 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:45 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:45 DiffusionOperatorP1: Determine global dofs ...
02:45 DiffusionOperatorP1: Boundary treatment ...
02:45 DiffusionOperatorP1: Assemble system matrix ...
02:45 L2ProductP1: Integrate the products of the shape functions on each element
02:45 L2ProductP1: Determine global dofs ...
02:45 L2ProductP1: Boundary treatment ...
02:45 L2ProductP1: Assemble system matrix ...
02:45 L2ProductP1: Integrate the products of the shape functions on each element
02:45 L2ProductP1: Determine global dofs ...
02:45 L2ProductP1: Boundary treatment ...
02:45 L2ProductP1: Assemble system matrix ...
02:46 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:46 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:46 DiffusionOperatorP1: Determine global dofs ...
02:46 DiffusionOperatorP1: Boundary treatment ...
02:46 DiffusionOperatorP1: Assemble system matrix ...
02:46 adaptive_greedy: Training set size: 32. Validation set size: 1
02:46 adaptive_greedy: Reducing ...
02:46 |   CoerciveRBReductor: RB projection ...
02:46 |   CoerciveRBReductor: Assembling error estimator ...
02:46 |   |   ResidualReductor: Estimating residual range ...
02:46 |   |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
02:47 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:47 |   |   ResidualReductor: Projecting residual operator ...
02:47 adaptive_greedy: Estimating errors ...
02:47 adaptive_greedy: Maximum error after 0 extensions: 1051.94637502 (mu = {diffusion: [0.1, 0.1, 0.1, 0.1, 0.1]})
02:47 adaptive_greedy: Maximum validation error: 437.55115212
02:47 adaptive_greedy: Validation error to training error ratio: 4.159e-01
02:47 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.1, 0.1, 0.1, 0.1]} ...
02:47 |   StationaryDiscretization: Solving StationaryProblem_CG for {diffusion: [0.1, 0.1, 0.1, 0.1, 0.1]} ...
02:47 adaptive_greedy: Extending basis with solution snapshot ...
      
02:47 adaptive_greedy: Reducing ...
02:47 |   CoerciveRBReductor: RB projection ...
02:47 |   CoerciveRBReductor: Assembling error estimator ...
02:47 |   |   ResidualReductor: Estimating residual range ...
02:47 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
02:47 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:47 |   |   |   |   gram_schmidt: Removing vector 1 of norm 1.7672696347e-18
02:47 |   |   |   |   gram_schmidt: Orthonormalizing vector 7 again
02:47 |   |   ResidualReductor: Projecting residual operator ...
02:47 adaptive_greedy: Estimating errors ...
02:47 adaptive_greedy: Maximum error after 1 extensions: 635.51198212 (mu = {diffusion: [1.0, 1.0, 0.1, 1.0, 1.0]})
02:47 adaptive_greedy: Maximum validation error: 209.531131258
02:47 adaptive_greedy: Validation error to training error ratio: 3.297e-01
02:47 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 1.0, 0.1, 1.0, 1.0]} ...
02:47 |   StationaryDiscretization: Solving StationaryProblem_CG for {diffusion: [1.0, 1.0, 0.1, 1.0, 1.0]} ...
02:48 adaptive_greedy: Extending basis with solution snapshot ...
      
02:48 adaptive_greedy: Reducing ...
02:48 |   CoerciveRBReductor: RB projection ...
02:48 |   CoerciveRBReductor: Assembling error estimator ...
02:48 |   |   ResidualReductor: Estimating residual range ...
02:48 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
02:48 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:48 |   |   |   |   gram_schmidt: Removing vector 7 of norm 2.14803184834e-17
02:48 |   |   |   |   gram_schmidt: Orthonormalizing vector 13 again
02:48 |   |   ResidualReductor: Projecting residual operator ...
02:48 adaptive_greedy: Estimating errors ...
02:48 adaptive_greedy: Maximum error after 2 extensions: 368.82336734 (mu = {diffusion: [0.1, 1.0, 1.0, 0.1, 0.1]})
02:48 adaptive_greedy: Maximum validation error: 101.018446042
02:48 adaptive_greedy: Validation error to training error ratio: 2.739e-01
02:48 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 1.0, 0.1, 0.1]} ...
02:48 |   StationaryDiscretization: Solving StationaryProblem_CG for {diffusion: [0.1, 1.0, 1.0, 0.1, 0.1]} ...
02:48 adaptive_greedy: Extending basis with solution snapshot ...
      
02:48 adaptive_greedy: Maximum number of 3 extensions reached.
02:48 adaptive_greedy: Reducing once more ...
02:48 |   CoerciveRBReductor: RB projection ...
02:48 |   CoerciveRBReductor: Assembling error estimator ...
02:48 |   |   ResidualReductor: Estimating residual range ...
02:48 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
02:48 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:48 |   |   |   |   gram_schmidt: Removing vector 13 of norm 1.1169266549e-17
02:48 |   |   |   |   gram_schmidt: Orthonormalizing vector 16 again
02:48 |   |   |   |   gram_schmidt: Orthonormalizing vector 17 again
02:48 |   |   |   |   gram_schmidt: Orthonormalizing vector 19 again
02:48 |   |   ResidualReductor: Projecting residual operator ...
02:48 adaptive_greedy: Greedy search took 2.55131006241 seconds
02:50 StationaryDiscretization: Solving StationaryProblem_CG for {diffusion: [0.810954719993, 0.218701317605, 0.408493406469, 0.281403649734, 0.736591807092]} ...
</system-err><system-out>...
Stochastic error estimation:
    number of samples:                  3
    maximum NumpyMatrixOperator-norm:   1.2292658e+02 (mu = {diffusion: [0.810954719993, 0.218701317605, 0.408493406469, 0.281403649734, 0.736591807092]})
    maximum NumpyMatrixOperator-error:  3.2708598e+01 (mu = {diffusion: [0.810954719993, 0.218701317605, 0.408493406469, 0.281403649734, 0.736591807092]})
    maximum estimated error:            6.6091448e+01 (mu = {diffusion: [0.810954719993, 0.218701317605, 0.408493406469, 0.281403649734, 0.736591807092]})
    minimum estimator effectivity:      4.6507537e-01 (mu = {diffusion: [0.823085236072, 0.574770066114, 0.207200318525, 0.675713299818, 0.181832736497]})
    maximum estimator effectivity:      6.2928399e-01 (mu = {diffusion: [0.399003112714, 0.484642852697, 0.598947231188, 0.66531387023, 0.727653649775]})
    maximum system matrix condition:    2.5969642e+00 (mu = {diffusion: [0.810954719993, 0.218701317605, 0.408493406469, 0.281403649734, 0.736591807092]})
    elapsed time:                       1.06804490089
</system-out><system-err>02:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:43 DiffusionOperatorP1: Determine global dofs ...
02:43 DiffusionOperatorP1: Boundary treatment ...
02:43 DiffusionOperatorP1: Assemble system matrix ...
02:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:43 DiffusionOperatorP1: Determine global dofs ...
02:43 DiffusionOperatorP1: Boundary treatment ...
02:43 DiffusionOperatorP1: Assemble system matrix ...
02:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:43 DiffusionOperatorP1: Determine global dofs ...
02:43 DiffusionOperatorP1: Boundary treatment ...
02:43 DiffusionOperatorP1: Assemble system matrix ...
02:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:44 DiffusionOperatorP1: Determine global dofs ...
02:44 DiffusionOperatorP1: Boundary treatment ...
02:44 DiffusionOperatorP1: Assemble system matrix ...
02:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:44 DiffusionOperatorP1: Determine global dofs ...
02:44 DiffusionOperatorP1: Boundary treatment ...
02:44 DiffusionOperatorP1: Assemble system matrix ...
02:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:44 DiffusionOperatorP1: Determine global dofs ...
02:44 DiffusionOperatorP1: Boundary treatment ...
02:44 DiffusionOperatorP1: Assemble system matrix ...
02:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:45 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:45 DiffusionOperatorP1: Determine global dofs ...
02:45 DiffusionOperatorP1: Boundary treatment ...
02:45 DiffusionOperatorP1: Assemble system matrix ...
02:45 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:45 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:45 DiffusionOperatorP1: Determine global dofs ...
02:45 DiffusionOperatorP1: Boundary treatment ...
02:45 DiffusionOperatorP1: Assemble system matrix ...
02:45 L2ProductP1: Integrate the products of the shape functions on each element
02:45 L2ProductP1: Determine global dofs ...
02:45 L2ProductP1: Boundary treatment ...
02:45 L2ProductP1: Assemble system matrix ...
02:45 L2ProductP1: Integrate the products of the shape functions on each element
02:45 L2ProductP1: Determine global dofs ...
02:45 L2ProductP1: Boundary treatment ...
02:45 L2ProductP1: Assemble system matrix ...
02:46 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:46 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:46 DiffusionOperatorP1: Determine global dofs ...
02:46 DiffusionOperatorP1: Boundary treatment ...
02:46 DiffusionOperatorP1: Assemble system matrix ...
02:46 adaptive_greedy: Training set size: 32. Validation set size: 1
02:46 adaptive_greedy: Reducing ...
02:46 |   CoerciveRBReductor: RB projection ...
02:46 |   CoerciveRBReductor: Assembling error estimator ...
02:46 |   |   ResidualReductor: Estimating residual range ...
02:46 |   |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
02:47 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:47 |   |   ResidualReductor: Projecting residual operator ...
02:47 adaptive_greedy: Estimating errors ...
02:47 adaptive_greedy: Maximum error after 0 extensions: 1051.94637502 (mu = {diffusion: [0.1, 0.1, 0.1, 0.1, 0.1]})
02:47 adaptive_greedy: Maximum validation error: 437.55115212
02:47 adaptive_greedy: Validation error to training error ratio: 4.159e-01
02:47 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.1, 0.1, 0.1, 0.1]} ...
02:47 |   StationaryDiscretization: Solving StationaryProblem_CG for {diffusion: [0.1, 0.1, 0.1, 0.1, 0.1]} ...
02:47 adaptive_greedy: Extending basis with solution snapshot ...
      
02:47 adaptive_greedy: Reducing ...
02:47 |   CoerciveRBReductor: RB projection ...
02:47 |   CoerciveRBReductor: Assembling error estimator ...
02:47 |   |   ResidualReductor: Estimating residual range ...
02:47 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
02:47 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:47 |   |   |   |   gram_schmidt: Removing vector 1 of norm 1.7672696347e-18
02:47 |   |   |   |   gram_schmidt: Orthonormalizing vector 7 again
02:47 |   |   ResidualReductor: Projecting residual operator ...
02:47 adaptive_greedy: Estimating errors ...
02:47 adaptive_greedy: Maximum error after 1 extensions: 635.51198212 (mu = {diffusion: [1.0, 1.0, 0.1, 1.0, 1.0]})
02:47 adaptive_greedy: Maximum validation error: 209.531131258
02:47 adaptive_greedy: Validation error to training error ratio: 3.297e-01
02:47 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 1.0, 0.1, 1.0, 1.0]} ...
02:47 |   StationaryDiscretization: Solving StationaryProblem_CG for {diffusion: [1.0, 1.0, 0.1, 1.0, 1.0]} ...
02:48 adaptive_greedy: Extending basis with solution snapshot ...
      
02:48 adaptive_greedy: Reducing ...
02:48 |   CoerciveRBReductor: RB projection ...
02:48 |   CoerciveRBReductor: Assembling error estimator ...
02:48 |   |   ResidualReductor: Estimating residual range ...
02:48 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
02:48 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:48 |   |   |   |   gram_schmidt: Removing vector 7 of norm 2.14803184834e-17
02:48 |   |   |   |   gram_schmidt: Orthonormalizing vector 13 again
02:48 |   |   ResidualReductor: Projecting residual operator ...
02:48 adaptive_greedy: Estimating errors ...
02:48 adaptive_greedy: Maximum error after 2 extensions: 368.82336734 (mu = {diffusion: [0.1, 1.0, 1.0, 0.1, 0.1]})
02:48 adaptive_greedy: Maximum validation error: 101.018446042
02:48 adaptive_greedy: Validation error to training error ratio: 2.739e-01
02:48 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 1.0, 0.1, 0.1]} ...
02:48 |   StationaryDiscretization: Solving StationaryProblem_CG for {diffusion: [0.1, 1.0, 1.0, 0.1, 0.1]} ...
02:48 adaptive_greedy: Extending basis with solution snapshot ...
      
02:48 adaptive_greedy: Maximum number of 3 extensions reached.
02:48 adaptive_greedy: Reducing once more ...
02:48 |   CoerciveRBReductor: RB projection ...
02:48 |   CoerciveRBReductor: Assembling error estimator ...
02:48 |   |   ResidualReductor: Estimating residual range ...
02:48 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
02:48 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:48 |   |   |   |   gram_schmidt: Removing vector 13 of norm 1.1169266549e-17
02:48 |   |   |   |   gram_schmidt: Orthonormalizing vector 16 again
02:48 |   |   |   |   gram_schmidt: Orthonormalizing vector 17 again
02:48 |   |   |   |   gram_schmidt: Orthonormalizing vector 19 again
02:48 |   |   ResidualReductor: Projecting residual operator ...
02:48 adaptive_greedy: Greedy search took 2.55131006241 seconds
02:50 StationaryDiscretization: Solving StationaryProblem_CG for {diffusion: [0.810954719993, 0.218701317605, 0.408493406469, 0.281403649734, 0.736591807092]} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args34]" time="0.00784587860107"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args35]" time="3.48571896553"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>Setup Problem ...
Discretize ...
Rect-Grid on domain [0,2] x [0,1]
x0-intervals: 120, x1-intervals: 60
faces: 7200, edges: 14400, vertices: 7200
The parameter type is {exponent: ()}
Showing some EI errors
Solving for exponent = 
1.37454011885 ... 
Error: 0.457906578962
Solving for exponent = 
1.95071430641 ... 
Error: 0.404518342354
</system-out><system-err>02:50 interpolate_operators: Computing operator evaluations on solution snapshots ...
02:50 |   InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.0} ...
02:51 |   InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 2.0} ...
02:52 interpolate_operators: Performing EI-Greedy:
02:52 |   ei_greedy: Generating Interpolation Data ...
02:52 |   ei_greedy: Maximum interpolation error with 0 interpolation DOFs: 5.80294851805
02:52 |   ei_greedy: Maximum interpolation error with 1 interpolation DOFs: 8.41221578973
02:52 |   ei_greedy: Maximum interpolation error with 2 interpolation DOFs: 8.68949849502
02:52 |   ei_greedy: Maximum interpolation error with 3 interpolation DOFs: 7.74844459618
02:52 |   ei_greedy: Maximum interpolation error with 4 interpolation DOFs: 7.48390000135
02:52 |   ei_greedy: Maximum number of interpolation DOFs reached. Stopping extension loop.
02:52 |   ei_greedy: Final maximum interpolation error with 5 interpolation DOFs: 7.02472776663
02:52 |   ei_greedy: Interpolation matrix is not lower triangular with maximum error of 1.10928578378e-16
02:53 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.37454011885} ...
02:53 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV_ei for {exponent: 1.37454011885} ...
02:53 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.95071430641} ...
02:53 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV_ei for {exponent: 1.95071430641} ...
</system-err><system-out>Setup Problem ...
Discretize ...
Rect-Grid on domain [0,2] x [0,1]
x0-intervals: 120, x1-intervals: 60
faces: 7200, edges: 14400, vertices: 7200
The parameter type is {exponent: ()}
Showing some EI errors
Solving for exponent = 
1.37454011885 ... 
Error: 0.457906578962
Solving for exponent = 
1.95071430641 ... 
Error: 0.404518342354
</system-out><system-err>02:50 interpolate_operators: Computing operator evaluations on solution snapshots ...
02:50 |   InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.0} ...
02:51 |   InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 2.0} ...
02:52 interpolate_operators: Performing EI-Greedy:
02:52 |   ei_greedy: Generating Interpolation Data ...
02:52 |   ei_greedy: Maximum interpolation error with 0 interpolation DOFs: 5.80294851805
02:52 |   ei_greedy: Maximum interpolation error with 1 interpolation DOFs: 8.41221578973
02:52 |   ei_greedy: Maximum interpolation error with 2 interpolation DOFs: 8.68949849502
02:52 |   ei_greedy: Maximum interpolation error with 3 interpolation DOFs: 7.74844459618
02:52 |   ei_greedy: Maximum interpolation error with 4 interpolation DOFs: 7.48390000135
02:52 |   ei_greedy: Maximum number of interpolation DOFs reached. Stopping extension loop.
02:52 |   ei_greedy: Final maximum interpolation error with 5 interpolation DOFs: 7.02472776663
02:52 |   ei_greedy: Interpolation matrix is not lower triangular with maximum error of 1.10928578378e-16
02:53 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.37454011885} ...
02:53 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV_ei for {exponent: 1.37454011885} ...
02:53 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.95071430641} ...
02:53 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV_ei for {exponent: 1.95071430641} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args36]" time="5.97075581551"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>.
Stochastic error estimation:
    number of samples:              1
    maximum l^2-h^1-norm:           2.3767735e+00 (mu = {top: 80.5393759679})
    maximum l^2-h^1-error:          1.6838318e-01 (mu = {top: 80.5393759679})
    maximum estimated error:        1.0706969e+01 (mu = {top: 80.5393759679})
    minimum estimator effectivity:  1.5726503e-02 (mu = {top: 80.5393759679})
    maximum estimator effectivity:  1.5726503e-02 (mu = {top: 80.5393759679})
    elapsed time:                   1.34241485596
</system-out><system-err>02:54 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:54 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:54 DiffusionOperatorP1: Determine global dofs ...
02:54 DiffusionOperatorP1: Boundary treatment ...
02:54 DiffusionOperatorP1: Assemble system matrix ...
02:54 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:54 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:54 DiffusionOperatorP1: Determine global dofs ...
02:54 DiffusionOperatorP1: Boundary treatment ...
02:54 DiffusionOperatorP1: Assemble system matrix ...
02:54 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:54 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:54 DiffusionOperatorP1: Determine global dofs ...
02:54 DiffusionOperatorP1: Boundary treatment ...
02:54 DiffusionOperatorP1: Assemble system matrix ...
02:54 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:54 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:54 DiffusionOperatorP1: Determine global dofs ...
02:54 DiffusionOperatorP1: Boundary treatment ...
02:54 DiffusionOperatorP1: Assemble system matrix ...
02:54 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:54 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:54 DiffusionOperatorP1: Determine global dofs ...
02:54 DiffusionOperatorP1: Boundary treatment ...
02:54 DiffusionOperatorP1: Assemble system matrix ...
02:55 L2ProductP1: Integrate the products of the shape functions on each element
02:55 L2ProductP1: Determine global dofs ...
02:55 L2ProductP1: Boundary treatment ...
02:55 L2ProductP1: Assemble system matrix ...
02:55 L2ProductP1: Integrate the products of the shape functions on each element
02:55 L2ProductP1: Determine global dofs ...
02:55 L2ProductP1: Boundary treatment ...
02:55 L2ProductP1: Assemble system matrix ...
02:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:55 DiffusionOperatorP1: Determine global dofs ...
02:55 DiffusionOperatorP1: Boundary treatment ...
02:55 DiffusionOperatorP1: Assemble system matrix ...
02:55 greedy: Started greedy search on 2 samples
02:55 greedy: Reducing ...
02:55 |   ParabolicRBReductor: RB projection ...
02:55 |   ParabolicRBReductor: Assembling error estimator ...
02:55 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
02:55 |   |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
02:55 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:55 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
02:55 |   |   ResidualReductor: Estimating residual range ...
02:55 |   |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
02:55 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:55 |   |   ResidualReductor: Projecting residual operator ...
02:55 greedy: Estimating errors ...
02:55 greedy: Maximum error after 0 extensions: 103.003131752 (mu = {top: 1.0})
02:55 greedy: Computing solution snapshot for mu = {top: 1.0} ...
02:55 |   InstationaryDiscretization: Solving instationary_StationaryProblem_CG for {top: 1.0} ...
02:56 greedy: Extending basis with solution snapshot ...
02:56 |   pod: Computing Gramian (101 vectors) ...
02:56 |   pod: Computing eigenvalue decomposition ...
02:56 |   pod: Computing left-singular vectors (1 vectors) ...
02:56 |   pod: Checking orthonormality ...
      
02:56 greedy: Reducing ...
02:56 |   ParabolicRBReductor: RB projection ...
02:56 |   ParabolicRBReductor: Assembling error estimator ...
02:56 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
02:56 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
02:56 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:56 |   |   |   |   gram_schmidt: Removing vector 1 of norm 0.0
02:56 |   |   |   |   gram_schmidt: Orthonormalizing vector 3 again
02:57 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
02:57 |   |   ResidualReductor: Estimating residual range ...
02:57 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
02:57 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:57 |   |   ResidualReductor: Projecting residual operator ...
02:57 greedy: Estimating errors ...
02:57 greedy: Maximum error after 1 extensions: 148.967071292 (mu = {top: 100.0})
02:57 greedy: Computing solution snapshot for mu = {top: 100.0} ...
02:57 |   InstationaryDiscretization: Solving instationary_StationaryProblem_CG for {top: 100.0} ...
02:58 greedy: Extending basis with solution snapshot ...
02:58 |   pod: Computing Gramian (101 vectors) ...
02:58 |   pod: Computing eigenvalue decomposition ...
02:58 |   pod: Computing left-singular vectors (1 vectors) ...
02:58 |   pod: Checking orthonormality ...
      
02:58 greedy: Reducing ...
02:58 |   ParabolicRBReductor: RB projection ...
02:58 |   ParabolicRBReductor: Assembling error estimator ...
02:58 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
02:58 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
02:58 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:58 |   |   |   |   gram_schmidt: Removing vector 5 of norm 0.0
02:58 |   |   |   |   gram_schmidt: Orthonormalizing vector 6 again
02:58 |   |   |   |   gram_schmidt: Orthonormalizing vector 7 again
02:58 |   |   |   |   gram_schmidt: Orthonormalizing vector 8 again
02:58 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
02:58 |   |   ResidualReductor: Estimating residual range ...
02:58 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
02:58 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:58 |   |   |   |   gram_schmidt: Orthonormalizing vector 2 again
02:58 |   |   ResidualReductor: Projecting residual operator ...
02:58 greedy: Estimating errors ...
02:58 greedy: Maximum error after 2 extensions: 149.304054442 (mu = {top: 100.0})
02:58 greedy: Computing solution snapshot for mu = {top: 100.0} ...
02:58 greedy: Extending basis with solution snapshot ...
02:58 |   pod: Computing Gramian (101 vectors) ...
02:58 |   pod: Computing eigenvalue decomposition ...
02:58 |   pod: Computing left-singular vectors (1 vectors) ...
02:58 |   pod: Checking orthonormality ...
      
02:58 greedy: Maximum number of 3 extensions reached.
02:58 greedy: Reducing once more ...
02:58 |   ParabolicRBReductor: RB projection ...
02:58 |   ParabolicRBReductor: Assembling error estimator ...
02:58 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
02:58 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
02:58 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:58 |   |   |   |   gram_schmidt: Removing vector 9 of norm 0.0
02:58 |   |   |   |   gram_schmidt: Orthonormalizing vector 10 again
02:58 |   |   |   |   gram_schmidt: Orthonormalizing vector 11 again
02:58 |   |   |   |   gram_schmidt: Orthonormalizing vector 12 again
02:58 |   |   |   |   gram_schmidt: Orthonormalizing vector 13 again
02:58 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
02:58 |   |   ResidualReductor: Estimating residual range ...
02:58 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
02:58 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:58 |   |   |   |   gram_schmidt: Orthonormalizing vector 3 again
02:58 |   |   ResidualReductor: Projecting residual operator ...
02:58 greedy: Greedy search took 3.06013798714 seconds
</system-err><system-out>.
Stochastic error estimation:
    number of samples:              1
    maximum l^2-h^1-norm:           2.3767735e+00 (mu = {top: 80.5393759679})
    maximum l^2-h^1-error:          1.6838318e-01 (mu = {top: 80.5393759679})
    maximum estimated error:        1.0706969e+01 (mu = {top: 80.5393759679})
    minimum estimator effectivity:  1.5726503e-02 (mu = {top: 80.5393759679})
    maximum estimator effectivity:  1.5726503e-02 (mu = {top: 80.5393759679})
    elapsed time:                   1.34241485596
</system-out><system-err>02:54 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:54 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:54 DiffusionOperatorP1: Determine global dofs ...
02:54 DiffusionOperatorP1: Boundary treatment ...
02:54 DiffusionOperatorP1: Assemble system matrix ...
02:54 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:54 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:54 DiffusionOperatorP1: Determine global dofs ...
02:54 DiffusionOperatorP1: Boundary treatment ...
02:54 DiffusionOperatorP1: Assemble system matrix ...
02:54 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:54 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:54 DiffusionOperatorP1: Determine global dofs ...
02:54 DiffusionOperatorP1: Boundary treatment ...
02:54 DiffusionOperatorP1: Assemble system matrix ...
02:54 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:54 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:54 DiffusionOperatorP1: Determine global dofs ...
02:54 DiffusionOperatorP1: Boundary treatment ...
02:54 DiffusionOperatorP1: Assemble system matrix ...
02:54 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:54 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:54 DiffusionOperatorP1: Determine global dofs ...
02:54 DiffusionOperatorP1: Boundary treatment ...
02:54 DiffusionOperatorP1: Assemble system matrix ...
02:55 L2ProductP1: Integrate the products of the shape functions on each element
02:55 L2ProductP1: Determine global dofs ...
02:55 L2ProductP1: Boundary treatment ...
02:55 L2ProductP1: Assemble system matrix ...
02:55 L2ProductP1: Integrate the products of the shape functions on each element
02:55 L2ProductP1: Determine global dofs ...
02:55 L2ProductP1: Boundary treatment ...
02:55 L2ProductP1: Assemble system matrix ...
02:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
02:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
02:55 DiffusionOperatorP1: Determine global dofs ...
02:55 DiffusionOperatorP1: Boundary treatment ...
02:55 DiffusionOperatorP1: Assemble system matrix ...
02:55 greedy: Started greedy search on 2 samples
02:55 greedy: Reducing ...
02:55 |   ParabolicRBReductor: RB projection ...
02:55 |   ParabolicRBReductor: Assembling error estimator ...
02:55 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
02:55 |   |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
02:55 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:55 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
02:55 |   |   ResidualReductor: Estimating residual range ...
02:55 |   |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
02:55 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:55 |   |   ResidualReductor: Projecting residual operator ...
02:55 greedy: Estimating errors ...
02:55 greedy: Maximum error after 0 extensions: 103.003131752 (mu = {top: 1.0})
02:55 greedy: Computing solution snapshot for mu = {top: 1.0} ...
02:55 |   InstationaryDiscretization: Solving instationary_StationaryProblem_CG for {top: 1.0} ...
02:56 greedy: Extending basis with solution snapshot ...
02:56 |   pod: Computing Gramian (101 vectors) ...
02:56 |   pod: Computing eigenvalue decomposition ...
02:56 |   pod: Computing left-singular vectors (1 vectors) ...
02:56 |   pod: Checking orthonormality ...
      
02:56 greedy: Reducing ...
02:56 |   ParabolicRBReductor: RB projection ...
02:56 |   ParabolicRBReductor: Assembling error estimator ...
02:56 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
02:56 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
02:56 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:56 |   |   |   |   gram_schmidt: Removing vector 1 of norm 0.0
02:56 |   |   |   |   gram_schmidt: Orthonormalizing vector 3 again
02:57 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
02:57 |   |   ResidualReductor: Estimating residual range ...
02:57 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
02:57 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:57 |   |   ResidualReductor: Projecting residual operator ...
02:57 greedy: Estimating errors ...
02:57 greedy: Maximum error after 1 extensions: 148.967071292 (mu = {top: 100.0})
02:57 greedy: Computing solution snapshot for mu = {top: 100.0} ...
02:57 |   InstationaryDiscretization: Solving instationary_StationaryProblem_CG for {top: 100.0} ...
02:58 greedy: Extending basis with solution snapshot ...
02:58 |   pod: Computing Gramian (101 vectors) ...
02:58 |   pod: Computing eigenvalue decomposition ...
02:58 |   pod: Computing left-singular vectors (1 vectors) ...
02:58 |   pod: Checking orthonormality ...
      
02:58 greedy: Reducing ...
02:58 |   ParabolicRBReductor: RB projection ...
02:58 |   ParabolicRBReductor: Assembling error estimator ...
02:58 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
02:58 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
02:58 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:58 |   |   |   |   gram_schmidt: Removing vector 5 of norm 0.0
02:58 |   |   |   |   gram_schmidt: Orthonormalizing vector 6 again
02:58 |   |   |   |   gram_schmidt: Orthonormalizing vector 7 again
02:58 |   |   |   |   gram_schmidt: Orthonormalizing vector 8 again
02:58 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
02:58 |   |   ResidualReductor: Estimating residual range ...
02:58 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
02:58 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:58 |   |   |   |   gram_schmidt: Orthonormalizing vector 2 again
02:58 |   |   ResidualReductor: Projecting residual operator ...
02:58 greedy: Estimating errors ...
02:58 greedy: Maximum error after 2 extensions: 149.304054442 (mu = {top: 100.0})
02:58 greedy: Computing solution snapshot for mu = {top: 100.0} ...
02:58 greedy: Extending basis with solution snapshot ...
02:58 |   pod: Computing Gramian (101 vectors) ...
02:58 |   pod: Computing eigenvalue decomposition ...
02:58 |   pod: Computing left-singular vectors (1 vectors) ...
02:58 |   pod: Checking orthonormality ...
      
02:58 greedy: Maximum number of 3 extensions reached.
02:58 greedy: Reducing once more ...
02:58 |   ParabolicRBReductor: RB projection ...
02:58 |   ParabolicRBReductor: Assembling error estimator ...
02:58 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
02:58 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
02:58 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:58 |   |   |   |   gram_schmidt: Removing vector 9 of norm 0.0
02:58 |   |   |   |   gram_schmidt: Orthonormalizing vector 10 again
02:58 |   |   |   |   gram_schmidt: Orthonormalizing vector 11 again
02:58 |   |   |   |   gram_schmidt: Orthonormalizing vector 12 again
02:58 |   |   |   |   gram_schmidt: Orthonormalizing vector 13 again
02:58 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
02:58 |   |   ResidualReductor: Estimating residual range ...
02:58 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
02:58 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
02:58 |   |   |   |   gram_schmidt: Orthonormalizing vector 3 again
02:58 |   |   ResidualReductor: Projecting residual operator ...
02:58 greedy: Greedy search took 3.06013798714 seconds
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args37]" time="2.65854716301"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>.
Stochastic error estimation:
    number of samples:              1
    maximum l^2-h^1-norm:           2.3767735e+00 (mu = {top: 80.5393759679})
    maximum l^2-h^1-error:          1.8442008e-01 (mu = {top: 80.5393759679})
    maximum estimated error:        1.3391689e+01 (mu = {top: 80.5393759679})
    minimum estimator effectivity:  1.3771233e-02 (mu = {top: 80.5393759679})
    maximum estimator effectivity:  1.3771233e-02 (mu = {top: 80.5393759679})
    elapsed time:                   0.368143081665
</system-out><system-err>03:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:00 DiffusionOperatorP1: Determine global dofs ...
03:00 DiffusionOperatorP1: Boundary treatment ...
03:00 DiffusionOperatorP1: Assemble system matrix ...
03:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:00 DiffusionOperatorP1: Determine global dofs ...
03:00 DiffusionOperatorP1: Boundary treatment ...
03:00 DiffusionOperatorP1: Assemble system matrix ...
03:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:00 DiffusionOperatorP1: Determine global dofs ...
03:00 DiffusionOperatorP1: Boundary treatment ...
03:00 DiffusionOperatorP1: Assemble system matrix ...
03:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:00 DiffusionOperatorP1: Determine global dofs ...
03:00 DiffusionOperatorP1: Boundary treatment ...
03:00 DiffusionOperatorP1: Assemble system matrix ...
03:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:00 DiffusionOperatorP1: Determine global dofs ...
03:00 DiffusionOperatorP1: Boundary treatment ...
03:00 DiffusionOperatorP1: Assemble system matrix ...
03:01 L2ProductP1: Integrate the products of the shape functions on each element
03:01 L2ProductP1: Determine global dofs ...
03:01 L2ProductP1: Boundary treatment ...
03:01 L2ProductP1: Assemble system matrix ...
03:01 L2ProductP1: Integrate the products of the shape functions on each element
03:01 L2ProductP1: Determine global dofs ...
03:01 L2ProductP1: Boundary treatment ...
03:01 L2ProductP1: Assemble system matrix ...
03:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:01 DiffusionOperatorP1: Determine global dofs ...
03:01 DiffusionOperatorP1: Boundary treatment ...
03:01 DiffusionOperatorP1: Assemble system matrix ...
03:01 pod: Computing Gramian (202 vectors) ...
03:01 pod: Computing eigenvalue decomposition ...
03:01 pod: Computing left-singular vectors (3 vectors) ...
03:01 pod: Re-orthonormalizing POD modes ...
03:01 pod: Checking orthonormality ...
03:01 ParabolicRBReductor: RB projection ...
03:01 ParabolicRBReductor: Assembling error estimator ...
03:01 |   ImplicitEulerResidualReductor: Estimating residual range ...
03:01 |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
03:01 |   |   estimate_image_hierarchical: Orthonormalizing ...
03:01 |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
03:01 |   |   estimate_image_hierarchical: Orthonormalizing ...
03:01 |   |   |   gram_schmidt: Removing vector 1 of norm 0.0
03:02 |   |   |   gram_schmidt: Orthonormalizing vector 3 again
03:02 |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
03:02 |   |   estimate_image_hierarchical: Orthonormalizing ...
03:02 |   |   |   gram_schmidt: Removing vector 5 of norm 0.0
03:02 |   |   |   gram_schmidt: Orthonormalizing vector 7 again
03:02 |   |   |   gram_schmidt: Orthonormalizing vector 8 again
03:02 |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
03:02 |   |   estimate_image_hierarchical: Orthonormalizing ...
03:02 |   |   |   gram_schmidt: Removing vector 9 of norm 0.0
03:02 |   |   |   gram_schmidt: Orthonormalizing vector 10 again
03:02 |   |   |   gram_schmidt: Orthonormalizing vector 11 again
03:02 |   |   |   gram_schmidt: Orthonormalizing vector 12 again
03:02 |   |   |   gram_schmidt: Orthonormalizing vector 13 again
03:02 |   ImplicitEulerResidualReductor: Projecting residual operator ...
03:02 |   ResidualReductor: Estimating residual range ...
03:02 |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
03:02 |   |   estimate_image_hierarchical: Orthonormalizing ...
03:02 |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
03:02 |   |   estimate_image_hierarchical: Orthonormalizing ...
03:02 |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
03:02 |   |   estimate_image_hierarchical: Orthonormalizing ...
03:02 |   |   |   gram_schmidt: Orthonormalizing vector 2 again
03:02 |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
03:02 |   |   estimate_image_hierarchical: Orthonormalizing ...
03:02 |   |   |   gram_schmidt: Orthonormalizing vector 3 again
03:02 |   ResidualReductor: Projecting residual operator ...
</system-err><system-out>.
Stochastic error estimation:
    number of samples:              1
    maximum l^2-h^1-norm:           2.3767735e+00 (mu = {top: 80.5393759679})
    maximum l^2-h^1-error:          1.8442008e-01 (mu = {top: 80.5393759679})
    maximum estimated error:        1.3391689e+01 (mu = {top: 80.5393759679})
    minimum estimator effectivity:  1.3771233e-02 (mu = {top: 80.5393759679})
    maximum estimator effectivity:  1.3771233e-02 (mu = {top: 80.5393759679})
    elapsed time:                   0.368143081665
</system-out><system-err>03:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:00 DiffusionOperatorP1: Determine global dofs ...
03:00 DiffusionOperatorP1: Boundary treatment ...
03:00 DiffusionOperatorP1: Assemble system matrix ...
03:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:00 DiffusionOperatorP1: Determine global dofs ...
03:00 DiffusionOperatorP1: Boundary treatment ...
03:00 DiffusionOperatorP1: Assemble system matrix ...
03:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:00 DiffusionOperatorP1: Determine global dofs ...
03:00 DiffusionOperatorP1: Boundary treatment ...
03:00 DiffusionOperatorP1: Assemble system matrix ...
03:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:00 DiffusionOperatorP1: Determine global dofs ...
03:00 DiffusionOperatorP1: Boundary treatment ...
03:00 DiffusionOperatorP1: Assemble system matrix ...
03:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:00 DiffusionOperatorP1: Determine global dofs ...
03:00 DiffusionOperatorP1: Boundary treatment ...
03:00 DiffusionOperatorP1: Assemble system matrix ...
03:01 L2ProductP1: Integrate the products of the shape functions on each element
03:01 L2ProductP1: Determine global dofs ...
03:01 L2ProductP1: Boundary treatment ...
03:01 L2ProductP1: Assemble system matrix ...
03:01 L2ProductP1: Integrate the products of the shape functions on each element
03:01 L2ProductP1: Determine global dofs ...
03:01 L2ProductP1: Boundary treatment ...
03:01 L2ProductP1: Assemble system matrix ...
03:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:01 DiffusionOperatorP1: Determine global dofs ...
03:01 DiffusionOperatorP1: Boundary treatment ...
03:01 DiffusionOperatorP1: Assemble system matrix ...
03:01 pod: Computing Gramian (202 vectors) ...
03:01 pod: Computing eigenvalue decomposition ...
03:01 pod: Computing left-singular vectors (3 vectors) ...
03:01 pod: Re-orthonormalizing POD modes ...
03:01 pod: Checking orthonormality ...
03:01 ParabolicRBReductor: RB projection ...
03:01 ParabolicRBReductor: Assembling error estimator ...
03:01 |   ImplicitEulerResidualReductor: Estimating residual range ...
03:01 |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
03:01 |   |   estimate_image_hierarchical: Orthonormalizing ...
03:01 |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
03:01 |   |   estimate_image_hierarchical: Orthonormalizing ...
03:01 |   |   |   gram_schmidt: Removing vector 1 of norm 0.0
03:02 |   |   |   gram_schmidt: Orthonormalizing vector 3 again
03:02 |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
03:02 |   |   estimate_image_hierarchical: Orthonormalizing ...
03:02 |   |   |   gram_schmidt: Removing vector 5 of norm 0.0
03:02 |   |   |   gram_schmidt: Orthonormalizing vector 7 again
03:02 |   |   |   gram_schmidt: Orthonormalizing vector 8 again
03:02 |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
03:02 |   |   estimate_image_hierarchical: Orthonormalizing ...
03:02 |   |   |   gram_schmidt: Removing vector 9 of norm 0.0
03:02 |   |   |   gram_schmidt: Orthonormalizing vector 10 again
03:02 |   |   |   gram_schmidt: Orthonormalizing vector 11 again
03:02 |   |   |   gram_schmidt: Orthonormalizing vector 12 again
03:02 |   |   |   gram_schmidt: Orthonormalizing vector 13 again
03:02 |   ImplicitEulerResidualReductor: Projecting residual operator ...
03:02 |   ResidualReductor: Estimating residual range ...
03:02 |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
03:02 |   |   estimate_image_hierarchical: Orthonormalizing ...
03:02 |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
03:02 |   |   estimate_image_hierarchical: Orthonormalizing ...
03:02 |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
03:02 |   |   estimate_image_hierarchical: Orthonormalizing ...
03:02 |   |   |   gram_schmidt: Orthonormalizing vector 2 again
03:02 |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
03:02 |   |   estimate_image_hierarchical: Orthonormalizing ...
03:02 |   |   |   gram_schmidt: Orthonormalizing vector 3 again
03:02 |   ResidualReductor: Projecting residual operator ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="153" name="test_demos[demo_args38]" time="0.00125312805176"><skipped message="skipped test due to missing fenics" type="pytest.skip">/src/src/pymortests/demos.py:107: &lt;py._xmlgen.raw object at 0x7f25daa19410&gt;</skipped></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="159" name="test_analyze_pickle1" time="6.57215189934"><system-out>Discretize ...
RB generation ...

Writing reduced discretization to file /tmp/tmp0K6YV9/data_reduced ...
Writing detailed discretization and reductor to file /tmp/tmp0K6YV9/data_detailed ...

Searching for maximum error on random snapshots ...
..........

*** RESULTS ***

pyMOR discretization:
   number of blocks: 2x2
   grid intervals:   100
   ListVectorArray:  False

Greedy basis generation:
   size of training set:   16
   error estimator used:   True
   extension method:       gram_schmidt
   prescribed basis size:  10
   actual basis size:      10
   elapsed time:           3.29875421524

Stochastic error estimation:
    number of samples:                  10
    maximum NumpyMatrixOperator-norm:   6.2469480e-01 (mu = {diffusion: [0.181832736497, 0.399003112714, 0.484642852697, 0.598947231188]})
    maximum NumpyMatrixOperator-error:  6.8663974e-03 (mu = {diffusion: [0.181832736497, 0.399003112714, 0.484642852697, 0.598947231188]})
    maximum NumpyMatrixOperator-norm:   1.2572252e-01 (mu = {diffusion: [0.181832736497, 0.399003112714, 0.484642852697, 0.598947231188]})
    maximum NumpyMatrixOperator-error:  3.3135756e-04 (mu = {diffusion: [0.181832736497, 0.399003112714, 0.484642852697, 0.598947231188]})
    maximum estimated error:            1.4835413e-02 (mu = {diffusion: [0.181832736497, 0.399003112714, 0.484642852697, 0.598947231188]})
    minimum estimator effectivity:      1.6712364e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    maximum estimator effectivity:      6.9248010e-01 (mu = {diffusion: [0.918325039247, 0.464644598394, 0.784391923305, 0.526382538185]})
    maximum system matrix condition:    8.2782185e+00 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    elapsed time:                       1.44589591026
Loading reduced discretization ...
Solving reduced for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ... done
Solving reduced for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ... done
Solving reduced for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ... done
Solving reduced for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ... done
Solving reduced for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ... done
Solving reduced for {diffusion: [0.65066760525, 0.225544474587, 0.362930183682, 0.429725658964]} ... done
Solving reduced for {diffusion: [0.510462985795, 0.806658365254, 0.279706403943, 0.562810994572]} ... done
Solving reduced for {diffusion: [0.633173111976, 0.141805371448, 0.646790366711, 0.253471711319]} ... done
Solving reduced for {diffusion: [0.158546433687, 0.953996983528, 0.969068829767, 0.827557613305]} ... done
Solving reduced for {diffusion: [0.374152392256, 0.187904902606, 0.715809723861, 0.496137244366]} ... done

Estimating error for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ... done
Estimating error for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ... done
Estimating error for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ... done
Estimating error for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ... done
Estimating error for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ... done
Estimating error for {diffusion: [0.65066760525, 0.225544474587, 0.362930183682, 0.429725658964]} ... done
Estimating error for {diffusion: [0.510462985795, 0.806658365254, 0.279706403943, 0.562810994572]} ... done
Estimating error for {diffusion: [0.633173111976, 0.141805371448, 0.646790366711, 0.253471711319]} ... done
Estimating error for {diffusion: [0.158546433687, 0.953996983528, 0.969068829767, 0.827557613305]} ... done
Estimating error for {diffusion: [0.374152392256, 0.187904902606, 0.715809723861, 0.496137244366]} ... done
</system-out><system-err>03:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:03 DiffusionOperatorP1: Determine global dofs ...
03:03 DiffusionOperatorP1: Boundary treatment ...
03:03 DiffusionOperatorP1: Assemble system matrix ...
03:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:03 DiffusionOperatorP1: Determine global dofs ...
03:03 DiffusionOperatorP1: Boundary treatment ...
03:03 DiffusionOperatorP1: Assemble system matrix ...
03:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:03 DiffusionOperatorP1: Determine global dofs ...
03:03 DiffusionOperatorP1: Boundary treatment ...
03:03 DiffusionOperatorP1: Assemble system matrix ...
03:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:03 DiffusionOperatorP1: Determine global dofs ...
03:03 DiffusionOperatorP1: Boundary treatment ...
03:03 DiffusionOperatorP1: Assemble system matrix ...
03:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:03 DiffusionOperatorP1: Determine global dofs ...
03:03 DiffusionOperatorP1: Boundary treatment ...
03:03 DiffusionOperatorP1: Assemble system matrix ...
03:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:03 DiffusionOperatorP1: Determine global dofs ...
03:03 DiffusionOperatorP1: Boundary treatment ...
03:03 DiffusionOperatorP1: Assemble system matrix ...
03:03 L2ProductP1: Integrate the products of the shape functions on each element
03:03 L2ProductP1: Determine global dofs ...
03:03 L2ProductP1: Boundary treatment ...
03:03 L2ProductP1: Assemble system matrix ...
03:03 L2ProductP1: Integrate the products of the shape functions on each element
03:04 L2ProductP1: Determine global dofs ...
03:04 L2ProductP1: Boundary treatment ...
03:04 L2ProductP1: Assemble system matrix ...
03:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:04 DiffusionOperatorP1: Determine global dofs ...
03:04 DiffusionOperatorP1: Boundary treatment ...
03:04 DiffusionOperatorP1: Assemble system matrix ...
03:04 greedy: Started greedy search on 16 samples
03:04 greedy: Reducing ...
03:04 |   CoerciveRBReductor: RB projection ...
03:04 |   CoerciveRBReductor: Assembling error estimator ...
03:04 |   |   ResidualReductor: Estimating residual range ...
03:04 |   |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
03:04 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:04 |   |   ResidualReductor: Projecting residual operator ...
03:04 greedy: Estimating errors ...
03:04 greedy: Maximum error after 0 extensions: 1.87457318215 (mu = {diffusion: [0.1, 0.1, 0.1, 0.1]})
03:04 greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.1, 0.1, 0.1]} ...
03:04 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.1, 0.1]} ...
03:04 greedy: Extending basis with solution snapshot ...
      
03:04 greedy: Reducing ...
03:04 |   CoerciveRBReductor: RB projection ...
03:04 |   CoerciveRBReductor: Assembling error estimator ...
03:04 |   |   ResidualReductor: Estimating residual range ...
03:04 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
03:04 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:04 |   |   |   |   gram_schmidt: Removing vector 1 of norm 0.0
03:04 |   |   |   |   gram_schmidt: Removing linear dependent vector 5
03:04 |   |   ResidualReductor: Projecting residual operator ...
03:04 greedy: Estimating errors ...
03:04 greedy: Maximum error after 1 extensions: 1.33811391464 (mu = {diffusion: [0.1, 0.1, 0.1, 1.0]})
03:04 greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.1, 0.1, 1.0]} ...
03:04 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.1, 1.0]} ...
03:04 greedy: Extending basis with solution snapshot ...
      
03:04 greedy: Reducing ...
03:04 |   CoerciveRBReductor: RB projection ...
03:04 |   CoerciveRBReductor: Assembling error estimator ...
03:04 |   |   ResidualReductor: Estimating residual range ...
03:04 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
03:04 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:04 |   |   |   |   gram_schmidt: Removing vector 4 of norm 5.12939122542e-18
03:04 |   |   |   |   gram_schmidt: Orthonormalizing vector 8 again
03:04 |   |   ResidualReductor: Projecting residual operator ...
03:04 greedy: Estimating errors ...
03:04 greedy: Maximum error after 2 extensions: 1.25686364725 (mu = {diffusion: [0.1, 1.0, 0.1, 0.1]})
03:04 greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 0.1, 0.1]} ...
03:04 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.1, 0.1]} ...
03:05 greedy: Extending basis with solution snapshot ...
      
03:05 greedy: Reducing ...
03:05 |   CoerciveRBReductor: RB projection ...
03:05 |   CoerciveRBReductor: Assembling error estimator ...
03:05 |   |   ResidualReductor: Estimating residual range ...
03:05 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
03:05 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:05 |   |   |   |   gram_schmidt: Removing vector 8 of norm 6.70392869889e-18
03:05 |   |   |   |   gram_schmidt: Removing linear dependent vector 11
03:05 |   |   |   |   gram_schmidt: Removing linear dependent vector 12
03:05 |   |   ResidualReductor: Projecting residual operator ...
03:05 greedy: Estimating errors ...
03:05 greedy: Maximum error after 3 extensions: 1.21164585976 (mu = {diffusion: [0.1, 1.0, 0.1, 1.0]})
03:05 greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 0.1, 1.0]} ...
03:05 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.1, 1.0]} ...
03:05 greedy: Extending basis with solution snapshot ...
      
03:05 greedy: Reducing ...
03:05 |   CoerciveRBReductor: RB projection ...
03:05 |   CoerciveRBReductor: Assembling error estimator ...
03:05 |   |   ResidualReductor: Estimating residual range ...
03:05 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 3 ...
03:05 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:05 |   |   |   |   gram_schmidt: Removing vector 10 of norm 2.05701825966e-17
03:05 |   |   |   |   gram_schmidt: Orthonormalizing vector 12 again
03:05 |   |   |   |   gram_schmidt: Orthonormalizing vector 13 again
03:05 |   |   |   |   gram_schmidt: Removing linear dependent vector 14
03:05 |   |   ResidualReductor: Projecting residual operator ...
03:05 greedy: Estimating errors ...
03:05 greedy: Maximum error after 4 extensions: 0.810666824023 (mu = {diffusion: [1.0, 0.1, 0.1, 0.1]})
03:05 greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 0.1, 0.1]} ...
03:05 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.1, 0.1]} ...
03:05 greedy: Extending basis with solution snapshot ...
      
03:05 greedy: Reducing ...
03:05 |   CoerciveRBReductor: RB projection ...
03:05 |   CoerciveRBReductor: Assembling error estimator ...
03:05 |   |   ResidualReductor: Estimating residual range ...
03:05 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 4 ...
03:05 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:05 |   |   |   |   gram_schmidt: Removing vector 13 of norm 8.12177779512e-18
03:05 |   |   |   |   gram_schmidt: Removing linear dependent vector 15
03:05 |   |   |   |   gram_schmidt: Removing linear dependent vector 17
03:05 |   |   ResidualReductor: Projecting residual operator ...
03:05 greedy: Estimating errors ...
03:05 greedy: Maximum error after 5 extensions: 0.945236144361 (mu = {diffusion: [1.0, 0.1, 1.0, 0.1]})
03:05 greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 1.0, 0.1]} ...
03:05 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 1.0, 0.1]} ...
03:05 greedy: Extending basis with solution snapshot ...
      
03:05 greedy: Reducing ...
03:05 |   CoerciveRBReductor: RB projection ...
03:05 |   CoerciveRBReductor: Assembling error estimator ...
03:05 |   |   ResidualReductor: Estimating residual range ...
03:05 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 5 ...
03:06 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:06 |   |   |   |   gram_schmidt: Removing vector 15 of norm 5.72504129153e-18
03:06 |   |   |   |   gram_schmidt: Removing linear dependent vector 16
03:06 |   |   |   |   gram_schmidt: Removing linear dependent vector 17
03:06 |   |   |   |   gram_schmidt: Removing linear dependent vector 18
03:06 |   |   |   |   gram_schmidt: Orthonormalizing vector 19 again
03:06 |   |   ResidualReductor: Projecting residual operator ...
03:06 greedy: Estimating errors ...
03:06 greedy: Maximum error after 6 extensions: 0.744411529945 (mu = {diffusion: [1.0, 0.1, 0.1, 1.0]})
03:06 greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 0.1, 1.0]} ...
03:06 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.1, 1.0]} ...
03:06 greedy: Extending basis with solution snapshot ...
      
03:06 greedy: Reducing ...
03:06 |   CoerciveRBReductor: RB projection ...
03:06 |   CoerciveRBReductor: Assembling error estimator ...
03:06 |   |   ResidualReductor: Estimating residual range ...
03:06 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 6 ...
03:06 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:06 |   |   |   |   gram_schmidt: Removing vector 16 of norm 1.63054269844e-17
03:06 |   |   |   |   gram_schmidt: Orthonormalizing vector 17 again
03:06 |   |   |   |   gram_schmidt: Removing linear dependent vector 18
03:06 |   |   |   |   gram_schmidt: Removing linear dependent vector 19
03:06 |   |   |   |   gram_schmidt: Orthonormalizing vector 20 again
03:06 |   |   ResidualReductor: Projecting residual operator ...
03:06 greedy: Estimating errors ...
03:06 greedy: Maximum error after 7 extensions: 0.658623198628 (mu = {diffusion: [0.1, 1.0, 1.0, 0.1]})
03:06 greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 1.0, 0.1]} ...
03:06 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 1.0, 0.1]} ...
03:06 greedy: Extending basis with solution snapshot ...
      
03:06 greedy: Reducing ...
03:06 |   CoerciveRBReductor: RB projection ...
03:06 |   CoerciveRBReductor: Assembling error estimator ...
03:06 |   |   ResidualReductor: Estimating residual range ...
03:06 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 7 ...
03:06 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:06 |   |   |   |   gram_schmidt: Removing vector 18 of norm 2.207125561e-17
03:06 |   |   |   |   gram_schmidt: Removing linear dependent vector 19
03:06 |   |   |   |   gram_schmidt: Removing linear dependent vector 20
03:06 |   |   |   |   gram_schmidt: Orthonormalizing vector 21 again
03:06 |   |   |   |   gram_schmidt: Removing linear dependent vector 22
03:06 |   |   ResidualReductor: Projecting residual operator ...
03:06 greedy: Estimating errors ...
03:06 greedy: Maximum error after 8 extensions: 0.601851045213 (mu = {diffusion: [1.0, 0.1, 1.0, 1.0]})
03:06 greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 1.0, 1.0]} ...
03:06 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 1.0, 1.0]} ...
03:06 greedy: Extending basis with solution snapshot ...
      
03:06 greedy: Reducing ...
03:06 |   CoerciveRBReductor: RB projection ...
03:06 |   CoerciveRBReductor: Assembling error estimator ...
03:06 |   |   ResidualReductor: Estimating residual range ...
03:06 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 8 ...
03:06 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:06 |   |   |   |   gram_schmidt: Removing vector 19 of norm 3.065336727e-17
03:07 |   |   |   |   gram_schmidt: Orthonormalizing vector 20 again
03:07 |   |   |   |   gram_schmidt: Orthonormalizing vector 21 again
03:07 |   |   |   |   gram_schmidt: Orthonormalizing vector 22 again
03:07 |   |   |   |   gram_schmidt: Orthonormalizing vector 23 again
03:07 |   |   ResidualReductor: Projecting residual operator ...
03:07 greedy: Estimating errors ...
03:07 greedy: Maximum error after 9 extensions: 0.397415815023 (mu = {diffusion: [1.0, 1.0, 1.0, 0.1]})
03:07 greedy: Computing solution snapshot for mu = {diffusion: [1.0, 1.0, 1.0, 0.1]} ...
03:07 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 1.0, 0.1]} ...
03:07 greedy: Extending basis with solution snapshot ...
      
03:07 greedy: Maximum number of 10 extensions reached.
03:07 greedy: Reducing once more ...
03:07 |   CoerciveRBReductor: RB projection ...
03:07 |   CoerciveRBReductor: Assembling error estimator ...
03:07 |   |   ResidualReductor: Estimating residual range ...
03:07 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 9 ...
03:07 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:07 |   |   |   |   gram_schmidt: Removing vector 23 of norm 1.19934432999e-16
03:07 |   |   |   |   gram_schmidt: Orthonormalizing vector 24 again
03:07 |   |   |   |   gram_schmidt: Orthonormalizing vector 25 again
03:07 |   |   |   |   gram_schmidt: Orthonormalizing vector 26 again
03:07 |   |   |   |   gram_schmidt: Orthonormalizing vector 27 again
03:07 |   |   ResidualReductor: Projecting residual operator ...
03:07 greedy: Greedy search took 3.29875421524 seconds
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="169" name="test_analyze_pickle2" time="8.07839632034"><system-out>Discretize ...
RB generation ...

Writing reduced discretization to file /tmp/tmpmyncOy/data_reduced ...
Writing detailed discretization and reductor to file /tmp/tmpmyncOy/data_detailed ...

Searching for maximum error on random snapshots ...
..........

*** RESULTS ***

pyMOR discretization:
   number of blocks: 2x2
   grid intervals:   100
   ListVectorArray:  False

Greedy basis generation:
   size of training set:   16
   error estimator used:   True
   extension method:       gram_schmidt
   prescribed basis size:  10
   actual basis size:      10
   elapsed time:           3.30378699303

Stochastic error estimation:
    number of samples:                  10
    maximum NumpyMatrixOperator-norm:   6.2469480e-01 (mu = {diffusion: [0.181832736497, 0.399003112714, 0.484642852697, 0.598947231188]})
    maximum NumpyMatrixOperator-error:  6.8663974e-03 (mu = {diffusion: [0.181832736497, 0.399003112714, 0.484642852697, 0.598947231188]})
    maximum NumpyMatrixOperator-norm:   1.2572252e-01 (mu = {diffusion: [0.181832736497, 0.399003112714, 0.484642852697, 0.598947231188]})
    maximum NumpyMatrixOperator-error:  3.3135756e-04 (mu = {diffusion: [0.181832736497, 0.399003112714, 0.484642852697, 0.598947231188]})
    maximum estimated error:            1.4835413e-02 (mu = {diffusion: [0.181832736497, 0.399003112714, 0.484642852697, 0.598947231188]})
    minimum estimator effectivity:      1.6712364e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    maximum estimator effectivity:      6.9248010e-01 (mu = {diffusion: [0.918325039247, 0.464644598394, 0.784391923305, 0.526382538185]})
    maximum system matrix condition:    8.2782185e+00 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    elapsed time:                       1.44839811325
Loading reduced discretization ...
Solving reduced for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ... done
Solving reduced for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ... done
Solving reduced for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ... done
Solving reduced for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ... done
Solving reduced for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ... done
Solving reduced for {diffusion: [0.65066760525, 0.225544474587, 0.362930183682, 0.429725658964]} ... done
Solving reduced for {diffusion: [0.510462985795, 0.806658365254, 0.279706403943, 0.562810994572]} ... done
Solving reduced for {diffusion: [0.633173111976, 0.141805371448, 0.646790366711, 0.253471711319]} ... done
Solving reduced for {diffusion: [0.158546433687, 0.953996983528, 0.969068829767, 0.827557613305]} ... done
Solving reduced for {diffusion: [0.374152392256, 0.187904902606, 0.715809723861, 0.496137244366]} ... done

Estimating error for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ... done
Estimating error for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ... done
Estimating error for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ... done
Estimating error for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ... done
Estimating error for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ... done
Estimating error for {diffusion: [0.65066760525, 0.225544474587, 0.362930183682, 0.429725658964]} ... done
Estimating error for {diffusion: [0.510462985795, 0.806658365254, 0.279706403943, 0.562810994572]} ... done
Estimating error for {diffusion: [0.633173111976, 0.141805371448, 0.646790366711, 0.253471711319]} ... done
Estimating error for {diffusion: [0.158546433687, 0.953996983528, 0.969068829767, 0.827557613305]} ... done
Estimating error for {diffusion: [0.374152392256, 0.187904902606, 0.715809723861, 0.496137244366]} ... done
Loading high-dimensional data ...
Calculating error for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ... 
done
Calculating error for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ... 
done
Calculating error for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ... 
done
Calculating error for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ... 
done
Calculating error for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ... 
done
Calculating error for {diffusion: [0.65066760525, 0.225544474587, 0.362930183682, 0.429725658964]} ... 
done
Calculating error for {diffusion: [0.510462985795, 0.806658365254, 0.279706403943, 0.562810994572]} ... 
done
Calculating error for {diffusion: [0.633173111976, 0.141805371448, 0.646790366711, 0.253471711319]} ... 
done
Calculating error for {diffusion: [0.158546433687, 0.953996983528, 0.969068829767, 0.827557613305]} ... 
done
Calculating error for {diffusion: [0.374152392256, 0.187904902606, 0.715809723861, 0.496137244366]} ... 
done

</system-out><system-err>03:09 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:09 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:09 DiffusionOperatorP1: Determine global dofs ...
03:09 DiffusionOperatorP1: Boundary treatment ...
03:09 DiffusionOperatorP1: Assemble system matrix ...
03:09 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:09 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:09 DiffusionOperatorP1: Determine global dofs ...
03:09 DiffusionOperatorP1: Boundary treatment ...
03:09 DiffusionOperatorP1: Assemble system matrix ...
03:09 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:09 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:09 DiffusionOperatorP1: Determine global dofs ...
03:09 DiffusionOperatorP1: Boundary treatment ...
03:09 DiffusionOperatorP1: Assemble system matrix ...
03:09 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:09 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:10 DiffusionOperatorP1: Determine global dofs ...
03:10 DiffusionOperatorP1: Boundary treatment ...
03:10 DiffusionOperatorP1: Assemble system matrix ...
03:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:10 DiffusionOperatorP1: Determine global dofs ...
03:10 DiffusionOperatorP1: Boundary treatment ...
03:10 DiffusionOperatorP1: Assemble system matrix ...
03:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:10 DiffusionOperatorP1: Determine global dofs ...
03:10 DiffusionOperatorP1: Boundary treatment ...
03:10 DiffusionOperatorP1: Assemble system matrix ...
03:10 L2ProductP1: Integrate the products of the shape functions on each element
03:10 L2ProductP1: Determine global dofs ...
03:10 L2ProductP1: Boundary treatment ...
03:10 L2ProductP1: Assemble system matrix ...
03:10 L2ProductP1: Integrate the products of the shape functions on each element
03:10 L2ProductP1: Determine global dofs ...
03:10 L2ProductP1: Boundary treatment ...
03:10 L2ProductP1: Assemble system matrix ...
03:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:10 DiffusionOperatorP1: Determine global dofs ...
03:10 DiffusionOperatorP1: Boundary treatment ...
03:10 DiffusionOperatorP1: Assemble system matrix ...
03:10 greedy: Started greedy search on 16 samples
03:10 greedy: Reducing ...
03:10 |   CoerciveRBReductor: RB projection ...
03:10 |   CoerciveRBReductor: Assembling error estimator ...
03:10 |   |   ResidualReductor: Estimating residual range ...
03:10 |   |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
03:11 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:11 |   |   ResidualReductor: Projecting residual operator ...
03:11 greedy: Estimating errors ...
03:11 greedy: Maximum error after 0 extensions: 1.87457318215 (mu = {diffusion: [0.1, 0.1, 0.1, 0.1]})
03:11 greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.1, 0.1, 0.1]} ...
03:11 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.1, 0.1]} ...
03:11 greedy: Extending basis with solution snapshot ...
      
03:11 greedy: Reducing ...
03:11 |   CoerciveRBReductor: RB projection ...
03:11 |   CoerciveRBReductor: Assembling error estimator ...
03:11 |   |   ResidualReductor: Estimating residual range ...
03:11 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
03:11 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:11 |   |   |   |   gram_schmidt: Removing vector 1 of norm 0.0
03:11 |   |   |   |   gram_schmidt: Removing linear dependent vector 5
03:11 |   |   ResidualReductor: Projecting residual operator ...
03:11 greedy: Estimating errors ...
03:11 greedy: Maximum error after 1 extensions: 1.33811391464 (mu = {diffusion: [0.1, 0.1, 0.1, 1.0]})
03:11 greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.1, 0.1, 1.0]} ...
03:11 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.1, 1.0]} ...
03:11 greedy: Extending basis with solution snapshot ...
      
03:11 greedy: Reducing ...
03:11 |   CoerciveRBReductor: RB projection ...
03:11 |   CoerciveRBReductor: Assembling error estimator ...
03:11 |   |   ResidualReductor: Estimating residual range ...
03:11 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
03:11 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:11 |   |   |   |   gram_schmidt: Removing vector 4 of norm 5.12939122542e-18
03:11 |   |   |   |   gram_schmidt: Orthonormalizing vector 8 again
03:11 |   |   ResidualReductor: Projecting residual operator ...
03:11 greedy: Estimating errors ...
03:11 greedy: Maximum error after 2 extensions: 1.25686364725 (mu = {diffusion: [0.1, 1.0, 0.1, 0.1]})
03:11 greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 0.1, 0.1]} ...
03:11 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.1, 0.1]} ...
03:11 greedy: Extending basis with solution snapshot ...
      
03:11 greedy: Reducing ...
03:11 |   CoerciveRBReductor: RB projection ...
03:11 |   CoerciveRBReductor: Assembling error estimator ...
03:11 |   |   ResidualReductor: Estimating residual range ...
03:11 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
03:11 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:11 |   |   |   |   gram_schmidt: Removing vector 8 of norm 6.70392869889e-18
03:11 |   |   |   |   gram_schmidt: Removing linear dependent vector 11
03:11 |   |   |   |   gram_schmidt: Removing linear dependent vector 12
03:11 |   |   ResidualReductor: Projecting residual operator ...
03:11 greedy: Estimating errors ...
03:11 greedy: Maximum error after 3 extensions: 1.21164585976 (mu = {diffusion: [0.1, 1.0, 0.1, 1.0]})
03:11 greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 0.1, 1.0]} ...
03:11 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.1, 1.0]} ...
03:11 greedy: Extending basis with solution snapshot ...
      
03:11 greedy: Reducing ...
03:11 |   CoerciveRBReductor: RB projection ...
03:11 |   CoerciveRBReductor: Assembling error estimator ...
03:11 |   |   ResidualReductor: Estimating residual range ...
03:11 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 3 ...
03:11 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:11 |   |   |   |   gram_schmidt: Removing vector 10 of norm 2.05701825966e-17
03:11 |   |   |   |   gram_schmidt: Orthonormalizing vector 12 again
03:12 |   |   |   |   gram_schmidt: Orthonormalizing vector 13 again
03:12 |   |   |   |   gram_schmidt: Removing linear dependent vector 14
03:12 |   |   ResidualReductor: Projecting residual operator ...
03:12 greedy: Estimating errors ...
03:12 greedy: Maximum error after 4 extensions: 0.810666824023 (mu = {diffusion: [1.0, 0.1, 0.1, 0.1]})
03:12 greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 0.1, 0.1]} ...
03:12 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.1, 0.1]} ...
03:12 greedy: Extending basis with solution snapshot ...
      
03:12 greedy: Reducing ...
03:12 |   CoerciveRBReductor: RB projection ...
03:12 |   CoerciveRBReductor: Assembling error estimator ...
03:12 |   |   ResidualReductor: Estimating residual range ...
03:12 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 4 ...
03:12 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:12 |   |   |   |   gram_schmidt: Removing vector 13 of norm 8.12177779512e-18
03:12 |   |   |   |   gram_schmidt: Removing linear dependent vector 15
03:12 |   |   |   |   gram_schmidt: Removing linear dependent vector 17
03:12 |   |   ResidualReductor: Projecting residual operator ...
03:12 greedy: Estimating errors ...
03:12 greedy: Maximum error after 5 extensions: 0.945236144361 (mu = {diffusion: [1.0, 0.1, 1.0, 0.1]})
03:12 greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 1.0, 0.1]} ...
03:12 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 1.0, 0.1]} ...
03:12 greedy: Extending basis with solution snapshot ...
      
03:12 greedy: Reducing ...
03:12 |   CoerciveRBReductor: RB projection ...
03:12 |   CoerciveRBReductor: Assembling error estimator ...
03:12 |   |   ResidualReductor: Estimating residual range ...
03:12 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 5 ...
03:12 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:12 |   |   |   |   gram_schmidt: Removing vector 15 of norm 5.72504129153e-18
03:12 |   |   |   |   gram_schmidt: Removing linear dependent vector 16
03:12 |   |   |   |   gram_schmidt: Removing linear dependent vector 17
03:12 |   |   |   |   gram_schmidt: Removing linear dependent vector 18
03:12 |   |   |   |   gram_schmidt: Orthonormalizing vector 19 again
03:12 |   |   ResidualReductor: Projecting residual operator ...
03:12 greedy: Estimating errors ...
03:12 greedy: Maximum error after 6 extensions: 0.744411529945 (mu = {diffusion: [1.0, 0.1, 0.1, 1.0]})
03:12 greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 0.1, 1.0]} ...
03:12 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.1, 1.0]} ...
03:12 greedy: Extending basis with solution snapshot ...
      
03:12 greedy: Reducing ...
03:12 |   CoerciveRBReductor: RB projection ...
03:12 |   CoerciveRBReductor: Assembling error estimator ...
03:12 |   |   ResidualReductor: Estimating residual range ...
03:12 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 6 ...
03:12 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:12 |   |   |   |   gram_schmidt: Removing vector 16 of norm 1.63054269844e-17
03:12 |   |   |   |   gram_schmidt: Orthonormalizing vector 17 again
03:12 |   |   |   |   gram_schmidt: Removing linear dependent vector 18
03:12 |   |   |   |   gram_schmidt: Removing linear dependent vector 19
03:12 |   |   |   |   gram_schmidt: Orthonormalizing vector 20 again
03:12 |   |   ResidualReductor: Projecting residual operator ...
03:12 greedy: Estimating errors ...
03:12 greedy: Maximum error after 7 extensions: 0.658623198628 (mu = {diffusion: [0.1, 1.0, 1.0, 0.1]})
03:12 greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 1.0, 0.1]} ...
03:12 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 1.0, 0.1]} ...
03:13 greedy: Extending basis with solution snapshot ...
      
03:13 greedy: Reducing ...
03:13 |   CoerciveRBReductor: RB projection ...
03:13 |   CoerciveRBReductor: Assembling error estimator ...
03:13 |   |   ResidualReductor: Estimating residual range ...
03:13 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 7 ...
03:13 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:13 |   |   |   |   gram_schmidt: Removing vector 18 of norm 2.207125561e-17
03:13 |   |   |   |   gram_schmidt: Removing linear dependent vector 19
03:13 |   |   |   |   gram_schmidt: Removing linear dependent vector 20
03:13 |   |   |   |   gram_schmidt: Orthonormalizing vector 21 again
03:13 |   |   |   |   gram_schmidt: Removing linear dependent vector 22
03:13 |   |   ResidualReductor: Projecting residual operator ...
03:13 greedy: Estimating errors ...
03:13 greedy: Maximum error after 8 extensions: 0.601851045213 (mu = {diffusion: [1.0, 0.1, 1.0, 1.0]})
03:13 greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 1.0, 1.0]} ...
03:13 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 1.0, 1.0]} ...
03:13 greedy: Extending basis with solution snapshot ...
      
03:13 greedy: Reducing ...
03:13 |   CoerciveRBReductor: RB projection ...
03:13 |   CoerciveRBReductor: Assembling error estimator ...
03:13 |   |   ResidualReductor: Estimating residual range ...
03:13 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 8 ...
03:13 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:13 |   |   |   |   gram_schmidt: Removing vector 19 of norm 3.065336727e-17
03:13 |   |   |   |   gram_schmidt: Orthonormalizing vector 20 again
03:13 |   |   |   |   gram_schmidt: Orthonormalizing vector 21 again
03:13 |   |   |   |   gram_schmidt: Orthonormalizing vector 22 again
03:13 |   |   |   |   gram_schmidt: Orthonormalizing vector 23 again
03:13 |   |   ResidualReductor: Projecting residual operator ...
03:13 greedy: Estimating errors ...
03:13 greedy: Maximum error after 9 extensions: 0.397415815023 (mu = {diffusion: [1.0, 1.0, 1.0, 0.1]})
03:13 greedy: Computing solution snapshot for mu = {diffusion: [1.0, 1.0, 1.0, 0.1]} ...
03:13 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 1.0, 0.1]} ...
03:13 greedy: Extending basis with solution snapshot ...
      
03:13 greedy: Maximum number of 10 extensions reached.
03:13 greedy: Reducing once more ...
03:13 |   CoerciveRBReductor: RB projection ...
03:13 |   CoerciveRBReductor: Assembling error estimator ...
03:13 |   |   ResidualReductor: Estimating residual range ...
03:13 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 9 ...
03:13 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:13 |   |   |   |   gram_schmidt: Removing vector 23 of norm 1.19934432999e-16
03:13 |   |   |   |   gram_schmidt: Orthonormalizing vector 24 again
03:13 |   |   |   |   gram_schmidt: Orthonormalizing vector 25 again
03:14 |   |   |   |   gram_schmidt: Orthonormalizing vector 26 again
03:14 |   |   |   |   gram_schmidt: Orthonormalizing vector 27 again
03:14 |   |   ResidualReductor: Projecting residual operator ...
03:14 greedy: Greedy search took 3.30378699303 seconds
03:15 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
03:15 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
03:15 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ...
03:16 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ...
03:16 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ...
03:16 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.65066760525, 0.225544474587, 0.362930183682, 0.429725658964]} ...
03:16 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.510462985795, 0.806658365254, 0.279706403943, 0.562810994572]} ...
03:16 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.633173111976, 0.141805371448, 0.646790366711, 0.253471711319]} ...
03:16 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.158546433687, 0.953996983528, 0.969068829767, 0.827557613305]} ...
03:16 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.374152392256, 0.187904902606, 0.715809723861, 0.496137244366]} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="180" name="test_analyze_pickle3" time="8.25396466255"><system-out>Discretize ...
RB generation ...

Writing reduced discretization to file /tmp/tmpsJRDPC/data_reduced ...
Writing detailed discretization and reductor to file /tmp/tmpsJRDPC/data_detailed ...

Searching for maximum error on random snapshots ...
..........

*** RESULTS ***

pyMOR discretization:
   number of blocks: 2x2
   grid intervals:   100
   ListVectorArray:  False

Greedy basis generation:
   size of training set:   16
   error estimator used:   True
   extension method:       gram_schmidt
   prescribed basis size:  10
   actual basis size:      10
   elapsed time:           3.30251097679

Stochastic error estimation:
    number of samples:                  10
    maximum NumpyMatrixOperator-norm:   6.2469480e-01 (mu = {diffusion: [0.181832736497, 0.399003112714, 0.484642852697, 0.598947231188]})
    maximum NumpyMatrixOperator-error:  6.8663974e-03 (mu = {diffusion: [0.181832736497, 0.399003112714, 0.484642852697, 0.598947231188]})
    maximum NumpyMatrixOperator-norm:   1.2572252e-01 (mu = {diffusion: [0.181832736497, 0.399003112714, 0.484642852697, 0.598947231188]})
    maximum NumpyMatrixOperator-error:  3.3135756e-04 (mu = {diffusion: [0.181832736497, 0.399003112714, 0.484642852697, 0.598947231188]})
    maximum estimated error:            1.4835413e-02 (mu = {diffusion: [0.181832736497, 0.399003112714, 0.484642852697, 0.598947231188]})
    minimum estimator effectivity:      1.6712364e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    maximum estimator effectivity:      6.9248010e-01 (mu = {diffusion: [0.918325039247, 0.464644598394, 0.784391923305, 0.526382538185]})
    maximum system matrix condition:    8.2782185e+00 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    elapsed time:                       1.45153307915
Loading reduced discretization ...
Loading high-dimensional data ...
N =   0 solve estimate errors
N =   1 solve estimate errors
N =   2 solve estimate errors
N =   3 solve estimate errors
N =   4 solve estimate errors
N =   5 solve estimate errors
N =   6 solve estimate errors
N =   7 solve estimate errors
N =   8 solve estimate errors
N =   9 solve estimate errors
N =  10 solve estimate errors

</system-out><system-err>03:17 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:17 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:17 DiffusionOperatorP1: Determine global dofs ...
03:17 DiffusionOperatorP1: Boundary treatment ...
03:17 DiffusionOperatorP1: Assemble system matrix ...
03:17 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:17 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:17 DiffusionOperatorP1: Determine global dofs ...
03:17 DiffusionOperatorP1: Boundary treatment ...
03:17 DiffusionOperatorP1: Assemble system matrix ...
03:17 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:17 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:17 DiffusionOperatorP1: Determine global dofs ...
03:17 DiffusionOperatorP1: Boundary treatment ...
03:17 DiffusionOperatorP1: Assemble system matrix ...
03:18 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:18 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:18 DiffusionOperatorP1: Determine global dofs ...
03:18 DiffusionOperatorP1: Boundary treatment ...
03:18 DiffusionOperatorP1: Assemble system matrix ...
03:18 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:18 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:18 DiffusionOperatorP1: Determine global dofs ...
03:18 DiffusionOperatorP1: Boundary treatment ...
03:18 DiffusionOperatorP1: Assemble system matrix ...
03:18 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:18 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:18 DiffusionOperatorP1: Determine global dofs ...
03:18 DiffusionOperatorP1: Boundary treatment ...
03:18 DiffusionOperatorP1: Assemble system matrix ...
03:18 L2ProductP1: Integrate the products of the shape functions on each element
03:18 L2ProductP1: Determine global dofs ...
03:18 L2ProductP1: Boundary treatment ...
03:18 L2ProductP1: Assemble system matrix ...
03:18 L2ProductP1: Integrate the products of the shape functions on each element
03:18 L2ProductP1: Determine global dofs ...
03:18 L2ProductP1: Boundary treatment ...
03:18 L2ProductP1: Assemble system matrix ...
03:18 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:18 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:18 DiffusionOperatorP1: Determine global dofs ...
03:18 DiffusionOperatorP1: Boundary treatment ...
03:18 DiffusionOperatorP1: Assemble system matrix ...
03:18 greedy: Started greedy search on 16 samples
03:18 greedy: Reducing ...
03:18 |   CoerciveRBReductor: RB projection ...
03:18 |   CoerciveRBReductor: Assembling error estimator ...
03:18 |   |   ResidualReductor: Estimating residual range ...
03:18 |   |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
03:19 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:19 |   |   ResidualReductor: Projecting residual operator ...
03:19 greedy: Estimating errors ...
03:19 greedy: Maximum error after 0 extensions: 1.87457318215 (mu = {diffusion: [0.1, 0.1, 0.1, 0.1]})
03:19 greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.1, 0.1, 0.1]} ...
03:19 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.1, 0.1]} ...
03:19 greedy: Extending basis with solution snapshot ...
      
03:19 greedy: Reducing ...
03:19 |   CoerciveRBReductor: RB projection ...
03:19 |   CoerciveRBReductor: Assembling error estimator ...
03:19 |   |   ResidualReductor: Estimating residual range ...
03:19 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
03:19 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:19 |   |   |   |   gram_schmidt: Removing vector 1 of norm 0.0
03:19 |   |   |   |   gram_schmidt: Removing linear dependent vector 5
03:19 |   |   ResidualReductor: Projecting residual operator ...
03:19 greedy: Estimating errors ...
03:19 greedy: Maximum error after 1 extensions: 1.33811391464 (mu = {diffusion: [0.1, 0.1, 0.1, 1.0]})
03:19 greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.1, 0.1, 1.0]} ...
03:19 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.1, 1.0]} ...
03:19 greedy: Extending basis with solution snapshot ...
      
03:19 greedy: Reducing ...
03:19 |   CoerciveRBReductor: RB projection ...
03:19 |   CoerciveRBReductor: Assembling error estimator ...
03:19 |   |   ResidualReductor: Estimating residual range ...
03:19 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
03:19 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:19 |   |   |   |   gram_schmidt: Removing vector 4 of norm 5.12939122542e-18
03:19 |   |   |   |   gram_schmidt: Orthonormalizing vector 8 again
03:19 |   |   ResidualReductor: Projecting residual operator ...
03:19 greedy: Estimating errors ...
03:19 greedy: Maximum error after 2 extensions: 1.25686364725 (mu = {diffusion: [0.1, 1.0, 0.1, 0.1]})
03:19 greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 0.1, 0.1]} ...
03:19 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.1, 0.1]} ...
03:19 greedy: Extending basis with solution snapshot ...
      
03:19 greedy: Reducing ...
03:19 |   CoerciveRBReductor: RB projection ...
03:19 |   CoerciveRBReductor: Assembling error estimator ...
03:19 |   |   ResidualReductor: Estimating residual range ...
03:19 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
03:19 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:19 |   |   |   |   gram_schmidt: Removing vector 8 of norm 6.70392869889e-18
03:19 |   |   |   |   gram_schmidt: Removing linear dependent vector 11
03:19 |   |   |   |   gram_schmidt: Removing linear dependent vector 12
03:19 |   |   ResidualReductor: Projecting residual operator ...
03:19 greedy: Estimating errors ...
03:19 greedy: Maximum error after 3 extensions: 1.21164585976 (mu = {diffusion: [0.1, 1.0, 0.1, 1.0]})
03:19 greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 0.1, 1.0]} ...
03:19 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.1, 1.0]} ...
03:19 greedy: Extending basis with solution snapshot ...
      
03:19 greedy: Reducing ...
03:19 |   CoerciveRBReductor: RB projection ...
03:20 |   CoerciveRBReductor: Assembling error estimator ...
03:20 |   |   ResidualReductor: Estimating residual range ...
03:20 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 3 ...
03:20 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:20 |   |   |   |   gram_schmidt: Removing vector 10 of norm 2.05701825966e-17
03:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 12 again
03:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 13 again
03:20 |   |   |   |   gram_schmidt: Removing linear dependent vector 14
03:20 |   |   ResidualReductor: Projecting residual operator ...
03:20 greedy: Estimating errors ...
03:20 greedy: Maximum error after 4 extensions: 0.810666824023 (mu = {diffusion: [1.0, 0.1, 0.1, 0.1]})
03:20 greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 0.1, 0.1]} ...
03:20 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.1, 0.1]} ...
03:20 greedy: Extending basis with solution snapshot ...
      
03:20 greedy: Reducing ...
03:20 |   CoerciveRBReductor: RB projection ...
03:20 |   CoerciveRBReductor: Assembling error estimator ...
03:20 |   |   ResidualReductor: Estimating residual range ...
03:20 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 4 ...
03:20 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:20 |   |   |   |   gram_schmidt: Removing vector 13 of norm 8.12177779512e-18
03:20 |   |   |   |   gram_schmidt: Removing linear dependent vector 15
03:20 |   |   |   |   gram_schmidt: Removing linear dependent vector 17
03:20 |   |   ResidualReductor: Projecting residual operator ...
03:20 greedy: Estimating errors ...
03:20 greedy: Maximum error after 5 extensions: 0.945236144361 (mu = {diffusion: [1.0, 0.1, 1.0, 0.1]})
03:20 greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 1.0, 0.1]} ...
03:20 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 1.0, 0.1]} ...
03:20 greedy: Extending basis with solution snapshot ...
      
03:20 greedy: Reducing ...
03:20 |   CoerciveRBReductor: RB projection ...
03:20 |   CoerciveRBReductor: Assembling error estimator ...
03:20 |   |   ResidualReductor: Estimating residual range ...
03:20 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 5 ...
03:20 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:20 |   |   |   |   gram_schmidt: Removing vector 15 of norm 5.72504129153e-18
03:20 |   |   |   |   gram_schmidt: Removing linear dependent vector 16
03:20 |   |   |   |   gram_schmidt: Removing linear dependent vector 17
03:20 |   |   |   |   gram_schmidt: Removing linear dependent vector 18
03:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 19 again
03:20 |   |   ResidualReductor: Projecting residual operator ...
03:20 greedy: Estimating errors ...
03:20 greedy: Maximum error after 6 extensions: 0.744411529945 (mu = {diffusion: [1.0, 0.1, 0.1, 1.0]})
03:20 greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 0.1, 1.0]} ...
03:20 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.1, 1.0]} ...
03:20 greedy: Extending basis with solution snapshot ...
      
03:20 greedy: Reducing ...
03:20 |   CoerciveRBReductor: RB projection ...
03:20 |   CoerciveRBReductor: Assembling error estimator ...
03:20 |   |   ResidualReductor: Estimating residual range ...
03:20 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 6 ...
03:20 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:20 |   |   |   |   gram_schmidt: Removing vector 16 of norm 1.63054269844e-17
03:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 17 again
03:21 |   |   |   |   gram_schmidt: Removing linear dependent vector 18
03:21 |   |   |   |   gram_schmidt: Removing linear dependent vector 19
03:21 |   |   |   |   gram_schmidt: Orthonormalizing vector 20 again
03:21 |   |   ResidualReductor: Projecting residual operator ...
03:21 greedy: Estimating errors ...
03:21 greedy: Maximum error after 7 extensions: 0.658623198628 (mu = {diffusion: [0.1, 1.0, 1.0, 0.1]})
03:21 greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 1.0, 0.1]} ...
03:21 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 1.0, 0.1]} ...
03:21 greedy: Extending basis with solution snapshot ...
      
03:21 greedy: Reducing ...
03:21 |   CoerciveRBReductor: RB projection ...
03:21 |   CoerciveRBReductor: Assembling error estimator ...
03:21 |   |   ResidualReductor: Estimating residual range ...
03:21 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 7 ...
03:21 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:21 |   |   |   |   gram_schmidt: Removing vector 18 of norm 2.207125561e-17
03:21 |   |   |   |   gram_schmidt: Removing linear dependent vector 19
03:21 |   |   |   |   gram_schmidt: Removing linear dependent vector 20
03:21 |   |   |   |   gram_schmidt: Orthonormalizing vector 21 again
03:21 |   |   |   |   gram_schmidt: Removing linear dependent vector 22
03:21 |   |   ResidualReductor: Projecting residual operator ...
03:21 greedy: Estimating errors ...
03:21 greedy: Maximum error after 8 extensions: 0.601851045213 (mu = {diffusion: [1.0, 0.1, 1.0, 1.0]})
03:21 greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 1.0, 1.0]} ...
03:21 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 1.0, 1.0]} ...
03:21 greedy: Extending basis with solution snapshot ...
      
03:21 greedy: Reducing ...
03:21 |   CoerciveRBReductor: RB projection ...
03:21 |   CoerciveRBReductor: Assembling error estimator ...
03:21 |   |   ResidualReductor: Estimating residual range ...
03:21 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 8 ...
03:21 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:21 |   |   |   |   gram_schmidt: Removing vector 19 of norm 3.065336727e-17
03:21 |   |   |   |   gram_schmidt: Orthonormalizing vector 20 again
03:21 |   |   |   |   gram_schmidt: Orthonormalizing vector 21 again
03:21 |   |   |   |   gram_schmidt: Orthonormalizing vector 22 again
03:21 |   |   |   |   gram_schmidt: Orthonormalizing vector 23 again
03:21 |   |   ResidualReductor: Projecting residual operator ...
03:21 greedy: Estimating errors ...
03:21 greedy: Maximum error after 9 extensions: 0.397415815023 (mu = {diffusion: [1.0, 1.0, 1.0, 0.1]})
03:21 greedy: Computing solution snapshot for mu = {diffusion: [1.0, 1.0, 1.0, 0.1]} ...
03:21 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 1.0, 0.1]} ...
03:21 greedy: Extending basis with solution snapshot ...
      
03:21 greedy: Maximum number of 10 extensions reached.
03:21 greedy: Reducing once more ...
03:21 |   CoerciveRBReductor: RB projection ...
03:21 |   CoerciveRBReductor: Assembling error estimator ...
03:21 |   |   ResidualReductor: Estimating residual range ...
03:21 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 9 ...
03:22 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:22 |   |   |   |   gram_schmidt: Removing vector 23 of norm 1.19934432999e-16
03:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 24 again
03:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 25 again
03:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 26 again
03:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 27 again
03:22 |   |   ResidualReductor: Projecting residual operator ...
03:22 greedy: Greedy search took 3.30251097679 seconds
03:23 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
03:23 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
03:23 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ...
03:23 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ...
03:23 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ...
03:23 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.65066760525, 0.225544474587, 0.362930183682, 0.429725658964]} ...
03:23 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.510462985795, 0.806658365254, 0.279706403943, 0.562810994572]} ...
03:23 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.633173111976, 0.141805371448, 0.646790366711, 0.253471711319]} ...
03:23 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.158546433687, 0.953996983528, 0.969068829767, 0.827557613305]} ...
03:23 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.374152392256, 0.187904902606, 0.715809723861, 0.496137244366]} ...
03:23 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
03:23 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
03:23 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ...
03:24 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ...
03:24 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ...
03:24 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.65066760525, 0.225544474587, 0.362930183682, 0.429725658964]} ...
03:24 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.510462985795, 0.806658365254, 0.279706403943, 0.562810994572]} ...
03:24 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.633173111976, 0.141805371448, 0.646790366711, 0.253471711319]} ...
03:24 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.158546433687, 0.953996983528, 0.969068829767, 0.827557613305]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.374152392256, 0.187904902606, 0.715809723861, 0.496137244366]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.65066760525, 0.225544474587, 0.362930183682, 0.429725658964]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.510462985795, 0.806658365254, 0.279706403943, 0.562810994572]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.633173111976, 0.141805371448, 0.646790366711, 0.253471711319]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.158546433687, 0.953996983528, 0.969068829767, 0.827557613305]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.374152392256, 0.187904902606, 0.715809723861, 0.496137244366]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.65066760525, 0.225544474587, 0.362930183682, 0.429725658964]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.510462985795, 0.806658365254, 0.279706403943, 0.562810994572]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.633173111976, 0.141805371448, 0.646790366711, 0.253471711319]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.158546433687, 0.953996983528, 0.969068829767, 0.827557613305]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.374152392256, 0.187904902606, 0.715809723861, 0.496137244366]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.65066760525, 0.225544474587, 0.362930183682, 0.429725658964]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.510462985795, 0.806658365254, 0.279706403943, 0.562810994572]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.633173111976, 0.141805371448, 0.646790366711, 0.253471711319]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.158546433687, 0.953996983528, 0.969068829767, 0.827557613305]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.374152392256, 0.187904902606, 0.715809723861, 0.496137244366]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.65066760525, 0.225544474587, 0.362930183682, 0.429725658964]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.510462985795, 0.806658365254, 0.279706403943, 0.562810994572]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.633173111976, 0.141805371448, 0.646790366711, 0.253471711319]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.158546433687, 0.953996983528, 0.969068829767, 0.827557613305]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.374152392256, 0.187904902606, 0.715809723861, 0.496137244366]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.65066760525, 0.225544474587, 0.362930183682, 0.429725658964]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.510462985795, 0.806658365254, 0.279706403943, 0.562810994572]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.633173111976, 0.141805371448, 0.646790366711, 0.253471711319]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.158546433687, 0.953996983528, 0.969068829767, 0.827557613305]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.374152392256, 0.187904902606, 0.715809723861, 0.496137244366]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.65066760525, 0.225544474587, 0.362930183682, 0.429725658964]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.510462985795, 0.806658365254, 0.279706403943, 0.562810994572]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.633173111976, 0.141805371448, 0.646790366711, 0.253471711319]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.158546433687, 0.953996983528, 0.969068829767, 0.827557613305]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.374152392256, 0.187904902606, 0.715809723861, 0.496137244366]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.65066760525, 0.225544474587, 0.362930183682, 0.429725658964]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.510462985795, 0.806658365254, 0.279706403943, 0.562810994572]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.633173111976, 0.141805371448, 0.646790366711, 0.253471711319]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.158546433687, 0.953996983528, 0.969068829767, 0.827557613305]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.374152392256, 0.187904902606, 0.715809723861, 0.496137244366]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.65066760525, 0.225544474587, 0.362930183682, 0.429725658964]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.510462985795, 0.806658365254, 0.279706403943, 0.562810994572]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.633173111976, 0.141805371448, 0.646790366711, 0.253471711319]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.158546433687, 0.953996983528, 0.969068829767, 0.827557613305]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.374152392256, 0.187904902606, 0.715809723861, 0.496137244366]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.65066760525, 0.225544474587, 0.362930183682, 0.429725658964]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.510462985795, 0.806658365254, 0.279706403943, 0.562810994572]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.633173111976, 0.141805371448, 0.646790366711, 0.253471711319]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.158546433687, 0.953996983528, 0.969068829767, 0.827557613305]} ...
03:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.374152392256, 0.187904902606, 0.715809723861, 0.496137244366]} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="191" name="test_analyze_pickle4" time="7.96426534653"><system-out>Discretize ...
RB generation ...

Writing reduced discretization to file /tmp/tmpFaBeza/data_reduced ...
Writing detailed discretization and reductor to file /tmp/tmpFaBeza/data_detailed ...

Searching for maximum error on random snapshots ...
..........

*** RESULTS ***

pyMOR discretization:
   number of blocks: 2x2
   grid intervals:   100
   ListVectorArray:  False

Greedy basis generation:
   size of training set:   16
   error estimator used:   True
   extension method:       gram_schmidt
   prescribed basis size:  10
   actual basis size:      10
   elapsed time:           3.3279209137

Stochastic error estimation:
    number of samples:                  10
    maximum NumpyMatrixOperator-norm:   6.2469480e-01 (mu = {diffusion: [0.181832736497, 0.399003112714, 0.484642852697, 0.598947231188]})
    maximum NumpyMatrixOperator-error:  6.8663974e-03 (mu = {diffusion: [0.181832736497, 0.399003112714, 0.484642852697, 0.598947231188]})
    maximum NumpyMatrixOperator-norm:   1.2572252e-01 (mu = {diffusion: [0.181832736497, 0.399003112714, 0.484642852697, 0.598947231188]})
    maximum NumpyMatrixOperator-error:  3.3135756e-04 (mu = {diffusion: [0.181832736497, 0.399003112714, 0.484642852697, 0.598947231188]})
    maximum estimated error:            1.4835413e-02 (mu = {diffusion: [0.181832736497, 0.399003112714, 0.484642852697, 0.598947231188]})
    minimum estimator effectivity:      1.6712364e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    maximum estimator effectivity:      6.9248010e-01 (mu = {diffusion: [0.918325039247, 0.464644598394, 0.784391923305, 0.526382538185]})
    maximum system matrix condition:    8.2782185e+00 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    elapsed time:                       1.44542908669
Loading reduced discretization ...
Loading high-dimensional data ...
N =   0 solve estimate errors
N =   1 solve estimate errors
N =   2 solve estimate errors
N =   3 solve estimate errors
N =   4 solve estimate errors
N =   5 solve estimate errors
N =   6 solve estimate errors
N =   7 solve estimate errors
N =   8 solve estimate errors
N =   9 solve estimate errors
N =  10 solve estimate errors

</system-out><system-err>03:25 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:25 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:25 DiffusionOperatorP1: Determine global dofs ...
03:25 DiffusionOperatorP1: Boundary treatment ...
03:25 DiffusionOperatorP1: Assemble system matrix ...
03:26 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:26 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:26 DiffusionOperatorP1: Determine global dofs ...
03:26 DiffusionOperatorP1: Boundary treatment ...
03:26 DiffusionOperatorP1: Assemble system matrix ...
03:26 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:26 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:26 DiffusionOperatorP1: Determine global dofs ...
03:26 DiffusionOperatorP1: Boundary treatment ...
03:26 DiffusionOperatorP1: Assemble system matrix ...
03:26 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:26 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:26 DiffusionOperatorP1: Determine global dofs ...
03:26 DiffusionOperatorP1: Boundary treatment ...
03:26 DiffusionOperatorP1: Assemble system matrix ...
03:26 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:26 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:26 DiffusionOperatorP1: Determine global dofs ...
03:26 DiffusionOperatorP1: Boundary treatment ...
03:26 DiffusionOperatorP1: Assemble system matrix ...
03:26 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:26 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:26 DiffusionOperatorP1: Determine global dofs ...
03:26 DiffusionOperatorP1: Boundary treatment ...
03:26 DiffusionOperatorP1: Assemble system matrix ...
03:26 L2ProductP1: Integrate the products of the shape functions on each element
03:26 L2ProductP1: Determine global dofs ...
03:26 L2ProductP1: Boundary treatment ...
03:26 L2ProductP1: Assemble system matrix ...
03:26 L2ProductP1: Integrate the products of the shape functions on each element
03:26 L2ProductP1: Determine global dofs ...
03:26 L2ProductP1: Boundary treatment ...
03:26 L2ProductP1: Assemble system matrix ...
03:26 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:26 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:27 DiffusionOperatorP1: Determine global dofs ...
03:27 DiffusionOperatorP1: Boundary treatment ...
03:27 DiffusionOperatorP1: Assemble system matrix ...
03:27 greedy: Started greedy search on 16 samples
03:27 greedy: Reducing ...
03:27 |   CoerciveRBReductor: RB projection ...
03:27 |   CoerciveRBReductor: Assembling error estimator ...
03:27 |   |   ResidualReductor: Estimating residual range ...
03:27 |   |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
03:27 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:27 |   |   ResidualReductor: Projecting residual operator ...
03:27 greedy: Estimating errors ...
03:27 greedy: Maximum error after 0 extensions: 1.87457318215 (mu = {diffusion: [0.1, 0.1, 0.1, 0.1]})
03:27 greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.1, 0.1, 0.1]} ...
03:27 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.1, 0.1]} ...
03:27 greedy: Extending basis with solution snapshot ...
      
03:27 greedy: Reducing ...
03:27 |   CoerciveRBReductor: RB projection ...
03:27 |   CoerciveRBReductor: Assembling error estimator ...
03:27 |   |   ResidualReductor: Estimating residual range ...
03:27 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
03:27 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:27 |   |   |   |   gram_schmidt: Removing vector 1 of norm 0.0
03:27 |   |   |   |   gram_schmidt: Removing linear dependent vector 5
03:27 |   |   ResidualReductor: Projecting residual operator ...
03:27 greedy: Estimating errors ...
03:27 greedy: Maximum error after 1 extensions: 1.33811391464 (mu = {diffusion: [0.1, 0.1, 0.1, 1.0]})
03:27 greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.1, 0.1, 1.0]} ...
03:27 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.1, 1.0]} ...
03:27 greedy: Extending basis with solution snapshot ...
      
03:27 greedy: Reducing ...
03:27 |   CoerciveRBReductor: RB projection ...
03:27 |   CoerciveRBReductor: Assembling error estimator ...
03:27 |   |   ResidualReductor: Estimating residual range ...
03:27 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
03:27 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:27 |   |   |   |   gram_schmidt: Removing vector 4 of norm 5.12939122542e-18
03:27 |   |   |   |   gram_schmidt: Orthonormalizing vector 8 again
03:27 |   |   ResidualReductor: Projecting residual operator ...
03:27 greedy: Estimating errors ...
03:27 greedy: Maximum error after 2 extensions: 1.25686364725 (mu = {diffusion: [0.1, 1.0, 0.1, 0.1]})
03:27 greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 0.1, 0.1]} ...
03:27 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.1, 0.1]} ...
03:27 greedy: Extending basis with solution snapshot ...
      
03:27 greedy: Reducing ...
03:27 |   CoerciveRBReductor: RB projection ...
03:28 |   CoerciveRBReductor: Assembling error estimator ...
03:28 |   |   ResidualReductor: Estimating residual range ...
03:28 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
03:28 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:28 |   |   |   |   gram_schmidt: Removing vector 8 of norm 6.70392869889e-18
03:28 |   |   |   |   gram_schmidt: Removing linear dependent vector 11
03:28 |   |   |   |   gram_schmidt: Removing linear dependent vector 12
03:28 |   |   ResidualReductor: Projecting residual operator ...
03:28 greedy: Estimating errors ...
03:28 greedy: Maximum error after 3 extensions: 1.21164585976 (mu = {diffusion: [0.1, 1.0, 0.1, 1.0]})
03:28 greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 0.1, 1.0]} ...
03:28 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.1, 1.0]} ...
03:28 greedy: Extending basis with solution snapshot ...
      
03:28 greedy: Reducing ...
03:28 |   CoerciveRBReductor: RB projection ...
03:28 |   CoerciveRBReductor: Assembling error estimator ...
03:28 |   |   ResidualReductor: Estimating residual range ...
03:28 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 3 ...
03:28 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:28 |   |   |   |   gram_schmidt: Removing vector 10 of norm 2.05701825966e-17
03:28 |   |   |   |   gram_schmidt: Orthonormalizing vector 12 again
03:28 |   |   |   |   gram_schmidt: Orthonormalizing vector 13 again
03:28 |   |   |   |   gram_schmidt: Removing linear dependent vector 14
03:28 |   |   ResidualReductor: Projecting residual operator ...
03:28 greedy: Estimating errors ...
03:28 greedy: Maximum error after 4 extensions: 0.810666824023 (mu = {diffusion: [1.0, 0.1, 0.1, 0.1]})
03:28 greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 0.1, 0.1]} ...
03:28 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.1, 0.1]} ...
03:28 greedy: Extending basis with solution snapshot ...
      
03:28 greedy: Reducing ...
03:28 |   CoerciveRBReductor: RB projection ...
03:28 |   CoerciveRBReductor: Assembling error estimator ...
03:28 |   |   ResidualReductor: Estimating residual range ...
03:28 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 4 ...
03:28 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:28 |   |   |   |   gram_schmidt: Removing vector 13 of norm 8.12177779512e-18
03:28 |   |   |   |   gram_schmidt: Removing linear dependent vector 15
03:28 |   |   |   |   gram_schmidt: Removing linear dependent vector 17
03:28 |   |   ResidualReductor: Projecting residual operator ...
03:28 greedy: Estimating errors ...
03:28 greedy: Maximum error after 5 extensions: 0.945236144361 (mu = {diffusion: [1.0, 0.1, 1.0, 0.1]})
03:28 greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 1.0, 0.1]} ...
03:28 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 1.0, 0.1]} ...
03:28 greedy: Extending basis with solution snapshot ...
      
03:28 greedy: Reducing ...
03:28 |   CoerciveRBReductor: RB projection ...
03:28 |   CoerciveRBReductor: Assembling error estimator ...
03:28 |   |   ResidualReductor: Estimating residual range ...
03:28 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 5 ...
03:28 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:28 |   |   |   |   gram_schmidt: Removing vector 15 of norm 5.72504129153e-18
03:28 |   |   |   |   gram_schmidt: Removing linear dependent vector 16
03:28 |   |   |   |   gram_schmidt: Removing linear dependent vector 17
03:28 |   |   |   |   gram_schmidt: Removing linear dependent vector 18
03:28 |   |   |   |   gram_schmidt: Orthonormalizing vector 19 again
03:28 |   |   ResidualReductor: Projecting residual operator ...
03:28 greedy: Estimating errors ...
03:29 greedy: Maximum error after 6 extensions: 0.744411529945 (mu = {diffusion: [1.0, 0.1, 0.1, 1.0]})
03:29 greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 0.1, 1.0]} ...
03:29 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.1, 1.0]} ...
03:29 greedy: Extending basis with solution snapshot ...
      
03:29 greedy: Reducing ...
03:29 |   CoerciveRBReductor: RB projection ...
03:29 |   CoerciveRBReductor: Assembling error estimator ...
03:29 |   |   ResidualReductor: Estimating residual range ...
03:29 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 6 ...
03:29 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:29 |   |   |   |   gram_schmidt: Removing vector 16 of norm 1.63054269844e-17
03:29 |   |   |   |   gram_schmidt: Orthonormalizing vector 17 again
03:29 |   |   |   |   gram_schmidt: Removing linear dependent vector 18
03:29 |   |   |   |   gram_schmidt: Removing linear dependent vector 19
03:29 |   |   |   |   gram_schmidt: Orthonormalizing vector 20 again
03:29 |   |   ResidualReductor: Projecting residual operator ...
03:29 greedy: Estimating errors ...
03:29 greedy: Maximum error after 7 extensions: 0.658623198628 (mu = {diffusion: [0.1, 1.0, 1.0, 0.1]})
03:29 greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 1.0, 0.1]} ...
03:29 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 1.0, 0.1]} ...
03:29 greedy: Extending basis with solution snapshot ...
      
03:29 greedy: Reducing ...
03:29 |   CoerciveRBReductor: RB projection ...
03:29 |   CoerciveRBReductor: Assembling error estimator ...
03:29 |   |   ResidualReductor: Estimating residual range ...
03:29 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 7 ...
03:29 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:29 |   |   |   |   gram_schmidt: Removing vector 18 of norm 2.207125561e-17
03:29 |   |   |   |   gram_schmidt: Removing linear dependent vector 19
03:29 |   |   |   |   gram_schmidt: Removing linear dependent vector 20
03:29 |   |   |   |   gram_schmidt: Orthonormalizing vector 21 again
03:29 |   |   |   |   gram_schmidt: Removing linear dependent vector 22
03:29 |   |   ResidualReductor: Projecting residual operator ...
03:29 greedy: Estimating errors ...
03:29 greedy: Maximum error after 8 extensions: 0.601851045213 (mu = {diffusion: [1.0, 0.1, 1.0, 1.0]})
03:29 greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 1.0, 1.0]} ...
03:29 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 1.0, 1.0]} ...
03:29 greedy: Extending basis with solution snapshot ...
      
03:29 greedy: Reducing ...
03:29 |   CoerciveRBReductor: RB projection ...
03:29 |   CoerciveRBReductor: Assembling error estimator ...
03:29 |   |   ResidualReductor: Estimating residual range ...
03:29 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 8 ...
03:29 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:29 |   |   |   |   gram_schmidt: Removing vector 19 of norm 3.065336727e-17
03:29 |   |   |   |   gram_schmidt: Orthonormalizing vector 20 again
03:29 |   |   |   |   gram_schmidt: Orthonormalizing vector 21 again
03:29 |   |   |   |   gram_schmidt: Orthonormalizing vector 22 again
03:29 |   |   |   |   gram_schmidt: Orthonormalizing vector 23 again
03:29 |   |   ResidualReductor: Projecting residual operator ...
03:30 greedy: Estimating errors ...
03:30 greedy: Maximum error after 9 extensions: 0.397415815023 (mu = {diffusion: [1.0, 1.0, 1.0, 0.1]})
03:30 greedy: Computing solution snapshot for mu = {diffusion: [1.0, 1.0, 1.0, 0.1]} ...
03:30 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 1.0, 0.1]} ...
03:30 greedy: Extending basis with solution snapshot ...
      
03:30 greedy: Maximum number of 10 extensions reached.
03:30 greedy: Reducing once more ...
03:30 |   CoerciveRBReductor: RB projection ...
03:30 |   CoerciveRBReductor: Assembling error estimator ...
03:30 |   |   ResidualReductor: Estimating residual range ...
03:30 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 9 ...
03:30 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
03:30 |   |   |   |   gram_schmidt: Removing vector 23 of norm 1.19934432999e-16
03:30 |   |   |   |   gram_schmidt: Orthonormalizing vector 24 again
03:30 |   |   |   |   gram_schmidt: Orthonormalizing vector 25 again
03:30 |   |   |   |   gram_schmidt: Orthonormalizing vector 26 again
03:30 |   |   |   |   gram_schmidt: Orthonormalizing vector 27 again
03:30 |   |   ResidualReductor: Projecting residual operator ...
03:30 greedy: Greedy search took 3.3279209137 seconds
03:31 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
03:31 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
03:31 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ...
03:31 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ...
03:31 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ...
03:31 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.65066760525, 0.225544474587, 0.362930183682, 0.429725658964]} ...
03:31 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.510462985795, 0.806658365254, 0.279706403943, 0.562810994572]} ...
03:31 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.633173111976, 0.141805371448, 0.646790366711, 0.253471711319]} ...
03:31 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.158546433687, 0.953996983528, 0.969068829767, 0.827557613305]} ...
03:31 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.374152392256, 0.187904902606, 0.715809723861, 0.496137244366]} ...
03:31 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
03:32 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
03:32 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ...
03:32 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ...
03:32 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ...
03:32 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.65066760525, 0.225544474587, 0.362930183682, 0.429725658964]} ...
03:32 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.510462985795, 0.806658365254, 0.279706403943, 0.562810994572]} ...
03:32 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.633173111976, 0.141805371448, 0.646790366711, 0.253471711319]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.158546433687, 0.953996983528, 0.969068829767, 0.827557613305]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.374152392256, 0.187904902606, 0.715809723861, 0.496137244366]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.65066760525, 0.225544474587, 0.362930183682, 0.429725658964]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.510462985795, 0.806658365254, 0.279706403943, 0.562810994572]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.633173111976, 0.141805371448, 0.646790366711, 0.253471711319]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.158546433687, 0.953996983528, 0.969068829767, 0.827557613305]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.374152392256, 0.187904902606, 0.715809723861, 0.496137244366]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.65066760525, 0.225544474587, 0.362930183682, 0.429725658964]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.510462985795, 0.806658365254, 0.279706403943, 0.562810994572]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.633173111976, 0.141805371448, 0.646790366711, 0.253471711319]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.158546433687, 0.953996983528, 0.969068829767, 0.827557613305]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.374152392256, 0.187904902606, 0.715809723861, 0.496137244366]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.65066760525, 0.225544474587, 0.362930183682, 0.429725658964]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.510462985795, 0.806658365254, 0.279706403943, 0.562810994572]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.633173111976, 0.141805371448, 0.646790366711, 0.253471711319]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.158546433687, 0.953996983528, 0.969068829767, 0.827557613305]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.374152392256, 0.187904902606, 0.715809723861, 0.496137244366]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.65066760525, 0.225544474587, 0.362930183682, 0.429725658964]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.510462985795, 0.806658365254, 0.279706403943, 0.562810994572]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.633173111976, 0.141805371448, 0.646790366711, 0.253471711319]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.158546433687, 0.953996983528, 0.969068829767, 0.827557613305]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.374152392256, 0.187904902606, 0.715809723861, 0.496137244366]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.65066760525, 0.225544474587, 0.362930183682, 0.429725658964]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.510462985795, 0.806658365254, 0.279706403943, 0.562810994572]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.633173111976, 0.141805371448, 0.646790366711, 0.253471711319]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.158546433687, 0.953996983528, 0.969068829767, 0.827557613305]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.374152392256, 0.187904902606, 0.715809723861, 0.496137244366]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.65066760525, 0.225544474587, 0.362930183682, 0.429725658964]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.510462985795, 0.806658365254, 0.279706403943, 0.562810994572]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.633173111976, 0.141805371448, 0.646790366711, 0.253471711319]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.158546433687, 0.953996983528, 0.969068829767, 0.827557613305]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.374152392256, 0.187904902606, 0.715809723861, 0.496137244366]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.65066760525, 0.225544474587, 0.362930183682, 0.429725658964]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.510462985795, 0.806658365254, 0.279706403943, 0.562810994572]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.633173111976, 0.141805371448, 0.646790366711, 0.253471711319]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.158546433687, 0.953996983528, 0.969068829767, 0.827557613305]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.374152392256, 0.187904902606, 0.715809723861, 0.496137244366]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.65066760525, 0.225544474587, 0.362930183682, 0.429725658964]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.510462985795, 0.806658365254, 0.279706403943, 0.562810994572]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.633173111976, 0.141805371448, 0.646790366711, 0.253471711319]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.158546433687, 0.953996983528, 0.969068829767, 0.827557613305]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.374152392256, 0.187904902606, 0.715809723861, 0.496137244366]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.65066760525, 0.225544474587, 0.362930183682, 0.429725658964]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.510462985795, 0.806658365254, 0.279706403943, 0.562810994572]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.633173111976, 0.141805371448, 0.646790366711, 0.253471711319]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.158546433687, 0.953996983528, 0.969068829767, 0.827557613305]} ...
03:33 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG_reduced_reduced_to_subbasis for {diffusion: [0.374152392256, 0.187904902606, 0.715809723861, 0.496137244366]} ...
/usr/local/lib/python2.7/site-packages/matplotlib/cbook/deprecation.py:106: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
  warnings.warn(message, mplDeprecation, stacklevel=1)
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args0]" time="0.00145411491394"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args1]" time="0.00108981132507"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args2]" time="0.00108098983765"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args3]" time="0.00105810165405"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args4]" time="0.00103688240051"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args5]" time="0.00103878974915"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args6]" time="0.00135803222656"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args7]" time="0.000930070877075"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args8]" time="0.00102686882019"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args9]" time="0.00103688240051"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args10]" time="0.00104188919067"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args11]" time="0.000926971435547"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args12]" time="0.00108003616333"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args13]" time="0.00137305259705"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args14]" time="0.00109791755676"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args15]" time="0.00111889839172"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args16]" time="0.00115489959717"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args17]" time="0.00114393234253"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args18]" time="0.00100898742676"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args19]" time="0.000921010971069"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args20]" time="0.0010769367218"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args21]" time="0.00103712081909"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args22]" time="20.6262712479"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>Waiting for connection file: ~/.ipython/profile_default/security/ipcontroller-client.json
Discretize ...
Showing some solutions
Solving for diffusion = 
[[ 0.43708611  0.95564288]
 [ 0.75879455  0.63879264]] ... 
Solving for diffusion = 
[[ 0.24041678  0.24039507]
 [ 0.15227525  0.87955853]] ... 
</system-out><system-err>03:33 new_ipcluster_pool: Staring IPython cluster with &quot;ipcluster start --daemonize --n=2&quot;
2017-10-24 14:00:48.891 [IPClusterStart] Created profile dir: u&apos;/home/pymor/.ipython/profile_default&apos;
03:41 IPythonPool: Connected to 2 engines
03:42 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:42 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:42 DiffusionOperatorP1: Determine global dofs ...
03:42 DiffusionOperatorP1: Boundary treatment ...
03:42 DiffusionOperatorP1: Assemble system matrix ...
03:42 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:42 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:42 DiffusionOperatorP1: Determine global dofs ...
03:42 DiffusionOperatorP1: Boundary treatment ...
03:42 DiffusionOperatorP1: Assemble system matrix ...
03:42 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:42 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:42 DiffusionOperatorP1: Determine global dofs ...
03:42 DiffusionOperatorP1: Boundary treatment ...
03:42 DiffusionOperatorP1: Assemble system matrix ...
03:42 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:42 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:42 DiffusionOperatorP1: Determine global dofs ...
03:42 DiffusionOperatorP1: Boundary treatment ...
03:42 DiffusionOperatorP1: Assemble system matrix ...
03:42 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:42 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:42 DiffusionOperatorP1: Determine global dofs ...
03:42 DiffusionOperatorP1: Boundary treatment ...
03:42 DiffusionOperatorP1: Assemble system matrix ...
03:42 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:42 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:42 DiffusionOperatorP1: Determine global dofs ...
03:42 DiffusionOperatorP1: Boundary treatment ...
03:42 DiffusionOperatorP1: Assemble system matrix ...
03:42 L2ProductP1: Integrate the products of the shape functions on each element
03:42 L2ProductP1: Determine global dofs ...
03:42 L2ProductP1: Boundary treatment ...
03:42 L2ProductP1: Assemble system matrix ...
03:42 L2ProductP1: Integrate the products of the shape functions on each element
03:43 L2ProductP1: Determine global dofs ...
03:43 L2ProductP1: Boundary treatment ...
03:43 L2ProductP1: Assemble system matrix ...
03:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:43 DiffusionOperatorP1: Determine global dofs ...
03:43 DiffusionOperatorP1: Boundary treatment ...
03:43 DiffusionOperatorP1: Assemble system matrix ...
03:43 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
03:43 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
03:43 new_ipcluster_pool: Stopping IPython cluster with &quot;ipcluster stop&quot;
2017-10-24 14:00:58.703 [IPClusterStop] Stopping cluster [pid=136] with [signal=2]
</system-err><system-out>Waiting for connection file: ~/.ipython/profile_default/security/ipcontroller-client.json
Discretize ...
Showing some solutions
Solving for diffusion = 
[[ 0.43708611  0.95564288]
 [ 0.75879455  0.63879264]] ... 
Solving for diffusion = 
[[ 0.24041678  0.24039507]
 [ 0.15227525  0.87955853]] ... 
</system-out><system-err>03:33 new_ipcluster_pool: Staring IPython cluster with &quot;ipcluster start --daemonize --n=2&quot;
2017-10-24 14:00:48.891 [IPClusterStart] Created profile dir: u&apos;/home/pymor/.ipython/profile_default&apos;
03:41 IPythonPool: Connected to 2 engines
03:42 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:42 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:42 DiffusionOperatorP1: Determine global dofs ...
03:42 DiffusionOperatorP1: Boundary treatment ...
03:42 DiffusionOperatorP1: Assemble system matrix ...
03:42 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:42 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:42 DiffusionOperatorP1: Determine global dofs ...
03:42 DiffusionOperatorP1: Boundary treatment ...
03:42 DiffusionOperatorP1: Assemble system matrix ...
03:42 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:42 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:42 DiffusionOperatorP1: Determine global dofs ...
03:42 DiffusionOperatorP1: Boundary treatment ...
03:42 DiffusionOperatorP1: Assemble system matrix ...
03:42 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:42 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:42 DiffusionOperatorP1: Determine global dofs ...
03:42 DiffusionOperatorP1: Boundary treatment ...
03:42 DiffusionOperatorP1: Assemble system matrix ...
03:42 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:42 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:42 DiffusionOperatorP1: Determine global dofs ...
03:42 DiffusionOperatorP1: Boundary treatment ...
03:42 DiffusionOperatorP1: Assemble system matrix ...
03:42 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:42 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:42 DiffusionOperatorP1: Determine global dofs ...
03:42 DiffusionOperatorP1: Boundary treatment ...
03:42 DiffusionOperatorP1: Assemble system matrix ...
03:42 L2ProductP1: Integrate the products of the shape functions on each element
03:42 L2ProductP1: Determine global dofs ...
03:42 L2ProductP1: Boundary treatment ...
03:42 L2ProductP1: Assemble system matrix ...
03:42 L2ProductP1: Integrate the products of the shape functions on each element
03:43 L2ProductP1: Determine global dofs ...
03:43 L2ProductP1: Boundary treatment ...
03:43 L2ProductP1: Assemble system matrix ...
03:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
03:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
03:43 DiffusionOperatorP1: Determine global dofs ...
03:43 DiffusionOperatorP1: Boundary treatment ...
03:43 DiffusionOperatorP1: Assemble system matrix ...
03:43 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
03:43 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
03:43 new_ipcluster_pool: Stopping IPython cluster with &quot;ipcluster stop&quot;
2017-10-24 14:00:58.703 [IPClusterStop] Stopping cluster [pid=136] with [signal=2]
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args23]" time="0.00113606452942"><skipped message="skipped test due to missing fenics" type="pytest.skip">/src/src/pymortests/demos.py:107: &lt;py._xmlgen.raw object at 0x7f25da5a8050&gt;</skipped></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args24]" time="31.715255022"><system-out>Waiting for connection file: ~/.ipython/profile_default/security/ipcontroller-client.json
Discretize ...
RB generation ...

Searching for maximum error on random snapshots ...


*** RESULTS ***

pyMOR discretization:
   number of blocks: 3x1
   grid intervals:   100
   ListVectorArray:  False

Greedy basis generation:
   size of training set:   8
   error estimator used:   False
   extension method:       gram_schmidt
   prescribed basis size:  5
   actual basis size:      5
   elapsed time:           8.61185693741

Stochastic error estimation:
    number of samples:                  10
    maximum NumpyMatrixOperator-norm:   5.3963819e-01 (mu = {diffusion: [0.776163239888, 0.187380949091, 0.471122009481]})
    maximum NumpyMatrixOperator-error:  1.4962135e-02 (mu = {diffusion: [0.776163239888, 0.187380949091, 0.471122009481]})
    maximum NumpyMatrixOperator-norm:   1.0796872e-01 (mu = {diffusion: [0.776163239888, 0.187380949091, 0.471122009481]})
    maximum NumpyMatrixOperator-error:  6.6545623e-04 (mu = {diffusion: [0.776163239888, 0.187380949091, 0.471122009481]})
    maximum estimated error:            3.2501130e-02 (mu = {diffusion: [0.776163239888, 0.187380949091, 0.471122009481]})
    minimum estimator effectivity:      2.2968487e-01 (mu = {diffusion: [0.130059337922, 0.918325039247, 0.464644598394]})
    maximum estimator effectivity:      8.5530738e-01 (mu = {diffusion: [0.484642852697, 0.598947231188, 0.66531387023]})
    maximum system matrix condition:    6.9153103e+00 (mu = {diffusion: [0.130059337922, 0.918325039247, 0.464644598394]})
    elapsed time:                       1.45715880394
</system-out><system-err>03:54 new_ipcluster_pool: Staring IPython cluster with &quot;ipcluster start --daemonize --n=2&quot;
04:03 IPythonPool: Connected to 2 engines
04:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
04:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
04:03 DiffusionOperatorP1: Determine global dofs ...
04:03 DiffusionOperatorP1: Boundary treatment ...
04:03 DiffusionOperatorP1: Assemble system matrix ...
04:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
04:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
04:03 DiffusionOperatorP1: Determine global dofs ...
04:03 DiffusionOperatorP1: Boundary treatment ...
04:03 DiffusionOperatorP1: Assemble system matrix ...
04:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
04:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
04:03 DiffusionOperatorP1: Determine global dofs ...
04:03 DiffusionOperatorP1: Boundary treatment ...
04:03 DiffusionOperatorP1: Assemble system matrix ...
04:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
04:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
04:04 DiffusionOperatorP1: Determine global dofs ...
04:04 DiffusionOperatorP1: Boundary treatment ...
04:04 DiffusionOperatorP1: Assemble system matrix ...
04:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
04:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
04:04 DiffusionOperatorP1: Determine global dofs ...
04:04 DiffusionOperatorP1: Boundary treatment ...
04:04 DiffusionOperatorP1: Assemble system matrix ...
04:04 L2ProductP1: Integrate the products of the shape functions on each element
04:04 L2ProductP1: Determine global dofs ...
04:04 L2ProductP1: Boundary treatment ...
04:04 L2ProductP1: Assemble system matrix ...
04:04 L2ProductP1: Integrate the products of the shape functions on each element
04:04 L2ProductP1: Determine global dofs ...
04:04 L2ProductP1: Boundary treatment ...
04:04 L2ProductP1: Assemble system matrix ...
04:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
04:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
04:04 DiffusionOperatorP1: Determine global dofs ...
04:04 DiffusionOperatorP1: Boundary treatment ...
04:04 DiffusionOperatorP1: Assemble system matrix ...
04:04 greedy: Started greedy search on 8 samples
04:04 greedy: Using pool of 2 workers for parallel greedy search
04:05 greedy: Reducing ...
04:05 |   CoerciveRBReductor: RB projection ...
04:05 |   CoerciveRBReductor: Assembling error estimator ...
04:05 |   |   ResidualReductor: Estimating residual range ...
04:05 |   |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
04:05 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
04:05 |   |   ResidualReductor: Projecting residual operator ...
04:05 greedy: Estimating errors ...
04:06 greedy: Maximum error after 0 extensions: 1.87457318215 (mu = {diffusion: [0.1, 0.1, 0.1]})
04:06 greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.1, 0.1]} ...
04:06 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 0.1, 0.1]} ...
04:06 greedy: Extending basis with solution snapshot ...
      
04:06 greedy: Reducing ...
04:06 |   CoerciveRBReductor: RB projection ...
04:06 |   CoerciveRBReductor: Assembling error estimator ...
04:06 |   |   ResidualReductor: Estimating residual range ...
04:06 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
04:07 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
04:07 |   |   |   |   gram_schmidt: Removing vector 1 of norm 0.0
04:07 |   |   |   |   gram_schmidt: Removing linear dependent vector 4
04:07 |   |   ResidualReductor: Projecting residual operator ...
04:07 greedy: Estimating errors ...
04:08 greedy: Maximum error after 1 extensions: 0.922095064104 (mu = {diffusion: [1.0, 0.1, 0.1]})
04:08 greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 0.1]} ...
04:08 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 0.1, 0.1]} ...
04:08 greedy: Extending basis with solution snapshot ...
      
04:08 greedy: Reducing ...
04:08 |   CoerciveRBReductor: RB projection ...
04:08 |   CoerciveRBReductor: Assembling error estimator ...
04:08 |   |   ResidualReductor: Estimating residual range ...
04:08 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
04:08 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
04:08 |   |   |   |   gram_schmidt: Removing vector 3 of norm 1.03514656995e-18
04:08 |   |   |   |   gram_schmidt: Orthonormalizing vector 4 again
04:08 |   |   |   |   gram_schmidt: Orthonormalizing vector 6 again
04:08 |   |   ResidualReductor: Projecting residual operator ...
04:08 greedy: Estimating errors ...
04:09 greedy: Maximum error after 2 extensions: 0.515273016321 (mu = {diffusion: [0.1, 0.1, 1.0]})
04:09 greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.1, 1.0]} ...
04:09 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 0.1, 1.0]} ...
04:09 greedy: Extending basis with solution snapshot ...
      
04:09 greedy: Reducing ...
04:09 |   CoerciveRBReductor: RB projection ...
04:10 |   CoerciveRBReductor: Assembling error estimator ...
04:10 |   |   ResidualReductor: Estimating residual range ...
04:10 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
04:10 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
04:10 |   |   |   |   gram_schmidt: Removing vector 6 of norm 1.74203942869e-17
04:10 |   |   |   |   gram_schmidt: Orthonormalizing vector 9 again
04:10 |   |   ResidualReductor: Projecting residual operator ...
04:10 greedy: Estimating errors ...
04:11 greedy: Maximum error after 3 extensions: 0.498063471053 (mu = {diffusion: [0.1, 1.0, 0.1]})
04:11 greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 0.1]} ...
04:11 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 1.0, 0.1]} ...
04:11 greedy: Extending basis with solution snapshot ...
      
04:11 greedy: Reducing ...
04:11 |   CoerciveRBReductor: RB projection ...
04:11 |   CoerciveRBReductor: Assembling error estimator ...
04:11 |   |   ResidualReductor: Estimating residual range ...
04:11 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 3 ...
04:12 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
04:12 |   |   |   |   gram_schmidt: Removing vector 9 of norm 6.58150146845e-18
04:12 |   |   |   |   gram_schmidt: Orthonormalizing vector 11 again
04:12 |   |   |   |   gram_schmidt: Orthonormalizing vector 12 again
04:12 |   |   ResidualReductor: Projecting residual operator ...
04:12 greedy: Estimating errors ...
04:13 greedy: Maximum error after 4 extensions: 0.335849856403 (mu = {diffusion: [1.0, 1.0, 0.1]})
04:13 greedy: Computing solution snapshot for mu = {diffusion: [1.0, 1.0, 0.1]} ...
04:13 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 1.0, 0.1]} ...
04:13 greedy: Extending basis with solution snapshot ...
      
04:13 greedy: Maximum number of 5 extensions reached.
04:13 greedy: Reducing once more ...
04:13 |   CoerciveRBReductor: RB projection ...
04:13 |   CoerciveRBReductor: Assembling error estimator ...
04:13 |   |   ResidualReductor: Estimating residual range ...
04:13 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 4 ...
04:13 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
04:13 |   |   |   |   gram_schmidt: Removing vector 12 of norm 1.53047838438e-17
04:13 |   |   |   |   gram_schmidt: Orthonormalizing vector 13 again
04:13 |   |   |   |   gram_schmidt: Orthonormalizing vector 14 again
04:13 |   |   |   |   gram_schmidt: Orthonormalizing vector 15 again
04:13 |   |   ResidualReductor: Projecting residual operator ...
04:13 greedy: Greedy search took 8.61185693741 seconds
04:13 error: Using pool of 2 workers for error analysis
04:15 new_ipcluster_pool: Stopping IPython cluster with &quot;ipcluster stop&quot;
2017-10-24 14:01:30.497 [IPClusterStop] Stopping cluster [pid=207] with [signal=2]
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args25]" time="34.1325631142"><system-out>Discretize ...
RB generation ...
Solving on training set ...
Performing POD ...
Reducing ...

Searching for maximum error on random snapshots ...


*** RESULTS ***

pyMOR discretization:
   number of blocks: 2x2
   grid intervals:   100
   ListVectorArray:  False

POD basis generation:
   size of training set:   81
   prescribed basis size:  5
   actual basis size:      5
   elapsed time:           12.1193830967

Stochastic error estimation:
    number of samples:                  10
    maximum NumpyMatrixOperator-norm:   6.2469480e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    maximum NumpyMatrixOperator-error:  1.8527955e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    maximum NumpyMatrixOperator-norm:   1.2572252e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    maximum NumpyMatrixOperator-error:  1.7197486e-02 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    maximum estimated error:            5.2448967e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    minimum estimator effectivity:      3.2318767e-01 (mu = {diffusion: [0.66531387023, 0.727653649775, 0.810954719993, 0.218701317605]})
    maximum estimator effectivity:      7.0287777e-01 (mu = {diffusion: [0.918325039247, 0.464644598394, 0.784391923305, 0.526382538185]})
    maximum system matrix condition:    3.3938010e+00 (mu = {diffusion: [0.408493406469, 0.281403649734, 0.736591807092, 0.130059337922]})
    elapsed time:                       1.66882991791
</system-out><system-err>04:26 new_ipcluster_pool: Staring IPython cluster with &quot;ipcluster start --daemonize --n=2&quot;
04:33 IPythonPool: Connected to 2 engines
04:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
04:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
04:34 DiffusionOperatorP1: Determine global dofs ...
04:34 DiffusionOperatorP1: Boundary treatment ...
04:34 DiffusionOperatorP1: Assemble system matrix ...
04:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
04:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
04:34 DiffusionOperatorP1: Determine global dofs ...
04:34 DiffusionOperatorP1: Boundary treatment ...
04:34 DiffusionOperatorP1: Assemble system matrix ...
04:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
04:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
04:34 DiffusionOperatorP1: Determine global dofs ...
04:34 DiffusionOperatorP1: Boundary treatment ...
04:34 DiffusionOperatorP1: Assemble system matrix ...
04:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
04:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
04:34 DiffusionOperatorP1: Determine global dofs ...
04:34 DiffusionOperatorP1: Boundary treatment ...
04:34 DiffusionOperatorP1: Assemble system matrix ...
04:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
04:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
04:34 DiffusionOperatorP1: Determine global dofs ...
04:34 DiffusionOperatorP1: Boundary treatment ...
04:34 DiffusionOperatorP1: Assemble system matrix ...
04:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
04:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
04:35 DiffusionOperatorP1: Determine global dofs ...
04:35 DiffusionOperatorP1: Boundary treatment ...
04:35 DiffusionOperatorP1: Assemble system matrix ...
04:35 L2ProductP1: Integrate the products of the shape functions on each element
04:35 L2ProductP1: Determine global dofs ...
04:35 L2ProductP1: Boundary treatment ...
04:35 L2ProductP1: Assemble system matrix ...
04:35 L2ProductP1: Integrate the products of the shape functions on each element
04:35 L2ProductP1: Determine global dofs ...
04:35 L2ProductP1: Boundary treatment ...
04:35 L2ProductP1: Assemble system matrix ...
04:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
04:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
04:35 DiffusionOperatorP1: Determine global dofs ...
04:35 DiffusionOperatorP1: Boundary treatment ...
04:35 DiffusionOperatorP1: Assemble system matrix ...
04:35 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.1, 0.1]} ...
04:35 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.1, 0.55]} ...
04:35 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.1, 1.0]} ...
04:35 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.55, 0.1]} ...
04:36 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.55, 0.55]} ...
04:36 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.55, 1.0]} ...
04:36 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 1.0, 0.1]} ...
04:36 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 1.0, 0.55]} ...
04:36 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 1.0, 1.0]} ...
04:36 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 0.1, 0.1]} ...
04:36 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 0.1, 0.55]} ...
04:37 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 0.1, 1.0]} ...
04:37 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 0.55, 0.1]} ...
04:37 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 0.55, 0.55]} ...
04:37 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 0.55, 1.0]} ...
04:37 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 1.0, 0.1]} ...
04:37 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 1.0, 0.55]} ...
04:37 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 1.0, 1.0]} ...
04:38 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.1, 0.1]} ...
04:38 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.1, 0.55]} ...
04:38 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.1, 1.0]} ...
04:38 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.55, 0.1]} ...
04:38 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.55, 0.55]} ...
04:38 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.55, 1.0]} ...
04:38 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 1.0, 0.1]} ...
04:39 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 1.0, 0.55]} ...
04:39 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 1.0, 1.0]} ...
04:39 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 0.1, 0.1]} ...
04:39 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 0.1, 0.55]} ...
04:39 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 0.1, 1.0]} ...
04:39 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 0.55, 0.1]} ...
04:39 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 0.55, 0.55]} ...
04:40 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 0.55, 1.0]} ...
04:40 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 1.0, 0.1]} ...
04:40 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 1.0, 0.55]} ...
04:40 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 1.0, 1.0]} ...
04:40 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.55, 0.1, 0.1]} ...
04:40 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.55, 0.1, 0.55]} ...
04:40 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.55, 0.1, 1.0]} ...
04:41 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.55, 0.55, 0.1]} ...
04:41 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.55, 0.55, 0.55]} ...
04:41 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.55, 0.55, 1.0]} ...
04:41 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.55, 1.0, 0.1]} ...
04:41 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.55, 1.0, 0.55]} ...
04:41 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.55, 1.0, 1.0]} ...
04:41 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 0.1, 0.1]} ...
04:42 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 0.1, 0.55]} ...
04:42 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 0.1, 1.0]} ...
04:42 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 0.55, 0.1]} ...
04:42 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 0.55, 0.55]} ...
04:42 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 0.55, 1.0]} ...
04:42 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 1.0, 0.1]} ...
04:42 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 1.0, 0.55]} ...
04:42 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 1.0, 1.0]} ...
04:43 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.1, 0.1]} ...
04:43 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.1, 0.55]} ...
04:43 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.1, 1.0]} ...
04:43 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.55, 0.1]} ...
04:43 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.55, 0.55]} ...
04:43 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.55, 1.0]} ...
04:43 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 1.0, 0.1]} ...
04:44 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 1.0, 0.55]} ...
04:44 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 1.0, 1.0]} ...
04:44 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.55, 0.1, 0.1]} ...
04:44 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.55, 0.1, 0.55]} ...
04:44 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.55, 0.1, 1.0]} ...
04:44 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.55, 0.55, 0.1]} ...
04:44 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.55, 0.55, 0.55]} ...
04:45 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.55, 0.55, 1.0]} ...
04:45 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.55, 1.0, 0.1]} ...
04:45 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.55, 1.0, 0.55]} ...
04:45 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.55, 1.0, 1.0]} ...
04:45 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 0.1, 0.1]} ...
04:45 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 0.1, 0.55]} ...
04:45 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 0.1, 1.0]} ...
04:46 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 0.55, 0.1]} ...
04:46 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 0.55, 0.55]} ...
04:46 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 0.55, 1.0]} ...
04:46 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 1.0, 0.1]} ...
04:46 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 1.0, 0.55]} ...
04:46 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 1.0, 1.0]} ...
04:46 pod: Computing Gramian (81 vectors) ...
04:46 pod: Computing eigenvalue decomposition ...
04:46 pod: Computing left-singular vectors (5 vectors) ...
04:46 pod: Re-orthonormalizing POD modes ...
04:47 pod: Checking orthonormality ...
04:47 CoerciveRBReductor: RB projection ...
04:47 CoerciveRBReductor: Assembling error estimator ...
04:47 |   ResidualReductor: Estimating residual range ...
04:47 |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
04:47 |   |   estimate_image_hierarchical: Orthonormalizing ...
04:47 |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
04:47 |   |   estimate_image_hierarchical: Orthonormalizing ...
04:47 |   |   |   gram_schmidt: Removing vector 1 of norm 9.11320469415e-19
04:47 |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
04:47 |   |   estimate_image_hierarchical: Orthonormalizing ...
04:47 |   |   |   gram_schmidt: Removing vector 5 of norm 2.41500587868e-18
04:47 |   |   |   gram_schmidt: Orthonormalizing vector 7 again
04:47 |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
04:47 |   |   estimate_image_hierarchical: Orthonormalizing ...
04:47 |   |   |   gram_schmidt: Removing vector 9 of norm 1.45881741773e-18
04:47 |   |   |   gram_schmidt: Orthonormalizing vector 10 again
04:47 |   |   |   gram_schmidt: Orthonormalizing vector 11 again
04:47 |   |   |   gram_schmidt: Removing linear dependent vector 12
04:47 |   |   |   gram_schmidt: Removing linear dependent vector 13
04:47 |   |   estimate_image_hierarchical: Estimating image for basis vector 3 ...
04:47 |   |   estimate_image_hierarchical: Orthonormalizing ...
04:47 |   |   |   gram_schmidt: Removing vector 11 of norm 2.6502297411e-18
04:47 |   |   |   gram_schmidt: Orthonormalizing vector 12 again
04:47 |   |   |   gram_schmidt: Orthonormalizing vector 13 again
04:47 |   |   |   gram_schmidt: Orthonormalizing vector 14 again
04:47 |   |   |   gram_schmidt: Removing linear dependent vector 15
04:47 |   |   estimate_image_hierarchical: Estimating image for basis vector 4 ...
04:47 |   |   estimate_image_hierarchical: Orthonormalizing ...
04:47 |   |   |   gram_schmidt: Removing vector 14 of norm 3.93833219203e-18
04:47 |   |   |   gram_schmidt: Orthonormalizing vector 15 again
04:47 |   |   |   gram_schmidt: Orthonormalizing vector 16 again
04:47 |   |   |   gram_schmidt: Orthonormalizing vector 17 again
04:47 |   |   |   gram_schmidt: Removing linear dependent vector 18
04:47 |   ResidualReductor: Projecting residual operator ...
04:47 error: Using pool of 2 workers for error analysis
04:49 new_ipcluster_pool: Stopping IPython cluster with &quot;ipcluster stop&quot;
2017-10-24 14:02:04.585 [IPClusterStop] Stopping cluster [pid=279] with [signal=2]
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args26]" time="43.6262660027"><system-out>Discretize ...
RB generation ...

Searching for maximum error on random snapshots ...


*** RESULTS ***

pyMOR discretization:
   number of blocks: 2x2
   grid intervals:   100
   ListVectorArray:  False

Adaptive greedy basis generation:
   initial size of validation set:  11
   error estimator used:            True
   extension method:                gram_schmidt
   prescribed basis size:           30
   actual basis size:               30
   elapsed time:                    21.7683310509

Stochastic error estimation:
    number of samples:                  10
    maximum NumpyMatrixOperator-norm:   6.2469480e-01 (mu = {diffusion: [0.353475066304, 0.451250002531, 0.883998288648, 0.173120605533]})
    maximum NumpyMatrixOperator-error:  2.9750898e-13 (mu = {diffusion: [0.353475066304, 0.451250002531, 0.883998288648, 0.173120605533]})
    maximum NumpyMatrixOperator-norm:   1.2572252e-01 (mu = {diffusion: [0.35764848791, 0.557431748776, 0.233155662347, 0.27679058631]})
    maximum NumpyMatrixOperator-error:  1.2308123e-14 (mu = {diffusion: [0.35764848791, 0.557431748776, 0.233155662347, 0.27679058631]})
    maximum estimated error:            7.1987308e-13 (mu = {diffusion: [0.353475066304, 0.451250002531, 0.883998288648, 0.173120605533]})
    minimum estimator effectivity:      3.5637444e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    maximum estimator effectivity:      4.7616459e+00 (mu = {diffusion: [0.35764848791, 0.557431748776, 0.233155662347, 0.27679058631]})
    maximum system matrix condition:    8.2874401e+00 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    elapsed time:                       1.64789891243
</system-out><system-err>05:00 new_ipcluster_pool: Staring IPython cluster with &quot;ipcluster start --daemonize --n=2&quot;
05:07 IPythonPool: Connected to 2 engines
05:08 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
05:08 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
05:08 DiffusionOperatorP1: Determine global dofs ...
05:08 DiffusionOperatorP1: Boundary treatment ...
05:08 DiffusionOperatorP1: Assemble system matrix ...
05:08 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
05:08 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
05:08 DiffusionOperatorP1: Determine global dofs ...
05:08 DiffusionOperatorP1: Boundary treatment ...
05:08 DiffusionOperatorP1: Assemble system matrix ...
05:08 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
05:08 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
05:08 DiffusionOperatorP1: Determine global dofs ...
05:08 DiffusionOperatorP1: Boundary treatment ...
05:08 DiffusionOperatorP1: Assemble system matrix ...
05:08 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
05:08 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
05:08 DiffusionOperatorP1: Determine global dofs ...
05:08 DiffusionOperatorP1: Boundary treatment ...
05:08 DiffusionOperatorP1: Assemble system matrix ...
05:08 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
05:08 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
05:09 DiffusionOperatorP1: Determine global dofs ...
05:09 DiffusionOperatorP1: Boundary treatment ...
05:09 DiffusionOperatorP1: Assemble system matrix ...
05:09 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
05:09 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
05:09 DiffusionOperatorP1: Determine global dofs ...
05:09 DiffusionOperatorP1: Boundary treatment ...
05:09 DiffusionOperatorP1: Assemble system matrix ...
05:09 L2ProductP1: Integrate the products of the shape functions on each element
05:09 L2ProductP1: Determine global dofs ...
05:09 L2ProductP1: Boundary treatment ...
05:09 L2ProductP1: Assemble system matrix ...
05:09 L2ProductP1: Integrate the products of the shape functions on each element
05:09 L2ProductP1: Determine global dofs ...
05:09 L2ProductP1: Boundary treatment ...
05:09 L2ProductP1: Assemble system matrix ...
05:09 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
05:09 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
05:09 DiffusionOperatorP1: Determine global dofs ...
05:09 DiffusionOperatorP1: Boundary treatment ...
05:09 DiffusionOperatorP1: Assemble system matrix ...
05:09 adaptive_greedy: Using pool of 2 workers for parallel greedy search
05:09 adaptive_greedy: Training set size: 16. Validation set size: 11
05:09 adaptive_greedy: Reducing ...
05:09 |   CoerciveRBReductor: RB projection ...
05:09 |   CoerciveRBReductor: Assembling error estimator ...
05:09 |   |   ResidualReductor: Estimating residual range ...
05:09 |   |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
05:09 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:09 |   |   ResidualReductor: Projecting residual operator ...
05:09 adaptive_greedy: Estimating errors ...
05:10 adaptive_greedy: Maximum error after 0 extensions: 1.87457318215 (mu = {diffusion: [0.1, 0.1, 0.1, 0.1]})
05:10 adaptive_greedy: Maximum validation error: 1.58157068707
05:10 adaptive_greedy: Validation error to training error ratio: 8.437e-01
05:10 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.1, 0.1, 0.1]} ...
05:10 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.1, 0.1]} ...
05:10 adaptive_greedy: Extending basis with solution snapshot ...
      
05:10 adaptive_greedy: Reducing ...
05:10 |   CoerciveRBReductor: RB projection ...
05:10 |   CoerciveRBReductor: Assembling error estimator ...
05:10 |   |   ResidualReductor: Estimating residual range ...
05:10 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
05:10 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:10 |   |   |   |   gram_schmidt: Removing vector 1 of norm 0.0
05:10 |   |   |   |   gram_schmidt: Removing linear dependent vector 5
05:10 |   |   ResidualReductor: Projecting residual operator ...
05:10 adaptive_greedy: Estimating errors ...
05:10 adaptive_greedy: Maximum error after 1 extensions: 1.33811391464 (mu = {diffusion: [0.1, 0.1, 0.1, 1.0]})
05:10 adaptive_greedy: Maximum validation error: 0.558357537285
05:10 adaptive_greedy: Validation error to training error ratio: 4.173e-01
05:10 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.1, 0.1, 1.0]} ...
05:10 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.1, 1.0]} ...
05:10 adaptive_greedy: Extending basis with solution snapshot ...
      
05:10 adaptive_greedy: Reducing ...
05:10 |   CoerciveRBReductor: RB projection ...
05:10 |   CoerciveRBReductor: Assembling error estimator ...
05:10 |   |   ResidualReductor: Estimating residual range ...
05:10 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
05:10 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:10 |   |   |   |   gram_schmidt: Removing vector 4 of norm 5.12939122542e-18
05:10 |   |   |   |   gram_schmidt: Orthonormalizing vector 8 again
05:10 |   |   ResidualReductor: Projecting residual operator ...
05:10 adaptive_greedy: Estimating errors ...
05:10 adaptive_greedy: Maximum error after 2 extensions: 1.25686364725 (mu = {diffusion: [0.1, 1.0, 0.1, 0.1]})
05:10 adaptive_greedy: Maximum validation error: 0.458363458823
05:10 adaptive_greedy: Validation error to training error ratio: 3.647e-01
05:10 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 0.1, 0.1]} ...
05:10 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.1, 0.1]} ...
05:10 adaptive_greedy: Extending basis with solution snapshot ...
      
05:10 adaptive_greedy: Reducing ...
05:10 |   CoerciveRBReductor: RB projection ...
05:10 |   CoerciveRBReductor: Assembling error estimator ...
05:10 |   |   ResidualReductor: Estimating residual range ...
05:10 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
05:11 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:11 |   |   |   |   gram_schmidt: Removing vector 8 of norm 6.70392869889e-18
05:11 |   |   |   |   gram_schmidt: Removing linear dependent vector 11
05:11 |   |   |   |   gram_schmidt: Removing linear dependent vector 12
05:11 |   |   ResidualReductor: Projecting residual operator ...
05:11 adaptive_greedy: Estimating errors ...
05:11 adaptive_greedy: Maximum error after 3 extensions: 1.21164585976 (mu = {diffusion: [0.1, 1.0, 0.1, 1.0]})
05:11 adaptive_greedy: Maximum validation error: 0.463663281283
05:11 adaptive_greedy: Validation error to training error ratio: 3.827e-01
05:11 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 0.1, 1.0]} ...
05:11 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.1, 1.0]} ...
05:11 adaptive_greedy: Extending basis with solution snapshot ...
      
05:11 adaptive_greedy: Reducing ...
05:11 |   CoerciveRBReductor: RB projection ...
05:11 |   CoerciveRBReductor: Assembling error estimator ...
05:11 |   |   ResidualReductor: Estimating residual range ...
05:11 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 3 ...
05:11 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:11 |   |   |   |   gram_schmidt: Removing vector 10 of norm 2.05701825966e-17
05:11 |   |   |   |   gram_schmidt: Orthonormalizing vector 12 again
05:11 |   |   |   |   gram_schmidt: Orthonormalizing vector 13 again
05:11 |   |   |   |   gram_schmidt: Removing linear dependent vector 14
05:11 |   |   ResidualReductor: Projecting residual operator ...
05:11 adaptive_greedy: Estimating errors ...
05:11 adaptive_greedy: Maximum error after 4 extensions: 0.810666824023 (mu = {diffusion: [1.0, 0.1, 0.1, 0.1]})
05:11 adaptive_greedy: Maximum validation error: 0.43155548551
05:11 adaptive_greedy: Validation error to training error ratio: 5.323e-01
05:11 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 0.1, 0.1]} ...
05:11 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.1, 0.1]} ...
05:11 adaptive_greedy: Extending basis with solution snapshot ...
      
05:11 adaptive_greedy: Reducing ...
05:11 |   CoerciveRBReductor: RB projection ...
05:11 |   CoerciveRBReductor: Assembling error estimator ...
05:11 |   |   ResidualReductor: Estimating residual range ...
05:11 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 4 ...
05:11 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:11 |   |   |   |   gram_schmidt: Removing vector 13 of norm 8.12177779512e-18
05:11 |   |   |   |   gram_schmidt: Removing linear dependent vector 15
05:11 |   |   |   |   gram_schmidt: Removing linear dependent vector 17
05:11 |   |   ResidualReductor: Projecting residual operator ...
05:11 adaptive_greedy: Estimating errors ...
05:11 adaptive_greedy: Maximum error after 5 extensions: 0.945236144361 (mu = {diffusion: [1.0, 0.1, 1.0, 0.1]})
05:11 adaptive_greedy: Maximum validation error: 0.469918909741
05:11 adaptive_greedy: Validation error to training error ratio: 4.971e-01
05:11 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 1.0, 0.1]} ...
05:11 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 1.0, 0.1]} ...
05:11 adaptive_greedy: Extending basis with solution snapshot ...
      
05:11 adaptive_greedy: Reducing ...
05:11 |   CoerciveRBReductor: RB projection ...
05:11 |   CoerciveRBReductor: Assembling error estimator ...
05:11 |   |   ResidualReductor: Estimating residual range ...
05:11 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 5 ...
05:12 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:12 |   |   |   |   gram_schmidt: Removing vector 15 of norm 5.72504129153e-18
05:12 |   |   |   |   gram_schmidt: Removing linear dependent vector 16
05:12 |   |   |   |   gram_schmidt: Removing linear dependent vector 17
05:12 |   |   |   |   gram_schmidt: Removing linear dependent vector 18
05:12 |   |   |   |   gram_schmidt: Orthonormalizing vector 19 again
05:12 |   |   ResidualReductor: Projecting residual operator ...
05:12 adaptive_greedy: Estimating errors ...
05:12 adaptive_greedy: Maximum error after 6 extensions: 0.744411529945 (mu = {diffusion: [1.0, 0.1, 0.1, 1.0]})
05:12 adaptive_greedy: Maximum validation error: 0.405314452605
05:12 adaptive_greedy: Validation error to training error ratio: 5.445e-01
05:12 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 0.1, 1.0]} ...
05:12 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.1, 1.0]} ...
05:12 adaptive_greedy: Extending basis with solution snapshot ...
      
05:12 adaptive_greedy: Reducing ...
05:12 |   CoerciveRBReductor: RB projection ...
05:12 |   CoerciveRBReductor: Assembling error estimator ...
05:12 |   |   ResidualReductor: Estimating residual range ...
05:12 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 6 ...
05:12 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:12 |   |   |   |   gram_schmidt: Removing vector 16 of norm 1.63054269844e-17
05:12 |   |   |   |   gram_schmidt: Orthonormalizing vector 17 again
05:12 |   |   |   |   gram_schmidt: Removing linear dependent vector 18
05:12 |   |   |   |   gram_schmidt: Removing linear dependent vector 19
05:12 |   |   |   |   gram_schmidt: Orthonormalizing vector 20 again
05:12 |   |   ResidualReductor: Projecting residual operator ...
05:12 adaptive_greedy: Estimating errors ...
05:12 adaptive_greedy: Maximum error after 7 extensions: 0.658623198628 (mu = {diffusion: [0.1, 1.0, 1.0, 0.1]})
05:12 adaptive_greedy: Maximum validation error: 0.4004733607
05:12 adaptive_greedy: Validation error to training error ratio: 6.080e-01
05:12 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 1.0, 0.1]} ...
05:12 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 1.0, 0.1]} ...
05:12 adaptive_greedy: Extending basis with solution snapshot ...
      
05:12 adaptive_greedy: Reducing ...
05:12 |   CoerciveRBReductor: RB projection ...
05:12 |   CoerciveRBReductor: Assembling error estimator ...
05:12 |   |   ResidualReductor: Estimating residual range ...
05:12 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 7 ...
05:12 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:12 |   |   |   |   gram_schmidt: Removing vector 18 of norm 2.207125561e-17
05:12 |   |   |   |   gram_schmidt: Removing linear dependent vector 19
05:12 |   |   |   |   gram_schmidt: Removing linear dependent vector 20
05:12 |   |   |   |   gram_schmidt: Orthonormalizing vector 21 again
05:12 |   |   |   |   gram_schmidt: Removing linear dependent vector 22
05:12 |   |   ResidualReductor: Projecting residual operator ...
05:12 adaptive_greedy: Estimating errors ...
05:12 adaptive_greedy: Maximum error after 8 extensions: 0.601851045213 (mu = {diffusion: [1.0, 0.1, 1.0, 1.0]})
05:12 adaptive_greedy: Maximum validation error: 0.396076805105
05:12 adaptive_greedy: Validation error to training error ratio: 6.581e-01
05:12 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 1.0, 1.0]} ...
05:12 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 1.0, 1.0]} ...
05:13 adaptive_greedy: Extending basis with solution snapshot ...
      
05:13 adaptive_greedy: Reducing ...
05:13 |   CoerciveRBReductor: RB projection ...
05:13 |   CoerciveRBReductor: Assembling error estimator ...
05:13 |   |   ResidualReductor: Estimating residual range ...
05:13 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 8 ...
05:13 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:13 |   |   |   |   gram_schmidt: Removing vector 19 of norm 3.065336727e-17
05:13 |   |   |   |   gram_schmidt: Orthonormalizing vector 20 again
05:13 |   |   |   |   gram_schmidt: Orthonormalizing vector 21 again
05:13 |   |   |   |   gram_schmidt: Orthonormalizing vector 22 again
05:13 |   |   |   |   gram_schmidt: Orthonormalizing vector 23 again
05:13 |   |   ResidualReductor: Projecting residual operator ...
05:13 adaptive_greedy: Estimating errors ...
05:13 adaptive_greedy: Maximum error after 9 extensions: 0.397415815023 (mu = {diffusion: [1.0, 1.0, 1.0, 0.1]})
05:13 adaptive_greedy: Maximum validation error: 0.128908134741
05:13 adaptive_greedy: Validation error to training error ratio: 3.244e-01
05:13 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 1.0, 1.0, 0.1]} ...
05:13 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 1.0, 0.1]} ...
05:13 adaptive_greedy: Extending basis with solution snapshot ...
      
05:13 adaptive_greedy: Reducing ...
05:13 |   CoerciveRBReductor: RB projection ...
05:13 |   CoerciveRBReductor: Assembling error estimator ...
05:13 |   |   ResidualReductor: Estimating residual range ...
05:13 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 9 ...
05:13 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:13 |   |   |   |   gram_schmidt: Removing vector 23 of norm 1.19934432999e-16
05:13 |   |   |   |   gram_schmidt: Orthonormalizing vector 24 again
05:13 |   |   |   |   gram_schmidt: Orthonormalizing vector 25 again
05:13 |   |   |   |   gram_schmidt: Orthonormalizing vector 26 again
05:13 |   |   |   |   gram_schmidt: Orthonormalizing vector 27 again
05:13 |   |   ResidualReductor: Projecting residual operator ...
05:13 adaptive_greedy: Estimating errors ...
05:13 adaptive_greedy: Maximum error after 10 extensions: 0.204648291154 (mu = {diffusion: [0.1, 0.1, 1.0, 1.0]})
05:13 adaptive_greedy: Maximum validation error: 0.0178917469215
05:13 adaptive_greedy: Validation error to training error ratio: 8.743e-02
05:13 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.1, 1.0, 1.0]} ...
05:13 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 1.0, 1.0]} ...
05:13 adaptive_greedy: Extending basis with solution snapshot ...
05:13 |   gram_schmidt: Orthonormalizing vector 10 again
      
05:14 adaptive_greedy: Reducing ...
05:14 |   CoerciveRBReductor: RB projection ...
05:14 |   CoerciveRBReductor: Assembling error estimator ...
05:14 |   |   ResidualReductor: Estimating residual range ...
05:14 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 10 ...
05:14 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:14 |   |   |   |   gram_schmidt: Removing vector 27 of norm 2.06772421639e-16
05:14 |   |   |   |   gram_schmidt: Orthonormalizing vector 28 again
05:14 |   |   |   |   gram_schmidt: Orthonormalizing vector 29 again
05:14 |   |   |   |   gram_schmidt: Orthonormalizing vector 30 again
05:14 |   |   |   |   gram_schmidt: Orthonormalizing vector 31 again
05:14 |   |   ResidualReductor: Projecting residual operator ...
05:14 adaptive_greedy: Estimating errors ...
05:14 adaptive_greedy: Maximum error after 11 extensions: 0.191531150322 (mu = {diffusion: [1.0, 1.0, 0.1, 0.1]})
05:14 adaptive_greedy: Maximum validation error: 0.00930921344781
05:14 adaptive_greedy: Validation error to training error ratio: 4.860e-02
05:14 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 1.0, 0.1, 0.1]} ...
05:14 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 0.1, 0.1]} ...
05:14 adaptive_greedy: Extending basis with solution snapshot ...
05:14 |   gram_schmidt: Orthonormalizing vector 11 again
      
05:14 adaptive_greedy: Reducing ...
05:14 |   CoerciveRBReductor: RB projection ...
05:14 |   CoerciveRBReductor: Assembling error estimator ...
05:14 |   |   ResidualReductor: Estimating residual range ...
05:14 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 11 ...
05:14 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:14 |   |   |   |   gram_schmidt: Removing vector 31 of norm 1.60497556687e-16
05:14 |   |   |   |   gram_schmidt: Orthonormalizing vector 32 again
05:14 |   |   |   |   gram_schmidt: Orthonormalizing vector 33 again
05:14 |   |   |   |   gram_schmidt: Orthonormalizing vector 34 again
05:14 |   |   |   |   gram_schmidt: Orthonormalizing vector 35 again
05:14 |   |   ResidualReductor: Projecting residual operator ...
05:14 adaptive_greedy: Estimating errors ...
05:14 adaptive_greedy: Maximum error after 12 extensions: 0.00206891524656 (mu = {diffusion: [1.0, 1.0, 0.1, 1.0]})
05:14 adaptive_greedy: Maximum validation error: 0.00273295911723
05:14 adaptive_greedy: Validation error to training error ratio: 1.321e+00
05:14 |INFO2|adaptive_greedy: Overfitting detected. Computing element indicators ...
05:14 adaptive_greedy: Refining 1 elements: [0]
05:14 adaptive_greedy: New training set size: 81. New validation set size: 26
05:14 adaptive_greedy: Number of refinements: 1
      
05:14 adaptive_greedy: Estimating errors ...
05:15 adaptive_greedy: Maximum error after 12 extensions: 0.00925691045303 (mu = {diffusion: [1.0, 0.1, 0.1, 0.55]})
05:15 adaptive_greedy: Maximum validation error: 0.00273295911723
05:15 adaptive_greedy: Validation error to training error ratio: 2.952e-01
05:15 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 0.1, 0.55]} ...
05:15 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.1, 0.55]} ...
05:15 adaptive_greedy: Extending basis with solution snapshot ...
05:15 |   gram_schmidt: Orthonormalizing vector 12 again
      
05:15 adaptive_greedy: Reducing ...
05:15 |   CoerciveRBReductor: RB projection ...
05:15 |   CoerciveRBReductor: Assembling error estimator ...
05:15 |   |   ResidualReductor: Estimating residual range ...
05:15 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 12 ...
05:15 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:15 |   |   |   |   gram_schmidt: Removing vector 35 of norm 1.88441281344e-15
05:15 |   |   |   |   gram_schmidt: Orthonormalizing vector 36 again
05:15 |   |   |   |   gram_schmidt: Orthonormalizing vector 37 again
05:15 |   |   |   |   gram_schmidt: Orthonormalizing vector 38 again
05:15 |   |   |   |   gram_schmidt: Orthonormalizing vector 39 again
05:15 |   |   ResidualReductor: Projecting residual operator ...
05:15 adaptive_greedy: Estimating errors ...
05:15 adaptive_greedy: Maximum error after 13 extensions: 0.00925680481254 (mu = {diffusion: [0.1, 0.55, 1.0, 0.1]})
05:15 adaptive_greedy: Maximum validation error: 0.00263542238613
05:15 adaptive_greedy: Validation error to training error ratio: 2.847e-01
05:15 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.55, 1.0, 0.1]} ...
05:15 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 1.0, 0.1]} ...
05:15 adaptive_greedy: Extending basis with solution snapshot ...
05:15 |   gram_schmidt: Orthonormalizing vector 13 again
      
05:15 adaptive_greedy: Reducing ...
05:15 |   CoerciveRBReductor: RB projection ...
05:15 |   CoerciveRBReductor: Assembling error estimator ...
05:15 |   |   ResidualReductor: Estimating residual range ...
05:15 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 13 ...
05:15 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:15 |   |   |   |   gram_schmidt: Removing vector 39 of norm 2.46794997245e-15
05:15 |   |   |   |   gram_schmidt: Orthonormalizing vector 40 again
05:15 |   |   |   |   gram_schmidt: Orthonormalizing vector 41 again
05:15 |   |   |   |   gram_schmidt: Orthonormalizing vector 42 again
05:15 |   |   |   |   gram_schmidt: Orthonormalizing vector 43 again
05:16 |   |   ResidualReductor: Projecting residual operator ...
05:16 adaptive_greedy: Estimating errors ...
05:16 adaptive_greedy: Maximum error after 14 extensions: 0.00530753862259 (mu = {diffusion: [1.0, 0.55, 0.1, 0.55]})
05:16 adaptive_greedy: Maximum validation error: 0.00259566746335
05:16 adaptive_greedy: Validation error to training error ratio: 4.891e-01
05:16 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.55, 0.1, 0.55]} ...
05:16 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.55, 0.1, 0.55]} ...
05:16 adaptive_greedy: Extending basis with solution snapshot ...
05:16 |   gram_schmidt: Orthonormalizing vector 14 again
      
05:16 adaptive_greedy: Reducing ...
05:16 |   CoerciveRBReductor: RB projection ...
05:16 |   CoerciveRBReductor: Assembling error estimator ...
05:16 |   |   ResidualReductor: Estimating residual range ...
05:16 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 14 ...
05:16 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:16 |   |   |   |   gram_schmidt: Removing vector 43 of norm 4.89834300469e-15
05:16 |   |   |   |   gram_schmidt: Orthonormalizing vector 44 again
05:16 |   |   |   |   gram_schmidt: Orthonormalizing vector 45 again
05:16 |   |   |   |   gram_schmidt: Orthonormalizing vector 46 again
05:16 |   |   |   |   gram_schmidt: Orthonormalizing vector 47 again
05:16 |   |   ResidualReductor: Projecting residual operator ...
05:16 adaptive_greedy: Estimating errors ...
05:16 adaptive_greedy: Maximum error after 15 extensions: 0.00443042223028 (mu = {diffusion: [0.55, 0.1, 0.1, 1.0]})
05:16 adaptive_greedy: Maximum validation error: 0.00151878973202
05:16 adaptive_greedy: Validation error to training error ratio: 3.428e-01
05:16 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.55, 0.1, 0.1, 1.0]} ...
05:16 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 0.1, 1.0]} ...
05:16 adaptive_greedy: Extending basis with solution snapshot ...
05:16 |   gram_schmidt: Orthonormalizing vector 15 again
      
05:16 adaptive_greedy: Reducing ...
05:16 |   CoerciveRBReductor: RB projection ...
05:17 |   CoerciveRBReductor: Assembling error estimator ...
05:17 |   |   ResidualReductor: Estimating residual range ...
05:17 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 15 ...
05:17 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:17 |   |   |   |   gram_schmidt: Removing vector 47 of norm 6.54445509128e-15
05:17 |   |   |   |   gram_schmidt: Orthonormalizing vector 48 again
05:17 |   |   |   |   gram_schmidt: Orthonormalizing vector 49 again
05:17 |   |   |   |   gram_schmidt: Orthonormalizing vector 50 again
05:17 |   |   |   |   gram_schmidt: Orthonormalizing vector 51 again
05:17 |   |   ResidualReductor: Projecting residual operator ...
05:17 adaptive_greedy: Estimating errors ...
05:17 adaptive_greedy: Maximum error after 16 extensions: 0.000364046586956 (mu = {diffusion: [0.55, 0.1, 0.55, 1.0]})
05:17 adaptive_greedy: Maximum validation error: 0.000206953549587
05:17 adaptive_greedy: Validation error to training error ratio: 5.685e-01
05:17 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.55, 0.1, 0.55, 1.0]} ...
05:17 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 0.55, 1.0]} ...
05:17 adaptive_greedy: Extending basis with solution snapshot ...
05:17 |   gram_schmidt: Orthonormalizing vector 16 again
      
05:17 adaptive_greedy: Reducing ...
05:17 |   CoerciveRBReductor: RB projection ...
05:17 |   CoerciveRBReductor: Assembling error estimator ...
05:17 |   |   ResidualReductor: Estimating residual range ...
05:17 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 16 ...
05:17 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:17 |   |   |   |   gram_schmidt: Orthonormalizing vector 52 again
05:17 |   |   |   |   gram_schmidt: Orthonormalizing vector 53 again
05:17 |   |   |   |   gram_schmidt: Orthonormalizing vector 54 again
05:17 |   |   |   |   gram_schmidt: Orthonormalizing vector 55 again
05:17 |   |   ResidualReductor: Projecting residual operator ...
05:17 adaptive_greedy: Estimating errors ...
05:18 adaptive_greedy: Maximum error after 17 extensions: 0.000261408694572 (mu = {diffusion: [1.0, 1.0, 0.1, 1.0]})
05:18 adaptive_greedy: Maximum validation error: 0.000103815221625
05:18 adaptive_greedy: Validation error to training error ratio: 3.971e-01
05:18 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 1.0, 0.1, 1.0]} ...
05:18 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 0.1, 1.0]} ...
05:18 adaptive_greedy: Extending basis with solution snapshot ...
05:18 |   gram_schmidt: Orthonormalizing vector 17 again
      
05:18 adaptive_greedy: Reducing ...
05:18 |   CoerciveRBReductor: RB projection ...
05:18 |   CoerciveRBReductor: Assembling error estimator ...
05:18 |   |   ResidualReductor: Estimating residual range ...
05:18 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 17 ...
05:18 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:18 |   |   |   |   gram_schmidt: Orthonormalizing vector 57 again
05:18 |   |   |   |   gram_schmidt: Orthonormalizing vector 58 again
05:18 |   |   |   |   gram_schmidt: Orthonormalizing vector 59 again
05:18 |   |   |   |   gram_schmidt: Orthonormalizing vector 60 again
05:18 |   |   ResidualReductor: Projecting residual operator ...
05:18 adaptive_greedy: Estimating errors ...
05:18 adaptive_greedy: Maximum error after 18 extensions: 0.000126405064348 (mu = {diffusion: [0.1, 0.1, 1.0, 0.55]})
05:18 adaptive_greedy: Maximum validation error: 7.45902243388e-05
05:18 adaptive_greedy: Validation error to training error ratio: 5.901e-01
05:18 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.1, 1.0, 0.55]} ...
05:18 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 1.0, 0.55]} ...
05:19 adaptive_greedy: Extending basis with solution snapshot ...
05:19 |   gram_schmidt: Orthonormalizing vector 18 again
      
05:19 adaptive_greedy: Reducing ...
05:19 |   CoerciveRBReductor: RB projection ...
05:19 |   CoerciveRBReductor: Assembling error estimator ...
05:19 |   |   ResidualReductor: Estimating residual range ...
05:19 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 18 ...
05:19 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:19 |   |   |   |   gram_schmidt: Orthonormalizing vector 62 again
05:19 |   |   |   |   gram_schmidt: Orthonormalizing vector 63 again
05:19 |   |   |   |   gram_schmidt: Orthonormalizing vector 64 again
05:19 |   |   |   |   gram_schmidt: Orthonormalizing vector 65 again
05:19 |   |   ResidualReductor: Projecting residual operator ...
05:19 adaptive_greedy: Estimating errors ...
05:19 adaptive_greedy: Maximum error after 19 extensions: 4.26671354046e-05 (mu = {diffusion: [0.1, 1.0, 0.55, 1.0]})
05:19 adaptive_greedy: Maximum validation error: 2.15516785836e-05
05:19 adaptive_greedy: Validation error to training error ratio: 5.051e-01
05:19 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 0.55, 1.0]} ...
05:19 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.55, 1.0]} ...
05:19 adaptive_greedy: Extending basis with solution snapshot ...
05:19 |   gram_schmidt: Orthonormalizing vector 19 again
      
05:19 adaptive_greedy: Reducing ...
05:19 |   CoerciveRBReductor: RB projection ...
05:20 |   CoerciveRBReductor: Assembling error estimator ...
05:20 |   |   ResidualReductor: Estimating residual range ...
05:20 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 19 ...
05:20 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 67 again
05:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 68 again
05:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 69 again
05:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 70 again
05:20 |   |   ResidualReductor: Projecting residual operator ...
05:20 adaptive_greedy: Estimating errors ...
05:20 adaptive_greedy: Maximum error after 20 extensions: 3.1066491852e-06 (mu = {diffusion: [0.1, 0.55, 0.1, 1.0]})
05:20 adaptive_greedy: Maximum validation error: 1.19872878832e-06
05:20 adaptive_greedy: Validation error to training error ratio: 3.859e-01
05:20 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.55, 0.1, 1.0]} ...
05:20 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 0.1, 1.0]} ...
05:20 adaptive_greedy: Extending basis with solution snapshot ...
05:20 |   gram_schmidt: Orthonormalizing vector 20 again
      
05:20 adaptive_greedy: Reducing ...
05:20 |   CoerciveRBReductor: RB projection ...
05:20 |   CoerciveRBReductor: Assembling error estimator ...
05:20 |   |   ResidualReductor: Estimating residual range ...
05:20 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 20 ...
05:20 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:21 |   |   |   |   gram_schmidt: Orthonormalizing vector 72 again
05:21 |   |   |   |   gram_schmidt: Orthonormalizing vector 73 again
05:21 |   |   |   |   gram_schmidt: Orthonormalizing vector 74 again
05:21 |   |   |   |   gram_schmidt: Orthonormalizing vector 75 again
05:21 |   |   ResidualReductor: Projecting residual operator ...
05:21 adaptive_greedy: Estimating errors ...
05:21 adaptive_greedy: Maximum error after 21 extensions: 2.05705788439e-06 (mu = {diffusion: [0.1, 1.0, 0.55, 0.55]})
05:21 adaptive_greedy: Maximum validation error: 1.06830925922e-06
05:21 adaptive_greedy: Validation error to training error ratio: 5.193e-01
05:21 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 0.55, 0.55]} ...
05:21 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.55, 0.55]} ...
05:21 adaptive_greedy: Extending basis with solution snapshot ...
05:21 |   gram_schmidt: Orthonormalizing vector 21 again
      
05:21 adaptive_greedy: Reducing ...
05:21 |   CoerciveRBReductor: RB projection ...
05:21 |   CoerciveRBReductor: Assembling error estimator ...
05:21 |   |   ResidualReductor: Estimating residual range ...
05:21 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 21 ...
05:21 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 77 again
05:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 78 again
05:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 79 again
05:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 80 again
05:22 |   |   ResidualReductor: Projecting residual operator ...
05:22 adaptive_greedy: Estimating errors ...
05:22 adaptive_greedy: Maximum error after 22 extensions: 8.97667262468e-07 (mu = {diffusion: [1.0, 0.1, 0.55, 0.1]})
05:22 adaptive_greedy: Maximum validation error: 2.1817473867e-07
05:22 adaptive_greedy: Validation error to training error ratio: 2.430e-01
05:22 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 0.55, 0.1]} ...
05:22 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.55, 0.1]} ...
05:22 adaptive_greedy: Extending basis with solution snapshot ...
05:22 |   gram_schmidt: Orthonormalizing vector 22 again
      
05:22 adaptive_greedy: Reducing ...
05:22 |   CoerciveRBReductor: RB projection ...
05:22 |   CoerciveRBReductor: Assembling error estimator ...
05:22 |   |   ResidualReductor: Estimating residual range ...
05:22 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 22 ...
05:22 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:23 |   |   |   |   gram_schmidt: Orthonormalizing vector 82 again
05:23 |   |   |   |   gram_schmidt: Orthonormalizing vector 83 again
05:23 |   |   |   |   gram_schmidt: Orthonormalizing vector 84 again
05:23 |   |   |   |   gram_schmidt: Orthonormalizing vector 85 again
05:23 |   |   ResidualReductor: Projecting residual operator ...
05:23 adaptive_greedy: Estimating errors ...
05:23 adaptive_greedy: Maximum error after 23 extensions: 4.05366543145e-08 (mu = {diffusion: [1.0, 1.0, 0.1, 0.55]})
05:23 adaptive_greedy: Maximum validation error: 1.17112421124e-08
05:23 adaptive_greedy: Validation error to training error ratio: 2.889e-01
05:23 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 1.0, 0.1, 0.55]} ...
05:23 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 0.1, 0.55]} ...
05:23 adaptive_greedy: Extending basis with solution snapshot ...
05:23 |   gram_schmidt: Orthonormalizing vector 23 again
      
05:23 adaptive_greedy: Reducing ...
05:23 |   CoerciveRBReductor: RB projection ...
05:23 |   CoerciveRBReductor: Assembling error estimator ...
05:23 |   |   ResidualReductor: Estimating residual range ...
05:23 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 23 ...
05:23 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:24 |   |   |   |   gram_schmidt: Orthonormalizing vector 87 again
05:24 |   |   |   |   gram_schmidt: Orthonormalizing vector 88 again
05:24 |   |   |   |   gram_schmidt: Orthonormalizing vector 89 again
05:24 |   |   |   |   gram_schmidt: Orthonormalizing vector 90 again
05:24 |   |   ResidualReductor: Projecting residual operator ...
05:24 adaptive_greedy: Estimating errors ...
05:24 adaptive_greedy: Maximum error after 24 extensions: 1.15720962552e-08 (mu = {diffusion: [0.55, 0.1, 1.0, 0.1]})
05:24 adaptive_greedy: Maximum validation error: 2.92425512493e-09
05:24 adaptive_greedy: Validation error to training error ratio: 2.527e-01
05:24 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.55, 0.1, 1.0, 0.1]} ...
05:24 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 1.0, 0.1]} ...
05:24 adaptive_greedy: Extending basis with solution snapshot ...
05:24 |   gram_schmidt: Orthonormalizing vector 24 again
      
05:24 adaptive_greedy: Reducing ...
05:24 |   CoerciveRBReductor: RB projection ...
05:24 |   CoerciveRBReductor: Assembling error estimator ...
05:24 |   |   ResidualReductor: Estimating residual range ...
05:24 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 24 ...
05:25 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:25 |   |   |   |   gram_schmidt: Orthonormalizing vector 92 again
05:25 |   |   |   |   gram_schmidt: Orthonormalizing vector 93 again
05:25 |   |   |   |   gram_schmidt: Orthonormalizing vector 94 again
05:25 |   |   |   |   gram_schmidt: Orthonormalizing vector 95 again
05:25 |   |   ResidualReductor: Projecting residual operator ...
05:25 adaptive_greedy: Estimating errors ...
05:25 adaptive_greedy: Maximum error after 25 extensions: 8.51785649375e-09 (mu = {diffusion: [0.1, 0.55, 1.0, 1.0]})
05:25 adaptive_greedy: Maximum validation error: 2.79910872422e-09
05:25 adaptive_greedy: Validation error to training error ratio: 3.286e-01
05:25 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.55, 1.0, 1.0]} ...
05:25 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 1.0, 1.0]} ...
05:25 adaptive_greedy: Extending basis with solution snapshot ...
05:25 |   gram_schmidt: Orthonormalizing vector 25 again
      
05:25 adaptive_greedy: Reducing ...
05:25 |   CoerciveRBReductor: RB projection ...
05:26 |   CoerciveRBReductor: Assembling error estimator ...
05:26 |   |   ResidualReductor: Estimating residual range ...
05:26 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 25 ...
05:26 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:26 |   |   |   |   gram_schmidt: Orthonormalizing vector 97 again
05:26 |   |   |   |   gram_schmidt: Orthonormalizing vector 98 again
05:26 |   |   |   |   gram_schmidt: Orthonormalizing vector 99 again
05:26 |   |   |   |   gram_schmidt: Orthonormalizing vector 100 again
05:26 |   |   ResidualReductor: Projecting residual operator ...
05:26 adaptive_greedy: Estimating errors ...
05:26 adaptive_greedy: Maximum error after 26 extensions: 4.68405114168e-09 (mu = {diffusion: [0.55, 1.0, 1.0, 0.1]})
05:26 adaptive_greedy: Maximum validation error: 4.27641043201e-10
05:26 adaptive_greedy: Validation error to training error ratio: 9.130e-02
05:26 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.55, 1.0, 1.0, 0.1]} ...
05:26 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 1.0, 0.1]} ...
05:27 adaptive_greedy: Extending basis with solution snapshot ...
05:27 |   gram_schmidt: Orthonormalizing vector 26 again
      
05:27 adaptive_greedy: Reducing ...
05:27 |   CoerciveRBReductor: RB projection ...
05:27 |   CoerciveRBReductor: Assembling error estimator ...
05:27 |   |   ResidualReductor: Estimating residual range ...
05:27 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 26 ...
05:27 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:27 |   |   |   |   gram_schmidt: Orthonormalizing vector 102 again
05:27 |   |   |   |   gram_schmidt: Orthonormalizing vector 103 again
05:27 |   |   |   |   gram_schmidt: Orthonormalizing vector 104 again
05:27 |   |   |   |   gram_schmidt: Orthonormalizing vector 105 again
05:27 |   |   ResidualReductor: Projecting residual operator ...
05:27 adaptive_greedy: Estimating errors ...
05:27 adaptive_greedy: Maximum error after 27 extensions: 1.23545920529e-11 (mu = {diffusion: [1.0, 0.1, 0.55, 1.0]})
05:27 adaptive_greedy: Maximum validation error: 2.24278412904e-12
05:27 adaptive_greedy: Validation error to training error ratio: 1.815e-01
05:27 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 0.55, 1.0]} ...
05:27 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.55, 1.0]} ...
05:28 adaptive_greedy: Extending basis with solution snapshot ...
05:28 |   gram_schmidt: Orthonormalizing vector 27 again
      
05:28 adaptive_greedy: Reducing ...
05:28 |   CoerciveRBReductor: RB projection ...
05:28 |   CoerciveRBReductor: Assembling error estimator ...
05:28 |   |   ResidualReductor: Estimating residual range ...
05:28 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 27 ...
05:28 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:28 |   |   |   |   gram_schmidt: Orthonormalizing vector 107 again
05:28 |   |   |   |   gram_schmidt: Orthonormalizing vector 108 again
05:28 |   |   |   |   gram_schmidt: Orthonormalizing vector 109 again
05:28 |   |   |   |   gram_schmidt: Orthonormalizing vector 110 again
05:28 |   |   ResidualReductor: Projecting residual operator ...
05:28 adaptive_greedy: Estimating errors ...
05:29 adaptive_greedy: Maximum error after 28 extensions: 8.48876667106e-12 (mu = {diffusion: [0.55, 1.0, 0.1, 0.1]})
05:29 adaptive_greedy: Maximum validation error: 2.0736510951e-12
05:29 adaptive_greedy: Validation error to training error ratio: 2.443e-01
05:29 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.55, 1.0, 0.1, 0.1]} ...
05:29 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 0.1, 0.1]} ...
05:29 adaptive_greedy: Extending basis with solution snapshot ...
05:29 |   gram_schmidt: Orthonormalizing vector 28 again
      
05:29 adaptive_greedy: Reducing ...
05:29 |   CoerciveRBReductor: RB projection ...
05:29 |   CoerciveRBReductor: Assembling error estimator ...
05:29 |   |   ResidualReductor: Estimating residual range ...
05:29 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 28 ...
05:29 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:29 |   |   |   |   gram_schmidt: Orthonormalizing vector 111 again
05:29 |   |   |   |   gram_schmidt: Orthonormalizing vector 112 again
05:29 |   |   |   |   gram_schmidt: Orthonormalizing vector 113 again
05:29 |   |   |   |   gram_schmidt: Orthonormalizing vector 114 again
05:29 |   |   |   |   gram_schmidt: Orthonormalizing vector 115 again
05:30 |   |   ResidualReductor: Projecting residual operator ...
05:30 adaptive_greedy: Estimating errors ...
05:30 adaptive_greedy: Maximum error after 29 extensions: 2.3379829668e-12 (mu = {diffusion: [0.1, 1.0, 1.0, 0.55]})
05:30 adaptive_greedy: Maximum validation error: 1.48658047129e-12
05:30 adaptive_greedy: Validation error to training error ratio: 6.358e-01
05:30 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 1.0, 0.55]} ...
05:30 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 1.0, 0.55]} ...
05:30 adaptive_greedy: Extending basis with solution snapshot ...
05:30 |   gram_schmidt: Orthonormalizing vector 29 again
      
05:30 adaptive_greedy: Maximum number of 30 extensions reached.
05:30 adaptive_greedy: Reducing once more ...
05:30 |   CoerciveRBReductor: RB projection ...
05:30 |   CoerciveRBReductor: Assembling error estimator ...
05:30 |   |   ResidualReductor: Estimating residual range ...
05:30 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 29 ...
05:30 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
05:30 |   |   |   |   gram_schmidt: Orthonormalizing vector 116 again
05:30 |   |   |   |   gram_schmidt: Orthonormalizing vector 117 again
05:31 |   |   |   |   gram_schmidt: Orthonormalizing vector 118 again
05:31 |   |   |   |   gram_schmidt: Orthonormalizing vector 119 again
05:31 |   |   |   |   gram_schmidt: Orthonormalizing vector 120 again
05:31 |   |   ResidualReductor: Projecting residual operator ...
05:31 adaptive_greedy: Greedy search took 21.7683310509 seconds
05:31 error: Using pool of 2 workers for error analysis
05:33 new_ipcluster_pool: Stopping IPython cluster with &quot;ipcluster stop&quot;
2017-10-24 14:02:48.286 [IPClusterStop] Stopping cluster [pid=348] with [signal=2]
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args27]" time="24.3286671638"><system-out>Waiting for connection file: ~/.ipython/profile_default/security/ipcontroller-client.json
Discretize ...
RB generation ...

Searching for maximum error on random snapshots ...


*** RESULTS ***

pyMOR discretization:
   number of blocks: 2x2
   grid intervals:   100
   ListVectorArray:  False

Naive basis generation:
   basis size set: 5
   elapsed time:   1.25782489777

Stochastic error estimation:
    number of samples:                  10
    maximum NumpyMatrixOperator-norm:   6.2469480e-01 (mu = {diffusion: [0.408493406469, 0.281403649734, 0.736591807092, 0.130059337922]})
    maximum NumpyMatrixOperator-error:  2.0249720e-01 (mu = {diffusion: [0.408493406469, 0.281403649734, 0.736591807092, 0.130059337922]})
    maximum NumpyMatrixOperator-norm:   1.2572252e-01 (mu = {diffusion: [0.408493406469, 0.281403649734, 0.736591807092, 0.130059337922]})
    maximum NumpyMatrixOperator-error:  2.1356484e-02 (mu = {diffusion: [0.408493406469, 0.281403649734, 0.736591807092, 0.130059337922]})
    maximum estimated error:            5.3178606e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    minimum estimator effectivity:      3.2366706e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    maximum estimator effectivity:      7.9208874e-01 (mu = {diffusion: [0.66531387023, 0.727653649775, 0.810954719993, 0.218701317605]})
    maximum system matrix condition:    9.9116076e+03 (mu = {diffusion: [0.181832736497, 0.399003112714, 0.484642852697, 0.598947231188]})
    elapsed time:                       1.72810697556
</system-out><system-err>05:43 new_ipcluster_pool: Staring IPython cluster with &quot;ipcluster start --daemonize --n=2&quot;
05:52 IPythonPool: Connected to 2 engines
05:53 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
05:53 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
05:53 DiffusionOperatorP1: Determine global dofs ...
05:53 DiffusionOperatorP1: Boundary treatment ...
05:53 DiffusionOperatorP1: Assemble system matrix ...
05:53 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
05:53 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
05:53 DiffusionOperatorP1: Determine global dofs ...
05:53 DiffusionOperatorP1: Boundary treatment ...
05:53 DiffusionOperatorP1: Assemble system matrix ...
05:53 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
05:53 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
05:53 DiffusionOperatorP1: Determine global dofs ...
05:53 DiffusionOperatorP1: Boundary treatment ...
05:53 DiffusionOperatorP1: Assemble system matrix ...
05:53 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
05:53 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
05:53 DiffusionOperatorP1: Determine global dofs ...
05:53 DiffusionOperatorP1: Boundary treatment ...
05:53 DiffusionOperatorP1: Assemble system matrix ...
05:53 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
05:53 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
05:53 DiffusionOperatorP1: Determine global dofs ...
05:53 DiffusionOperatorP1: Boundary treatment ...
05:53 DiffusionOperatorP1: Assemble system matrix ...
05:53 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
05:53 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
05:53 DiffusionOperatorP1: Determine global dofs ...
05:53 DiffusionOperatorP1: Boundary treatment ...
05:53 DiffusionOperatorP1: Assemble system matrix ...
05:53 L2ProductP1: Integrate the products of the shape functions on each element
05:53 L2ProductP1: Determine global dofs ...
05:53 L2ProductP1: Boundary treatment ...
05:53 L2ProductP1: Assemble system matrix ...
05:54 L2ProductP1: Integrate the products of the shape functions on each element
05:54 L2ProductP1: Determine global dofs ...
05:54 L2ProductP1: Boundary treatment ...
05:54 L2ProductP1: Assemble system matrix ...
05:54 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
05:54 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
05:54 DiffusionOperatorP1: Determine global dofs ...
05:54 DiffusionOperatorP1: Boundary treatment ...
05:54 DiffusionOperatorP1: Assemble system matrix ...
05:54 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
05:54 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
05:54 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ...
05:54 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ...
05:54 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ...
05:55 error: Using pool of 2 workers for error analysis
05:57 new_ipcluster_pool: Stopping IPython cluster with &quot;ipcluster stop&quot;
2017-10-24 14:03:12.527 [IPClusterStop] Stopping cluster [pid=417] with [signal=2]
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args28]" time="0.0012149810791"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args29]" time="0.0010027885437"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args30]" time="0.000710964202881"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args31]" time="0.000635862350464"><skipped message="skipped test due to missing fenics" type="pytest.skip">/src/src/pymortests/demos.py:107: &lt;py._xmlgen.raw object at 0x7f25da454890&gt;</skipped></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args32]" time="0.00097918510437"><skipped message="skipped test due to missing ngsolve" type="pytest.skip">/src/src/pymortests/demos.py:107: &lt;py._xmlgen.raw object at 0x7f25d9be20d0&gt;</skipped></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args33]" time="0.000667095184326"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args34]" time="0.000632047653198"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args35]" time="0.000635862350464"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args36]" time="0.000629901885986"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args37]" time="0.000627994537354"></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="201" name="test_thermalblock_ipython[demo_args38]" time="0.000752925872803"><skipped message="skipped test due to missing fenics" type="pytest.skip">/src/src/pymortests/demos.py:107: &lt;py._xmlgen.raw object at 0x7f25d9b5d890&gt;</skipped></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="215" name="test_thermalblock_results[thermalblock_args0]" time="1.61055970192"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>Discretize ...
Showing some solutions
Solving for diffusion = 
[[ 0.43708611  0.95564288]
 [ 0.75879455  0.63879264]] ... 
Solving for diffusion = 
[[ 0.24041678  0.24039507]
 [ 0.15227525  0.87955853]] ... 
</system-out><system-err>06:08 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:08 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:08 DiffusionOperatorP1: Determine global dofs ...
06:08 DiffusionOperatorP1: Boundary treatment ...
06:08 DiffusionOperatorP1: Assemble system matrix ...
06:08 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:08 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:08 DiffusionOperatorP1: Determine global dofs ...
06:08 DiffusionOperatorP1: Boundary treatment ...
06:08 DiffusionOperatorP1: Assemble system matrix ...
06:08 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:08 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:08 DiffusionOperatorP1: Determine global dofs ...
06:08 DiffusionOperatorP1: Boundary treatment ...
06:08 DiffusionOperatorP1: Assemble system matrix ...
06:08 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:08 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:08 DiffusionOperatorP1: Determine global dofs ...
06:08 DiffusionOperatorP1: Boundary treatment ...
06:08 DiffusionOperatorP1: Assemble system matrix ...
06:08 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:08 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:08 DiffusionOperatorP1: Determine global dofs ...
06:09 DiffusionOperatorP1: Boundary treatment ...
06:09 DiffusionOperatorP1: Assemble system matrix ...
06:09 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:09 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:09 DiffusionOperatorP1: Determine global dofs ...
06:09 DiffusionOperatorP1: Boundary treatment ...
06:09 DiffusionOperatorP1: Assemble system matrix ...
06:09 L2ProductP1: Integrate the products of the shape functions on each element
06:09 L2ProductP1: Determine global dofs ...
06:09 L2ProductP1: Boundary treatment ...
06:09 L2ProductP1: Assemble system matrix ...
06:09 L2ProductP1: Integrate the products of the shape functions on each element
06:09 L2ProductP1: Determine global dofs ...
06:09 L2ProductP1: Boundary treatment ...
06:09 L2ProductP1: Assemble system matrix ...
06:09 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:09 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:09 DiffusionOperatorP1: Determine global dofs ...
06:09 DiffusionOperatorP1: Boundary treatment ...
06:09 DiffusionOperatorP1: Assemble system matrix ...
06:09 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
06:09 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
</system-err><system-out>Discretize ...
Showing some solutions
Solving for diffusion = 
[[ 0.43708611  0.95564288]
 [ 0.75879455  0.63879264]] ... 
Solving for diffusion = 
[[ 0.24041678  0.24039507]
 [ 0.15227525  0.87955853]] ... 
</system-out><system-err>06:08 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:08 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:08 DiffusionOperatorP1: Determine global dofs ...
06:08 DiffusionOperatorP1: Boundary treatment ...
06:08 DiffusionOperatorP1: Assemble system matrix ...
06:08 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:08 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:08 DiffusionOperatorP1: Determine global dofs ...
06:08 DiffusionOperatorP1: Boundary treatment ...
06:08 DiffusionOperatorP1: Assemble system matrix ...
06:08 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:08 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:08 DiffusionOperatorP1: Determine global dofs ...
06:08 DiffusionOperatorP1: Boundary treatment ...
06:08 DiffusionOperatorP1: Assemble system matrix ...
06:08 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:08 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:08 DiffusionOperatorP1: Determine global dofs ...
06:08 DiffusionOperatorP1: Boundary treatment ...
06:08 DiffusionOperatorP1: Assemble system matrix ...
06:08 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:08 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:08 DiffusionOperatorP1: Determine global dofs ...
06:09 DiffusionOperatorP1: Boundary treatment ...
06:09 DiffusionOperatorP1: Assemble system matrix ...
06:09 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:09 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:09 DiffusionOperatorP1: Determine global dofs ...
06:09 DiffusionOperatorP1: Boundary treatment ...
06:09 DiffusionOperatorP1: Assemble system matrix ...
06:09 L2ProductP1: Integrate the products of the shape functions on each element
06:09 L2ProductP1: Determine global dofs ...
06:09 L2ProductP1: Boundary treatment ...
06:09 L2ProductP1: Assemble system matrix ...
06:09 L2ProductP1: Integrate the products of the shape functions on each element
06:09 L2ProductP1: Determine global dofs ...
06:09 L2ProductP1: Boundary treatment ...
06:09 L2ProductP1: Assemble system matrix ...
06:09 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:09 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:09 DiffusionOperatorP1: Determine global dofs ...
06:09 DiffusionOperatorP1: Boundary treatment ...
06:09 DiffusionOperatorP1: Assemble system matrix ...
06:09 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
06:09 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="215" name="test_thermalblock_results[thermalblock_args1]" time="0.000587940216064"><skipped message="skipped test due to missing fenics" type="pytest.skip">/src/src/pymortests/demos.py:107: &lt;py._xmlgen.raw object at 0x7f25d9be8b90&gt;</skipped></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="215" name="test_thermalblock_results[thermalblock_args2]" time="9.86675095558"><system-out>Discretize ...
RB generation ...

Searching for maximum error on random snapshots ...
..........

*** RESULTS ***

pyMOR discretization:
   number of blocks: 3x1
   grid intervals:   100
   ListVectorArray:  False

Greedy basis generation:
   size of training set:   8
   error estimator used:   False
   extension method:       gram_schmidt
   prescribed basis size:  5
   actual basis size:      5
   elapsed time:           7.14226603508

Stochastic error estimation:
    number of samples:                  10
    maximum NumpyMatrixOperator-norm:   5.3963819e-01 (mu = {diffusion: [0.776163239888, 0.187380949091, 0.471122009481]})
    maximum NumpyMatrixOperator-error:  1.4962135e-02 (mu = {diffusion: [0.776163239888, 0.187380949091, 0.471122009481]})
    maximum NumpyMatrixOperator-norm:   1.0796872e-01 (mu = {diffusion: [0.776163239888, 0.187380949091, 0.471122009481]})
    maximum NumpyMatrixOperator-error:  6.6545623e-04 (mu = {diffusion: [0.776163239888, 0.187380949091, 0.471122009481]})
    maximum estimated error:            3.2501130e-02 (mu = {diffusion: [0.776163239888, 0.187380949091, 0.471122009481]})
    minimum estimator effectivity:      2.2968487e-01 (mu = {diffusion: [0.130059337922, 0.918325039247, 0.464644598394]})
    maximum estimator effectivity:      8.5530738e-01 (mu = {diffusion: [0.484642852697, 0.598947231188, 0.66531387023]})
    maximum system matrix condition:    6.9153103e+00 (mu = {diffusion: [0.130059337922, 0.918325039247, 0.464644598394]})
    elapsed time:                       1.4495871067
</system-out><system-err>06:09 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:10 DiffusionOperatorP1: Determine global dofs ...
06:10 DiffusionOperatorP1: Boundary treatment ...
06:10 DiffusionOperatorP1: Assemble system matrix ...
06:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:10 DiffusionOperatorP1: Determine global dofs ...
06:10 DiffusionOperatorP1: Boundary treatment ...
06:10 DiffusionOperatorP1: Assemble system matrix ...
06:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:10 DiffusionOperatorP1: Determine global dofs ...
06:10 DiffusionOperatorP1: Boundary treatment ...
06:10 DiffusionOperatorP1: Assemble system matrix ...
06:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:10 DiffusionOperatorP1: Determine global dofs ...
06:10 DiffusionOperatorP1: Boundary treatment ...
06:10 DiffusionOperatorP1: Assemble system matrix ...
06:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:10 DiffusionOperatorP1: Determine global dofs ...
06:10 DiffusionOperatorP1: Boundary treatment ...
06:10 DiffusionOperatorP1: Assemble system matrix ...
06:10 L2ProductP1: Integrate the products of the shape functions on each element
06:10 L2ProductP1: Determine global dofs ...
06:10 L2ProductP1: Boundary treatment ...
06:10 L2ProductP1: Assemble system matrix ...
06:10 L2ProductP1: Integrate the products of the shape functions on each element
06:10 L2ProductP1: Determine global dofs ...
06:10 L2ProductP1: Boundary treatment ...
06:10 L2ProductP1: Assemble system matrix ...
06:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:11 DiffusionOperatorP1: Determine global dofs ...
06:11 DiffusionOperatorP1: Boundary treatment ...
06:11 DiffusionOperatorP1: Assemble system matrix ...
06:11 greedy: Started greedy search on 8 samples
06:11 greedy: Reducing ...
06:11 |   CoerciveRBReductor: RB projection ...
06:11 |   CoerciveRBReductor: Assembling error estimator ...
06:11 |   |   ResidualReductor: Estimating residual range ...
06:11 |   |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
06:11 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:11 |   |   ResidualReductor: Projecting residual operator ...
06:11 greedy: Estimating errors ...
06:11 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 0.1, 0.1]} ...
06:11 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 0.1, 1.0]} ...
06:11 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 1.0, 0.1]} ...
06:11 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 1.0, 1.0]} ...
06:11 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 0.1, 0.1]} ...
06:12 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 0.1, 1.0]} ...
06:12 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 1.0, 0.1]} ...
06:12 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 1.0, 1.0]} ...
06:12 greedy: Maximum error after 0 extensions: 1.87457318215 (mu = {diffusion: [0.1, 0.1, 0.1]})
06:12 greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.1, 0.1]} ...
06:12 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 0.1, 0.1]} ...
06:12 greedy: Extending basis with solution snapshot ...
      
06:12 greedy: Reducing ...
06:12 |   CoerciveRBReductor: RB projection ...
06:12 |   CoerciveRBReductor: Assembling error estimator ...
06:12 |   |   ResidualReductor: Estimating residual range ...
06:12 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
06:12 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:12 |   |   |   |   gram_schmidt: Removing vector 1 of norm 0.0
06:12 |   |   |   |   gram_schmidt: Removing linear dependent vector 4
06:12 |   |   ResidualReductor: Projecting residual operator ...
06:12 greedy: Estimating errors ...
06:12 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 0.1, 0.1]} ...
06:12 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 0.1, 1.0]} ...
06:12 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 1.0, 0.1]} ...
06:13 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 1.0, 1.0]} ...
06:13 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 0.1, 0.1]} ...
06:13 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 0.1, 1.0]} ...
06:13 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 1.0, 0.1]} ...
06:13 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 1.0, 1.0]} ...
06:13 greedy: Maximum error after 1 extensions: 0.922095064104 (mu = {diffusion: [1.0, 0.1, 0.1]})
06:13 greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 0.1]} ...
06:13 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 0.1, 0.1]} ...
06:13 greedy: Extending basis with solution snapshot ...
      
06:13 greedy: Reducing ...
06:13 |   CoerciveRBReductor: RB projection ...
06:13 |   CoerciveRBReductor: Assembling error estimator ...
06:13 |   |   ResidualReductor: Estimating residual range ...
06:13 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
06:13 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:13 |   |   |   |   gram_schmidt: Removing vector 3 of norm 1.03514656995e-18
06:13 |   |   |   |   gram_schmidt: Orthonormalizing vector 4 again
06:13 |   |   |   |   gram_schmidt: Orthonormalizing vector 6 again
06:13 |   |   ResidualReductor: Projecting residual operator ...
06:13 greedy: Estimating errors ...
06:13 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 0.1, 0.1]} ...
06:14 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 0.1, 1.0]} ...
06:14 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 1.0, 0.1]} ...
06:14 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 1.0, 1.0]} ...
06:14 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 0.1, 0.1]} ...
06:14 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 0.1, 1.0]} ...
06:14 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 1.0, 0.1]} ...
06:14 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 1.0, 1.0]} ...
06:15 greedy: Maximum error after 2 extensions: 0.515273016321 (mu = {diffusion: [0.1, 0.1, 1.0]})
06:15 greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.1, 1.0]} ...
06:15 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 0.1, 1.0]} ...
06:15 greedy: Extending basis with solution snapshot ...
      
06:15 greedy: Reducing ...
06:15 |   CoerciveRBReductor: RB projection ...
06:15 |   CoerciveRBReductor: Assembling error estimator ...
06:15 |   |   ResidualReductor: Estimating residual range ...
06:15 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
06:15 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:15 |   |   |   |   gram_schmidt: Removing vector 6 of norm 1.74203942869e-17
06:15 |   |   |   |   gram_schmidt: Orthonormalizing vector 9 again
06:15 |   |   ResidualReductor: Projecting residual operator ...
06:15 greedy: Estimating errors ...
06:15 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 0.1, 0.1]} ...
06:15 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 0.1, 1.0]} ...
06:15 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 1.0, 0.1]} ...
06:15 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 1.0, 1.0]} ...
06:15 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 0.1, 0.1]} ...
06:16 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 0.1, 1.0]} ...
06:16 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 1.0, 0.1]} ...
06:16 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 1.0, 1.0]} ...
06:16 greedy: Maximum error after 3 extensions: 0.498063471053 (mu = {diffusion: [0.1, 1.0, 0.1]})
06:16 greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 0.1]} ...
06:16 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 1.0, 0.1]} ...
06:16 greedy: Extending basis with solution snapshot ...
      
06:16 greedy: Reducing ...
06:16 |   CoerciveRBReductor: RB projection ...
06:16 |   CoerciveRBReductor: Assembling error estimator ...
06:16 |   |   ResidualReductor: Estimating residual range ...
06:16 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 3 ...
06:16 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:16 |   |   |   |   gram_schmidt: Removing vector 9 of norm 6.58150146845e-18
06:16 |   |   |   |   gram_schmidt: Orthonormalizing vector 11 again
06:16 |   |   |   |   gram_schmidt: Orthonormalizing vector 12 again
06:16 |   |   ResidualReductor: Projecting residual operator ...
06:16 greedy: Estimating errors ...
06:16 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 0.1, 0.1]} ...
06:16 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 0.1, 1.0]} ...
06:17 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 1.0, 0.1]} ...
06:17 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [0.1, 1.0, 1.0]} ...
06:17 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 0.1, 0.1]} ...
06:17 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 0.1, 1.0]} ...
06:17 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 1.0, 0.1]} ...
06:17 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 1.0, 1.0]} ...
06:17 greedy: Maximum error after 4 extensions: 0.335849856403 (mu = {diffusion: [1.0, 1.0, 0.1]})
06:17 greedy: Computing solution snapshot for mu = {diffusion: [1.0, 1.0, 0.1]} ...
06:17 |   StationaryDiscretization: Solving ThermalBlock((3, 1))_CG for {diffusion: [1.0, 1.0, 0.1]} ...
06:18 greedy: Extending basis with solution snapshot ...
      
06:18 greedy: Maximum number of 5 extensions reached.
06:18 greedy: Reducing once more ...
06:18 |   CoerciveRBReductor: RB projection ...
06:18 |   CoerciveRBReductor: Assembling error estimator ...
06:18 |   |   ResidualReductor: Estimating residual range ...
06:18 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 4 ...
06:18 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:18 |   |   |   |   gram_schmidt: Removing vector 12 of norm 1.53047838438e-17
06:18 |   |   |   |   gram_schmidt: Orthonormalizing vector 13 again
06:18 |   |   |   |   gram_schmidt: Orthonormalizing vector 14 again
06:18 |   |   |   |   gram_schmidt: Orthonormalizing vector 15 again
06:18 |   |   ResidualReductor: Projecting residual operator ...
06:18 greedy: Greedy search took 7.14226603508 seconds
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="215" name="test_thermalblock_results[thermalblock_args3]" time="14.9475030899"><system-out>Discretize ...
RB generation ...
Solving on training set ...
Performing POD ...
Reducing ...

Searching for maximum error on random snapshots ...
..........

*** RESULTS ***

pyMOR discretization:
   number of blocks: 2x2
   grid intervals:   100
   ListVectorArray:  False

POD basis generation:
   size of training set:   81
   prescribed basis size:  5
   actual basis size:      5
   elapsed time:           12.0328412056

Stochastic error estimation:
    number of samples:                  10
    maximum NumpyMatrixOperator-norm:   6.2469480e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    maximum NumpyMatrixOperator-error:  1.8527955e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    maximum NumpyMatrixOperator-norm:   1.2572252e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    maximum NumpyMatrixOperator-error:  1.7197486e-02 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    maximum estimated error:            5.2448967e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    minimum estimator effectivity:      3.2318767e-01 (mu = {diffusion: [0.66531387023, 0.727653649775, 0.810954719993, 0.218701317605]})
    maximum estimator effectivity:      7.0287777e-01 (mu = {diffusion: [0.918325039247, 0.464644598394, 0.784391923305, 0.526382538185]})
    maximum system matrix condition:    3.3938010e+00 (mu = {diffusion: [0.408493406469, 0.281403649734, 0.736591807092, 0.130059337922]})
    elapsed time:                       1.44710087776
</system-out><system-err>06:19 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:19 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:19 DiffusionOperatorP1: Determine global dofs ...
06:19 DiffusionOperatorP1: Boundary treatment ...
06:19 DiffusionOperatorP1: Assemble system matrix ...
06:20 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:20 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:20 DiffusionOperatorP1: Determine global dofs ...
06:20 DiffusionOperatorP1: Boundary treatment ...
06:20 DiffusionOperatorP1: Assemble system matrix ...
06:20 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:20 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:20 DiffusionOperatorP1: Determine global dofs ...
06:20 DiffusionOperatorP1: Boundary treatment ...
06:20 DiffusionOperatorP1: Assemble system matrix ...
06:20 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:20 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:20 DiffusionOperatorP1: Determine global dofs ...
06:20 DiffusionOperatorP1: Boundary treatment ...
06:20 DiffusionOperatorP1: Assemble system matrix ...
06:20 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:20 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:20 DiffusionOperatorP1: Determine global dofs ...
06:20 DiffusionOperatorP1: Boundary treatment ...
06:20 DiffusionOperatorP1: Assemble system matrix ...
06:20 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:20 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:20 DiffusionOperatorP1: Determine global dofs ...
06:20 DiffusionOperatorP1: Boundary treatment ...
06:20 DiffusionOperatorP1: Assemble system matrix ...
06:20 L2ProductP1: Integrate the products of the shape functions on each element
06:20 L2ProductP1: Determine global dofs ...
06:20 L2ProductP1: Boundary treatment ...
06:20 L2ProductP1: Assemble system matrix ...
06:20 L2ProductP1: Integrate the products of the shape functions on each element
06:20 L2ProductP1: Determine global dofs ...
06:20 L2ProductP1: Boundary treatment ...
06:20 L2ProductP1: Assemble system matrix ...
06:21 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:21 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:21 DiffusionOperatorP1: Determine global dofs ...
06:21 DiffusionOperatorP1: Boundary treatment ...
06:21 DiffusionOperatorP1: Assemble system matrix ...
06:21 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.1, 0.1]} ...
06:21 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.1, 0.55]} ...
06:21 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.1, 1.0]} ...
06:21 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.55, 0.1]} ...
06:21 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.55, 0.55]} ...
06:21 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.55, 1.0]} ...
06:21 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 1.0, 0.1]} ...
06:22 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 1.0, 0.55]} ...
06:22 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 1.0, 1.0]} ...
06:22 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 0.1, 0.1]} ...
06:22 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 0.1, 0.55]} ...
06:22 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 0.1, 1.0]} ...
06:22 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 0.55, 0.1]} ...
06:22 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 0.55, 0.55]} ...
06:23 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 0.55, 1.0]} ...
06:23 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 1.0, 0.1]} ...
06:23 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 1.0, 0.55]} ...
06:23 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 1.0, 1.0]} ...
06:23 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.1, 0.1]} ...
06:23 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.1, 0.55]} ...
06:23 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.1, 1.0]} ...
06:24 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.55, 0.1]} ...
06:24 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.55, 0.55]} ...
06:24 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.55, 1.0]} ...
06:24 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 1.0, 0.1]} ...
06:24 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 1.0, 0.55]} ...
06:24 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 1.0, 1.0]} ...
06:24 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 0.1, 0.1]} ...
06:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 0.1, 0.55]} ...
06:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 0.1, 1.0]} ...
06:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 0.55, 0.1]} ...
06:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 0.55, 0.55]} ...
06:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 0.55, 1.0]} ...
06:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 1.0, 0.1]} ...
06:25 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 1.0, 0.55]} ...
06:26 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 1.0, 1.0]} ...
06:26 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.55, 0.1, 0.1]} ...
06:26 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.55, 0.1, 0.55]} ...
06:26 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.55, 0.1, 1.0]} ...
06:26 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.55, 0.55, 0.1]} ...
06:26 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.55, 0.55, 0.55]} ...
06:26 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.55, 0.55, 1.0]} ...
06:26 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.55, 1.0, 0.1]} ...
06:27 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.55, 1.0, 0.55]} ...
06:27 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.55, 1.0, 1.0]} ...
06:27 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 0.1, 0.1]} ...
06:27 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 0.1, 0.55]} ...
06:27 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 0.1, 1.0]} ...
06:27 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 0.55, 0.1]} ...
06:27 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 0.55, 0.55]} ...
06:28 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 0.55, 1.0]} ...
06:28 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 1.0, 0.1]} ...
06:28 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 1.0, 0.55]} ...
06:28 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 1.0, 1.0]} ...
06:28 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.1, 0.1]} ...
06:28 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.1, 0.55]} ...
06:28 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.1, 1.0]} ...
06:29 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.55, 0.1]} ...
06:29 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.55, 0.55]} ...
06:29 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.55, 1.0]} ...
06:29 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 1.0, 0.1]} ...
06:29 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 1.0, 0.55]} ...
06:29 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 1.0, 1.0]} ...
06:29 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.55, 0.1, 0.1]} ...
06:30 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.55, 0.1, 0.55]} ...
06:30 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.55, 0.1, 1.0]} ...
06:30 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.55, 0.55, 0.1]} ...
06:30 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.55, 0.55, 0.55]} ...
06:30 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.55, 0.55, 1.0]} ...
06:30 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.55, 1.0, 0.1]} ...
06:30 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.55, 1.0, 0.55]} ...
06:31 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.55, 1.0, 1.0]} ...
06:31 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 0.1, 0.1]} ...
06:31 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 0.1, 0.55]} ...
06:31 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 0.1, 1.0]} ...
06:31 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 0.55, 0.1]} ...
06:31 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 0.55, 0.55]} ...
06:31 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 0.55, 1.0]} ...
06:32 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 1.0, 0.1]} ...
06:32 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 1.0, 0.55]} ...
06:32 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 1.0, 1.0]} ...
06:32 pod: Computing Gramian (81 vectors) ...
06:32 pod: Computing eigenvalue decomposition ...
06:32 pod: Computing left-singular vectors (5 vectors) ...
06:32 pod: Re-orthonormalizing POD modes ...
06:32 pod: Checking orthonormality ...
06:32 CoerciveRBReductor: RB projection ...
06:32 CoerciveRBReductor: Assembling error estimator ...
06:32 |   ResidualReductor: Estimating residual range ...
06:32 |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
06:32 |   |   estimate_image_hierarchical: Orthonormalizing ...
06:32 |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
06:32 |   |   estimate_image_hierarchical: Orthonormalizing ...
06:32 |   |   |   gram_schmidt: Removing vector 1 of norm 9.11320469415e-19
06:32 |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
06:32 |   |   estimate_image_hierarchical: Orthonormalizing ...
06:32 |   |   |   gram_schmidt: Removing vector 5 of norm 2.41500587868e-18
06:32 |   |   |   gram_schmidt: Orthonormalizing vector 7 again
06:32 |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
06:32 |   |   estimate_image_hierarchical: Orthonormalizing ...
06:32 |   |   |   gram_schmidt: Removing vector 9 of norm 1.45881741773e-18
06:32 |   |   |   gram_schmidt: Orthonormalizing vector 10 again
06:33 |   |   |   gram_schmidt: Orthonormalizing vector 11 again
06:33 |   |   |   gram_schmidt: Removing linear dependent vector 12
06:33 |   |   |   gram_schmidt: Removing linear dependent vector 13
06:33 |   |   estimate_image_hierarchical: Estimating image for basis vector 3 ...
06:33 |   |   estimate_image_hierarchical: Orthonormalizing ...
06:33 |   |   |   gram_schmidt: Removing vector 11 of norm 2.6502297411e-18
06:33 |   |   |   gram_schmidt: Orthonormalizing vector 12 again
06:33 |   |   |   gram_schmidt: Orthonormalizing vector 13 again
06:33 |   |   |   gram_schmidt: Orthonormalizing vector 14 again
06:33 |   |   |   gram_schmidt: Removing linear dependent vector 15
06:33 |   |   estimate_image_hierarchical: Estimating image for basis vector 4 ...
06:33 |   |   estimate_image_hierarchical: Orthonormalizing ...
06:33 |   |   |   gram_schmidt: Removing vector 14 of norm 3.93833219203e-18
06:33 |   |   |   gram_schmidt: Orthonormalizing vector 15 again
06:33 |   |   |   gram_schmidt: Orthonormalizing vector 16 again
06:33 |   |   |   gram_schmidt: Orthonormalizing vector 17 again
06:33 |   |   |   gram_schmidt: Removing linear dependent vector 18
06:33 |   ResidualReductor: Projecting residual operator ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="215" name="test_thermalblock_results[thermalblock_args4]" time="21.4600539207"><system-out>Discretize ...
RB generation ...

Searching for maximum error on random snapshots ...
..........

*** RESULTS ***

pyMOR discretization:
   number of blocks: 2x2
   grid intervals:   100
   ListVectorArray:  False

Adaptive greedy basis generation:
   initial size of validation set:  11
   error estimator used:            True
   extension method:                gram_schmidt
   prescribed basis size:           30
   actual basis size:               30
   elapsed time:                    18.5075669289

Stochastic error estimation:
    number of samples:                  10
    maximum NumpyMatrixOperator-norm:   6.2469480e-01 (mu = {diffusion: [0.353475066304, 0.451250002531, 0.883998288648, 0.173120605533]})
    maximum NumpyMatrixOperator-error:  2.9750898e-13 (mu = {diffusion: [0.353475066304, 0.451250002531, 0.883998288648, 0.173120605533]})
    maximum NumpyMatrixOperator-norm:   1.2572252e-01 (mu = {diffusion: [0.35764848791, 0.557431748776, 0.233155662347, 0.27679058631]})
    maximum NumpyMatrixOperator-error:  1.2308123e-14 (mu = {diffusion: [0.35764848791, 0.557431748776, 0.233155662347, 0.27679058631]})
    maximum estimated error:            7.1987308e-13 (mu = {diffusion: [0.353475066304, 0.451250002531, 0.883998288648, 0.173120605533]})
    minimum estimator effectivity:      3.5637444e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    maximum estimator effectivity:      4.7616459e+00 (mu = {diffusion: [0.35764848791, 0.557431748776, 0.233155662347, 0.27679058631]})
    maximum system matrix condition:    8.2874401e+00 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    elapsed time:                       1.48768877983
</system-out><system-err>06:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:34 DiffusionOperatorP1: Determine global dofs ...
06:34 DiffusionOperatorP1: Boundary treatment ...
06:34 DiffusionOperatorP1: Assemble system matrix ...
06:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:35 DiffusionOperatorP1: Determine global dofs ...
06:35 DiffusionOperatorP1: Boundary treatment ...
06:35 DiffusionOperatorP1: Assemble system matrix ...
06:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:35 DiffusionOperatorP1: Determine global dofs ...
06:35 DiffusionOperatorP1: Boundary treatment ...
06:35 DiffusionOperatorP1: Assemble system matrix ...
06:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:35 DiffusionOperatorP1: Determine global dofs ...
06:35 DiffusionOperatorP1: Boundary treatment ...
06:35 DiffusionOperatorP1: Assemble system matrix ...
06:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:35 DiffusionOperatorP1: Determine global dofs ...
06:35 DiffusionOperatorP1: Boundary treatment ...
06:35 DiffusionOperatorP1: Assemble system matrix ...
06:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:35 DiffusionOperatorP1: Determine global dofs ...
06:35 DiffusionOperatorP1: Boundary treatment ...
06:35 DiffusionOperatorP1: Assemble system matrix ...
06:35 L2ProductP1: Integrate the products of the shape functions on each element
06:35 L2ProductP1: Determine global dofs ...
06:35 L2ProductP1: Boundary treatment ...
06:35 L2ProductP1: Assemble system matrix ...
06:35 L2ProductP1: Integrate the products of the shape functions on each element
06:35 L2ProductP1: Determine global dofs ...
06:35 L2ProductP1: Boundary treatment ...
06:35 L2ProductP1: Assemble system matrix ...
06:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:36 DiffusionOperatorP1: Determine global dofs ...
06:36 DiffusionOperatorP1: Boundary treatment ...
06:36 DiffusionOperatorP1: Assemble system matrix ...
06:36 adaptive_greedy: Training set size: 16. Validation set size: 11
06:36 adaptive_greedy: Reducing ...
06:36 |   CoerciveRBReductor: RB projection ...
06:36 |   CoerciveRBReductor: Assembling error estimator ...
06:36 |   |   ResidualReductor: Estimating residual range ...
06:36 |   |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
06:36 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:36 |   |   ResidualReductor: Projecting residual operator ...
06:36 adaptive_greedy: Estimating errors ...
06:36 adaptive_greedy: Maximum error after 0 extensions: 1.87457318215 (mu = {diffusion: [0.1, 0.1, 0.1, 0.1]})
06:36 adaptive_greedy: Maximum validation error: 1.58157068707
06:36 adaptive_greedy: Validation error to training error ratio: 8.437e-01
06:36 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.1, 0.1, 0.1]} ...
06:36 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.1, 0.1]} ...
06:36 adaptive_greedy: Extending basis with solution snapshot ...
      
06:36 adaptive_greedy: Reducing ...
06:36 |   CoerciveRBReductor: RB projection ...
06:36 |   CoerciveRBReductor: Assembling error estimator ...
06:36 |   |   ResidualReductor: Estimating residual range ...
06:36 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
06:36 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:36 |   |   |   |   gram_schmidt: Removing vector 1 of norm 0.0
06:36 |   |   |   |   gram_schmidt: Removing linear dependent vector 5
06:36 |   |   ResidualReductor: Projecting residual operator ...
06:36 adaptive_greedy: Estimating errors ...
06:36 adaptive_greedy: Maximum error after 1 extensions: 1.33811391464 (mu = {diffusion: [0.1, 0.1, 0.1, 1.0]})
06:36 adaptive_greedy: Maximum validation error: 0.558357537285
06:36 adaptive_greedy: Validation error to training error ratio: 4.173e-01
06:36 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.1, 0.1, 1.0]} ...
06:36 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 0.1, 1.0]} ...
06:36 adaptive_greedy: Extending basis with solution snapshot ...
      
06:36 adaptive_greedy: Reducing ...
06:36 |   CoerciveRBReductor: RB projection ...
06:36 |   CoerciveRBReductor: Assembling error estimator ...
06:36 |   |   ResidualReductor: Estimating residual range ...
06:36 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
06:36 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:36 |   |   |   |   gram_schmidt: Removing vector 4 of norm 5.12939122542e-18
06:36 |   |   |   |   gram_schmidt: Orthonormalizing vector 8 again
06:36 |   |   ResidualReductor: Projecting residual operator ...
06:36 adaptive_greedy: Estimating errors ...
06:36 adaptive_greedy: Maximum error after 2 extensions: 1.25686364725 (mu = {diffusion: [0.1, 1.0, 0.1, 0.1]})
06:36 adaptive_greedy: Maximum validation error: 0.458363458823
06:36 adaptive_greedy: Validation error to training error ratio: 3.647e-01
06:36 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 0.1, 0.1]} ...
06:36 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.1, 0.1]} ...
06:37 adaptive_greedy: Extending basis with solution snapshot ...
      
06:37 adaptive_greedy: Reducing ...
06:37 |   CoerciveRBReductor: RB projection ...
06:37 |   CoerciveRBReductor: Assembling error estimator ...
06:37 |   |   ResidualReductor: Estimating residual range ...
06:37 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
06:37 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:37 |   |   |   |   gram_schmidt: Removing vector 8 of norm 6.70392869889e-18
06:37 |   |   |   |   gram_schmidt: Removing linear dependent vector 11
06:37 |   |   |   |   gram_schmidt: Removing linear dependent vector 12
06:37 |   |   ResidualReductor: Projecting residual operator ...
06:37 adaptive_greedy: Estimating errors ...
06:37 adaptive_greedy: Maximum error after 3 extensions: 1.21164585976 (mu = {diffusion: [0.1, 1.0, 0.1, 1.0]})
06:37 adaptive_greedy: Maximum validation error: 0.463663281283
06:37 adaptive_greedy: Validation error to training error ratio: 3.827e-01
06:37 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 0.1, 1.0]} ...
06:37 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.1, 1.0]} ...
06:37 adaptive_greedy: Extending basis with solution snapshot ...
      
06:37 adaptive_greedy: Reducing ...
06:37 |   CoerciveRBReductor: RB projection ...
06:37 |   CoerciveRBReductor: Assembling error estimator ...
06:37 |   |   ResidualReductor: Estimating residual range ...
06:37 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 3 ...
06:37 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:37 |   |   |   |   gram_schmidt: Removing vector 10 of norm 2.05701825966e-17
06:37 |   |   |   |   gram_schmidt: Orthonormalizing vector 12 again
06:37 |   |   |   |   gram_schmidt: Orthonormalizing vector 13 again
06:37 |   |   |   |   gram_schmidt: Removing linear dependent vector 14
06:37 |   |   ResidualReductor: Projecting residual operator ...
06:37 adaptive_greedy: Estimating errors ...
06:37 adaptive_greedy: Maximum error after 4 extensions: 0.810666824023 (mu = {diffusion: [1.0, 0.1, 0.1, 0.1]})
06:37 adaptive_greedy: Maximum validation error: 0.43155548551
06:37 adaptive_greedy: Validation error to training error ratio: 5.323e-01
06:37 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 0.1, 0.1]} ...
06:37 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.1, 0.1]} ...
06:37 adaptive_greedy: Extending basis with solution snapshot ...
      
06:37 adaptive_greedy: Reducing ...
06:37 |   CoerciveRBReductor: RB projection ...
06:37 |   CoerciveRBReductor: Assembling error estimator ...
06:37 |   |   ResidualReductor: Estimating residual range ...
06:37 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 4 ...
06:37 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:37 |   |   |   |   gram_schmidt: Removing vector 13 of norm 8.12177779512e-18
06:37 |   |   |   |   gram_schmidt: Removing linear dependent vector 15
06:37 |   |   |   |   gram_schmidt: Removing linear dependent vector 17
06:37 |   |   ResidualReductor: Projecting residual operator ...
06:37 adaptive_greedy: Estimating errors ...
06:37 adaptive_greedy: Maximum error after 5 extensions: 0.945236144361 (mu = {diffusion: [1.0, 0.1, 1.0, 0.1]})
06:37 adaptive_greedy: Maximum validation error: 0.469918909741
06:37 adaptive_greedy: Validation error to training error ratio: 4.971e-01
06:37 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 1.0, 0.1]} ...
06:37 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 1.0, 0.1]} ...
06:37 adaptive_greedy: Extending basis with solution snapshot ...
      
06:37 adaptive_greedy: Reducing ...
06:37 |   CoerciveRBReductor: RB projection ...
06:37 |   CoerciveRBReductor: Assembling error estimator ...
06:37 |   |   ResidualReductor: Estimating residual range ...
06:37 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 5 ...
06:37 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:37 |   |   |   |   gram_schmidt: Removing vector 15 of norm 5.72504129153e-18
06:37 |   |   |   |   gram_schmidt: Removing linear dependent vector 16
06:37 |   |   |   |   gram_schmidt: Removing linear dependent vector 17
06:37 |   |   |   |   gram_schmidt: Removing linear dependent vector 18
06:37 |   |   |   |   gram_schmidt: Orthonormalizing vector 19 again
06:38 |   |   ResidualReductor: Projecting residual operator ...
06:38 adaptive_greedy: Estimating errors ...
06:38 adaptive_greedy: Maximum error after 6 extensions: 0.744411529945 (mu = {diffusion: [1.0, 0.1, 0.1, 1.0]})
06:38 adaptive_greedy: Maximum validation error: 0.405314452605
06:38 adaptive_greedy: Validation error to training error ratio: 5.445e-01
06:38 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 0.1, 1.0]} ...
06:38 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.1, 1.0]} ...
06:38 adaptive_greedy: Extending basis with solution snapshot ...
      
06:38 adaptive_greedy: Reducing ...
06:38 |   CoerciveRBReductor: RB projection ...
06:38 |   CoerciveRBReductor: Assembling error estimator ...
06:38 |   |   ResidualReductor: Estimating residual range ...
06:38 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 6 ...
06:38 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:38 |   |   |   |   gram_schmidt: Removing vector 16 of norm 1.63054269844e-17
06:38 |   |   |   |   gram_schmidt: Orthonormalizing vector 17 again
06:38 |   |   |   |   gram_schmidt: Removing linear dependent vector 18
06:38 |   |   |   |   gram_schmidt: Removing linear dependent vector 19
06:38 |   |   |   |   gram_schmidt: Orthonormalizing vector 20 again
06:38 |   |   ResidualReductor: Projecting residual operator ...
06:38 adaptive_greedy: Estimating errors ...
06:38 adaptive_greedy: Maximum error after 7 extensions: 0.658623198628 (mu = {diffusion: [0.1, 1.0, 1.0, 0.1]})
06:38 adaptive_greedy: Maximum validation error: 0.4004733607
06:38 adaptive_greedy: Validation error to training error ratio: 6.080e-01
06:38 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 1.0, 0.1]} ...
06:38 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 1.0, 0.1]} ...
06:38 adaptive_greedy: Extending basis with solution snapshot ...
      
06:38 adaptive_greedy: Reducing ...
06:38 |   CoerciveRBReductor: RB projection ...
06:38 |   CoerciveRBReductor: Assembling error estimator ...
06:38 |   |   ResidualReductor: Estimating residual range ...
06:38 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 7 ...
06:38 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:38 |   |   |   |   gram_schmidt: Removing vector 18 of norm 2.207125561e-17
06:38 |   |   |   |   gram_schmidt: Removing linear dependent vector 19
06:38 |   |   |   |   gram_schmidt: Removing linear dependent vector 20
06:38 |   |   |   |   gram_schmidt: Orthonormalizing vector 21 again
06:38 |   |   |   |   gram_schmidt: Removing linear dependent vector 22
06:38 |   |   ResidualReductor: Projecting residual operator ...
06:38 adaptive_greedy: Estimating errors ...
06:38 adaptive_greedy: Maximum error after 8 extensions: 0.601851045213 (mu = {diffusion: [1.0, 0.1, 1.0, 1.0]})
06:38 adaptive_greedy: Maximum validation error: 0.396076805105
06:38 adaptive_greedy: Validation error to training error ratio: 6.581e-01
06:38 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 1.0, 1.0]} ...
06:38 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 1.0, 1.0]} ...
06:38 adaptive_greedy: Extending basis with solution snapshot ...
      
06:38 adaptive_greedy: Reducing ...
06:38 |   CoerciveRBReductor: RB projection ...
06:38 |   CoerciveRBReductor: Assembling error estimator ...
06:38 |   |   ResidualReductor: Estimating residual range ...
06:38 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 8 ...
06:38 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:38 |   |   |   |   gram_schmidt: Removing vector 19 of norm 3.065336727e-17
06:38 |   |   |   |   gram_schmidt: Orthonormalizing vector 20 again
06:38 |   |   |   |   gram_schmidt: Orthonormalizing vector 21 again
06:38 |   |   |   |   gram_schmidt: Orthonormalizing vector 22 again
06:39 |   |   |   |   gram_schmidt: Orthonormalizing vector 23 again
06:39 |   |   ResidualReductor: Projecting residual operator ...
06:39 adaptive_greedy: Estimating errors ...
06:39 adaptive_greedy: Maximum error after 9 extensions: 0.397415815023 (mu = {diffusion: [1.0, 1.0, 1.0, 0.1]})
06:39 adaptive_greedy: Maximum validation error: 0.128908134741
06:39 adaptive_greedy: Validation error to training error ratio: 3.244e-01
06:39 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 1.0, 1.0, 0.1]} ...
06:39 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 1.0, 0.1]} ...
06:39 adaptive_greedy: Extending basis with solution snapshot ...
      
06:39 adaptive_greedy: Reducing ...
06:39 |   CoerciveRBReductor: RB projection ...
06:39 |   CoerciveRBReductor: Assembling error estimator ...
06:39 |   |   ResidualReductor: Estimating residual range ...
06:39 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 9 ...
06:39 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:39 |   |   |   |   gram_schmidt: Removing vector 23 of norm 1.19934432999e-16
06:39 |   |   |   |   gram_schmidt: Orthonormalizing vector 24 again
06:39 |   |   |   |   gram_schmidt: Orthonormalizing vector 25 again
06:39 |   |   |   |   gram_schmidt: Orthonormalizing vector 26 again
06:39 |   |   |   |   gram_schmidt: Orthonormalizing vector 27 again
06:39 |   |   ResidualReductor: Projecting residual operator ...
06:39 adaptive_greedy: Estimating errors ...
06:39 adaptive_greedy: Maximum error after 10 extensions: 0.204648291154 (mu = {diffusion: [0.1, 0.1, 1.0, 1.0]})
06:39 adaptive_greedy: Maximum validation error: 0.0178917469215
06:39 adaptive_greedy: Validation error to training error ratio: 8.743e-02
06:39 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.1, 1.0, 1.0]} ...
06:39 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 1.0, 1.0]} ...
06:39 adaptive_greedy: Extending basis with solution snapshot ...
06:39 |   gram_schmidt: Orthonormalizing vector 10 again
      
06:39 adaptive_greedy: Reducing ...
06:39 |   CoerciveRBReductor: RB projection ...
06:39 |   CoerciveRBReductor: Assembling error estimator ...
06:39 |   |   ResidualReductor: Estimating residual range ...
06:39 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 10 ...
06:39 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:39 |   |   |   |   gram_schmidt: Removing vector 27 of norm 2.06772421639e-16
06:39 |   |   |   |   gram_schmidt: Orthonormalizing vector 28 again
06:39 |   |   |   |   gram_schmidt: Orthonormalizing vector 29 again
06:39 |   |   |   |   gram_schmidt: Orthonormalizing vector 30 again
06:39 |   |   |   |   gram_schmidt: Orthonormalizing vector 31 again
06:39 |   |   ResidualReductor: Projecting residual operator ...
06:39 adaptive_greedy: Estimating errors ...
06:39 adaptive_greedy: Maximum error after 11 extensions: 0.191531150322 (mu = {diffusion: [1.0, 1.0, 0.1, 0.1]})
06:39 adaptive_greedy: Maximum validation error: 0.00930921344781
06:39 adaptive_greedy: Validation error to training error ratio: 4.860e-02
06:39 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 1.0, 0.1, 0.1]} ...
06:39 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 0.1, 0.1]} ...
06:40 adaptive_greedy: Extending basis with solution snapshot ...
06:40 |   gram_schmidt: Orthonormalizing vector 11 again
      
06:40 adaptive_greedy: Reducing ...
06:40 |   CoerciveRBReductor: RB projection ...
06:40 |   CoerciveRBReductor: Assembling error estimator ...
06:40 |   |   ResidualReductor: Estimating residual range ...
06:40 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 11 ...
06:40 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:40 |   |   |   |   gram_schmidt: Removing vector 31 of norm 1.60497556687e-16
06:40 |   |   |   |   gram_schmidt: Orthonormalizing vector 32 again
06:40 |   |   |   |   gram_schmidt: Orthonormalizing vector 33 again
06:40 |   |   |   |   gram_schmidt: Orthonormalizing vector 34 again
06:40 |   |   |   |   gram_schmidt: Orthonormalizing vector 35 again
06:40 |   |   ResidualReductor: Projecting residual operator ...
06:40 adaptive_greedy: Estimating errors ...
06:40 adaptive_greedy: Maximum error after 12 extensions: 0.00206891524656 (mu = {diffusion: [1.0, 1.0, 0.1, 1.0]})
06:40 adaptive_greedy: Maximum validation error: 0.00273295911723
06:40 adaptive_greedy: Validation error to training error ratio: 1.321e+00
06:40 |INFO2|adaptive_greedy: Overfitting detected. Computing element indicators ...
06:40 adaptive_greedy: Refining 1 elements: [0]
06:40 adaptive_greedy: New training set size: 81. New validation set size: 26
06:40 adaptive_greedy: Number of refinements: 1
      
06:40 adaptive_greedy: Estimating errors ...
06:40 adaptive_greedy: Maximum error after 12 extensions: 0.00925691045303 (mu = {diffusion: [1.0, 0.1, 0.1, 0.55]})
06:40 adaptive_greedy: Maximum validation error: 0.00273295911723
06:40 adaptive_greedy: Validation error to training error ratio: 2.952e-01
06:40 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 0.1, 0.55]} ...
06:40 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.1, 0.55]} ...
06:40 adaptive_greedy: Extending basis with solution snapshot ...
06:40 |   gram_schmidt: Orthonormalizing vector 12 again
      
06:40 adaptive_greedy: Reducing ...
06:40 |   CoerciveRBReductor: RB projection ...
06:40 |   CoerciveRBReductor: Assembling error estimator ...
06:40 |   |   ResidualReductor: Estimating residual range ...
06:40 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 12 ...
06:40 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:40 |   |   |   |   gram_schmidt: Removing vector 35 of norm 1.88441281344e-15
06:40 |   |   |   |   gram_schmidt: Orthonormalizing vector 36 again
06:40 |   |   |   |   gram_schmidt: Orthonormalizing vector 37 again
06:40 |   |   |   |   gram_schmidt: Orthonormalizing vector 38 again
06:40 |   |   |   |   gram_schmidt: Orthonormalizing vector 39 again
06:40 |   |   ResidualReductor: Projecting residual operator ...
06:40 adaptive_greedy: Estimating errors ...
06:40 adaptive_greedy: Maximum error after 13 extensions: 0.00925680481254 (mu = {diffusion: [0.1, 0.55, 1.0, 0.1]})
06:40 adaptive_greedy: Maximum validation error: 0.00263542238613
06:40 adaptive_greedy: Validation error to training error ratio: 2.847e-01
06:40 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.55, 1.0, 0.1]} ...
06:40 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 1.0, 0.1]} ...
06:41 adaptive_greedy: Extending basis with solution snapshot ...
06:41 |   gram_schmidt: Orthonormalizing vector 13 again
      
06:41 adaptive_greedy: Reducing ...
06:41 |   CoerciveRBReductor: RB projection ...
06:41 |   CoerciveRBReductor: Assembling error estimator ...
06:41 |   |   ResidualReductor: Estimating residual range ...
06:41 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 13 ...
06:41 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:41 |   |   |   |   gram_schmidt: Removing vector 39 of norm 2.46794997245e-15
06:41 |   |   |   |   gram_schmidt: Orthonormalizing vector 40 again
06:41 |   |   |   |   gram_schmidt: Orthonormalizing vector 41 again
06:41 |   |   |   |   gram_schmidt: Orthonormalizing vector 42 again
06:41 |   |   |   |   gram_schmidt: Orthonormalizing vector 43 again
06:41 |   |   ResidualReductor: Projecting residual operator ...
06:41 adaptive_greedy: Estimating errors ...
06:41 adaptive_greedy: Maximum error after 14 extensions: 0.00530753862259 (mu = {diffusion: [1.0, 0.55, 0.1, 0.55]})
06:41 adaptive_greedy: Maximum validation error: 0.00259566746335
06:41 adaptive_greedy: Validation error to training error ratio: 4.891e-01
06:41 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.55, 0.1, 0.55]} ...
06:41 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.55, 0.1, 0.55]} ...
06:41 adaptive_greedy: Extending basis with solution snapshot ...
06:41 |   gram_schmidt: Orthonormalizing vector 14 again
      
06:41 adaptive_greedy: Reducing ...
06:41 |   CoerciveRBReductor: RB projection ...
06:41 |   CoerciveRBReductor: Assembling error estimator ...
06:41 |   |   ResidualReductor: Estimating residual range ...
06:41 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 14 ...
06:41 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:41 |   |   |   |   gram_schmidt: Removing vector 43 of norm 4.89834300469e-15
06:41 |   |   |   |   gram_schmidt: Orthonormalizing vector 44 again
06:41 |   |   |   |   gram_schmidt: Orthonormalizing vector 45 again
06:41 |   |   |   |   gram_schmidt: Orthonormalizing vector 46 again
06:41 |   |   |   |   gram_schmidt: Orthonormalizing vector 47 again
06:41 |   |   ResidualReductor: Projecting residual operator ...
06:41 adaptive_greedy: Estimating errors ...
06:42 adaptive_greedy: Maximum error after 15 extensions: 0.00443042223028 (mu = {diffusion: [0.55, 0.1, 0.1, 1.0]})
06:42 adaptive_greedy: Maximum validation error: 0.00151878973202
06:42 adaptive_greedy: Validation error to training error ratio: 3.428e-01
06:42 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.55, 0.1, 0.1, 1.0]} ...
06:42 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 0.1, 1.0]} ...
06:42 adaptive_greedy: Extending basis with solution snapshot ...
06:42 |   gram_schmidt: Orthonormalizing vector 15 again
      
06:42 adaptive_greedy: Reducing ...
06:42 |   CoerciveRBReductor: RB projection ...
06:42 |   CoerciveRBReductor: Assembling error estimator ...
06:42 |   |   ResidualReductor: Estimating residual range ...
06:42 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 15 ...
06:42 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:42 |   |   |   |   gram_schmidt: Removing vector 47 of norm 6.54445509128e-15
06:42 |   |   |   |   gram_schmidt: Orthonormalizing vector 48 again
06:42 |   |   |   |   gram_schmidt: Orthonormalizing vector 49 again
06:42 |   |   |   |   gram_schmidt: Orthonormalizing vector 50 again
06:42 |   |   |   |   gram_schmidt: Orthonormalizing vector 51 again
06:42 |   |   ResidualReductor: Projecting residual operator ...
06:42 adaptive_greedy: Estimating errors ...
06:42 adaptive_greedy: Maximum error after 16 extensions: 0.000364046586956 (mu = {diffusion: [0.55, 0.1, 0.55, 1.0]})
06:42 adaptive_greedy: Maximum validation error: 0.000206953549587
06:42 adaptive_greedy: Validation error to training error ratio: 5.685e-01
06:42 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.55, 0.1, 0.55, 1.0]} ...
06:42 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 0.55, 1.0]} ...
06:42 adaptive_greedy: Extending basis with solution snapshot ...
06:42 |   gram_schmidt: Orthonormalizing vector 16 again
      
06:42 adaptive_greedy: Reducing ...
06:42 |   CoerciveRBReductor: RB projection ...
06:42 |   CoerciveRBReductor: Assembling error estimator ...
06:42 |   |   ResidualReductor: Estimating residual range ...
06:42 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 16 ...
06:42 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:42 |   |   |   |   gram_schmidt: Orthonormalizing vector 52 again
06:42 |   |   |   |   gram_schmidt: Orthonormalizing vector 53 again
06:43 |   |   |   |   gram_schmidt: Orthonormalizing vector 54 again
06:43 |   |   |   |   gram_schmidt: Orthonormalizing vector 55 again
06:43 |   |   ResidualReductor: Projecting residual operator ...
06:43 adaptive_greedy: Estimating errors ...
06:43 adaptive_greedy: Maximum error after 17 extensions: 0.000261408694572 (mu = {diffusion: [1.0, 1.0, 0.1, 1.0]})
06:43 adaptive_greedy: Maximum validation error: 0.000103815221625
06:43 adaptive_greedy: Validation error to training error ratio: 3.971e-01
06:43 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 1.0, 0.1, 1.0]} ...
06:43 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 0.1, 1.0]} ...
06:43 adaptive_greedy: Extending basis with solution snapshot ...
06:43 |   gram_schmidt: Orthonormalizing vector 17 again
      
06:43 adaptive_greedy: Reducing ...
06:43 |   CoerciveRBReductor: RB projection ...
06:43 |   CoerciveRBReductor: Assembling error estimator ...
06:43 |   |   ResidualReductor: Estimating residual range ...
06:43 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 17 ...
06:43 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:43 |   |   |   |   gram_schmidt: Orthonormalizing vector 57 again
06:43 |   |   |   |   gram_schmidt: Orthonormalizing vector 58 again
06:43 |   |   |   |   gram_schmidt: Orthonormalizing vector 59 again
06:43 |   |   |   |   gram_schmidt: Orthonormalizing vector 60 again
06:43 |   |   ResidualReductor: Projecting residual operator ...
06:43 adaptive_greedy: Estimating errors ...
06:43 adaptive_greedy: Maximum error after 18 extensions: 0.000126405064348 (mu = {diffusion: [0.1, 0.1, 1.0, 0.55]})
06:43 adaptive_greedy: Maximum validation error: 7.45902243388e-05
06:43 adaptive_greedy: Validation error to training error ratio: 5.901e-01
06:43 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.1, 1.0, 0.55]} ...
06:43 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.1, 1.0, 0.55]} ...
06:44 adaptive_greedy: Extending basis with solution snapshot ...
06:44 |   gram_schmidt: Orthonormalizing vector 18 again
      
06:44 adaptive_greedy: Reducing ...
06:44 |   CoerciveRBReductor: RB projection ...
06:44 |   CoerciveRBReductor: Assembling error estimator ...
06:44 |   |   ResidualReductor: Estimating residual range ...
06:44 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 18 ...
06:44 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:44 |   |   |   |   gram_schmidt: Orthonormalizing vector 62 again
06:44 |   |   |   |   gram_schmidt: Orthonormalizing vector 63 again
06:44 |   |   |   |   gram_schmidt: Orthonormalizing vector 64 again
06:44 |   |   |   |   gram_schmidt: Orthonormalizing vector 65 again
06:44 |   |   ResidualReductor: Projecting residual operator ...
06:44 adaptive_greedy: Estimating errors ...
06:44 adaptive_greedy: Maximum error after 19 extensions: 4.26671354046e-05 (mu = {diffusion: [0.1, 1.0, 0.55, 1.0]})
06:44 adaptive_greedy: Maximum validation error: 2.15516785836e-05
06:44 adaptive_greedy: Validation error to training error ratio: 5.051e-01
06:44 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 0.55, 1.0]} ...
06:44 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.55, 1.0]} ...
06:44 adaptive_greedy: Extending basis with solution snapshot ...
06:44 |   gram_schmidt: Orthonormalizing vector 19 again
      
06:44 adaptive_greedy: Reducing ...
06:44 |   CoerciveRBReductor: RB projection ...
06:44 |   CoerciveRBReductor: Assembling error estimator ...
06:44 |   |   ResidualReductor: Estimating residual range ...
06:44 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 19 ...
06:44 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:44 |   |   |   |   gram_schmidt: Orthonormalizing vector 67 again
06:45 |   |   |   |   gram_schmidt: Orthonormalizing vector 68 again
06:45 |   |   |   |   gram_schmidt: Orthonormalizing vector 69 again
06:45 |   |   |   |   gram_schmidt: Orthonormalizing vector 70 again
06:45 |   |   ResidualReductor: Projecting residual operator ...
06:45 adaptive_greedy: Estimating errors ...
06:45 adaptive_greedy: Maximum error after 20 extensions: 3.1066491852e-06 (mu = {diffusion: [0.1, 0.55, 0.1, 1.0]})
06:45 adaptive_greedy: Maximum validation error: 1.19872878832e-06
06:45 adaptive_greedy: Validation error to training error ratio: 3.859e-01
06:45 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.55, 0.1, 1.0]} ...
06:45 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 0.1, 1.0]} ...
06:45 adaptive_greedy: Extending basis with solution snapshot ...
06:45 |   gram_schmidt: Orthonormalizing vector 20 again
      
06:45 adaptive_greedy: Reducing ...
06:45 |   CoerciveRBReductor: RB projection ...
06:45 |   CoerciveRBReductor: Assembling error estimator ...
06:45 |   |   ResidualReductor: Estimating residual range ...
06:45 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 20 ...
06:45 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:45 |   |   |   |   gram_schmidt: Orthonormalizing vector 72 again
06:45 |   |   |   |   gram_schmidt: Orthonormalizing vector 73 again
06:45 |   |   |   |   gram_schmidt: Orthonormalizing vector 74 again
06:45 |   |   |   |   gram_schmidt: Orthonormalizing vector 75 again
06:45 |   |   ResidualReductor: Projecting residual operator ...
06:45 adaptive_greedy: Estimating errors ...
06:46 adaptive_greedy: Maximum error after 21 extensions: 2.05705788439e-06 (mu = {diffusion: [0.1, 1.0, 0.55, 0.55]})
06:46 adaptive_greedy: Maximum validation error: 1.06830925922e-06
06:46 adaptive_greedy: Validation error to training error ratio: 5.193e-01
06:46 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 0.55, 0.55]} ...
06:46 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 0.55, 0.55]} ...
06:46 adaptive_greedy: Extending basis with solution snapshot ...
06:46 |   gram_schmidt: Orthonormalizing vector 21 again
      
06:46 adaptive_greedy: Reducing ...
06:46 |   CoerciveRBReductor: RB projection ...
06:46 |   CoerciveRBReductor: Assembling error estimator ...
06:46 |   |   ResidualReductor: Estimating residual range ...
06:46 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 21 ...
06:46 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:46 |   |   |   |   gram_schmidt: Orthonormalizing vector 77 again
06:46 |   |   |   |   gram_schmidt: Orthonormalizing vector 78 again
06:46 |   |   |   |   gram_schmidt: Orthonormalizing vector 79 again
06:46 |   |   |   |   gram_schmidt: Orthonormalizing vector 80 again
06:46 |   |   ResidualReductor: Projecting residual operator ...
06:46 adaptive_greedy: Estimating errors ...
06:46 adaptive_greedy: Maximum error after 22 extensions: 8.97667262468e-07 (mu = {diffusion: [1.0, 0.1, 0.55, 0.1]})
06:46 adaptive_greedy: Maximum validation error: 2.1817473867e-07
06:46 adaptive_greedy: Validation error to training error ratio: 2.430e-01
06:46 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 0.55, 0.1]} ...
06:46 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.55, 0.1]} ...
06:47 adaptive_greedy: Extending basis with solution snapshot ...
06:47 |   gram_schmidt: Orthonormalizing vector 22 again
      
06:47 adaptive_greedy: Reducing ...
06:47 |   CoerciveRBReductor: RB projection ...
06:47 |   CoerciveRBReductor: Assembling error estimator ...
06:47 |   |   ResidualReductor: Estimating residual range ...
06:47 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 22 ...
06:47 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:47 |   |   |   |   gram_schmidt: Orthonormalizing vector 82 again
06:47 |   |   |   |   gram_schmidt: Orthonormalizing vector 83 again
06:47 |   |   |   |   gram_schmidt: Orthonormalizing vector 84 again
06:47 |   |   |   |   gram_schmidt: Orthonormalizing vector 85 again
06:47 |   |   ResidualReductor: Projecting residual operator ...
06:47 adaptive_greedy: Estimating errors ...
06:47 adaptive_greedy: Maximum error after 23 extensions: 4.05366543145e-08 (mu = {diffusion: [1.0, 1.0, 0.1, 0.55]})
06:47 adaptive_greedy: Maximum validation error: 1.17112421124e-08
06:47 adaptive_greedy: Validation error to training error ratio: 2.889e-01
06:47 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 1.0, 0.1, 0.55]} ...
06:47 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 1.0, 0.1, 0.55]} ...
06:47 adaptive_greedy: Extending basis with solution snapshot ...
06:47 |   gram_schmidt: Orthonormalizing vector 23 again
      
06:47 adaptive_greedy: Reducing ...
06:47 |   CoerciveRBReductor: RB projection ...
06:48 |   CoerciveRBReductor: Assembling error estimator ...
06:48 |   |   ResidualReductor: Estimating residual range ...
06:48 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 23 ...
06:48 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:48 |   |   |   |   gram_schmidt: Orthonormalizing vector 87 again
06:48 |   |   |   |   gram_schmidt: Orthonormalizing vector 88 again
06:48 |   |   |   |   gram_schmidt: Orthonormalizing vector 89 again
06:48 |   |   |   |   gram_schmidt: Orthonormalizing vector 90 again
06:48 |   |   ResidualReductor: Projecting residual operator ...
06:48 adaptive_greedy: Estimating errors ...
06:48 adaptive_greedy: Maximum error after 24 extensions: 1.15720962552e-08 (mu = {diffusion: [0.55, 0.1, 1.0, 0.1]})
06:48 adaptive_greedy: Maximum validation error: 2.92425512493e-09
06:48 adaptive_greedy: Validation error to training error ratio: 2.527e-01
06:48 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.55, 0.1, 1.0, 0.1]} ...
06:48 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 0.1, 1.0, 0.1]} ...
06:48 adaptive_greedy: Extending basis with solution snapshot ...
06:48 |   gram_schmidt: Orthonormalizing vector 24 again
      
06:48 adaptive_greedy: Reducing ...
06:48 |   CoerciveRBReductor: RB projection ...
06:48 |   CoerciveRBReductor: Assembling error estimator ...
06:48 |   |   ResidualReductor: Estimating residual range ...
06:48 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 24 ...
06:48 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:49 |   |   |   |   gram_schmidt: Orthonormalizing vector 92 again
06:49 |   |   |   |   gram_schmidt: Orthonormalizing vector 93 again
06:49 |   |   |   |   gram_schmidt: Orthonormalizing vector 94 again
06:49 |   |   |   |   gram_schmidt: Orthonormalizing vector 95 again
06:49 |   |   ResidualReductor: Projecting residual operator ...
06:49 adaptive_greedy: Estimating errors ...
06:49 adaptive_greedy: Maximum error after 25 extensions: 8.51785649375e-09 (mu = {diffusion: [0.1, 0.55, 1.0, 1.0]})
06:49 adaptive_greedy: Maximum validation error: 2.79910872422e-09
06:49 adaptive_greedy: Validation error to training error ratio: 3.286e-01
06:49 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 0.55, 1.0, 1.0]} ...
06:49 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 0.55, 1.0, 1.0]} ...
06:49 adaptive_greedy: Extending basis with solution snapshot ...
06:49 |   gram_schmidt: Orthonormalizing vector 25 again
      
06:49 adaptive_greedy: Reducing ...
06:49 |   CoerciveRBReductor: RB projection ...
06:49 |   CoerciveRBReductor: Assembling error estimator ...
06:49 |   |   ResidualReductor: Estimating residual range ...
06:49 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 25 ...
06:49 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:50 |   |   |   |   gram_schmidt: Orthonormalizing vector 97 again
06:50 |   |   |   |   gram_schmidt: Orthonormalizing vector 98 again
06:50 |   |   |   |   gram_schmidt: Orthonormalizing vector 99 again
06:50 |   |   |   |   gram_schmidt: Orthonormalizing vector 100 again
06:50 |   |   ResidualReductor: Projecting residual operator ...
06:50 adaptive_greedy: Estimating errors ...
06:50 adaptive_greedy: Maximum error after 26 extensions: 4.68405114168e-09 (mu = {diffusion: [0.55, 1.0, 1.0, 0.1]})
06:50 adaptive_greedy: Maximum validation error: 4.27641043201e-10
06:50 adaptive_greedy: Validation error to training error ratio: 9.130e-02
06:50 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.55, 1.0, 1.0, 0.1]} ...
06:50 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 1.0, 0.1]} ...
06:50 adaptive_greedy: Extending basis with solution snapshot ...
06:50 |   gram_schmidt: Orthonormalizing vector 26 again
      
06:50 adaptive_greedy: Reducing ...
06:50 |   CoerciveRBReductor: RB projection ...
06:50 |   CoerciveRBReductor: Assembling error estimator ...
06:50 |   |   ResidualReductor: Estimating residual range ...
06:50 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 26 ...
06:50 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:50 |   |   |   |   gram_schmidt: Orthonormalizing vector 102 again
06:51 |   |   |   |   gram_schmidt: Orthonormalizing vector 103 again
06:51 |   |   |   |   gram_schmidt: Orthonormalizing vector 104 again
06:51 |   |   |   |   gram_schmidt: Orthonormalizing vector 105 again
06:51 |   |   ResidualReductor: Projecting residual operator ...
06:51 adaptive_greedy: Estimating errors ...
06:51 adaptive_greedy: Maximum error after 27 extensions: 1.23545920529e-11 (mu = {diffusion: [1.0, 0.1, 0.55, 1.0]})
06:51 adaptive_greedy: Maximum validation error: 2.24278412904e-12
06:51 adaptive_greedy: Validation error to training error ratio: 1.815e-01
06:51 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [1.0, 0.1, 0.55, 1.0]} ...
06:51 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [1.0, 0.1, 0.55, 1.0]} ...
06:51 adaptive_greedy: Extending basis with solution snapshot ...
06:51 |   gram_schmidt: Orthonormalizing vector 27 again
      
06:51 adaptive_greedy: Reducing ...
06:51 |   CoerciveRBReductor: RB projection ...
06:51 |   CoerciveRBReductor: Assembling error estimator ...
06:51 |   |   ResidualReductor: Estimating residual range ...
06:51 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 27 ...
06:51 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:51 |   |   |   |   gram_schmidt: Orthonormalizing vector 107 again
06:52 |   |   |   |   gram_schmidt: Orthonormalizing vector 108 again
06:52 |   |   |   |   gram_schmidt: Orthonormalizing vector 109 again
06:52 |   |   |   |   gram_schmidt: Orthonormalizing vector 110 again
06:52 |   |   ResidualReductor: Projecting residual operator ...
06:52 adaptive_greedy: Estimating errors ...
06:52 adaptive_greedy: Maximum error after 28 extensions: 8.48876667106e-12 (mu = {diffusion: [0.55, 1.0, 0.1, 0.1]})
06:52 adaptive_greedy: Maximum validation error: 2.0736510951e-12
06:52 adaptive_greedy: Validation error to training error ratio: 2.443e-01
06:52 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.55, 1.0, 0.1, 0.1]} ...
06:52 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.55, 1.0, 0.1, 0.1]} ...
06:52 adaptive_greedy: Extending basis with solution snapshot ...
06:52 |   gram_schmidt: Orthonormalizing vector 28 again
      
06:52 adaptive_greedy: Reducing ...
06:52 |   CoerciveRBReductor: RB projection ...
06:52 |   CoerciveRBReductor: Assembling error estimator ...
06:52 |   |   ResidualReductor: Estimating residual range ...
06:52 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 28 ...
06:52 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:52 |   |   |   |   gram_schmidt: Orthonormalizing vector 111 again
06:53 |   |   |   |   gram_schmidt: Orthonormalizing vector 112 again
06:53 |   |   |   |   gram_schmidt: Orthonormalizing vector 113 again
06:53 |   |   |   |   gram_schmidt: Orthonormalizing vector 114 again
06:53 |   |   |   |   gram_schmidt: Orthonormalizing vector 115 again
06:53 |   |   ResidualReductor: Projecting residual operator ...
06:53 adaptive_greedy: Estimating errors ...
06:53 adaptive_greedy: Maximum error after 29 extensions: 2.3379829668e-12 (mu = {diffusion: [0.1, 1.0, 1.0, 0.55]})
06:53 adaptive_greedy: Maximum validation error: 1.48658047129e-12
06:53 adaptive_greedy: Validation error to training error ratio: 6.358e-01
06:53 adaptive_greedy: Computing solution snapshot for mu = {diffusion: [0.1, 1.0, 1.0, 0.55]} ...
06:53 |   StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.1, 1.0, 1.0, 0.55]} ...
06:53 adaptive_greedy: Extending basis with solution snapshot ...
06:53 |   gram_schmidt: Orthonormalizing vector 29 again
      
06:53 adaptive_greedy: Maximum number of 30 extensions reached.
06:53 adaptive_greedy: Reducing once more ...
06:53 |   CoerciveRBReductor: RB projection ...
06:53 |   CoerciveRBReductor: Assembling error estimator ...
06:53 |   |   ResidualReductor: Estimating residual range ...
06:53 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 29 ...
06:53 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
06:54 |   |   |   |   gram_schmidt: Orthonormalizing vector 116 again
06:54 |   |   |   |   gram_schmidt: Orthonormalizing vector 117 again
06:54 |   |   |   |   gram_schmidt: Orthonormalizing vector 118 again
06:54 |   |   |   |   gram_schmidt: Orthonormalizing vector 119 again
06:54 |   |   |   |   gram_schmidt: Orthonormalizing vector 120 again
06:54 |   |   ResidualReductor: Projecting residual operator ...
06:54 adaptive_greedy: Greedy search took 18.5075669289 seconds
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="215" name="test_thermalblock_results[thermalblock_args5]" time="4.18466925621"><system-out>Discretize ...
RB generation ...

Searching for maximum error on random snapshots ...
..........

*** RESULTS ***

pyMOR discretization:
   number of blocks: 2x2
   grid intervals:   100
   ListVectorArray:  False

Naive basis generation:
   basis size set: 5
   elapsed time:   1.2593228817

Stochastic error estimation:
    number of samples:                  10
    maximum NumpyMatrixOperator-norm:   6.2469480e-01 (mu = {diffusion: [0.408493406469, 0.281403649734, 0.736591807092, 0.130059337922]})
    maximum NumpyMatrixOperator-error:  2.0249720e-01 (mu = {diffusion: [0.408493406469, 0.281403649734, 0.736591807092, 0.130059337922]})
    maximum NumpyMatrixOperator-norm:   1.2572252e-01 (mu = {diffusion: [0.408493406469, 0.281403649734, 0.736591807092, 0.130059337922]})
    maximum NumpyMatrixOperator-error:  2.1356484e-02 (mu = {diffusion: [0.408493406469, 0.281403649734, 0.736591807092, 0.130059337922]})
    maximum estimated error:            5.3178606e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    minimum estimator effectivity:      3.2366706e-01 (mu = {diffusion: [0.856738009662, 0.103377882873, 0.804358909139, 0.850129945226]})
    maximum estimator effectivity:      7.9208874e-01 (mu = {diffusion: [0.66531387023, 0.727653649775, 0.810954719993, 0.218701317605]})
    maximum system matrix condition:    9.9116076e+03 (mu = {diffusion: [0.181832736497, 0.399003112714, 0.484642852697, 0.598947231188]})
    elapsed time:                       1.47261095047
</system-out><system-err>06:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:56 DiffusionOperatorP1: Determine global dofs ...
06:56 DiffusionOperatorP1: Boundary treatment ...
06:56 DiffusionOperatorP1: Assemble system matrix ...
06:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:56 DiffusionOperatorP1: Determine global dofs ...
06:56 DiffusionOperatorP1: Boundary treatment ...
06:56 DiffusionOperatorP1: Assemble system matrix ...
06:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:56 DiffusionOperatorP1: Determine global dofs ...
06:56 DiffusionOperatorP1: Boundary treatment ...
06:56 DiffusionOperatorP1: Assemble system matrix ...
06:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:56 DiffusionOperatorP1: Determine global dofs ...
06:56 DiffusionOperatorP1: Boundary treatment ...
06:56 DiffusionOperatorP1: Assemble system matrix ...
06:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:56 DiffusionOperatorP1: Determine global dofs ...
06:56 DiffusionOperatorP1: Boundary treatment ...
06:56 DiffusionOperatorP1: Assemble system matrix ...
06:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:57 DiffusionOperatorP1: Determine global dofs ...
06:57 DiffusionOperatorP1: Boundary treatment ...
06:57 DiffusionOperatorP1: Assemble system matrix ...
06:57 L2ProductP1: Integrate the products of the shape functions on each element
06:57 L2ProductP1: Determine global dofs ...
06:57 L2ProductP1: Boundary treatment ...
06:57 L2ProductP1: Assemble system matrix ...
06:57 L2ProductP1: Integrate the products of the shape functions on each element
06:57 L2ProductP1: Determine global dofs ...
06:57 L2ProductP1: Boundary treatment ...
06:57 L2ProductP1: Assemble system matrix ...
06:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
06:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
06:57 DiffusionOperatorP1: Determine global dofs ...
06:57 DiffusionOperatorP1: Boundary treatment ...
06:57 DiffusionOperatorP1: Assemble system matrix ...
06:57 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.437086106963, 0.955642875769, 0.75879454763, 0.638792635777]} ...
06:57 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.240416776398, 0.240395068303, 0.152275250951, 0.879558531197]} ...
06:57 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.641003510569, 0.737265320016, 0.118526044866, 0.972918866946]} ...
06:57 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.84919837672, 0.29110519961, 0.263642470486, 0.265064058868]} ...
06:58 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [0.373818018664, 0.572280788469, 0.488750516778, 0.362106226178]} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="228" name="test_burgers_ei_results" time="75.8076140881"><system-out>Setup Problem ...
Discretize ...
Rect-Grid on domain [0,2] x [0,1]
x0-intervals: 120, x1-intervals: 60
faces: 7200, edges: 14400, vertices: 7200
The parameter type is {exponent: ()}
RB generation ...

Searching for maximum error on random snapshots ...
N = 30, M = 100: ..........

    *** RESULTS ***

    Problem:
       parameter range:                    (1, 2)
       h:                                  sqrt(2)/42.4264068712
       grid-type:                          rect
       initial-data:                       sin
       lxf-lambda:                         1.0
       nt:                                 100
       not-periodic:                       False
       num-flux:                           lax_friedrichs
       (vx, vy):                           (1.0, 1.0)

    Greedy basis generation:
       number of ei-snapshots:             10
       prescribed collateral basis size:   100
       actual collateral basis size:       100
       number of snapshots:                10
       prescribed basis size:              30
       actual basis size:                  30
       elapsed time:                       42.9764618874

    Stochastic error estimation:
       number of samples:                  10
       maximal L2-error:                   0.00895624585919  (mu = {exponent: 1.60111501174})
       elapsed time:                       6.17324209213
    
</system-out><system-err>07:00 interpolate_operators: Computing operator evaluations on solution snapshots ...
07:00 |   InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.0} ...
07:01 |   InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.11111111111} ...
07:02 |   InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.22222222222} ...
07:02 |   InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.33333333333} ...
07:03 |   InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.44444444444} ...
07:04 |   InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.55555555556} ...
07:05 |   InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.66666666667} ...
07:06 |   InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.77777777778} ...
07:06 |   InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.88888888889} ...
07:07 |   InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 2.0} ...
07:08 interpolate_operators: Performing EI-Greedy:
07:08 |   ei_greedy: Generating Interpolation Data ...
07:08 |   ei_greedy: Maximum interpolation error with 0 interpolation DOFs: 5.80294851805
07:08 |   ei_greedy: Maximum interpolation error with 1 interpolation DOFs: 8.41221578973
07:08 |   ei_greedy: Maximum interpolation error with 2 interpolation DOFs: 8.68949849502
07:09 |   ei_greedy: Maximum interpolation error with 3 interpolation DOFs: 7.74844459618
07:09 |   ei_greedy: Maximum interpolation error with 4 interpolation DOFs: 7.48390000135
07:09 |   ei_greedy: Maximum interpolation error with 5 interpolation DOFs: 7.02472776663
07:09 |   ei_greedy: Maximum interpolation error with 6 interpolation DOFs: 5.8092566387
07:09 |   ei_greedy: Maximum interpolation error with 7 interpolation DOFs: 5.49829154172
07:10 |   ei_greedy: Maximum interpolation error with 8 interpolation DOFs: 5.12085325403
07:10 |   ei_greedy: Maximum interpolation error with 9 interpolation DOFs: 5.07802699271
07:10 |   ei_greedy: Maximum interpolation error with 10 interpolation DOFs: 4.65288541996
07:10 |   ei_greedy: Maximum interpolation error with 11 interpolation DOFs: 4.21347351932
07:10 |   ei_greedy: Maximum interpolation error with 12 interpolation DOFs: 4.31854759893
07:10 |   ei_greedy: Maximum interpolation error with 13 interpolation DOFs: 4.06656278376
07:11 |   ei_greedy: Maximum interpolation error with 14 interpolation DOFs: 3.78994063866
07:11 |   ei_greedy: Maximum interpolation error with 15 interpolation DOFs: 3.83828287712
07:11 |   ei_greedy: Maximum interpolation error with 16 interpolation DOFs: 3.91523412697
07:11 |   ei_greedy: Maximum interpolation error with 17 interpolation DOFs: 9.28258281638
07:11 |   ei_greedy: Maximum interpolation error with 18 interpolation DOFs: 3.16459393311
07:11 |   ei_greedy: Maximum interpolation error with 19 interpolation DOFs: 2.72471858769
07:12 |   ei_greedy: Maximum interpolation error with 20 interpolation DOFs: 2.27794786228
07:12 |   ei_greedy: Maximum interpolation error with 21 interpolation DOFs: 2.02399894695
07:12 |   ei_greedy: Maximum interpolation error with 22 interpolation DOFs: 2.0544133334
07:12 |   ei_greedy: Maximum interpolation error with 23 interpolation DOFs: 1.98642046438
07:12 |   ei_greedy: Maximum interpolation error with 24 interpolation DOFs: 1.97391968043
07:12 |   ei_greedy: Maximum interpolation error with 25 interpolation DOFs: 1.94201547081
07:13 |   ei_greedy: Maximum interpolation error with 26 interpolation DOFs: 1.75855096529
07:13 |   ei_greedy: Maximum interpolation error with 27 interpolation DOFs: 1.72016626105
07:13 |   ei_greedy: Maximum interpolation error with 28 interpolation DOFs: 1.62419499905
07:13 |   ei_greedy: Maximum interpolation error with 29 interpolation DOFs: 1.56044401288
07:13 |   ei_greedy: Maximum interpolation error with 30 interpolation DOFs: 1.47592806744
07:14 |   ei_greedy: Maximum interpolation error with 31 interpolation DOFs: 1.40973820604
07:14 |   ei_greedy: Maximum interpolation error with 32 interpolation DOFs: 1.17556075656
07:14 |   ei_greedy: Maximum interpolation error with 33 interpolation DOFs: 1.05010024508
07:14 |   ei_greedy: Maximum interpolation error with 34 interpolation DOFs: 1.01191571513
07:14 |   ei_greedy: Maximum interpolation error with 35 interpolation DOFs: 0.938627405153
07:15 |   ei_greedy: Maximum interpolation error with 36 interpolation DOFs: 0.956143369395
07:15 |   ei_greedy: Maximum interpolation error with 37 interpolation DOFs: 0.929730293271
07:15 |   ei_greedy: Maximum interpolation error with 38 interpolation DOFs: 0.873617253225
07:15 |   ei_greedy: Maximum interpolation error with 39 interpolation DOFs: 0.943484485477
07:15 |   ei_greedy: Maximum interpolation error with 40 interpolation DOFs: 0.826892009339
07:16 |   ei_greedy: Maximum interpolation error with 41 interpolation DOFs: 0.775184451954
07:16 |   ei_greedy: Maximum interpolation error with 42 interpolation DOFs: 0.747655640079
07:16 |   ei_greedy: Maximum interpolation error with 43 interpolation DOFs: 0.627723155669
07:16 |   ei_greedy: Maximum interpolation error with 44 interpolation DOFs: 0.610204696752
07:16 |   ei_greedy: Maximum interpolation error with 45 interpolation DOFs: 0.648574705404
07:17 |   ei_greedy: Maximum interpolation error with 46 interpolation DOFs: 0.500653505931
07:17 |   ei_greedy: Maximum interpolation error with 47 interpolation DOFs: 0.509971118168
07:17 |   ei_greedy: Maximum interpolation error with 48 interpolation DOFs: 0.495799018981
07:17 |   ei_greedy: Maximum interpolation error with 49 interpolation DOFs: 0.468570400883
07:17 |   ei_greedy: Maximum interpolation error with 50 interpolation DOFs: 0.468013934291
07:17 |   ei_greedy: Maximum interpolation error with 51 interpolation DOFs: 0.46113985086
07:18 |   ei_greedy: Maximum interpolation error with 52 interpolation DOFs: 0.383585269077
07:18 |   ei_greedy: Maximum interpolation error with 53 interpolation DOFs: 0.38127323724
07:18 |   ei_greedy: Maximum interpolation error with 54 interpolation DOFs: 0.365171197953
07:18 |   ei_greedy: Maximum interpolation error with 55 interpolation DOFs: 0.360132085659
07:18 |   ei_greedy: Maximum interpolation error with 56 interpolation DOFs: 0.393660943318
07:18 |   ei_greedy: Maximum interpolation error with 57 interpolation DOFs: 0.30133962469
07:19 |   ei_greedy: Maximum interpolation error with 58 interpolation DOFs: 0.313066522202
07:19 |   ei_greedy: Maximum interpolation error with 59 interpolation DOFs: 0.270480218082
07:19 |   ei_greedy: Maximum interpolation error with 60 interpolation DOFs: 0.236776908555
07:19 |   ei_greedy: Maximum interpolation error with 61 interpolation DOFs: 0.233656197641
07:19 |   ei_greedy: Maximum interpolation error with 62 interpolation DOFs: 0.213998237691
07:20 |   ei_greedy: Maximum interpolation error with 63 interpolation DOFs: 0.189051122712
07:20 |   ei_greedy: Maximum interpolation error with 64 interpolation DOFs: 0.1987615068
07:20 |   ei_greedy: Maximum interpolation error with 65 interpolation DOFs: 0.172394443696
07:20 |   ei_greedy: Maximum interpolation error with 66 interpolation DOFs: 0.166264518732
07:20 |   ei_greedy: Maximum interpolation error with 67 interpolation DOFs: 0.162443722557
07:20 |   ei_greedy: Maximum interpolation error with 68 interpolation DOFs: 0.158980472574
07:21 |   ei_greedy: Maximum interpolation error with 69 interpolation DOFs: 0.143181177096
07:21 |   ei_greedy: Maximum interpolation error with 70 interpolation DOFs: 0.185967384838
07:21 |   ei_greedy: Maximum interpolation error with 71 interpolation DOFs: 0.153031714591
07:21 |   ei_greedy: Maximum interpolation error with 72 interpolation DOFs: 0.128111390305
07:21 |   ei_greedy: Maximum interpolation error with 73 interpolation DOFs: 0.157396638944
07:21 |   ei_greedy: Maximum interpolation error with 74 interpolation DOFs: 0.164625262631
07:22 |   ei_greedy: Maximum interpolation error with 75 interpolation DOFs: 0.15751413826
07:22 |   ei_greedy: Maximum interpolation error with 76 interpolation DOFs: 0.12104472322
07:22 |   ei_greedy: Maximum interpolation error with 77 interpolation DOFs: 0.110549709274
07:22 |   ei_greedy: Maximum interpolation error with 78 interpolation DOFs: 0.115547186103
07:22 |   ei_greedy: Maximum interpolation error with 79 interpolation DOFs: 0.101300867359
07:23 |   ei_greedy: Maximum interpolation error with 80 interpolation DOFs: 0.0892393814565
07:23 |   ei_greedy: Maximum interpolation error with 81 interpolation DOFs: 0.0771009329801
07:23 |   ei_greedy: Maximum interpolation error with 82 interpolation DOFs: 0.0903324148727
07:23 |   ei_greedy: Maximum interpolation error with 83 interpolation DOFs: 0.0730952356644
07:23 |   ei_greedy: Maximum interpolation error with 84 interpolation DOFs: 0.071947007658
07:23 |   ei_greedy: Maximum interpolation error with 85 interpolation DOFs: 0.0708233341474
07:24 |   ei_greedy: Maximum interpolation error with 86 interpolation DOFs: 0.0583001941334
07:24 |   ei_greedy: Maximum interpolation error with 87 interpolation DOFs: 0.0517067894831
07:24 |   ei_greedy: Maximum interpolation error with 88 interpolation DOFs: 0.0440687947698
07:24 |   ei_greedy: Maximum interpolation error with 89 interpolation DOFs: 0.0440078811603
07:24 |   ei_greedy: Maximum interpolation error with 90 interpolation DOFs: 0.0614146736933
07:24 |   ei_greedy: Maximum interpolation error with 91 interpolation DOFs: 0.0388175861299
07:24 |   ei_greedy: Maximum interpolation error with 92 interpolation DOFs: 0.0349572525911
07:25 |   ei_greedy: Maximum interpolation error with 93 interpolation DOFs: 0.0310209691598
07:25 |   ei_greedy: Maximum interpolation error with 94 interpolation DOFs: 0.0301942561335
07:25 |   ei_greedy: Maximum interpolation error with 95 interpolation DOFs: 0.0295115585354
07:25 |   ei_greedy: Maximum interpolation error with 96 interpolation DOFs: 0.0278104546555
07:25 |   ei_greedy: Maximum interpolation error with 97 interpolation DOFs: 0.0278292013616
07:25 |   ei_greedy: Maximum interpolation error with 98 interpolation DOFs: 0.0262875802567
07:26 |   ei_greedy: Maximum interpolation error with 99 interpolation DOFs: 0.0264360409736
07:26 |   ei_greedy: Maximum number of interpolation DOFs reached. Stopping extension loop.
07:26 |   ei_greedy: Final maximum interpolation error with 100 interpolation DOFs: 0.0277265839098
07:26 |   ei_greedy: Interpolation matrix is not lower triangular with maximum error of 1.0065405087e-14
07:26 greedy: Started greedy search on 10 samples
07:26 greedy: Reducing ...
07:26 greedy: Estimating errors ...
07:27 greedy: Maximum error after 0 extensions: 0.790425019118 (mu = {exponent: 1.0})
07:27 greedy: Computing solution snapshot for mu = {exponent: 1.0} ...
07:27 greedy: Extending basis with solution snapshot ...
07:27 |   pod: Computing Gramian (101 vectors) ...
07:27 |   pod: Computing eigenvalue decomposition ...
07:27 |   pod: Computing left-singular vectors (1 vectors) ...
07:27 |   pod: Checking orthonormality ...
      
07:27 greedy: Reducing ...
07:27 greedy: Estimating errors ...
07:28 greedy: Maximum error after 1 extensions: 0.30181973371 (mu = {exponent: 1.0})
07:28 greedy: Computing solution snapshot for mu = {exponent: 1.0} ...
07:28 greedy: Extending basis with solution snapshot ...
07:28 |   pod: Computing Gramian (101 vectors) ...
07:28 |   pod: Computing eigenvalue decomposition ...
07:28 |   pod: Computing left-singular vectors (1 vectors) ...
07:28 |   pod: Checking orthonormality ...
      
07:28 greedy: Reducing ...
07:28 greedy: Estimating errors ...
07:30 greedy: Maximum error after 2 extensions: 0.258133004557 (mu = {exponent: 1.77777777778})
07:30 greedy: Computing solution snapshot for mu = {exponent: 1.77777777778} ...
07:30 greedy: Extending basis with solution snapshot ...
07:30 |   pod: Computing Gramian (101 vectors) ...
07:30 |   pod: Computing eigenvalue decomposition ...
07:30 |   pod: Computing left-singular vectors (1 vectors) ...
07:30 |   pod: Checking orthonormality ...
      
07:30 greedy: Reducing ...
07:30 greedy: Estimating errors ...
07:31 greedy: Maximum error after 3 extensions: 0.197561505083 (mu = {exponent: 2.0})
07:31 greedy: Computing solution snapshot for mu = {exponent: 2.0} ...
07:31 greedy: Extending basis with solution snapshot ...
07:31 |   pod: Computing Gramian (101 vectors) ...
07:31 |   pod: Computing eigenvalue decomposition ...
07:31 |   pod: Computing left-singular vectors (1 vectors) ...
07:31 |   pod: Checking orthonormality ...
      
07:31 greedy: Reducing ...
07:31 greedy: Estimating errors ...
07:32 greedy: Maximum error after 4 extensions: 0.122434873914 (mu = {exponent: 1.0})
07:32 greedy: Computing solution snapshot for mu = {exponent: 1.0} ...
07:32 greedy: Extending basis with solution snapshot ...
07:32 |   pod: Computing Gramian (101 vectors) ...
07:32 |   pod: Computing eigenvalue decomposition ...
07:32 |   pod: Computing left-singular vectors (1 vectors) ...
07:32 |   pod: Checking orthonormality ...
      
07:32 greedy: Reducing ...
07:33 greedy: Estimating errors ...
07:34 greedy: Maximum error after 5 extensions: 0.106309539947 (mu = {exponent: 2.0})
07:34 greedy: Computing solution snapshot for mu = {exponent: 2.0} ...
07:34 greedy: Extending basis with solution snapshot ...
07:34 |   pod: Computing Gramian (101 vectors) ...
07:34 |   pod: Computing eigenvalue decomposition ...
07:34 |   pod: Computing left-singular vectors (1 vectors) ...
07:34 |   pod: Checking orthonormality ...
      
07:34 greedy: Reducing ...
07:34 greedy: Estimating errors ...
07:35 greedy: Maximum error after 6 extensions: 0.100616216371 (mu = {exponent: 2.0})
07:35 greedy: Computing solution snapshot for mu = {exponent: 2.0} ...
07:35 greedy: Extending basis with solution snapshot ...
07:35 |   pod: Computing Gramian (101 vectors) ...
07:35 |   pod: Computing eigenvalue decomposition ...
07:35 |   pod: Computing left-singular vectors (1 vectors) ...
07:35 |   pod: Checking orthonormality ...
      
07:35 greedy: Reducing ...
07:35 greedy: Estimating errors ...
07:37 greedy: Maximum error after 7 extensions: 0.0706924252699 (mu = {exponent: 2.0})
07:37 greedy: Computing solution snapshot for mu = {exponent: 2.0} ...
07:37 greedy: Extending basis with solution snapshot ...
07:37 |   pod: Computing Gramian (101 vectors) ...
07:37 |   pod: Computing eigenvalue decomposition ...
07:37 |   pod: Computing left-singular vectors (1 vectors) ...
07:37 |   pod: Checking orthonormality ...
      
07:37 greedy: Reducing ...
07:37 greedy: Estimating errors ...
07:38 greedy: Maximum error after 8 extensions: 0.0717059413001 (mu = {exponent: 1.44444444444})
07:38 greedy: Computing solution snapshot for mu = {exponent: 1.44444444444} ...
07:38 greedy: Extending basis with solution snapshot ...
07:38 |   pod: Computing Gramian (101 vectors) ...
07:38 |   pod: Computing eigenvalue decomposition ...
07:38 |   pod: Computing left-singular vectors (1 vectors) ...
07:38 |   pod: Checking orthonormality ...
      
07:38 greedy: Reducing ...
07:38 greedy: Estimating errors ...
07:40 greedy: Maximum error after 9 extensions: 0.0644837648901 (mu = {exponent: 2.0})
07:40 greedy: Computing solution snapshot for mu = {exponent: 2.0} ...
07:40 greedy: Extending basis with solution snapshot ...
07:40 |   pod: Computing Gramian (101 vectors) ...
07:40 |   pod: Computing eigenvalue decomposition ...
07:40 |   pod: Computing left-singular vectors (1 vectors) ...
07:40 |   pod: Checking orthonormality ...
      
07:40 greedy: Reducing ...
07:40 greedy: Estimating errors ...
07:41 greedy: Maximum error after 10 extensions: 0.0577470728839 (mu = {exponent: 2.0})
07:41 greedy: Computing solution snapshot for mu = {exponent: 2.0} ...
07:41 greedy: Extending basis with solution snapshot ...
07:41 |   pod: Computing Gramian (101 vectors) ...
07:41 |   pod: Computing eigenvalue decomposition ...
07:41 |   pod: Computing left-singular vectors (1 vectors) ...
07:41 |   pod: Checking orthonormality ...
      
07:41 greedy: Reducing ...
07:41 greedy: Estimating errors ...
07:42 greedy: Maximum error after 11 extensions: 0.042206544795 (mu = {exponent: 2.0})
07:42 greedy: Computing solution snapshot for mu = {exponent: 2.0} ...
07:42 greedy: Extending basis with solution snapshot ...
07:42 |   pod: Computing Gramian (101 vectors) ...
07:42 |   pod: Computing eigenvalue decomposition ...
07:42 |   pod: Computing left-singular vectors (1 vectors) ...
07:42 |   pod: Checking orthonormality ...
      
07:42 greedy: Reducing ...
07:42 greedy: Estimating errors ...
07:44 greedy: Maximum error after 12 extensions: 0.0380761542589 (mu = {exponent: 2.0})
07:44 greedy: Computing solution snapshot for mu = {exponent: 2.0} ...
07:44 greedy: Extending basis with solution snapshot ...
07:44 |   pod: Computing Gramian (101 vectors) ...
07:44 |   pod: Computing eigenvalue decomposition ...
07:44 |   pod: Computing left-singular vectors (1 vectors) ...
07:44 |   pod: Checking orthonormality ...
      
07:44 greedy: Reducing ...
07:44 greedy: Estimating errors ...
07:45 greedy: Maximum error after 13 extensions: 0.0359688615288 (mu = {exponent: 1.66666666667})
07:45 greedy: Computing solution snapshot for mu = {exponent: 1.66666666667} ...
07:45 greedy: Extending basis with solution snapshot ...
07:45 |   pod: Computing Gramian (101 vectors) ...
07:45 |   pod: Computing eigenvalue decomposition ...
07:45 |   pod: Computing left-singular vectors (1 vectors) ...
07:45 |   pod: Checking orthonormality ...
      
07:45 greedy: Reducing ...
07:45 greedy: Estimating errors ...
07:47 greedy: Maximum error after 14 extensions: 0.0357279615934 (mu = {exponent: 1.33333333333})
07:47 greedy: Computing solution snapshot for mu = {exponent: 1.33333333333} ...
07:47 greedy: Extending basis with solution snapshot ...
07:47 |   pod: Computing Gramian (101 vectors) ...
07:47 |   pod: Computing eigenvalue decomposition ...
07:47 |   pod: Computing left-singular vectors (1 vectors) ...
07:47 |   pod: Checking orthonormality ...
      
07:47 greedy: Reducing ...
07:47 greedy: Estimating errors ...
07:48 greedy: Maximum error after 15 extensions: 0.0332618363688 (mu = {exponent: 2.0})
07:48 greedy: Computing solution snapshot for mu = {exponent: 2.0} ...
07:48 greedy: Extending basis with solution snapshot ...
07:48 |   pod: Computing Gramian (101 vectors) ...
07:48 |   pod: Computing eigenvalue decomposition ...
07:48 |   pod: Computing left-singular vectors (1 vectors) ...
07:48 |   pod: Checking orthonormality ...
      
07:48 greedy: Reducing ...
07:48 greedy: Estimating errors ...
07:50 greedy: Maximum error after 16 extensions: 0.0312663567188 (mu = {exponent: 2.0})
07:50 greedy: Computing solution snapshot for mu = {exponent: 2.0} ...
07:50 greedy: Extending basis with solution snapshot ...
07:50 |   pod: Computing Gramian (101 vectors) ...
07:50 |   pod: Computing eigenvalue decomposition ...
07:50 |   pod: Computing left-singular vectors (1 vectors) ...
07:50 |   pod: Checking orthonormality ...
      
07:50 greedy: Reducing ...
07:50 greedy: Estimating errors ...
07:51 greedy: Maximum error after 17 extensions: 0.0295561591402 (mu = {exponent: 2.0})
07:51 greedy: Computing solution snapshot for mu = {exponent: 2.0} ...
07:51 greedy: Extending basis with solution snapshot ...
07:51 |   pod: Computing Gramian (101 vectors) ...
07:51 |   pod: Computing eigenvalue decomposition ...
07:51 |   pod: Computing left-singular vectors (1 vectors) ...
07:51 |   pod: Checking orthonormality ...
      
07:51 greedy: Reducing ...
07:51 greedy: Estimating errors ...
07:52 greedy: Maximum error after 18 extensions: 0.0279377849234 (mu = {exponent: 2.0})
07:52 greedy: Computing solution snapshot for mu = {exponent: 2.0} ...
07:52 greedy: Extending basis with solution snapshot ...
07:52 |   pod: Computing Gramian (101 vectors) ...
07:52 |   pod: Computing eigenvalue decomposition ...
07:52 |   pod: Computing left-singular vectors (1 vectors) ...
07:52 |   pod: Checking orthonormality ...
      
07:52 greedy: Reducing ...
07:52 greedy: Estimating errors ...
07:54 greedy: Maximum error after 19 extensions: 0.024048841106 (mu = {exponent: 2.0})
07:54 greedy: Computing solution snapshot for mu = {exponent: 2.0} ...
07:54 greedy: Extending basis with solution snapshot ...
07:54 |   pod: Computing Gramian (101 vectors) ...
07:54 |   pod: Computing eigenvalue decomposition ...
07:54 |   pod: Computing left-singular vectors (1 vectors) ...
07:54 |   pod: Checking orthonormality ...
      
07:54 greedy: Reducing ...
07:54 greedy: Estimating errors ...
07:55 greedy: Maximum error after 20 extensions: 0.0236539223075 (mu = {exponent: 1.22222222222})
07:55 greedy: Computing solution snapshot for mu = {exponent: 1.22222222222} ...
07:55 greedy: Extending basis with solution snapshot ...
07:55 |   pod: Computing Gramian (101 vectors) ...
07:55 |   pod: Computing eigenvalue decomposition ...
07:55 |   pod: Computing left-singular vectors (1 vectors) ...
07:55 |   pod: Checking orthonormality ...
      
07:55 greedy: Reducing ...
07:55 greedy: Estimating errors ...
07:57 greedy: Maximum error after 21 extensions: 0.0212671862955 (mu = {exponent: 1.77777777778})
07:57 greedy: Computing solution snapshot for mu = {exponent: 1.77777777778} ...
07:57 greedy: Extending basis with solution snapshot ...
07:57 |   pod: Computing Gramian (101 vectors) ...
07:57 |   pod: Computing eigenvalue decomposition ...
07:57 |   pod: Computing left-singular vectors (1 vectors) ...
07:57 |   pod: Checking orthonormality ...
      
07:57 greedy: Reducing ...
07:57 greedy: Estimating errors ...
07:58 greedy: Maximum error after 22 extensions: 0.0206222107771 (mu = {exponent: 2.0})
07:58 greedy: Computing solution snapshot for mu = {exponent: 2.0} ...
07:58 greedy: Extending basis with solution snapshot ...
07:58 |   pod: Computing Gramian (101 vectors) ...
07:58 |   pod: Computing eigenvalue decomposition ...
07:58 |   pod: Computing left-singular vectors (1 vectors) ...
07:58 |   pod: Checking orthonormality ...
      
07:58 greedy: Reducing ...
07:58 greedy: Estimating errors ...
08:00 greedy: Maximum error after 23 extensions: 0.0166578513744 (mu = {exponent: 2.0})
08:00 greedy: Computing solution snapshot for mu = {exponent: 2.0} ...
08:00 greedy: Extending basis with solution snapshot ...
08:00 |   pod: Computing Gramian (101 vectors) ...
08:00 |   pod: Computing eigenvalue decomposition ...
08:00 |   pod: Computing left-singular vectors (1 vectors) ...
08:00 |   pod: Checking orthonormality ...
      
08:00 greedy: Reducing ...
08:00 greedy: Estimating errors ...
08:01 greedy: Maximum error after 24 extensions: 0.0159521713414 (mu = {exponent: 1.44444444444})
08:01 greedy: Computing solution snapshot for mu = {exponent: 1.44444444444} ...
08:01 greedy: Extending basis with solution snapshot ...
08:01 |   pod: Computing Gramian (101 vectors) ...
08:02 |   pod: Computing eigenvalue decomposition ...
08:02 |   pod: Computing left-singular vectors (1 vectors) ...
08:02 |   pod: Checking orthonormality ...
      
08:02 greedy: Reducing ...
08:02 greedy: Estimating errors ...
08:03 greedy: Maximum error after 25 extensions: 0.013845095136 (mu = {exponent: 1.55555555556})
08:03 greedy: Computing solution snapshot for mu = {exponent: 1.55555555556} ...
08:03 greedy: Extending basis with solution snapshot ...
08:03 |   pod: Computing Gramian (101 vectors) ...
08:03 |   pod: Computing eigenvalue decomposition ...
08:03 |   pod: Computing left-singular vectors (1 vectors) ...
08:03 |   pod: Checking orthonormality ...
      
08:03 greedy: Reducing ...
08:03 greedy: Estimating errors ...
08:05 greedy: Maximum error after 26 extensions: 0.0134989923628 (mu = {exponent: 2.0})
08:05 greedy: Computing solution snapshot for mu = {exponent: 2.0} ...
08:05 greedy: Extending basis with solution snapshot ...
08:05 |   pod: Computing Gramian (101 vectors) ...
08:05 |   pod: Computing eigenvalue decomposition ...
08:05 |   pod: Computing left-singular vectors (1 vectors) ...
08:05 |   pod: Checking orthonormality ...
      
08:05 greedy: Reducing ...
08:05 greedy: Estimating errors ...
08:06 greedy: Maximum error after 27 extensions: 0.0124700600164 (mu = {exponent: 1.77777777778})
08:06 greedy: Computing solution snapshot for mu = {exponent: 1.77777777778} ...
08:06 greedy: Extending basis with solution snapshot ...
08:06 |   pod: Computing Gramian (101 vectors) ...
08:06 |   pod: Computing eigenvalue decomposition ...
08:06 |   pod: Computing left-singular vectors (1 vectors) ...
08:06 |   pod: Checking orthonormality ...
      
08:06 greedy: Reducing ...
08:06 greedy: Estimating errors ...
08:08 greedy: Maximum error after 28 extensions: 0.0105616785885 (mu = {exponent: 2.0})
08:08 greedy: Computing solution snapshot for mu = {exponent: 2.0} ...
08:08 greedy: Extending basis with solution snapshot ...
08:08 |   pod: Computing Gramian (101 vectors) ...
08:08 |   pod: Computing eigenvalue decomposition ...
08:08 |   pod: Computing left-singular vectors (1 vectors) ...
08:08 |   pod: Checking orthonormality ...
      
08:08 greedy: Reducing ...
08:08 greedy: Estimating errors ...
08:09 greedy: Maximum error after 29 extensions: 0.00943310080441 (mu = {exponent: 1.88888888889})
08:09 greedy: Computing solution snapshot for mu = {exponent: 1.88888888889} ...
08:09 greedy: Extending basis with solution snapshot ...
08:09 |   pod: Computing Gramian (101 vectors) ...
08:09 |   pod: Computing eigenvalue decomposition ...
08:09 |   pod: Computing left-singular vectors (1 vectors) ...
08:09 |   pod: Checking orthonormality ...
      
08:09 greedy: Maximum number of 30 extensions reached.
08:09 greedy: Reducing once more ...
08:09 greedy: Greedy search took 42.9764618874 seconds
08:10 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.37454011885} ...
08:10 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.95071430641} ...
08:11 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.73199394181} ...
08:12 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.5986584842} ...
08:12 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.15601864044} ...
08:13 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.15599452034} ...
08:13 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.05808361217} ...
08:14 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.86617614577} ...
08:15 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.60111501174} ...
08:15 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.7080725778} ...
</system-err></testcase><testcase classname="src.pymortests.demos" file="src/pymortests/demos.py" line="237" name="test_parabolic_mor_results" time="23.2685189247"><skipped message="expected test failure">reason: Qt missing</skipped><system-out>...
Stochastic error estimation:
    number of samples:              3
    maximum l^2-h^1-norm:           3.3333039e+00 (mu = {top: 12.7920350378})
    maximum l^2-h^1-error:          1.6481624e-04 (mu = {top: 12.7920350378})
    maximum estimated error:        5.8792667e-03 (mu = {top: 12.7920350378})
    minimum estimator effectivity:  1.7888345e-02 (mu = {top: 80.5393759679})
    maximum estimator effectivity:  3.2857650e-02 (mu = {top: 53.2247072726})
    elapsed time:                   7.83416199684
</system-out><system-err>08:16 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:16 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:16 DiffusionOperatorP1: Determine global dofs ...
08:16 DiffusionOperatorP1: Boundary treatment ...
08:16 DiffusionOperatorP1: Assemble system matrix ...
08:16 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:16 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:16 DiffusionOperatorP1: Determine global dofs ...
08:16 DiffusionOperatorP1: Boundary treatment ...
08:16 DiffusionOperatorP1: Assemble system matrix ...
08:16 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:16 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:16 DiffusionOperatorP1: Determine global dofs ...
08:16 DiffusionOperatorP1: Boundary treatment ...
08:16 DiffusionOperatorP1: Assemble system matrix ...
08:16 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:16 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:16 DiffusionOperatorP1: Determine global dofs ...
08:16 DiffusionOperatorP1: Boundary treatment ...
08:16 DiffusionOperatorP1: Assemble system matrix ...
08:16 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:16 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:16 DiffusionOperatorP1: Determine global dofs ...
08:16 DiffusionOperatorP1: Boundary treatment ...
08:16 DiffusionOperatorP1: Assemble system matrix ...
08:17 L2ProductP1: Integrate the products of the shape functions on each element
08:17 L2ProductP1: Determine global dofs ...
08:17 L2ProductP1: Boundary treatment ...
08:17 L2ProductP1: Assemble system matrix ...
08:17 L2ProductP1: Integrate the products of the shape functions on each element
08:17 L2ProductP1: Determine global dofs ...
08:17 L2ProductP1: Boundary treatment ...
08:17 L2ProductP1: Assemble system matrix ...
08:17 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:17 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:17 DiffusionOperatorP1: Determine global dofs ...
08:17 DiffusionOperatorP1: Boundary treatment ...
08:17 DiffusionOperatorP1: Assemble system matrix ...
08:17 greedy: Started greedy search on 5 samples
08:17 greedy: Reducing ...
08:17 |   ParabolicRBReductor: RB projection ...
08:17 |   ParabolicRBReductor: Assembling error estimator ...
08:17 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:17 |   |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
08:17 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:17 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:17 |   |   ResidualReductor: Estimating residual range ...
08:17 |   |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
08:17 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:17 |   |   ResidualReductor: Projecting residual operator ...
08:17 greedy: Estimating errors ...
08:17 greedy: Maximum error after 0 extensions: 103.003131752 (mu = {top: 1.0})
08:17 greedy: Computing solution snapshot for mu = {top: 1.0} ...
08:17 greedy: Extending basis with solution snapshot ...
08:17 |   pod: Computing Gramian (101 vectors) ...
08:17 |   pod: Computing eigenvalue decomposition ...
08:17 |   pod: Computing left-singular vectors (1 vectors) ...
08:17 |   pod: Checking orthonormality ...
      
08:17 greedy: Reducing ...
08:17 |   ParabolicRBReductor: RB projection ...
08:17 |   ParabolicRBReductor: Assembling error estimator ...
08:17 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:17 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
08:17 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:17 |   |   |   |   gram_schmidt: Removing vector 1 of norm 0.0
08:17 |   |   |   |   gram_schmidt: Orthonormalizing vector 3 again
08:17 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:17 |   |   ResidualReductor: Estimating residual range ...
08:17 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
08:17 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:17 |   |   ResidualReductor: Projecting residual operator ...
08:17 greedy: Estimating errors ...
08:18 greedy: Maximum error after 1 extensions: 148.967071292 (mu = {top: 100.0})
08:18 greedy: Computing solution snapshot for mu = {top: 100.0} ...
08:18 greedy: Extending basis with solution snapshot ...
08:18 |   pod: Computing Gramian (101 vectors) ...
08:18 |   pod: Computing eigenvalue decomposition ...
08:18 |   pod: Computing left-singular vectors (1 vectors) ...
08:18 |   pod: Checking orthonormality ...
      
08:18 greedy: Reducing ...
08:18 |   ParabolicRBReductor: RB projection ...
08:18 |   ParabolicRBReductor: Assembling error estimator ...
08:18 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:18 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
08:18 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:18 |   |   |   |   gram_schmidt: Removing vector 5 of norm 0.0
08:18 |   |   |   |   gram_schmidt: Orthonormalizing vector 6 again
08:18 |   |   |   |   gram_schmidt: Orthonormalizing vector 7 again
08:18 |   |   |   |   gram_schmidt: Orthonormalizing vector 8 again
08:18 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:18 |   |   ResidualReductor: Estimating residual range ...
08:18 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
08:18 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:18 |   |   |   |   gram_schmidt: Orthonormalizing vector 2 again
08:18 |   |   ResidualReductor: Projecting residual operator ...
08:18 greedy: Estimating errors ...
08:18 greedy: Maximum error after 2 extensions: 149.304054442 (mu = {top: 100.0})
08:18 greedy: Computing solution snapshot for mu = {top: 100.0} ...
08:18 greedy: Extending basis with solution snapshot ...
08:18 |   pod: Computing Gramian (101 vectors) ...
08:18 |   pod: Computing eigenvalue decomposition ...
08:18 |   pod: Computing left-singular vectors (1 vectors) ...
08:18 |   pod: Checking orthonormality ...
      
08:18 greedy: Reducing ...
08:18 |   ParabolicRBReductor: RB projection ...
08:18 |   ParabolicRBReductor: Assembling error estimator ...
08:18 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:18 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
08:18 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:18 |   |   |   |   gram_schmidt: Removing vector 9 of norm 0.0
08:18 |   |   |   |   gram_schmidt: Orthonormalizing vector 10 again
08:18 |   |   |   |   gram_schmidt: Orthonormalizing vector 11 again
08:18 |   |   |   |   gram_schmidt: Orthonormalizing vector 12 again
08:18 |   |   |   |   gram_schmidt: Orthonormalizing vector 13 again
08:18 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:18 |   |   ResidualReductor: Estimating residual range ...
08:18 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
08:18 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:18 |   |   |   |   gram_schmidt: Orthonormalizing vector 3 again
08:18 |   |   ResidualReductor: Projecting residual operator ...
08:18 greedy: Estimating errors ...
08:18 greedy: Maximum error after 3 extensions: 34.7322953934 (mu = {top: 25.75})
08:18 greedy: Computing solution snapshot for mu = {top: 25.75} ...
08:18 |   InstationaryDiscretization: Solving instationary_StationaryProblem_CG for {top: 25.75} ...
08:19 greedy: Extending basis with solution snapshot ...
08:19 |   pod: Computing Gramian (101 vectors) ...
08:19 |   pod: Computing eigenvalue decomposition ...
08:19 |   pod: Computing left-singular vectors (1 vectors) ...
08:19 |   pod: Checking orthonormality ...
      
08:19 greedy: Reducing ...
08:19 |   ParabolicRBReductor: RB projection ...
08:19 |   ParabolicRBReductor: Assembling error estimator ...
08:19 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:19 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 3 ...
08:20 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:20 |   |   |   |   gram_schmidt: Removing vector 13 of norm 0.0
08:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 16 again
08:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 17 again
08:20 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:20 |   |   ResidualReductor: Estimating residual range ...
08:20 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 3 ...
08:20 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:20 |   |   ResidualReductor: Projecting residual operator ...
08:20 greedy: Estimating errors ...
08:20 greedy: Maximum error after 4 extensions: 4.73757800158 (mu = {top: 1.0})
08:20 greedy: Computing solution snapshot for mu = {top: 1.0} ...
08:20 greedy: Extending basis with solution snapshot ...
08:20 |   pod: Computing Gramian (101 vectors) ...
08:20 |   pod: Computing eigenvalue decomposition ...
08:20 |   pod: Computing left-singular vectors (1 vectors) ...
08:20 |   pod: Checking orthonormality ...
      
08:20 greedy: Reducing ...
08:20 |   ParabolicRBReductor: RB projection ...
08:20 |   ParabolicRBReductor: Assembling error estimator ...
08:20 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:20 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 4 ...
08:20 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:20 |   |   |   |   gram_schmidt: Removing vector 17 of norm 0.0
08:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 18 again
08:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 19 again
08:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 21 again
08:20 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:20 |   |   ResidualReductor: Estimating residual range ...
08:20 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 4 ...
08:20 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:20 |   |   ResidualReductor: Projecting residual operator ...
08:20 greedy: Estimating errors ...
08:20 greedy: Maximum error after 5 extensions: 4.82260455486 (mu = {top: 100.0})
08:20 greedy: Computing solution snapshot for mu = {top: 100.0} ...
08:20 greedy: Extending basis with solution snapshot ...
08:20 |   pod: Computing Gramian (101 vectors) ...
08:20 |   pod: Computing eigenvalue decomposition ...
08:20 |   pod: Computing left-singular vectors (1 vectors) ...
08:20 |   pod: Checking orthonormality ...
      
08:20 greedy: Reducing ...
08:20 |   ParabolicRBReductor: RB projection ...
08:20 |   ParabolicRBReductor: Assembling error estimator ...
08:20 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:20 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 5 ...
08:20 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:20 |   |   |   |   gram_schmidt: Removing vector 21 of norm 0.0
08:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 22 again
08:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 23 again
08:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 24 again
08:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 25 again
08:20 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:20 |   |   ResidualReductor: Estimating residual range ...
08:20 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 5 ...
08:20 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 6 again
08:20 |   |   ResidualReductor: Projecting residual operator ...
08:20 greedy: Estimating errors ...
08:20 greedy: Maximum error after 6 extensions: 1.37861613316 (mu = {top: 50.5})
08:20 greedy: Computing solution snapshot for mu = {top: 50.5} ...
08:20 |   InstationaryDiscretization: Solving instationary_StationaryProblem_CG for {top: 50.5} ...
08:22 greedy: Extending basis with solution snapshot ...
08:22 |   pod: Computing Gramian (101 vectors) ...
08:22 |   pod: Computing eigenvalue decomposition ...
08:22 |   pod: Computing left-singular vectors (1 vectors) ...
08:22 |   pod: Checking orthonormality ...
      
08:22 greedy: Reducing ...
08:22 |   ParabolicRBReductor: RB projection ...
08:22 |   ParabolicRBReductor: Assembling error estimator ...
08:22 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:22 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 6 ...
08:22 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:22 |   |   |   |   gram_schmidt: Removing vector 25 of norm 0.0
08:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 26 again
08:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 27 again
08:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 28 again
08:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 29 again
08:22 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:22 |   |   ResidualReductor: Estimating residual range ...
08:22 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 6 ...
08:22 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:22 |   |   ResidualReductor: Projecting residual operator ...
08:22 greedy: Estimating errors ...
08:22 greedy: Maximum error after 7 extensions: 1.14107902168 (mu = {top: 50.5})
08:22 greedy: Computing solution snapshot for mu = {top: 50.5} ...
08:22 greedy: Extending basis with solution snapshot ...
08:22 |   pod: Computing Gramian (101 vectors) ...
08:22 |   pod: Computing eigenvalue decomposition ...
08:22 |   pod: Computing left-singular vectors (1 vectors) ...
08:22 |   pod: Checking orthonormality ...
      
08:22 greedy: Reducing ...
08:22 |   ParabolicRBReductor: RB projection ...
08:22 |   ParabolicRBReductor: Assembling error estimator ...
08:22 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:22 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 7 ...
08:22 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:22 |   |   |   |   gram_schmidt: Removing vector 29 of norm 0.0
08:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 30 again
08:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 31 again
08:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 32 again
08:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 33 again
08:22 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:22 |   |   ResidualReductor: Estimating residual range ...
08:22 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 7 ...
08:22 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:22 |   |   ResidualReductor: Projecting residual operator ...
08:22 greedy: Estimating errors ...
08:23 greedy: Maximum error after 8 extensions: 0.438404273041 (mu = {top: 25.75})
08:23 greedy: Computing solution snapshot for mu = {top: 25.75} ...
08:23 greedy: Extending basis with solution snapshot ...
08:23 |   pod: Computing Gramian (101 vectors) ...
08:23 |   pod: Computing eigenvalue decomposition ...
08:23 |   pod: Computing left-singular vectors (1 vectors) ...
08:23 |   pod: Checking orthonormality ...
      
08:23 greedy: Reducing ...
08:23 |   ParabolicRBReductor: RB projection ...
08:23 |   ParabolicRBReductor: Assembling error estimator ...
08:23 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:23 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 8 ...
08:23 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:23 |   |   |   |   gram_schmidt: Removing vector 33 of norm 0.0
08:23 |   |   |   |   gram_schmidt: Orthonormalizing vector 34 again
08:23 |   |   |   |   gram_schmidt: Orthonormalizing vector 35 again
08:23 |   |   |   |   gram_schmidt: Orthonormalizing vector 36 again
08:23 |   |   |   |   gram_schmidt: Orthonormalizing vector 37 again
08:23 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:23 |   |   ResidualReductor: Estimating residual range ...
08:23 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 8 ...
08:23 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:23 |   |   ResidualReductor: Projecting residual operator ...
08:23 greedy: Estimating errors ...
08:23 greedy: Maximum error after 9 extensions: 0.413470723674 (mu = {top: 1.0})
08:23 greedy: Computing solution snapshot for mu = {top: 1.0} ...
08:23 greedy: Extending basis with solution snapshot ...
08:23 |   pod: Computing Gramian (101 vectors) ...
08:23 |   pod: Computing eigenvalue decomposition ...
08:23 |   pod: Computing left-singular vectors (1 vectors) ...
08:23 |   pod: Checking orthonormality ...
      
08:23 greedy: Reducing ...
08:23 |   ParabolicRBReductor: RB projection ...
08:23 |   ParabolicRBReductor: Assembling error estimator ...
08:23 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:23 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 9 ...
08:23 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:23 |   |   |   |   gram_schmidt: Removing vector 37 of norm 0.0
08:23 |   |   |   |   gram_schmidt: Orthonormalizing vector 38 again
08:23 |   |   |   |   gram_schmidt: Orthonormalizing vector 39 again
08:23 |   |   |   |   gram_schmidt: Orthonormalizing vector 41 again
08:23 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:23 |   |   ResidualReductor: Estimating residual range ...
08:23 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 9 ...
08:23 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:23 |   |   ResidualReductor: Projecting residual operator ...
08:23 greedy: Estimating errors ...
08:23 greedy: Maximum error after 10 extensions: 0.15158865072 (mu = {top: 100.0})
08:23 greedy: Computing solution snapshot for mu = {top: 100.0} ...
08:23 greedy: Extending basis with solution snapshot ...
08:24 |   pod: Computing Gramian (101 vectors) ...
08:24 |   pod: Computing eigenvalue decomposition ...
08:24 |   pod: Computing left-singular vectors (1 vectors) ...
08:24 |   pod: Checking orthonormality ...
      
08:24 greedy: Reducing ...
08:24 |   ParabolicRBReductor: RB projection ...
08:24 |   ParabolicRBReductor: Assembling error estimator ...
08:24 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:24 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 10 ...
08:24 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:24 |   |   |   |   gram_schmidt: Removing vector 41 of norm 0.0
08:24 |   |   |   |   gram_schmidt: Orthonormalizing vector 42 again
08:24 |   |   |   |   gram_schmidt: Orthonormalizing vector 43 again
08:24 |   |   |   |   gram_schmidt: Orthonormalizing vector 44 again
08:24 |   |   |   |   gram_schmidt: Orthonormalizing vector 45 again
08:24 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:24 |   |   ResidualReductor: Estimating residual range ...
08:24 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 10 ...
08:24 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:24 |   |   ResidualReductor: Projecting residual operator ...
08:24 greedy: Estimating errors ...
08:24 greedy: Maximum error after 11 extensions: 0.0903911115347 (mu = {top: 100.0})
08:24 greedy: Computing solution snapshot for mu = {top: 100.0} ...
08:24 greedy: Extending basis with solution snapshot ...
08:24 |   pod: Computing Gramian (101 vectors) ...
08:24 |   pod: Computing eigenvalue decomposition ...
08:24 |   pod: Computing left-singular vectors (1 vectors) ...
08:24 |   pod: Checking orthonormality ...
      
08:24 greedy: Reducing ...
08:24 |   ParabolicRBReductor: RB projection ...
08:24 |   ParabolicRBReductor: Assembling error estimator ...
08:24 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:24 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 11 ...
08:24 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:24 |   |   |   |   gram_schmidt: Removing vector 45 of norm 0.0
08:24 |   |   |   |   gram_schmidt: Orthonormalizing vector 46 again
08:24 |   |   |   |   gram_schmidt: Orthonormalizing vector 47 again
08:24 |   |   |   |   gram_schmidt: Orthonormalizing vector 48 again
08:24 |   |   |   |   gram_schmidt: Orthonormalizing vector 49 again
08:24 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:24 |   |   ResidualReductor: Estimating residual range ...
08:24 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 11 ...
08:24 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:24 |   |   |   |   gram_schmidt: Orthonormalizing vector 12 again
08:24 |   |   ResidualReductor: Projecting residual operator ...
08:24 greedy: Estimating errors ...
08:25 greedy: Maximum error after 12 extensions: 0.0470575388641 (mu = {top: 50.5})
08:25 greedy: Computing solution snapshot for mu = {top: 50.5} ...
08:25 greedy: Extending basis with solution snapshot ...
08:25 |   pod: Computing Gramian (101 vectors) ...
08:25 |   pod: Computing eigenvalue decomposition ...
08:25 |   pod: Computing left-singular vectors (1 vectors) ...
08:25 |   pod: Checking orthonormality ...
      
08:25 greedy: Reducing ...
08:25 |   ParabolicRBReductor: RB projection ...
08:25 |   ParabolicRBReductor: Assembling error estimator ...
08:25 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:25 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 12 ...
08:25 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:25 |   |   |   |   gram_schmidt: Removing vector 49 of norm 0.0
08:25 |   |   |   |   gram_schmidt: Orthonormalizing vector 51 again
08:25 |   |   |   |   gram_schmidt: Orthonormalizing vector 52 again
08:25 |   |   |   |   gram_schmidt: Orthonormalizing vector 53 again
08:25 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:25 |   |   ResidualReductor: Estimating residual range ...
08:25 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 12 ...
08:25 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:25 |   |   ResidualReductor: Projecting residual operator ...
08:25 greedy: Estimating errors ...
08:25 greedy: Maximum error after 13 extensions: 0.0268182330077 (mu = {top: 1.0})
08:25 greedy: Computing solution snapshot for mu = {top: 1.0} ...
08:25 greedy: Extending basis with solution snapshot ...
08:25 |   pod: Computing Gramian (101 vectors) ...
08:25 |   pod: Computing eigenvalue decomposition ...
08:25 |   pod: Computing left-singular vectors (1 vectors) ...
08:25 |   pod: Checking orthonormality ...
      
08:25 greedy: Reducing ...
08:25 |   ParabolicRBReductor: RB projection ...
08:25 |   ParabolicRBReductor: Assembling error estimator ...
08:25 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:25 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 13 ...
08:25 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:25 |   |   |   |   gram_schmidt: Removing vector 53 of norm 0.0
08:25 |   |   |   |   gram_schmidt: Orthonormalizing vector 54 again
08:25 |   |   |   |   gram_schmidt: Orthonormalizing vector 55 again
08:26 |   |   |   |   gram_schmidt: Orthonormalizing vector 57 again
08:26 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:26 |   |   ResidualReductor: Estimating residual range ...
08:26 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 13 ...
08:26 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:26 |   |   ResidualReductor: Projecting residual operator ...
08:26 greedy: Estimating errors ...
08:26 greedy: Maximum error after 14 extensions: 0.0167484794251 (mu = {top: 25.75})
08:26 greedy: Computing solution snapshot for mu = {top: 25.75} ...
08:26 greedy: Extending basis with solution snapshot ...
08:26 |   pod: Computing Gramian (101 vectors) ...
08:26 |   pod: Computing eigenvalue decomposition ...
08:26 |   pod: Computing left-singular vectors (1 vectors) ...
08:26 |   pod: Checking orthonormality ...
      
08:26 greedy: Reducing ...
08:26 |   ParabolicRBReductor: RB projection ...
08:26 |   ParabolicRBReductor: Assembling error estimator ...
08:26 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:26 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 14 ...
08:26 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:26 |   |   |   |   gram_schmidt: Removing vector 57 of norm 0.0
08:26 |   |   |   |   gram_schmidt: Orthonormalizing vector 58 again
08:26 |   |   |   |   gram_schmidt: Orthonormalizing vector 59 again
08:26 |   |   |   |   gram_schmidt: Orthonormalizing vector 60 again
08:26 |   |   |   |   gram_schmidt: Orthonormalizing vector 61 again
08:26 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:26 |   |   ResidualReductor: Estimating residual range ...
08:26 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 14 ...
08:26 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:26 |   |   ResidualReductor: Projecting residual operator ...
08:26 greedy: Estimating errors ...
08:26 greedy: Maximum error after 15 extensions: 0.0086256221394 (mu = {top: 25.75})
08:26 greedy: Computing solution snapshot for mu = {top: 25.75} ...
08:26 greedy: Extending basis with solution snapshot ...
08:26 |   pod: Computing Gramian (101 vectors) ...
08:26 |   pod: Computing eigenvalue decomposition ...
08:26 |   pod: Computing left-singular vectors (1 vectors) ...
08:26 |   pod: Checking orthonormality ...
      
08:26 greedy: Reducing ...
08:26 |   ParabolicRBReductor: RB projection ...
08:27 |   ParabolicRBReductor: Assembling error estimator ...
08:27 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:27 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 15 ...
08:27 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:27 |   |   |   |   gram_schmidt: Removing vector 61 of norm 0.0
08:27 |   |   |   |   gram_schmidt: Orthonormalizing vector 62 again
08:27 |   |   |   |   gram_schmidt: Orthonormalizing vector 63 again
08:27 |   |   |   |   gram_schmidt: Orthonormalizing vector 64 again
08:27 |   |   |   |   gram_schmidt: Orthonormalizing vector 65 again
08:27 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:27 |   |   ResidualReductor: Estimating residual range ...
08:27 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 15 ...
08:27 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:27 |   |   ResidualReductor: Projecting residual operator ...
08:27 greedy: Estimating errors ...
08:27 greedy: Maximum error after 16 extensions: 0.00527159623861 (mu = {top: 75.25})
08:27 greedy: Computing solution snapshot for mu = {top: 75.25} ...
08:27 |   InstationaryDiscretization: Solving instationary_StationaryProblem_CG for {top: 75.25} ...
08:28 greedy: Extending basis with solution snapshot ...
08:28 |   pod: Computing Gramian (101 vectors) ...
08:28 |   pod: Computing eigenvalue decomposition ...
08:28 |   pod: Computing left-singular vectors (1 vectors) ...
08:28 |   pod: Checking orthonormality ...
      
08:28 greedy: Reducing ...
08:28 |   ParabolicRBReductor: RB projection ...
08:28 |   ParabolicRBReductor: Assembling error estimator ...
08:28 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:28 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 16 ...
08:28 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:28 |   |   |   |   gram_schmidt: Removing vector 65 of norm 0.0
08:28 |   |   |   |   gram_schmidt: Orthonormalizing vector 66 again
08:28 |   |   |   |   gram_schmidt: Orthonormalizing vector 67 again
08:28 |   |   |   |   gram_schmidt: Orthonormalizing vector 68 again
08:29 |   |   |   |   gram_schmidt: Orthonormalizing vector 69 again
08:29 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:29 |   |   ResidualReductor: Estimating residual range ...
08:29 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 16 ...
08:29 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:29 |   |   ResidualReductor: Projecting residual operator ...
08:29 greedy: Estimating errors ...
08:29 greedy: Maximum error after 17 extensions: 0.00462749232381 (mu = {top: 75.25})
08:29 greedy: Computing solution snapshot for mu = {top: 75.25} ...
08:29 greedy: Extending basis with solution snapshot ...
08:29 |   pod: Computing Gramian (101 vectors) ...
08:29 |   pod: Computing eigenvalue decomposition ...
08:29 |   pod: Computing left-singular vectors (1 vectors) ...
08:29 |   pod: Checking orthonormality ...
      
08:29 greedy: Reducing ...
08:29 |   ParabolicRBReductor: RB projection ...
08:29 |   ParabolicRBReductor: Assembling error estimator ...
08:29 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:29 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 17 ...
08:29 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:29 |   |   |   |   gram_schmidt: Removing vector 69 of norm 0.0
08:29 |   |   |   |   gram_schmidt: Orthonormalizing vector 70 again
08:29 |   |   |   |   gram_schmidt: Orthonormalizing vector 71 again
08:29 |   |   |   |   gram_schmidt: Orthonormalizing vector 72 again
08:29 |   |   |   |   gram_schmidt: Orthonormalizing vector 73 again
08:29 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:29 |   |   ResidualReductor: Estimating residual range ...
08:29 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 17 ...
08:29 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:29 |   |   ResidualReductor: Projecting residual operator ...
08:29 greedy: Estimating errors ...
08:30 greedy: Maximum error after 18 extensions: 0.00304156447988 (mu = {top: 75.25})
08:30 greedy: Computing solution snapshot for mu = {top: 75.25} ...
08:30 greedy: Extending basis with solution snapshot ...
08:30 |   pod: Computing Gramian (101 vectors) ...
08:30 |   pod: Computing eigenvalue decomposition ...
08:30 |   pod: Computing left-singular vectors (1 vectors) ...
08:30 |   pod: Checking orthonormality ...
      
08:30 greedy: Reducing ...
08:30 |   ParabolicRBReductor: RB projection ...
08:30 |   ParabolicRBReductor: Assembling error estimator ...
08:30 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:30 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 18 ...
08:30 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:30 |   |   |   |   gram_schmidt: Removing vector 73 of norm 0.0
08:30 |   |   |   |   gram_schmidt: Orthonormalizing vector 74 again
08:30 |   |   |   |   gram_schmidt: Orthonormalizing vector 75 again
08:30 |   |   |   |   gram_schmidt: Orthonormalizing vector 76 again
08:30 |   |   |   |   gram_schmidt: Orthonormalizing vector 77 again
08:30 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:30 |   |   ResidualReductor: Estimating residual range ...
08:30 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 18 ...
08:30 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:30 |   |   ResidualReductor: Projecting residual operator ...
08:30 greedy: Estimating errors ...
08:30 greedy: Maximum error after 19 extensions: 0.00159596878146 (mu = {top: 1.0})
08:30 greedy: Computing solution snapshot for mu = {top: 1.0} ...
08:30 greedy: Extending basis with solution snapshot ...
08:30 |   pod: Computing Gramian (101 vectors) ...
08:30 |   pod: Computing eigenvalue decomposition ...
08:30 |   pod: Computing left-singular vectors (1 vectors) ...
08:30 |   pod: Checking orthonormality ...
      
08:30 greedy: Maximum number of 20 extensions reached.
08:30 greedy: Reducing once more ...
08:30 |   ParabolicRBReductor: RB projection ...
08:30 |   ParabolicRBReductor: Assembling error estimator ...
08:30 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:30 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 19 ...
08:30 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:30 |   |   |   |   gram_schmidt: Removing vector 77 of norm 0.0
08:31 |   |   |   |   gram_schmidt: Orthonormalizing vector 78 again
08:31 |   |   |   |   gram_schmidt: Orthonormalizing vector 79 again
08:31 |   |   |   |   gram_schmidt: Orthonormalizing vector 81 again
08:31 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:31 |   |   ResidualReductor: Estimating residual range ...
08:31 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 19 ...
08:31 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:31 |   |   ResidualReductor: Projecting residual operator ...
08:31 greedy: Greedy search took 13.9001698494 seconds
</system-err><system-out>...
Stochastic error estimation:
    number of samples:              3
    maximum l^2-h^1-norm:           3.3333039e+00 (mu = {top: 12.7920350378})
    maximum l^2-h^1-error:          1.6481624e-04 (mu = {top: 12.7920350378})
    maximum estimated error:        5.8792667e-03 (mu = {top: 12.7920350378})
    minimum estimator effectivity:  1.7888345e-02 (mu = {top: 80.5393759679})
    maximum estimator effectivity:  3.2857650e-02 (mu = {top: 53.2247072726})
    elapsed time:                   7.83416199684
</system-out><system-err>08:16 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:16 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:16 DiffusionOperatorP1: Determine global dofs ...
08:16 DiffusionOperatorP1: Boundary treatment ...
08:16 DiffusionOperatorP1: Assemble system matrix ...
08:16 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:16 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:16 DiffusionOperatorP1: Determine global dofs ...
08:16 DiffusionOperatorP1: Boundary treatment ...
08:16 DiffusionOperatorP1: Assemble system matrix ...
08:16 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:16 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:16 DiffusionOperatorP1: Determine global dofs ...
08:16 DiffusionOperatorP1: Boundary treatment ...
08:16 DiffusionOperatorP1: Assemble system matrix ...
08:16 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:16 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:16 DiffusionOperatorP1: Determine global dofs ...
08:16 DiffusionOperatorP1: Boundary treatment ...
08:16 DiffusionOperatorP1: Assemble system matrix ...
08:16 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:16 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:16 DiffusionOperatorP1: Determine global dofs ...
08:16 DiffusionOperatorP1: Boundary treatment ...
08:16 DiffusionOperatorP1: Assemble system matrix ...
08:17 L2ProductP1: Integrate the products of the shape functions on each element
08:17 L2ProductP1: Determine global dofs ...
08:17 L2ProductP1: Boundary treatment ...
08:17 L2ProductP1: Assemble system matrix ...
08:17 L2ProductP1: Integrate the products of the shape functions on each element
08:17 L2ProductP1: Determine global dofs ...
08:17 L2ProductP1: Boundary treatment ...
08:17 L2ProductP1: Assemble system matrix ...
08:17 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:17 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:17 DiffusionOperatorP1: Determine global dofs ...
08:17 DiffusionOperatorP1: Boundary treatment ...
08:17 DiffusionOperatorP1: Assemble system matrix ...
08:17 greedy: Started greedy search on 5 samples
08:17 greedy: Reducing ...
08:17 |   ParabolicRBReductor: RB projection ...
08:17 |   ParabolicRBReductor: Assembling error estimator ...
08:17 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:17 |   |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
08:17 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:17 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:17 |   |   ResidualReductor: Estimating residual range ...
08:17 |   |   |   estimate_image_hierarchical: Estimating image for basis vector -1 ...
08:17 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:17 |   |   ResidualReductor: Projecting residual operator ...
08:17 greedy: Estimating errors ...
08:17 greedy: Maximum error after 0 extensions: 103.003131752 (mu = {top: 1.0})
08:17 greedy: Computing solution snapshot for mu = {top: 1.0} ...
08:17 greedy: Extending basis with solution snapshot ...
08:17 |   pod: Computing Gramian (101 vectors) ...
08:17 |   pod: Computing eigenvalue decomposition ...
08:17 |   pod: Computing left-singular vectors (1 vectors) ...
08:17 |   pod: Checking orthonormality ...
      
08:17 greedy: Reducing ...
08:17 |   ParabolicRBReductor: RB projection ...
08:17 |   ParabolicRBReductor: Assembling error estimator ...
08:17 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:17 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
08:17 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:17 |   |   |   |   gram_schmidt: Removing vector 1 of norm 0.0
08:17 |   |   |   |   gram_schmidt: Orthonormalizing vector 3 again
08:17 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:17 |   |   ResidualReductor: Estimating residual range ...
08:17 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 0 ...
08:17 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:17 |   |   ResidualReductor: Projecting residual operator ...
08:17 greedy: Estimating errors ...
08:18 greedy: Maximum error after 1 extensions: 148.967071292 (mu = {top: 100.0})
08:18 greedy: Computing solution snapshot for mu = {top: 100.0} ...
08:18 greedy: Extending basis with solution snapshot ...
08:18 |   pod: Computing Gramian (101 vectors) ...
08:18 |   pod: Computing eigenvalue decomposition ...
08:18 |   pod: Computing left-singular vectors (1 vectors) ...
08:18 |   pod: Checking orthonormality ...
      
08:18 greedy: Reducing ...
08:18 |   ParabolicRBReductor: RB projection ...
08:18 |   ParabolicRBReductor: Assembling error estimator ...
08:18 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:18 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
08:18 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:18 |   |   |   |   gram_schmidt: Removing vector 5 of norm 0.0
08:18 |   |   |   |   gram_schmidt: Orthonormalizing vector 6 again
08:18 |   |   |   |   gram_schmidt: Orthonormalizing vector 7 again
08:18 |   |   |   |   gram_schmidt: Orthonormalizing vector 8 again
08:18 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:18 |   |   ResidualReductor: Estimating residual range ...
08:18 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 1 ...
08:18 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:18 |   |   |   |   gram_schmidt: Orthonormalizing vector 2 again
08:18 |   |   ResidualReductor: Projecting residual operator ...
08:18 greedy: Estimating errors ...
08:18 greedy: Maximum error after 2 extensions: 149.304054442 (mu = {top: 100.0})
08:18 greedy: Computing solution snapshot for mu = {top: 100.0} ...
08:18 greedy: Extending basis with solution snapshot ...
08:18 |   pod: Computing Gramian (101 vectors) ...
08:18 |   pod: Computing eigenvalue decomposition ...
08:18 |   pod: Computing left-singular vectors (1 vectors) ...
08:18 |   pod: Checking orthonormality ...
      
08:18 greedy: Reducing ...
08:18 |   ParabolicRBReductor: RB projection ...
08:18 |   ParabolicRBReductor: Assembling error estimator ...
08:18 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:18 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
08:18 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:18 |   |   |   |   gram_schmidt: Removing vector 9 of norm 0.0
08:18 |   |   |   |   gram_schmidt: Orthonormalizing vector 10 again
08:18 |   |   |   |   gram_schmidt: Orthonormalizing vector 11 again
08:18 |   |   |   |   gram_schmidt: Orthonormalizing vector 12 again
08:18 |   |   |   |   gram_schmidt: Orthonormalizing vector 13 again
08:18 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:18 |   |   ResidualReductor: Estimating residual range ...
08:18 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 2 ...
08:18 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:18 |   |   |   |   gram_schmidt: Orthonormalizing vector 3 again
08:18 |   |   ResidualReductor: Projecting residual operator ...
08:18 greedy: Estimating errors ...
08:18 greedy: Maximum error after 3 extensions: 34.7322953934 (mu = {top: 25.75})
08:18 greedy: Computing solution snapshot for mu = {top: 25.75} ...
08:18 |   InstationaryDiscretization: Solving instationary_StationaryProblem_CG for {top: 25.75} ...
08:19 greedy: Extending basis with solution snapshot ...
08:19 |   pod: Computing Gramian (101 vectors) ...
08:19 |   pod: Computing eigenvalue decomposition ...
08:19 |   pod: Computing left-singular vectors (1 vectors) ...
08:19 |   pod: Checking orthonormality ...
      
08:19 greedy: Reducing ...
08:19 |   ParabolicRBReductor: RB projection ...
08:19 |   ParabolicRBReductor: Assembling error estimator ...
08:19 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:19 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 3 ...
08:20 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:20 |   |   |   |   gram_schmidt: Removing vector 13 of norm 0.0
08:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 16 again
08:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 17 again
08:20 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:20 |   |   ResidualReductor: Estimating residual range ...
08:20 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 3 ...
08:20 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:20 |   |   ResidualReductor: Projecting residual operator ...
08:20 greedy: Estimating errors ...
08:20 greedy: Maximum error after 4 extensions: 4.73757800158 (mu = {top: 1.0})
08:20 greedy: Computing solution snapshot for mu = {top: 1.0} ...
08:20 greedy: Extending basis with solution snapshot ...
08:20 |   pod: Computing Gramian (101 vectors) ...
08:20 |   pod: Computing eigenvalue decomposition ...
08:20 |   pod: Computing left-singular vectors (1 vectors) ...
08:20 |   pod: Checking orthonormality ...
      
08:20 greedy: Reducing ...
08:20 |   ParabolicRBReductor: RB projection ...
08:20 |   ParabolicRBReductor: Assembling error estimator ...
08:20 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:20 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 4 ...
08:20 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:20 |   |   |   |   gram_schmidt: Removing vector 17 of norm 0.0
08:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 18 again
08:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 19 again
08:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 21 again
08:20 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:20 |   |   ResidualReductor: Estimating residual range ...
08:20 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 4 ...
08:20 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:20 |   |   ResidualReductor: Projecting residual operator ...
08:20 greedy: Estimating errors ...
08:20 greedy: Maximum error after 5 extensions: 4.82260455486 (mu = {top: 100.0})
08:20 greedy: Computing solution snapshot for mu = {top: 100.0} ...
08:20 greedy: Extending basis with solution snapshot ...
08:20 |   pod: Computing Gramian (101 vectors) ...
08:20 |   pod: Computing eigenvalue decomposition ...
08:20 |   pod: Computing left-singular vectors (1 vectors) ...
08:20 |   pod: Checking orthonormality ...
      
08:20 greedy: Reducing ...
08:20 |   ParabolicRBReductor: RB projection ...
08:20 |   ParabolicRBReductor: Assembling error estimator ...
08:20 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:20 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 5 ...
08:20 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:20 |   |   |   |   gram_schmidt: Removing vector 21 of norm 0.0
08:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 22 again
08:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 23 again
08:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 24 again
08:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 25 again
08:20 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:20 |   |   ResidualReductor: Estimating residual range ...
08:20 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 5 ...
08:20 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:20 |   |   |   |   gram_schmidt: Orthonormalizing vector 6 again
08:20 |   |   ResidualReductor: Projecting residual operator ...
08:20 greedy: Estimating errors ...
08:20 greedy: Maximum error after 6 extensions: 1.37861613316 (mu = {top: 50.5})
08:20 greedy: Computing solution snapshot for mu = {top: 50.5} ...
08:20 |   InstationaryDiscretization: Solving instationary_StationaryProblem_CG for {top: 50.5} ...
08:22 greedy: Extending basis with solution snapshot ...
08:22 |   pod: Computing Gramian (101 vectors) ...
08:22 |   pod: Computing eigenvalue decomposition ...
08:22 |   pod: Computing left-singular vectors (1 vectors) ...
08:22 |   pod: Checking orthonormality ...
      
08:22 greedy: Reducing ...
08:22 |   ParabolicRBReductor: RB projection ...
08:22 |   ParabolicRBReductor: Assembling error estimator ...
08:22 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:22 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 6 ...
08:22 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:22 |   |   |   |   gram_schmidt: Removing vector 25 of norm 0.0
08:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 26 again
08:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 27 again
08:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 28 again
08:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 29 again
08:22 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:22 |   |   ResidualReductor: Estimating residual range ...
08:22 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 6 ...
08:22 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:22 |   |   ResidualReductor: Projecting residual operator ...
08:22 greedy: Estimating errors ...
08:22 greedy: Maximum error after 7 extensions: 1.14107902168 (mu = {top: 50.5})
08:22 greedy: Computing solution snapshot for mu = {top: 50.5} ...
08:22 greedy: Extending basis with solution snapshot ...
08:22 |   pod: Computing Gramian (101 vectors) ...
08:22 |   pod: Computing eigenvalue decomposition ...
08:22 |   pod: Computing left-singular vectors (1 vectors) ...
08:22 |   pod: Checking orthonormality ...
      
08:22 greedy: Reducing ...
08:22 |   ParabolicRBReductor: RB projection ...
08:22 |   ParabolicRBReductor: Assembling error estimator ...
08:22 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:22 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 7 ...
08:22 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:22 |   |   |   |   gram_schmidt: Removing vector 29 of norm 0.0
08:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 30 again
08:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 31 again
08:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 32 again
08:22 |   |   |   |   gram_schmidt: Orthonormalizing vector 33 again
08:22 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:22 |   |   ResidualReductor: Estimating residual range ...
08:22 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 7 ...
08:22 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:22 |   |   ResidualReductor: Projecting residual operator ...
08:22 greedy: Estimating errors ...
08:23 greedy: Maximum error after 8 extensions: 0.438404273041 (mu = {top: 25.75})
08:23 greedy: Computing solution snapshot for mu = {top: 25.75} ...
08:23 greedy: Extending basis with solution snapshot ...
08:23 |   pod: Computing Gramian (101 vectors) ...
08:23 |   pod: Computing eigenvalue decomposition ...
08:23 |   pod: Computing left-singular vectors (1 vectors) ...
08:23 |   pod: Checking orthonormality ...
      
08:23 greedy: Reducing ...
08:23 |   ParabolicRBReductor: RB projection ...
08:23 |   ParabolicRBReductor: Assembling error estimator ...
08:23 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:23 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 8 ...
08:23 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:23 |   |   |   |   gram_schmidt: Removing vector 33 of norm 0.0
08:23 |   |   |   |   gram_schmidt: Orthonormalizing vector 34 again
08:23 |   |   |   |   gram_schmidt: Orthonormalizing vector 35 again
08:23 |   |   |   |   gram_schmidt: Orthonormalizing vector 36 again
08:23 |   |   |   |   gram_schmidt: Orthonormalizing vector 37 again
08:23 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:23 |   |   ResidualReductor: Estimating residual range ...
08:23 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 8 ...
08:23 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:23 |   |   ResidualReductor: Projecting residual operator ...
08:23 greedy: Estimating errors ...
08:23 greedy: Maximum error after 9 extensions: 0.413470723674 (mu = {top: 1.0})
08:23 greedy: Computing solution snapshot for mu = {top: 1.0} ...
08:23 greedy: Extending basis with solution snapshot ...
08:23 |   pod: Computing Gramian (101 vectors) ...
08:23 |   pod: Computing eigenvalue decomposition ...
08:23 |   pod: Computing left-singular vectors (1 vectors) ...
08:23 |   pod: Checking orthonormality ...
      
08:23 greedy: Reducing ...
08:23 |   ParabolicRBReductor: RB projection ...
08:23 |   ParabolicRBReductor: Assembling error estimator ...
08:23 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:23 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 9 ...
08:23 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:23 |   |   |   |   gram_schmidt: Removing vector 37 of norm 0.0
08:23 |   |   |   |   gram_schmidt: Orthonormalizing vector 38 again
08:23 |   |   |   |   gram_schmidt: Orthonormalizing vector 39 again
08:23 |   |   |   |   gram_schmidt: Orthonormalizing vector 41 again
08:23 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:23 |   |   ResidualReductor: Estimating residual range ...
08:23 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 9 ...
08:23 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:23 |   |   ResidualReductor: Projecting residual operator ...
08:23 greedy: Estimating errors ...
08:23 greedy: Maximum error after 10 extensions: 0.15158865072 (mu = {top: 100.0})
08:23 greedy: Computing solution snapshot for mu = {top: 100.0} ...
08:23 greedy: Extending basis with solution snapshot ...
08:24 |   pod: Computing Gramian (101 vectors) ...
08:24 |   pod: Computing eigenvalue decomposition ...
08:24 |   pod: Computing left-singular vectors (1 vectors) ...
08:24 |   pod: Checking orthonormality ...
      
08:24 greedy: Reducing ...
08:24 |   ParabolicRBReductor: RB projection ...
08:24 |   ParabolicRBReductor: Assembling error estimator ...
08:24 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:24 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 10 ...
08:24 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:24 |   |   |   |   gram_schmidt: Removing vector 41 of norm 0.0
08:24 |   |   |   |   gram_schmidt: Orthonormalizing vector 42 again
08:24 |   |   |   |   gram_schmidt: Orthonormalizing vector 43 again
08:24 |   |   |   |   gram_schmidt: Orthonormalizing vector 44 again
08:24 |   |   |   |   gram_schmidt: Orthonormalizing vector 45 again
08:24 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:24 |   |   ResidualReductor: Estimating residual range ...
08:24 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 10 ...
08:24 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:24 |   |   ResidualReductor: Projecting residual operator ...
08:24 greedy: Estimating errors ...
08:24 greedy: Maximum error after 11 extensions: 0.0903911115347 (mu = {top: 100.0})
08:24 greedy: Computing solution snapshot for mu = {top: 100.0} ...
08:24 greedy: Extending basis with solution snapshot ...
08:24 |   pod: Computing Gramian (101 vectors) ...
08:24 |   pod: Computing eigenvalue decomposition ...
08:24 |   pod: Computing left-singular vectors (1 vectors) ...
08:24 |   pod: Checking orthonormality ...
      
08:24 greedy: Reducing ...
08:24 |   ParabolicRBReductor: RB projection ...
08:24 |   ParabolicRBReductor: Assembling error estimator ...
08:24 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:24 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 11 ...
08:24 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:24 |   |   |   |   gram_schmidt: Removing vector 45 of norm 0.0
08:24 |   |   |   |   gram_schmidt: Orthonormalizing vector 46 again
08:24 |   |   |   |   gram_schmidt: Orthonormalizing vector 47 again
08:24 |   |   |   |   gram_schmidt: Orthonormalizing vector 48 again
08:24 |   |   |   |   gram_schmidt: Orthonormalizing vector 49 again
08:24 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:24 |   |   ResidualReductor: Estimating residual range ...
08:24 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 11 ...
08:24 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:24 |   |   |   |   gram_schmidt: Orthonormalizing vector 12 again
08:24 |   |   ResidualReductor: Projecting residual operator ...
08:24 greedy: Estimating errors ...
08:25 greedy: Maximum error after 12 extensions: 0.0470575388641 (mu = {top: 50.5})
08:25 greedy: Computing solution snapshot for mu = {top: 50.5} ...
08:25 greedy: Extending basis with solution snapshot ...
08:25 |   pod: Computing Gramian (101 vectors) ...
08:25 |   pod: Computing eigenvalue decomposition ...
08:25 |   pod: Computing left-singular vectors (1 vectors) ...
08:25 |   pod: Checking orthonormality ...
      
08:25 greedy: Reducing ...
08:25 |   ParabolicRBReductor: RB projection ...
08:25 |   ParabolicRBReductor: Assembling error estimator ...
08:25 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:25 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 12 ...
08:25 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:25 |   |   |   |   gram_schmidt: Removing vector 49 of norm 0.0
08:25 |   |   |   |   gram_schmidt: Orthonormalizing vector 51 again
08:25 |   |   |   |   gram_schmidt: Orthonormalizing vector 52 again
08:25 |   |   |   |   gram_schmidt: Orthonormalizing vector 53 again
08:25 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:25 |   |   ResidualReductor: Estimating residual range ...
08:25 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 12 ...
08:25 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:25 |   |   ResidualReductor: Projecting residual operator ...
08:25 greedy: Estimating errors ...
08:25 greedy: Maximum error after 13 extensions: 0.0268182330077 (mu = {top: 1.0})
08:25 greedy: Computing solution snapshot for mu = {top: 1.0} ...
08:25 greedy: Extending basis with solution snapshot ...
08:25 |   pod: Computing Gramian (101 vectors) ...
08:25 |   pod: Computing eigenvalue decomposition ...
08:25 |   pod: Computing left-singular vectors (1 vectors) ...
08:25 |   pod: Checking orthonormality ...
      
08:25 greedy: Reducing ...
08:25 |   ParabolicRBReductor: RB projection ...
08:25 |   ParabolicRBReductor: Assembling error estimator ...
08:25 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:25 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 13 ...
08:25 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:25 |   |   |   |   gram_schmidt: Removing vector 53 of norm 0.0
08:25 |   |   |   |   gram_schmidt: Orthonormalizing vector 54 again
08:25 |   |   |   |   gram_schmidt: Orthonormalizing vector 55 again
08:26 |   |   |   |   gram_schmidt: Orthonormalizing vector 57 again
08:26 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:26 |   |   ResidualReductor: Estimating residual range ...
08:26 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 13 ...
08:26 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:26 |   |   ResidualReductor: Projecting residual operator ...
08:26 greedy: Estimating errors ...
08:26 greedy: Maximum error after 14 extensions: 0.0167484794251 (mu = {top: 25.75})
08:26 greedy: Computing solution snapshot for mu = {top: 25.75} ...
08:26 greedy: Extending basis with solution snapshot ...
08:26 |   pod: Computing Gramian (101 vectors) ...
08:26 |   pod: Computing eigenvalue decomposition ...
08:26 |   pod: Computing left-singular vectors (1 vectors) ...
08:26 |   pod: Checking orthonormality ...
      
08:26 greedy: Reducing ...
08:26 |   ParabolicRBReductor: RB projection ...
08:26 |   ParabolicRBReductor: Assembling error estimator ...
08:26 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:26 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 14 ...
08:26 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:26 |   |   |   |   gram_schmidt: Removing vector 57 of norm 0.0
08:26 |   |   |   |   gram_schmidt: Orthonormalizing vector 58 again
08:26 |   |   |   |   gram_schmidt: Orthonormalizing vector 59 again
08:26 |   |   |   |   gram_schmidt: Orthonormalizing vector 60 again
08:26 |   |   |   |   gram_schmidt: Orthonormalizing vector 61 again
08:26 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:26 |   |   ResidualReductor: Estimating residual range ...
08:26 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 14 ...
08:26 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:26 |   |   ResidualReductor: Projecting residual operator ...
08:26 greedy: Estimating errors ...
08:26 greedy: Maximum error after 15 extensions: 0.0086256221394 (mu = {top: 25.75})
08:26 greedy: Computing solution snapshot for mu = {top: 25.75} ...
08:26 greedy: Extending basis with solution snapshot ...
08:26 |   pod: Computing Gramian (101 vectors) ...
08:26 |   pod: Computing eigenvalue decomposition ...
08:26 |   pod: Computing left-singular vectors (1 vectors) ...
08:26 |   pod: Checking orthonormality ...
      
08:26 greedy: Reducing ...
08:26 |   ParabolicRBReductor: RB projection ...
08:27 |   ParabolicRBReductor: Assembling error estimator ...
08:27 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:27 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 15 ...
08:27 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:27 |   |   |   |   gram_schmidt: Removing vector 61 of norm 0.0
08:27 |   |   |   |   gram_schmidt: Orthonormalizing vector 62 again
08:27 |   |   |   |   gram_schmidt: Orthonormalizing vector 63 again
08:27 |   |   |   |   gram_schmidt: Orthonormalizing vector 64 again
08:27 |   |   |   |   gram_schmidt: Orthonormalizing vector 65 again
08:27 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:27 |   |   ResidualReductor: Estimating residual range ...
08:27 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 15 ...
08:27 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:27 |   |   ResidualReductor: Projecting residual operator ...
08:27 greedy: Estimating errors ...
08:27 greedy: Maximum error after 16 extensions: 0.00527159623861 (mu = {top: 75.25})
08:27 greedy: Computing solution snapshot for mu = {top: 75.25} ...
08:27 |   InstationaryDiscretization: Solving instationary_StationaryProblem_CG for {top: 75.25} ...
08:28 greedy: Extending basis with solution snapshot ...
08:28 |   pod: Computing Gramian (101 vectors) ...
08:28 |   pod: Computing eigenvalue decomposition ...
08:28 |   pod: Computing left-singular vectors (1 vectors) ...
08:28 |   pod: Checking orthonormality ...
      
08:28 greedy: Reducing ...
08:28 |   ParabolicRBReductor: RB projection ...
08:28 |   ParabolicRBReductor: Assembling error estimator ...
08:28 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:28 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 16 ...
08:28 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:28 |   |   |   |   gram_schmidt: Removing vector 65 of norm 0.0
08:28 |   |   |   |   gram_schmidt: Orthonormalizing vector 66 again
08:28 |   |   |   |   gram_schmidt: Orthonormalizing vector 67 again
08:28 |   |   |   |   gram_schmidt: Orthonormalizing vector 68 again
08:29 |   |   |   |   gram_schmidt: Orthonormalizing vector 69 again
08:29 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:29 |   |   ResidualReductor: Estimating residual range ...
08:29 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 16 ...
08:29 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:29 |   |   ResidualReductor: Projecting residual operator ...
08:29 greedy: Estimating errors ...
08:29 greedy: Maximum error after 17 extensions: 0.00462749232381 (mu = {top: 75.25})
08:29 greedy: Computing solution snapshot for mu = {top: 75.25} ...
08:29 greedy: Extending basis with solution snapshot ...
08:29 |   pod: Computing Gramian (101 vectors) ...
08:29 |   pod: Computing eigenvalue decomposition ...
08:29 |   pod: Computing left-singular vectors (1 vectors) ...
08:29 |   pod: Checking orthonormality ...
      
08:29 greedy: Reducing ...
08:29 |   ParabolicRBReductor: RB projection ...
08:29 |   ParabolicRBReductor: Assembling error estimator ...
08:29 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:29 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 17 ...
08:29 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:29 |   |   |   |   gram_schmidt: Removing vector 69 of norm 0.0
08:29 |   |   |   |   gram_schmidt: Orthonormalizing vector 70 again
08:29 |   |   |   |   gram_schmidt: Orthonormalizing vector 71 again
08:29 |   |   |   |   gram_schmidt: Orthonormalizing vector 72 again
08:29 |   |   |   |   gram_schmidt: Orthonormalizing vector 73 again
08:29 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:29 |   |   ResidualReductor: Estimating residual range ...
08:29 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 17 ...
08:29 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:29 |   |   ResidualReductor: Projecting residual operator ...
08:29 greedy: Estimating errors ...
08:30 greedy: Maximum error after 18 extensions: 0.00304156447988 (mu = {top: 75.25})
08:30 greedy: Computing solution snapshot for mu = {top: 75.25} ...
08:30 greedy: Extending basis with solution snapshot ...
08:30 |   pod: Computing Gramian (101 vectors) ...
08:30 |   pod: Computing eigenvalue decomposition ...
08:30 |   pod: Computing left-singular vectors (1 vectors) ...
08:30 |   pod: Checking orthonormality ...
      
08:30 greedy: Reducing ...
08:30 |   ParabolicRBReductor: RB projection ...
08:30 |   ParabolicRBReductor: Assembling error estimator ...
08:30 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:30 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 18 ...
08:30 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:30 |   |   |   |   gram_schmidt: Removing vector 73 of norm 0.0
08:30 |   |   |   |   gram_schmidt: Orthonormalizing vector 74 again
08:30 |   |   |   |   gram_schmidt: Orthonormalizing vector 75 again
08:30 |   |   |   |   gram_schmidt: Orthonormalizing vector 76 again
08:30 |   |   |   |   gram_schmidt: Orthonormalizing vector 77 again
08:30 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:30 |   |   ResidualReductor: Estimating residual range ...
08:30 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 18 ...
08:30 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:30 |   |   ResidualReductor: Projecting residual operator ...
08:30 greedy: Estimating errors ...
08:30 greedy: Maximum error after 19 extensions: 0.00159596878146 (mu = {top: 1.0})
08:30 greedy: Computing solution snapshot for mu = {top: 1.0} ...
08:30 greedy: Extending basis with solution snapshot ...
08:30 |   pod: Computing Gramian (101 vectors) ...
08:30 |   pod: Computing eigenvalue decomposition ...
08:30 |   pod: Computing left-singular vectors (1 vectors) ...
08:30 |   pod: Checking orthonormality ...
      
08:30 greedy: Maximum number of 20 extensions reached.
08:30 greedy: Reducing once more ...
08:30 |   ParabolicRBReductor: RB projection ...
08:30 |   ParabolicRBReductor: Assembling error estimator ...
08:30 |   |   ImplicitEulerResidualReductor: Estimating residual range ...
08:30 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 19 ...
08:30 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:30 |   |   |   |   gram_schmidt: Removing vector 77 of norm 0.0
08:31 |   |   |   |   gram_schmidt: Orthonormalizing vector 78 again
08:31 |   |   |   |   gram_schmidt: Orthonormalizing vector 79 again
08:31 |   |   |   |   gram_schmidt: Orthonormalizing vector 81 again
08:31 |   |   ImplicitEulerResidualReductor: Projecting residual operator ...
08:31 |   |   ResidualReductor: Estimating residual range ...
08:31 |   |   |   estimate_image_hierarchical: Estimating image for basis vector 19 ...
08:31 |   |   |   estimate_image_hierarchical: Orthonormalizing ...
08:31 |   |   ResidualReductor: Projecting residual operator ...
08:31 greedy: Greedy search took 13.9001698494 seconds
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="16" name="test_pickle[discretization0]" time="0.595532894135"><system-err>08:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:39 DiffusionOperatorP1: Determine global dofs ...
08:39 DiffusionOperatorP1: Boundary treatment ...
08:39 DiffusionOperatorP1: Assemble system matrix ...
08:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:39 DiffusionOperatorP1: Determine global dofs ...
08:39 DiffusionOperatorP1: Boundary treatment ...
08:39 DiffusionOperatorP1: Assemble system matrix ...
08:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:39 DiffusionOperatorP1: Determine global dofs ...
08:39 DiffusionOperatorP1: Boundary treatment ...
08:39 DiffusionOperatorP1: Assemble system matrix ...
08:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:39 DiffusionOperatorP1: Determine global dofs ...
08:39 DiffusionOperatorP1: Boundary treatment ...
08:39 DiffusionOperatorP1: Assemble system matrix ...
08:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:39 DiffusionOperatorP1: Determine global dofs ...
08:39 DiffusionOperatorP1: Boundary treatment ...
08:39 DiffusionOperatorP1: Assemble system matrix ...
08:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:39 DiffusionOperatorP1: Determine global dofs ...
08:39 DiffusionOperatorP1: Boundary treatment ...
08:39 DiffusionOperatorP1: Assemble system matrix ...
08:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:39 DiffusionOperatorP1: Determine global dofs ...
08:39 DiffusionOperatorP1: Boundary treatment ...
08:39 DiffusionOperatorP1: Assemble system matrix ...
08:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:39 DiffusionOperatorP1: Determine global dofs ...
08:39 DiffusionOperatorP1: Boundary treatment ...
08:39 DiffusionOperatorP1: Assemble system matrix ...
08:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:39 DiffusionOperatorP1: Determine global dofs ...
08:39 DiffusionOperatorP1: Boundary treatment ...
08:39 DiffusionOperatorP1: Assemble system matrix ...
08:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:39 DiffusionOperatorP1: Determine global dofs ...
08:39 DiffusionOperatorP1: Boundary treatment ...
08:39 DiffusionOperatorP1: Assemble system matrix ...
08:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:39 DiffusionOperatorP1: Determine global dofs ...
08:39 DiffusionOperatorP1: Boundary treatment ...
08:39 DiffusionOperatorP1: Assemble system matrix ...
08:39 L2ProductP1: Integrate the products of the shape functions on each element
08:39 L2ProductP1: Determine global dofs ...
08:39 L2ProductP1: Boundary treatment ...
08:39 L2ProductP1: Assemble system matrix ...
08:39 L2ProductP1: Integrate the products of the shape functions on each element
08:39 L2ProductP1: Determine global dofs ...
08:39 L2ProductP1: Boundary treatment ...
08:39 L2ProductP1: Assemble system matrix ...
08:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:39 DiffusionOperatorP1: Determine global dofs ...
08:39 DiffusionOperatorP1: Boundary treatment ...
08:39 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="16" name="test_pickle[discretization1]" time="2.15284132957"><system-err>08:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:40 DiffusionOperatorP1: Determine global dofs ...
08:40 DiffusionOperatorP1: Boundary treatment ...
08:40 DiffusionOperatorP1: Assemble system matrix ...
08:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:40 DiffusionOperatorP1: Determine global dofs ...
08:40 DiffusionOperatorP1: Boundary treatment ...
08:40 DiffusionOperatorP1: Assemble system matrix ...
08:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:40 DiffusionOperatorP1: Determine global dofs ...
08:40 DiffusionOperatorP1: Boundary treatment ...
08:40 DiffusionOperatorP1: Assemble system matrix ...
08:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:40 DiffusionOperatorP1: Determine global dofs ...
08:40 DiffusionOperatorP1: Boundary treatment ...
08:40 DiffusionOperatorP1: Assemble system matrix ...
08:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:40 DiffusionOperatorP1: Determine global dofs ...
08:40 DiffusionOperatorP1: Boundary treatment ...
08:40 DiffusionOperatorP1: Assemble system matrix ...
08:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:40 DiffusionOperatorP1: Determine global dofs ...
08:40 DiffusionOperatorP1: Boundary treatment ...
08:40 DiffusionOperatorP1: Assemble system matrix ...
08:41 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:41 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:41 DiffusionOperatorP1: Determine global dofs ...
08:41 DiffusionOperatorP1: Boundary treatment ...
08:41 DiffusionOperatorP1: Assemble system matrix ...
08:41 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:41 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:41 DiffusionOperatorP1: Determine global dofs ...
08:41 DiffusionOperatorP1: Boundary treatment ...
08:41 DiffusionOperatorP1: Assemble system matrix ...
08:41 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:41 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:41 DiffusionOperatorP1: Determine global dofs ...
08:41 DiffusionOperatorP1: Boundary treatment ...
08:41 DiffusionOperatorP1: Assemble system matrix ...
08:41 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:41 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:41 DiffusionOperatorP1: Determine global dofs ...
08:41 DiffusionOperatorP1: Boundary treatment ...
08:41 DiffusionOperatorP1: Assemble system matrix ...
08:41 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:41 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:41 DiffusionOperatorP1: Determine global dofs ...
08:41 DiffusionOperatorP1: Boundary treatment ...
08:41 DiffusionOperatorP1: Assemble system matrix ...
08:41 L2ProductP1: Integrate the products of the shape functions on each element
08:41 L2ProductP1: Determine global dofs ...
08:41 L2ProductP1: Boundary treatment ...
08:41 L2ProductP1: Assemble system matrix ...
08:41 L2ProductP1: Integrate the products of the shape functions on each element
08:41 L2ProductP1: Determine global dofs ...
08:41 L2ProductP1: Boundary treatment ...
08:41 L2ProductP1: Assemble system matrix ...
08:41 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:41 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:42 DiffusionOperatorP1: Determine global dofs ...
08:42 DiffusionOperatorP1: Boundary treatment ...
08:42 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="16" name="test_pickle[discretization2]" time="0.434153795242"><system-err>08:42 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:42 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:42 DiffusionOperatorP1: Determine global dofs ...
08:42 DiffusionOperatorP1: Boundary treatment ...
08:42 DiffusionOperatorP1: Assemble system matrix ...
08:42 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:42 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:42 DiffusionOperatorP1: Determine global dofs ...
08:42 DiffusionOperatorP1: Boundary treatment ...
08:42 DiffusionOperatorP1: Assemble system matrix ...
08:42 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:42 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:42 DiffusionOperatorP1: Determine global dofs ...
08:42 DiffusionOperatorP1: Boundary treatment ...
08:42 DiffusionOperatorP1: Assemble system matrix ...
08:42 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:42 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:42 DiffusionOperatorP1: Determine global dofs ...
08:42 DiffusionOperatorP1: Boundary treatment ...
08:42 DiffusionOperatorP1: Assemble system matrix ...
08:42 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:42 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:42 DiffusionOperatorP1: Determine global dofs ...
08:42 DiffusionOperatorP1: Boundary treatment ...
08:42 DiffusionOperatorP1: Assemble system matrix ...
08:42 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:42 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:42 DiffusionOperatorP1: Determine global dofs ...
08:42 DiffusionOperatorP1: Boundary treatment ...
08:42 DiffusionOperatorP1: Assemble system matrix ...
08:42 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:42 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:42 DiffusionOperatorP1: Determine global dofs ...
08:42 DiffusionOperatorP1: Boundary treatment ...
08:42 DiffusionOperatorP1: Assemble system matrix ...
08:42 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:42 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:42 DiffusionOperatorP1: Determine global dofs ...
08:42 DiffusionOperatorP1: Boundary treatment ...
08:42 DiffusionOperatorP1: Assemble system matrix ...
08:42 L2ProductP1: Integrate the products of the shape functions on each element
08:42 L2ProductP1: Determine global dofs ...
08:42 L2ProductP1: Boundary treatment ...
08:42 L2ProductP1: Assemble system matrix ...
08:42 L2ProductP1: Integrate the products of the shape functions on each element
08:42 L2ProductP1: Determine global dofs ...
08:42 L2ProductP1: Boundary treatment ...
08:42 L2ProductP1: Assemble system matrix ...
08:42 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:42 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:42 DiffusionOperatorP1: Determine global dofs ...
08:42 DiffusionOperatorP1: Boundary treatment ...
08:42 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="16" name="test_pickle[discretization3]" time="1.73111200333"><system-err>08:42 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:42 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:42 DiffusionOperatorP1: Determine global dofs ...
08:42 DiffusionOperatorP1: Boundary treatment ...
08:42 DiffusionOperatorP1: Assemble system matrix ...
08:42 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:42 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:42 DiffusionOperatorP1: Determine global dofs ...
08:42 DiffusionOperatorP1: Boundary treatment ...
08:42 DiffusionOperatorP1: Assemble system matrix ...
08:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:43 DiffusionOperatorP1: Determine global dofs ...
08:43 DiffusionOperatorP1: Boundary treatment ...
08:43 DiffusionOperatorP1: Assemble system matrix ...
08:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:43 DiffusionOperatorP1: Determine global dofs ...
08:43 DiffusionOperatorP1: Boundary treatment ...
08:43 DiffusionOperatorP1: Assemble system matrix ...
08:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:43 DiffusionOperatorP1: Determine global dofs ...
08:43 DiffusionOperatorP1: Boundary treatment ...
08:43 DiffusionOperatorP1: Assemble system matrix ...
08:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:43 DiffusionOperatorP1: Determine global dofs ...
08:43 DiffusionOperatorP1: Boundary treatment ...
08:43 DiffusionOperatorP1: Assemble system matrix ...
08:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:43 DiffusionOperatorP1: Determine global dofs ...
08:43 DiffusionOperatorP1: Boundary treatment ...
08:43 DiffusionOperatorP1: Assemble system matrix ...
08:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:43 DiffusionOperatorP1: Determine global dofs ...
08:43 DiffusionOperatorP1: Boundary treatment ...
08:43 DiffusionOperatorP1: Assemble system matrix ...
08:43 L2ProductP1: Integrate the products of the shape functions on each element
08:43 L2ProductP1: Determine global dofs ...
08:43 L2ProductP1: Boundary treatment ...
08:43 L2ProductP1: Assemble system matrix ...
08:44 L2ProductP1: Integrate the products of the shape functions on each element
08:44 L2ProductP1: Determine global dofs ...
08:44 L2ProductP1: Boundary treatment ...
08:44 L2ProductP1: Assemble system matrix ...
08:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:44 DiffusionOperatorP1: Determine global dofs ...
08:44 DiffusionOperatorP1: Boundary treatment ...
08:44 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="16" name="test_pickle[discretization4]" time="0.274453163147"><system-err>08:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:44 DiffusionOperatorP1: Determine global dofs ...
08:44 DiffusionOperatorP1: Boundary treatment ...
08:44 DiffusionOperatorP1: Assemble system matrix ...
08:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:44 DiffusionOperatorP1: Determine global dofs ...
08:44 DiffusionOperatorP1: Boundary treatment ...
08:44 DiffusionOperatorP1: Assemble system matrix ...
08:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:44 DiffusionOperatorP1: Determine global dofs ...
08:44 DiffusionOperatorP1: Boundary treatment ...
08:44 DiffusionOperatorP1: Assemble system matrix ...
08:44 L2ProductP1: Integrate the products of the shape functions on each element
08:44 L2ProductP1: Determine global dofs ...
08:44 L2ProductP1: Boundary treatment ...
08:44 L2ProductP1: Assemble system matrix ...
08:44 L2ProductP1: Integrate the products of the shape functions on each element
08:44 L2ProductP1: Determine global dofs ...
08:44 L2ProductP1: Boundary treatment ...
08:44 L2ProductP1: Assemble system matrix ...
08:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:44 DiffusionOperatorP1: Determine global dofs ...
08:44 DiffusionOperatorP1: Boundary treatment ...
08:44 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="16" name="test_pickle[discretization5]" time="1.02899289131"><system-err>08:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:44 DiffusionOperatorP1: Determine global dofs ...
08:44 DiffusionOperatorP1: Boundary treatment ...
08:44 DiffusionOperatorP1: Assemble system matrix ...
08:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:44 DiffusionOperatorP1: Determine global dofs ...
08:44 DiffusionOperatorP1: Boundary treatment ...
08:44 DiffusionOperatorP1: Assemble system matrix ...
08:45 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:45 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:45 DiffusionOperatorP1: Determine global dofs ...
08:45 DiffusionOperatorP1: Boundary treatment ...
08:45 DiffusionOperatorP1: Assemble system matrix ...
08:45 L2ProductP1: Integrate the products of the shape functions on each element
08:45 L2ProductP1: Determine global dofs ...
08:45 L2ProductP1: Boundary treatment ...
08:45 L2ProductP1: Assemble system matrix ...
08:45 L2ProductP1: Integrate the products of the shape functions on each element
08:45 L2ProductP1: Determine global dofs ...
08:45 L2ProductP1: Boundary treatment ...
08:45 L2ProductP1: Assemble system matrix ...
08:45 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:45 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:45 DiffusionOperatorP1: Determine global dofs ...
08:45 DiffusionOperatorP1: Boundary treatment ...
08:45 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="16" name="test_pickle[discretization6]" time="0.379660129547"><system-err>08:45 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:45 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:45 DiffusionOperatorP1: Determine global dofs ...
08:45 DiffusionOperatorP1: Boundary treatment ...
08:45 DiffusionOperatorP1: Assemble system matrix ...
08:45 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:45 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:45 DiffusionOperatorP1: Determine global dofs ...
08:45 DiffusionOperatorP1: Boundary treatment ...
08:45 DiffusionOperatorP1: Assemble system matrix ...
08:45 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:45 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:45 DiffusionOperatorP1: Determine global dofs ...
08:45 DiffusionOperatorP1: Boundary treatment ...
08:45 DiffusionOperatorP1: Assemble system matrix ...
08:45 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:45 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:45 DiffusionOperatorP1: Determine global dofs ...
08:45 DiffusionOperatorP1: Boundary treatment ...
08:45 DiffusionOperatorP1: Assemble system matrix ...
08:45 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:45 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:45 DiffusionOperatorP1: Determine global dofs ...
08:45 DiffusionOperatorP1: Boundary treatment ...
08:45 DiffusionOperatorP1: Assemble system matrix ...
08:45 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:45 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:45 DiffusionOperatorP1: Determine global dofs ...
08:45 DiffusionOperatorP1: Boundary treatment ...
08:45 DiffusionOperatorP1: Assemble system matrix ...
08:45 L2ProductP1: Integrate the products of the shape functions on each element
08:45 L2ProductP1: Determine global dofs ...
08:45 L2ProductP1: Boundary treatment ...
08:45 L2ProductP1: Assemble system matrix ...
08:45 L2ProductP1: Integrate the products of the shape functions on each element
08:45 L2ProductP1: Determine global dofs ...
08:45 L2ProductP1: Boundary treatment ...
08:45 L2ProductP1: Assemble system matrix ...
08:45 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:45 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:45 DiffusionOperatorP1: Determine global dofs ...
08:45 DiffusionOperatorP1: Boundary treatment ...
08:45 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="16" name="test_pickle[discretization7]" time="1.46359276772"><system-err>08:46 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:46 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:46 DiffusionOperatorP1: Determine global dofs ...
08:46 DiffusionOperatorP1: Boundary treatment ...
08:46 DiffusionOperatorP1: Assemble system matrix ...
08:46 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:46 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:46 DiffusionOperatorP1: Determine global dofs ...
08:46 DiffusionOperatorP1: Boundary treatment ...
08:46 DiffusionOperatorP1: Assemble system matrix ...
08:46 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:46 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:46 DiffusionOperatorP1: Determine global dofs ...
08:46 DiffusionOperatorP1: Boundary treatment ...
08:46 DiffusionOperatorP1: Assemble system matrix ...
08:46 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:46 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:46 DiffusionOperatorP1: Determine global dofs ...
08:46 DiffusionOperatorP1: Boundary treatment ...
08:46 DiffusionOperatorP1: Assemble system matrix ...
08:46 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:46 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:46 DiffusionOperatorP1: Determine global dofs ...
08:46 DiffusionOperatorP1: Boundary treatment ...
08:46 DiffusionOperatorP1: Assemble system matrix ...
08:46 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:46 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:46 DiffusionOperatorP1: Determine global dofs ...
08:46 DiffusionOperatorP1: Boundary treatment ...
08:46 DiffusionOperatorP1: Assemble system matrix ...
08:47 L2ProductP1: Integrate the products of the shape functions on each element
08:47 L2ProductP1: Determine global dofs ...
08:47 L2ProductP1: Boundary treatment ...
08:47 L2ProductP1: Assemble system matrix ...
08:47 L2ProductP1: Integrate the products of the shape functions on each element
08:47 L2ProductP1: Determine global dofs ...
08:47 L2ProductP1: Boundary treatment ...
08:47 L2ProductP1: Assemble system matrix ...
08:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:47 DiffusionOperatorP1: Determine global dofs ...
08:47 DiffusionOperatorP1: Boundary treatment ...
08:47 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="16" name="test_pickle[discretization8]" time="0.0192968845367"></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="16" name="test_pickle[discretization9]" time="0.00919365882874"></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="16" name="test_pickle[discretization10]" time="0.0107543468475"></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="16" name="test_pickle[discretization11]" time="0.0102670192719"></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="16" name="test_pickle[discretization12]" time="0.00719594955444"></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="16" name="test_pickle[discretization13]" time="0.00831699371338"></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="16" name="test_pickle[discretization14]" time="0.00694394111633"></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="16" name="test_pickle[discretization15]" time="0.00688195228577"></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="16" name="test_pickle[discretization16]" time="0.00941610336304"></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="16" name="test_pickle[discretization17]" time="0.0109589099884"></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="16" name="test_pickle[discretization18]" time="0.019679069519"></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="16" name="test_pickle[discretization19]" time="0.0265300273895"></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="16" name="test_pickle[discretization20]" time="0.0298781394958"><system-err>08:47 load_matrix: Loading matrix from file /src/src/pymortests/testdata/Systemmatrix1.mat
08:47 load_matrix: MATLAB file detected.
08:47 load_matrix: Loading matrix from file /src/src/pymortests/testdata/Systemmatrix2.mat
08:47 load_matrix: MATLAB file detected.
08:47 load_matrix: Loading matrix from file /src/src/pymortests/testdata/rhs1.mat
08:47 load_matrix: MATLAB file detected.
08:47 load_matrix: Loading matrix from file /src/src/pymortests/testdata/rhs2.mat
08:47 load_matrix: MATLAB file detected.
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="16" name="test_pickle[discretization21]" time="0.0179712772369"><system-err>08:47 load_matrix: Loading matrix from file /src/src/pymortests/testdata/Systemmatrix1.mat
08:47 load_matrix: MATLAB file detected.
08:47 load_matrix: Loading matrix from file /src/src/pymortests/testdata/Systemmatrix2.mat
08:47 load_matrix: MATLAB file detected.
08:47 load_matrix: Loading matrix from file /src/src/pymortests/testdata/rhs1.mat
08:47 load_matrix: MATLAB file detected.
08:47 load_matrix: Loading matrix from file /src/src/pymortests/testdata/rhs2.mat
08:47 load_matrix: MATLAB file detected.
08:47 load_matrix: Loading matrix from file /src/src/pymortests/testdata/Massmatrix.mat
08:47 load_matrix: MATLAB file detected.
08:47 load_matrix: Loading matrix from file /src/src/pymortests/testdata/u0.mat
08:47 load_matrix: MATLAB file detected.
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="16" name="test_pickle[discretization22]" time="0.0772140026093"><system-err>08:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:47 DiffusionOperatorP1: Determine global dofs ...
08:47 DiffusionOperatorP1: Boundary treatment ...
08:47 DiffusionOperatorP1: Assemble system matrix ...
08:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:47 DiffusionOperatorP1: Determine global dofs ...
08:47 DiffusionOperatorP1: Boundary treatment ...
08:47 DiffusionOperatorP1: Assemble system matrix ...
08:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:47 DiffusionOperatorP1: Determine global dofs ...
08:47 DiffusionOperatorP1: Boundary treatment ...
08:47 DiffusionOperatorP1: Assemble system matrix ...
08:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:47 DiffusionOperatorP1: Determine global dofs ...
08:47 DiffusionOperatorP1: Boundary treatment ...
08:47 DiffusionOperatorP1: Assemble system matrix ...
08:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:47 DiffusionOperatorP1: Determine global dofs ...
08:47 DiffusionOperatorP1: Boundary treatment ...
08:47 DiffusionOperatorP1: Assemble system matrix ...
08:47 L2ProductP1: Integrate the products of the shape functions on each element
08:47 L2ProductP1: Determine global dofs ...
08:47 L2ProductP1: Boundary treatment ...
08:47 L2ProductP1: Assemble system matrix ...
08:47 L2ProductP1: Integrate the products of the shape functions on each element
08:47 L2ProductP1: Determine global dofs ...
08:47 L2ProductP1: Boundary treatment ...
08:47 L2ProductP1: Assemble system matrix ...
08:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:47 DiffusionOperatorP1: Determine global dofs ...
08:47 DiffusionOperatorP1: Boundary treatment ...
08:47 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="16" name="test_pickle[discretization23]" time="0.14119887352"><system-err>08:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:47 DiffusionOperatorP1: Determine global dofs ...
08:47 DiffusionOperatorP1: Boundary treatment ...
08:47 DiffusionOperatorP1: Assemble system matrix ...
08:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:47 DiffusionOperatorP1: Determine global dofs ...
08:47 DiffusionOperatorP1: Boundary treatment ...
08:47 DiffusionOperatorP1: Assemble system matrix ...
08:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:47 DiffusionOperatorP1: Determine global dofs ...
08:47 DiffusionOperatorP1: Boundary treatment ...
08:47 DiffusionOperatorP1: Assemble system matrix ...
08:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:47 DiffusionOperatorP1: Determine global dofs ...
08:47 DiffusionOperatorP1: Boundary treatment ...
08:47 DiffusionOperatorP1: Assemble system matrix ...
08:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:47 DiffusionOperatorP1: Determine global dofs ...
08:47 DiffusionOperatorP1: Boundary treatment ...
08:47 DiffusionOperatorP1: Assemble system matrix ...
08:47 L2ProductP1: Integrate the products of the shape functions on each element
08:47 L2ProductP1: Determine global dofs ...
08:47 L2ProductP1: Boundary treatment ...
08:47 L2ProductP1: Assemble system matrix ...
08:47 L2ProductP1: Integrate the products of the shape functions on each element
08:47 L2ProductP1: Determine global dofs ...
08:47 L2ProductP1: Boundary treatment ...
08:47 L2ProductP1: Assemble system matrix ...
08:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:47 DiffusionOperatorP1: Determine global dofs ...
08:47 DiffusionOperatorP1: Boundary treatment ...
08:47 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="20" name="test_pickle_without_dumps_function[picklable_discretization0]" time="0.554265975952"><system-err>08:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:47 DiffusionOperatorP1: Determine global dofs ...
08:47 DiffusionOperatorP1: Boundary treatment ...
08:47 DiffusionOperatorP1: Assemble system matrix ...
08:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:48 DiffusionOperatorP1: Determine global dofs ...
08:48 DiffusionOperatorP1: Boundary treatment ...
08:48 DiffusionOperatorP1: Assemble system matrix ...
08:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:48 DiffusionOperatorP1: Determine global dofs ...
08:48 DiffusionOperatorP1: Boundary treatment ...
08:48 DiffusionOperatorP1: Assemble system matrix ...
08:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:48 DiffusionOperatorP1: Determine global dofs ...
08:48 DiffusionOperatorP1: Boundary treatment ...
08:48 DiffusionOperatorP1: Assemble system matrix ...
08:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:48 DiffusionOperatorP1: Determine global dofs ...
08:48 DiffusionOperatorP1: Boundary treatment ...
08:48 DiffusionOperatorP1: Assemble system matrix ...
08:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:48 DiffusionOperatorP1: Determine global dofs ...
08:48 DiffusionOperatorP1: Boundary treatment ...
08:48 DiffusionOperatorP1: Assemble system matrix ...
08:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:48 DiffusionOperatorP1: Determine global dofs ...
08:48 DiffusionOperatorP1: Boundary treatment ...
08:48 DiffusionOperatorP1: Assemble system matrix ...
08:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:48 DiffusionOperatorP1: Determine global dofs ...
08:48 DiffusionOperatorP1: Boundary treatment ...
08:48 DiffusionOperatorP1: Assemble system matrix ...
08:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:48 DiffusionOperatorP1: Determine global dofs ...
08:48 DiffusionOperatorP1: Boundary treatment ...
08:48 DiffusionOperatorP1: Assemble system matrix ...
08:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:48 DiffusionOperatorP1: Determine global dofs ...
08:48 DiffusionOperatorP1: Boundary treatment ...
08:48 DiffusionOperatorP1: Assemble system matrix ...
08:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:48 DiffusionOperatorP1: Determine global dofs ...
08:48 DiffusionOperatorP1: Boundary treatment ...
08:48 DiffusionOperatorP1: Assemble system matrix ...
08:48 L2ProductP1: Integrate the products of the shape functions on each element
08:48 L2ProductP1: Determine global dofs ...
08:48 L2ProductP1: Boundary treatment ...
08:48 L2ProductP1: Assemble system matrix ...
08:48 L2ProductP1: Integrate the products of the shape functions on each element
08:48 L2ProductP1: Determine global dofs ...
08:48 L2ProductP1: Boundary treatment ...
08:48 L2ProductP1: Assemble system matrix ...
08:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:48 DiffusionOperatorP1: Determine global dofs ...
08:48 DiffusionOperatorP1: Boundary treatment ...
08:48 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="20" name="test_pickle_without_dumps_function[picklable_discretization1]" time="2.17529296875"><system-err>08:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:48 DiffusionOperatorP1: Determine global dofs ...
08:48 DiffusionOperatorP1: Boundary treatment ...
08:48 DiffusionOperatorP1: Assemble system matrix ...
08:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:48 DiffusionOperatorP1: Determine global dofs ...
08:48 DiffusionOperatorP1: Boundary treatment ...
08:48 DiffusionOperatorP1: Assemble system matrix ...
08:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:48 DiffusionOperatorP1: Determine global dofs ...
08:48 DiffusionOperatorP1: Boundary treatment ...
08:48 DiffusionOperatorP1: Assemble system matrix ...
08:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:49 DiffusionOperatorP1: Determine global dofs ...
08:49 DiffusionOperatorP1: Boundary treatment ...
08:49 DiffusionOperatorP1: Assemble system matrix ...
08:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:49 DiffusionOperatorP1: Determine global dofs ...
08:49 DiffusionOperatorP1: Boundary treatment ...
08:49 DiffusionOperatorP1: Assemble system matrix ...
08:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:49 DiffusionOperatorP1: Determine global dofs ...
08:49 DiffusionOperatorP1: Boundary treatment ...
08:49 DiffusionOperatorP1: Assemble system matrix ...
08:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:49 DiffusionOperatorP1: Determine global dofs ...
08:49 DiffusionOperatorP1: Boundary treatment ...
08:49 DiffusionOperatorP1: Assemble system matrix ...
08:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:49 DiffusionOperatorP1: Determine global dofs ...
08:49 DiffusionOperatorP1: Boundary treatment ...
08:49 DiffusionOperatorP1: Assemble system matrix ...
08:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:49 DiffusionOperatorP1: Determine global dofs ...
08:49 DiffusionOperatorP1: Boundary treatment ...
08:49 DiffusionOperatorP1: Assemble system matrix ...
08:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:49 DiffusionOperatorP1: Determine global dofs ...
08:49 DiffusionOperatorP1: Boundary treatment ...
08:49 DiffusionOperatorP1: Assemble system matrix ...
08:50 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:50 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:50 DiffusionOperatorP1: Determine global dofs ...
08:50 DiffusionOperatorP1: Boundary treatment ...
08:50 DiffusionOperatorP1: Assemble system matrix ...
08:50 L2ProductP1: Integrate the products of the shape functions on each element
08:50 L2ProductP1: Determine global dofs ...
08:50 L2ProductP1: Boundary treatment ...
08:50 L2ProductP1: Assemble system matrix ...
08:50 L2ProductP1: Integrate the products of the shape functions on each element
08:50 L2ProductP1: Determine global dofs ...
08:50 L2ProductP1: Boundary treatment ...
08:50 L2ProductP1: Assemble system matrix ...
08:50 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:50 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:50 DiffusionOperatorP1: Determine global dofs ...
08:50 DiffusionOperatorP1: Boundary treatment ...
08:50 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="20" name="test_pickle_without_dumps_function[picklable_discretization2]" time="0.449225902557"><system-err>08:50 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:50 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:50 DiffusionOperatorP1: Determine global dofs ...
08:50 DiffusionOperatorP1: Boundary treatment ...
08:50 DiffusionOperatorP1: Assemble system matrix ...
08:50 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:50 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:50 DiffusionOperatorP1: Determine global dofs ...
08:50 DiffusionOperatorP1: Boundary treatment ...
08:50 DiffusionOperatorP1: Assemble system matrix ...
08:50 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:50 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:50 DiffusionOperatorP1: Determine global dofs ...
08:50 DiffusionOperatorP1: Boundary treatment ...
08:50 DiffusionOperatorP1: Assemble system matrix ...
08:50 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:50 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:50 DiffusionOperatorP1: Determine global dofs ...
08:50 DiffusionOperatorP1: Boundary treatment ...
08:50 DiffusionOperatorP1: Assemble system matrix ...
08:50 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:50 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:50 DiffusionOperatorP1: Determine global dofs ...
08:50 DiffusionOperatorP1: Boundary treatment ...
08:50 DiffusionOperatorP1: Assemble system matrix ...
08:50 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:50 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:50 DiffusionOperatorP1: Determine global dofs ...
08:50 DiffusionOperatorP1: Boundary treatment ...
08:50 DiffusionOperatorP1: Assemble system matrix ...
08:50 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:50 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:50 DiffusionOperatorP1: Determine global dofs ...
08:50 DiffusionOperatorP1: Boundary treatment ...
08:50 DiffusionOperatorP1: Assemble system matrix ...
08:50 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:50 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:50 DiffusionOperatorP1: Determine global dofs ...
08:50 DiffusionOperatorP1: Boundary treatment ...
08:50 DiffusionOperatorP1: Assemble system matrix ...
08:50 L2ProductP1: Integrate the products of the shape functions on each element
08:50 L2ProductP1: Determine global dofs ...
08:50 L2ProductP1: Boundary treatment ...
08:50 L2ProductP1: Assemble system matrix ...
08:51 L2ProductP1: Integrate the products of the shape functions on each element
08:51 L2ProductP1: Determine global dofs ...
08:51 L2ProductP1: Boundary treatment ...
08:51 L2ProductP1: Assemble system matrix ...
08:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:51 DiffusionOperatorP1: Determine global dofs ...
08:51 DiffusionOperatorP1: Boundary treatment ...
08:51 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="20" name="test_pickle_without_dumps_function[picklable_discretization3]" time="1.73189115524"><system-err>08:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:51 DiffusionOperatorP1: Determine global dofs ...
08:51 DiffusionOperatorP1: Boundary treatment ...
08:51 DiffusionOperatorP1: Assemble system matrix ...
08:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:51 DiffusionOperatorP1: Determine global dofs ...
08:51 DiffusionOperatorP1: Boundary treatment ...
08:51 DiffusionOperatorP1: Assemble system matrix ...
08:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:51 DiffusionOperatorP1: Determine global dofs ...
08:51 DiffusionOperatorP1: Boundary treatment ...
08:51 DiffusionOperatorP1: Assemble system matrix ...
08:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:51 DiffusionOperatorP1: Determine global dofs ...
08:51 DiffusionOperatorP1: Boundary treatment ...
08:51 DiffusionOperatorP1: Assemble system matrix ...
08:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:51 DiffusionOperatorP1: Determine global dofs ...
08:51 DiffusionOperatorP1: Boundary treatment ...
08:51 DiffusionOperatorP1: Assemble system matrix ...
08:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:52 DiffusionOperatorP1: Determine global dofs ...
08:52 DiffusionOperatorP1: Boundary treatment ...
08:52 DiffusionOperatorP1: Assemble system matrix ...
08:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:52 DiffusionOperatorP1: Determine global dofs ...
08:52 DiffusionOperatorP1: Boundary treatment ...
08:52 DiffusionOperatorP1: Assemble system matrix ...
08:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:52 DiffusionOperatorP1: Determine global dofs ...
08:52 DiffusionOperatorP1: Boundary treatment ...
08:52 DiffusionOperatorP1: Assemble system matrix ...
08:52 L2ProductP1: Integrate the products of the shape functions on each element
08:52 L2ProductP1: Determine global dofs ...
08:52 L2ProductP1: Boundary treatment ...
08:52 L2ProductP1: Assemble system matrix ...
08:52 L2ProductP1: Integrate the products of the shape functions on each element
08:52 L2ProductP1: Determine global dofs ...
08:52 L2ProductP1: Boundary treatment ...
08:52 L2ProductP1: Assemble system matrix ...
08:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:52 DiffusionOperatorP1: Determine global dofs ...
08:52 DiffusionOperatorP1: Boundary treatment ...
08:52 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="20" name="test_pickle_without_dumps_function[picklable_discretization4]" time="0.268544197083"><system-err>08:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:52 DiffusionOperatorP1: Determine global dofs ...
08:52 DiffusionOperatorP1: Boundary treatment ...
08:52 DiffusionOperatorP1: Assemble system matrix ...
08:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:52 DiffusionOperatorP1: Determine global dofs ...
08:52 DiffusionOperatorP1: Boundary treatment ...
08:52 DiffusionOperatorP1: Assemble system matrix ...
08:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:52 DiffusionOperatorP1: Determine global dofs ...
08:52 DiffusionOperatorP1: Boundary treatment ...
08:52 DiffusionOperatorP1: Assemble system matrix ...
08:52 L2ProductP1: Integrate the products of the shape functions on each element
08:52 L2ProductP1: Determine global dofs ...
08:52 L2ProductP1: Boundary treatment ...
08:53 L2ProductP1: Assemble system matrix ...
08:53 L2ProductP1: Integrate the products of the shape functions on each element
08:53 L2ProductP1: Determine global dofs ...
08:53 L2ProductP1: Boundary treatment ...
08:53 L2ProductP1: Assemble system matrix ...
08:53 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:53 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:53 DiffusionOperatorP1: Determine global dofs ...
08:53 DiffusionOperatorP1: Boundary treatment ...
08:53 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="20" name="test_pickle_without_dumps_function[picklable_discretization5]" time="1.02316832542"><system-err>08:53 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:53 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:53 DiffusionOperatorP1: Determine global dofs ...
08:53 DiffusionOperatorP1: Boundary treatment ...
08:53 DiffusionOperatorP1: Assemble system matrix ...
08:53 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:53 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:53 DiffusionOperatorP1: Determine global dofs ...
08:53 DiffusionOperatorP1: Boundary treatment ...
08:53 DiffusionOperatorP1: Assemble system matrix ...
08:53 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:53 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:53 DiffusionOperatorP1: Determine global dofs ...
08:53 DiffusionOperatorP1: Boundary treatment ...
08:53 DiffusionOperatorP1: Assemble system matrix ...
08:53 L2ProductP1: Integrate the products of the shape functions on each element
08:53 L2ProductP1: Determine global dofs ...
08:53 L2ProductP1: Boundary treatment ...
08:53 L2ProductP1: Assemble system matrix ...
08:53 L2ProductP1: Integrate the products of the shape functions on each element
08:53 L2ProductP1: Determine global dofs ...
08:53 L2ProductP1: Boundary treatment ...
08:53 L2ProductP1: Assemble system matrix ...
08:53 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:53 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:53 DiffusionOperatorP1: Determine global dofs ...
08:54 DiffusionOperatorP1: Boundary treatment ...
08:54 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="20" name="test_pickle_without_dumps_function[picklable_discretization6]" time="0.375982999802"><system-err>08:54 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:54 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:54 DiffusionOperatorP1: Determine global dofs ...
08:54 DiffusionOperatorP1: Boundary treatment ...
08:54 DiffusionOperatorP1: Assemble system matrix ...
08:54 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:54 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:54 DiffusionOperatorP1: Determine global dofs ...
08:54 DiffusionOperatorP1: Boundary treatment ...
08:54 DiffusionOperatorP1: Assemble system matrix ...
08:54 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:54 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:54 DiffusionOperatorP1: Determine global dofs ...
08:54 DiffusionOperatorP1: Boundary treatment ...
08:54 DiffusionOperatorP1: Assemble system matrix ...
08:54 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:54 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:54 DiffusionOperatorP1: Determine global dofs ...
08:54 DiffusionOperatorP1: Boundary treatment ...
08:54 DiffusionOperatorP1: Assemble system matrix ...
08:54 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:54 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:54 DiffusionOperatorP1: Determine global dofs ...
08:54 DiffusionOperatorP1: Boundary treatment ...
08:54 DiffusionOperatorP1: Assemble system matrix ...
08:54 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:54 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:54 DiffusionOperatorP1: Determine global dofs ...
08:54 DiffusionOperatorP1: Boundary treatment ...
08:54 DiffusionOperatorP1: Assemble system matrix ...
08:54 L2ProductP1: Integrate the products of the shape functions on each element
08:54 L2ProductP1: Determine global dofs ...
08:54 L2ProductP1: Boundary treatment ...
08:54 L2ProductP1: Assemble system matrix ...
08:54 L2ProductP1: Integrate the products of the shape functions on each element
08:54 L2ProductP1: Determine global dofs ...
08:54 L2ProductP1: Boundary treatment ...
08:54 L2ProductP1: Assemble system matrix ...
08:54 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:54 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:54 DiffusionOperatorP1: Determine global dofs ...
08:54 DiffusionOperatorP1: Boundary treatment ...
08:54 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="20" name="test_pickle_without_dumps_function[picklable_discretization7]" time="1.44338393211"><system-err>08:54 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:54 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:54 DiffusionOperatorP1: Determine global dofs ...
08:54 DiffusionOperatorP1: Boundary treatment ...
08:54 DiffusionOperatorP1: Assemble system matrix ...
08:54 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:54 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:54 DiffusionOperatorP1: Determine global dofs ...
08:54 DiffusionOperatorP1: Boundary treatment ...
08:54 DiffusionOperatorP1: Assemble system matrix ...
08:54 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:54 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:55 DiffusionOperatorP1: Determine global dofs ...
08:55 DiffusionOperatorP1: Boundary treatment ...
08:55 DiffusionOperatorP1: Assemble system matrix ...
08:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:55 DiffusionOperatorP1: Determine global dofs ...
08:55 DiffusionOperatorP1: Boundary treatment ...
08:55 DiffusionOperatorP1: Assemble system matrix ...
08:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:55 DiffusionOperatorP1: Determine global dofs ...
08:55 DiffusionOperatorP1: Boundary treatment ...
08:55 DiffusionOperatorP1: Assemble system matrix ...
08:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:55 DiffusionOperatorP1: Determine global dofs ...
08:55 DiffusionOperatorP1: Boundary treatment ...
08:55 DiffusionOperatorP1: Assemble system matrix ...
08:55 L2ProductP1: Integrate the products of the shape functions on each element
08:55 L2ProductP1: Determine global dofs ...
08:55 L2ProductP1: Boundary treatment ...
08:55 L2ProductP1: Assemble system matrix ...
08:55 L2ProductP1: Integrate the products of the shape functions on each element
08:55 L2ProductP1: Determine global dofs ...
08:55 L2ProductP1: Boundary treatment ...
08:55 L2ProductP1: Assemble system matrix ...
08:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:55 DiffusionOperatorP1: Determine global dofs ...
08:55 DiffusionOperatorP1: Boundary treatment ...
08:55 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="20" name="test_pickle_without_dumps_function[picklable_discretization8]" time="0.00854873657227"></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="20" name="test_pickle_without_dumps_function[picklable_discretization9]" time="0.00708985328674"></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="20" name="test_pickle_without_dumps_function[picklable_discretization10]" time="0.0105738639832"></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="20" name="test_pickle_without_dumps_function[picklable_discretization11]" time="0.0105290412903"></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="20" name="test_pickle_without_dumps_function[picklable_discretization12]" time="0.00749778747559"></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="20" name="test_pickle_without_dumps_function[picklable_discretization13]" time="0.00699281692505"></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="20" name="test_pickle_without_dumps_function[picklable_discretization14]" time="0.00843191146851"></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="20" name="test_pickle_without_dumps_function[picklable_discretization15]" time="0.00714182853699"></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="20" name="test_pickle_without_dumps_function[picklable_discretization16]" time="0.00940203666687"></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="20" name="test_pickle_without_dumps_function[picklable_discretization17]" time="0.011088848114"></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="20" name="test_pickle_without_dumps_function[picklable_discretization18]" time="0.0213022232056"></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="20" name="test_pickle_without_dumps_function[picklable_discretization19]" time="0.0274159908295"></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="20" name="test_pickle_without_dumps_function[picklable_discretization20]" time="0.01571393013"><system-err>08:56 load_matrix: Loading matrix from file /src/src/pymortests/testdata/Systemmatrix1.mat
08:56 load_matrix: MATLAB file detected.
08:56 load_matrix: Loading matrix from file /src/src/pymortests/testdata/Systemmatrix2.mat
08:56 load_matrix: MATLAB file detected.
08:56 load_matrix: Loading matrix from file /src/src/pymortests/testdata/rhs1.mat
08:56 load_matrix: MATLAB file detected.
08:56 load_matrix: Loading matrix from file /src/src/pymortests/testdata/rhs2.mat
08:56 load_matrix: MATLAB file detected.
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="20" name="test_pickle_without_dumps_function[picklable_discretization21]" time="0.0201859474182"><system-err>08:56 load_matrix: Loading matrix from file /src/src/pymortests/testdata/Systemmatrix1.mat
08:56 load_matrix: MATLAB file detected.
08:56 load_matrix: Loading matrix from file /src/src/pymortests/testdata/Systemmatrix2.mat
08:56 load_matrix: MATLAB file detected.
08:56 load_matrix: Loading matrix from file /src/src/pymortests/testdata/rhs1.mat
08:56 load_matrix: MATLAB file detected.
08:56 load_matrix: Loading matrix from file /src/src/pymortests/testdata/rhs2.mat
08:56 load_matrix: MATLAB file detected.
08:56 load_matrix: Loading matrix from file /src/src/pymortests/testdata/Massmatrix.mat
08:56 load_matrix: MATLAB file detected.
08:56 load_matrix: Loading matrix from file /src/src/pymortests/testdata/u0.mat
08:56 load_matrix: MATLAB file detected.
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="24" name="test_pickle_by_solving[discretization0]" time="0.684448003769"><system-err>08:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:56 DiffusionOperatorP1: Determine global dofs ...
08:56 DiffusionOperatorP1: Boundary treatment ...
08:56 DiffusionOperatorP1: Assemble system matrix ...
08:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:56 DiffusionOperatorP1: Determine global dofs ...
08:56 DiffusionOperatorP1: Boundary treatment ...
08:56 DiffusionOperatorP1: Assemble system matrix ...
08:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:56 DiffusionOperatorP1: Determine global dofs ...
08:56 DiffusionOperatorP1: Boundary treatment ...
08:56 DiffusionOperatorP1: Assemble system matrix ...
08:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:56 DiffusionOperatorP1: Determine global dofs ...
08:56 DiffusionOperatorP1: Boundary treatment ...
08:56 DiffusionOperatorP1: Assemble system matrix ...
08:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:56 DiffusionOperatorP1: Determine global dofs ...
08:56 DiffusionOperatorP1: Boundary treatment ...
08:56 DiffusionOperatorP1: Assemble system matrix ...
08:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:56 DiffusionOperatorP1: Determine global dofs ...
08:56 DiffusionOperatorP1: Boundary treatment ...
08:56 DiffusionOperatorP1: Assemble system matrix ...
08:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:56 DiffusionOperatorP1: Determine global dofs ...
08:56 DiffusionOperatorP1: Boundary treatment ...
08:56 DiffusionOperatorP1: Assemble system matrix ...
08:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:56 DiffusionOperatorP1: Determine global dofs ...
08:56 DiffusionOperatorP1: Boundary treatment ...
08:56 DiffusionOperatorP1: Assemble system matrix ...
08:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:56 DiffusionOperatorP1: Determine global dofs ...
08:56 DiffusionOperatorP1: Boundary treatment ...
08:56 DiffusionOperatorP1: Assemble system matrix ...
08:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:56 DiffusionOperatorP1: Determine global dofs ...
08:56 DiffusionOperatorP1: Boundary treatment ...
08:56 DiffusionOperatorP1: Assemble system matrix ...
08:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:56 DiffusionOperatorP1: Determine global dofs ...
08:56 DiffusionOperatorP1: Boundary treatment ...
08:56 DiffusionOperatorP1: Assemble system matrix ...
08:56 L2ProductP1: Integrate the products of the shape functions on each element
08:56 L2ProductP1: Determine global dofs ...
08:56 L2ProductP1: Boundary treatment ...
08:56 L2ProductP1: Assemble system matrix ...
08:56 L2ProductP1: Integrate the products of the shape functions on each element
08:56 L2ProductP1: Determine global dofs ...
08:56 L2ProductP1: Boundary treatment ...
08:56 L2ProductP1: Assemble system matrix ...
08:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:56 DiffusionOperatorP1: Determine global dofs ...
08:56 DiffusionOperatorP1: Boundary treatment ...
08:56 DiffusionOperatorP1: Assemble system matrix ...
08:56 StationaryDiscretization: Solving ThermalBlock((3, 3))_CG for {diffusion: [0.127870609123, 0.328853865911, 0.921160399155, 0.973156778027, 0.3219577983, 0.72892667285, 0.879786387277, 0.6755696624, 0.511159283546]} ...
08:56 StationaryDiscretization: Solving ThermalBlock((3, 3))_CG for {diffusion: [0.127870609123, 0.328853865911, 0.921160399155, 0.973156778027, 0.3219577983, 0.72892667285, 0.879786387277, 0.6755696624, 0.511159283546]} ...
08:56 StationaryDiscretization: Solving ThermalBlock((3, 3))_CG for {diffusion: [0.548915276722, 0.748427506239, 0.34412787072, 0.820557128278, 0.558327407533, 0.837928918585, 0.376941913502, 0.693350399169, 0.382158001681]} ...
08:56 StationaryDiscretization: Solving ThermalBlock((3, 3))_CG for {diffusion: [0.548915276722, 0.748427506239, 0.34412787072, 0.820557128278, 0.558327407533, 0.837928918585, 0.376941913502, 0.693350399169, 0.382158001681]} ...
08:56 StationaryDiscretization: Solving ThermalBlock((3, 3))_CG for {diffusion: [0.590186718573, 0.387857315631, 0.51323750845, 0.831782453668, 0.961796495359, 0.103594152896, 0.985544775765, 0.990657737063, 0.182807726718]} ...
08:56 StationaryDiscretization: Solving ThermalBlock((3, 3))_CG for {diffusion: [0.590186718573, 0.387857315631, 0.51323750845, 0.831782453668, 0.961796495359, 0.103594152896, 0.985544775765, 0.990657737063, 0.182807726718]} ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="24" name="test_pickle_by_solving[discretization1]" time="2.97062706947"><system-err>08:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:57 DiffusionOperatorP1: Determine global dofs ...
08:57 DiffusionOperatorP1: Boundary treatment ...
08:57 DiffusionOperatorP1: Assemble system matrix ...
08:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:57 DiffusionOperatorP1: Determine global dofs ...
08:57 DiffusionOperatorP1: Boundary treatment ...
08:57 DiffusionOperatorP1: Assemble system matrix ...
08:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:57 DiffusionOperatorP1: Determine global dofs ...
08:57 DiffusionOperatorP1: Boundary treatment ...
08:57 DiffusionOperatorP1: Assemble system matrix ...
08:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:57 DiffusionOperatorP1: Determine global dofs ...
08:57 DiffusionOperatorP1: Boundary treatment ...
08:57 DiffusionOperatorP1: Assemble system matrix ...
08:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:57 DiffusionOperatorP1: Determine global dofs ...
08:57 DiffusionOperatorP1: Boundary treatment ...
08:57 DiffusionOperatorP1: Assemble system matrix ...
08:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:57 DiffusionOperatorP1: Determine global dofs ...
08:57 DiffusionOperatorP1: Boundary treatment ...
08:57 DiffusionOperatorP1: Assemble system matrix ...
08:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:57 DiffusionOperatorP1: Determine global dofs ...
08:57 DiffusionOperatorP1: Boundary treatment ...
08:57 DiffusionOperatorP1: Assemble system matrix ...
08:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:58 DiffusionOperatorP1: Determine global dofs ...
08:58 DiffusionOperatorP1: Boundary treatment ...
08:58 DiffusionOperatorP1: Assemble system matrix ...
08:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:58 DiffusionOperatorP1: Determine global dofs ...
08:58 DiffusionOperatorP1: Boundary treatment ...
08:58 DiffusionOperatorP1: Assemble system matrix ...
08:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:58 DiffusionOperatorP1: Determine global dofs ...
08:58 DiffusionOperatorP1: Boundary treatment ...
08:58 DiffusionOperatorP1: Assemble system matrix ...
08:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:58 DiffusionOperatorP1: Determine global dofs ...
08:58 DiffusionOperatorP1: Boundary treatment ...
08:58 DiffusionOperatorP1: Assemble system matrix ...
08:58 L2ProductP1: Integrate the products of the shape functions on each element
08:58 L2ProductP1: Determine global dofs ...
08:58 L2ProductP1: Boundary treatment ...
08:58 L2ProductP1: Assemble system matrix ...
08:58 L2ProductP1: Integrate the products of the shape functions on each element
08:58 L2ProductP1: Determine global dofs ...
08:58 L2ProductP1: Boundary treatment ...
08:58 L2ProductP1: Assemble system matrix ...
08:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:58 DiffusionOperatorP1: Determine global dofs ...
08:58 DiffusionOperatorP1: Boundary treatment ...
08:58 DiffusionOperatorP1: Assemble system matrix ...
08:58 StationaryDiscretization: Solving ThermalBlock((3, 3))_CG for {diffusion: [0.127870609123, 0.328853865911, 0.921160399155, 0.973156778027, 0.3219577983, 0.72892667285, 0.879786387277, 0.6755696624, 0.511159283546]} ...
08:59 StationaryDiscretization: Solving ThermalBlock((3, 3))_CG for {diffusion: [0.127870609123, 0.328853865911, 0.921160399155, 0.973156778027, 0.3219577983, 0.72892667285, 0.879786387277, 0.6755696624, 0.511159283546]} ...
08:59 StationaryDiscretization: Solving ThermalBlock((3, 3))_CG for {diffusion: [0.548915276722, 0.748427506239, 0.34412787072, 0.820557128278, 0.558327407533, 0.837928918585, 0.376941913502, 0.693350399169, 0.382158001681]} ...
08:59 StationaryDiscretization: Solving ThermalBlock((3, 3))_CG for {diffusion: [0.548915276722, 0.748427506239, 0.34412787072, 0.820557128278, 0.558327407533, 0.837928918585, 0.376941913502, 0.693350399169, 0.382158001681]} ...
08:59 StationaryDiscretization: Solving ThermalBlock((3, 3))_CG for {diffusion: [0.590186718573, 0.387857315631, 0.51323750845, 0.831782453668, 0.961796495359, 0.103594152896, 0.985544775765, 0.990657737063, 0.182807726718]} ...
08:59 StationaryDiscretization: Solving ThermalBlock((3, 3))_CG for {diffusion: [0.590186718573, 0.387857315631, 0.51323750845, 0.831782453668, 0.961796495359, 0.103594152896, 0.985544775765, 0.990657737063, 0.182807726718]} ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="24" name="test_pickle_by_solving[discretization2]" time="0.604023933411"><system-err>08:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:59 DiffusionOperatorP1: Determine global dofs ...
08:59 DiffusionOperatorP1: Boundary treatment ...
08:59 DiffusionOperatorP1: Assemble system matrix ...
08:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:59 DiffusionOperatorP1: Determine global dofs ...
08:59 DiffusionOperatorP1: Boundary treatment ...
08:59 DiffusionOperatorP1: Assemble system matrix ...
08:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
08:59 DiffusionOperatorP1: Determine global dofs ...
08:59 DiffusionOperatorP1: Boundary treatment ...
08:59 DiffusionOperatorP1: Assemble system matrix ...
08:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
08:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:00 DiffusionOperatorP1: Determine global dofs ...
09:00 DiffusionOperatorP1: Boundary treatment ...
09:00 DiffusionOperatorP1: Assemble system matrix ...
09:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:00 DiffusionOperatorP1: Determine global dofs ...
09:00 DiffusionOperatorP1: Boundary treatment ...
09:00 DiffusionOperatorP1: Assemble system matrix ...
09:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:00 DiffusionOperatorP1: Determine global dofs ...
09:00 DiffusionOperatorP1: Boundary treatment ...
09:00 DiffusionOperatorP1: Assemble system matrix ...
09:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:00 DiffusionOperatorP1: Determine global dofs ...
09:00 DiffusionOperatorP1: Boundary treatment ...
09:00 DiffusionOperatorP1: Assemble system matrix ...
09:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:00 DiffusionOperatorP1: Determine global dofs ...
09:00 DiffusionOperatorP1: Boundary treatment ...
09:00 DiffusionOperatorP1: Assemble system matrix ...
09:00 L2ProductP1: Integrate the products of the shape functions on each element
09:00 L2ProductP1: Determine global dofs ...
09:00 L2ProductP1: Boundary treatment ...
09:00 L2ProductP1: Assemble system matrix ...
09:00 L2ProductP1: Integrate the products of the shape functions on each element
09:00 L2ProductP1: Determine global dofs ...
09:00 L2ProductP1: Boundary treatment ...
09:00 L2ProductP1: Assemble system matrix ...
09:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:00 DiffusionOperatorP1: Determine global dofs ...
09:00 DiffusionOperatorP1: Boundary treatment ...
09:00 DiffusionOperatorP1: Assemble system matrix ...
09:00 StationaryDiscretization: Solving ThermalBlock((3, 2))_CG for {diffusion: [0.127870609123, 0.328853865911, 0.921160399155, 0.973156778027, 0.3219577983, 0.72892667285]} ...
09:00 StationaryDiscretization: Solving ThermalBlock((3, 2))_CG for {diffusion: [0.127870609123, 0.328853865911, 0.921160399155, 0.973156778027, 0.3219577983, 0.72892667285]} ...
09:00 StationaryDiscretization: Solving ThermalBlock((3, 2))_CG for {diffusion: [0.879786387277, 0.6755696624, 0.511159283546, 0.548915276722, 0.748427506239, 0.34412787072]} ...
09:00 StationaryDiscretization: Solving ThermalBlock((3, 2))_CG for {diffusion: [0.879786387277, 0.6755696624, 0.511159283546, 0.548915276722, 0.748427506239, 0.34412787072]} ...
09:00 StationaryDiscretization: Solving ThermalBlock((3, 2))_CG for {diffusion: [0.820557128278, 0.558327407533, 0.837928918585, 0.376941913502, 0.693350399169, 0.382158001681]} ...
09:00 StationaryDiscretization: Solving ThermalBlock((3, 2))_CG for {diffusion: [0.820557128278, 0.558327407533, 0.837928918585, 0.376941913502, 0.693350399169, 0.382158001681]} ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="24" name="test_pickle_by_solving[discretization3]" time="2.54639625549"><system-err>09:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:00 DiffusionOperatorP1: Determine global dofs ...
09:00 DiffusionOperatorP1: Boundary treatment ...
09:00 DiffusionOperatorP1: Assemble system matrix ...
09:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:00 DiffusionOperatorP1: Determine global dofs ...
09:00 DiffusionOperatorP1: Boundary treatment ...
09:00 DiffusionOperatorP1: Assemble system matrix ...
09:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:00 DiffusionOperatorP1: Determine global dofs ...
09:00 DiffusionOperatorP1: Boundary treatment ...
09:00 DiffusionOperatorP1: Assemble system matrix ...
09:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:01 DiffusionOperatorP1: Determine global dofs ...
09:01 DiffusionOperatorP1: Boundary treatment ...
09:01 DiffusionOperatorP1: Assemble system matrix ...
09:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:01 DiffusionOperatorP1: Determine global dofs ...
09:01 DiffusionOperatorP1: Boundary treatment ...
09:01 DiffusionOperatorP1: Assemble system matrix ...
09:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:01 DiffusionOperatorP1: Determine global dofs ...
09:01 DiffusionOperatorP1: Boundary treatment ...
09:01 DiffusionOperatorP1: Assemble system matrix ...
09:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:01 DiffusionOperatorP1: Determine global dofs ...
09:01 DiffusionOperatorP1: Boundary treatment ...
09:01 DiffusionOperatorP1: Assemble system matrix ...
09:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:01 DiffusionOperatorP1: Determine global dofs ...
09:01 DiffusionOperatorP1: Boundary treatment ...
09:01 DiffusionOperatorP1: Assemble system matrix ...
09:01 L2ProductP1: Integrate the products of the shape functions on each element
09:01 L2ProductP1: Determine global dofs ...
09:01 L2ProductP1: Boundary treatment ...
09:01 L2ProductP1: Assemble system matrix ...
09:01 L2ProductP1: Integrate the products of the shape functions on each element
09:01 L2ProductP1: Determine global dofs ...
09:01 L2ProductP1: Boundary treatment ...
09:01 L2ProductP1: Assemble system matrix ...
09:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:01 DiffusionOperatorP1: Determine global dofs ...
09:01 DiffusionOperatorP1: Boundary treatment ...
09:02 DiffusionOperatorP1: Assemble system matrix ...
09:02 StationaryDiscretization: Solving ThermalBlock((3, 2))_CG for {diffusion: [0.127870609123, 0.328853865911, 0.921160399155, 0.973156778027, 0.3219577983, 0.72892667285]} ...
09:02 StationaryDiscretization: Solving ThermalBlock((3, 2))_CG for {diffusion: [0.127870609123, 0.328853865911, 0.921160399155, 0.973156778027, 0.3219577983, 0.72892667285]} ...
09:02 StationaryDiscretization: Solving ThermalBlock((3, 2))_CG for {diffusion: [0.879786387277, 0.6755696624, 0.511159283546, 0.548915276722, 0.748427506239, 0.34412787072]} ...
09:02 StationaryDiscretization: Solving ThermalBlock((3, 2))_CG for {diffusion: [0.879786387277, 0.6755696624, 0.511159283546, 0.548915276722, 0.748427506239, 0.34412787072]} ...
09:02 StationaryDiscretization: Solving ThermalBlock((3, 2))_CG for {diffusion: [0.820557128278, 0.558327407533, 0.837928918585, 0.376941913502, 0.693350399169, 0.382158001681]} ...
09:02 StationaryDiscretization: Solving ThermalBlock((3, 2))_CG for {diffusion: [0.820557128278, 0.558327407533, 0.837928918585, 0.376941913502, 0.693350399169, 0.382158001681]} ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="24" name="test_pickle_by_solving[discretization4]" time="0.421159982681"><system-err>09:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:03 DiffusionOperatorP1: Determine global dofs ...
09:03 DiffusionOperatorP1: Boundary treatment ...
09:03 DiffusionOperatorP1: Assemble system matrix ...
09:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:03 DiffusionOperatorP1: Determine global dofs ...
09:03 DiffusionOperatorP1: Boundary treatment ...
09:03 DiffusionOperatorP1: Assemble system matrix ...
09:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:03 DiffusionOperatorP1: Determine global dofs ...
09:03 DiffusionOperatorP1: Boundary treatment ...
09:03 DiffusionOperatorP1: Assemble system matrix ...
09:03 L2ProductP1: Integrate the products of the shape functions on each element
09:03 L2ProductP1: Determine global dofs ...
09:03 L2ProductP1: Boundary treatment ...
09:03 L2ProductP1: Assemble system matrix ...
09:03 L2ProductP1: Integrate the products of the shape functions on each element
09:03 L2ProductP1: Determine global dofs ...
09:03 L2ProductP1: Boundary treatment ...
09:03 L2ProductP1: Assemble system matrix ...
09:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:03 DiffusionOperatorP1: Determine global dofs ...
09:03 DiffusionOperatorP1: Boundary treatment ...
09:03 DiffusionOperatorP1: Assemble system matrix ...
09:03 StationaryDiscretization: Solving ThermalBlock((1, 1))_CG for {diffusion: [0.127870609123]} ...
09:03 StationaryDiscretization: Solving ThermalBlock((1, 1))_CG for {diffusion: [0.127870609123]} ...
09:03 StationaryDiscretization: Solving ThermalBlock((1, 1))_CG for {diffusion: [0.328853865911]} ...
09:03 StationaryDiscretization: Solving ThermalBlock((1, 1))_CG for {diffusion: [0.328853865911]} ...
09:03 StationaryDiscretization: Solving ThermalBlock((1, 1))_CG for {diffusion: [0.921160399155]} ...
09:03 StationaryDiscretization: Solving ThermalBlock((1, 1))_CG for {diffusion: [0.921160399155]} ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="24" name="test_pickle_by_solving[discretization5]" time="1.7950489521"><system-err>09:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:03 DiffusionOperatorP1: Determine global dofs ...
09:03 DiffusionOperatorP1: Boundary treatment ...
09:03 DiffusionOperatorP1: Assemble system matrix ...
09:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:03 DiffusionOperatorP1: Determine global dofs ...
09:03 DiffusionOperatorP1: Boundary treatment ...
09:03 DiffusionOperatorP1: Assemble system matrix ...
09:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:03 DiffusionOperatorP1: Determine global dofs ...
09:03 DiffusionOperatorP1: Boundary treatment ...
09:03 DiffusionOperatorP1: Assemble system matrix ...
09:03 L2ProductP1: Integrate the products of the shape functions on each element
09:04 L2ProductP1: Determine global dofs ...
09:04 L2ProductP1: Boundary treatment ...
09:04 L2ProductP1: Assemble system matrix ...
09:04 L2ProductP1: Integrate the products of the shape functions on each element
09:04 L2ProductP1: Determine global dofs ...
09:04 L2ProductP1: Boundary treatment ...
09:04 L2ProductP1: Assemble system matrix ...
09:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:04 DiffusionOperatorP1: Determine global dofs ...
09:04 DiffusionOperatorP1: Boundary treatment ...
09:04 DiffusionOperatorP1: Assemble system matrix ...
09:04 StationaryDiscretization: Solving ThermalBlock((1, 1))_CG for {diffusion: [0.127870609123]} ...
09:04 StationaryDiscretization: Solving ThermalBlock((1, 1))_CG for {diffusion: [0.127870609123]} ...
09:04 StationaryDiscretization: Solving ThermalBlock((1, 1))_CG for {diffusion: [0.328853865911]} ...
09:04 StationaryDiscretization: Solving ThermalBlock((1, 1))_CG for {diffusion: [0.328853865911]} ...
09:04 StationaryDiscretization: Solving ThermalBlock((1, 1))_CG for {diffusion: [0.921160399155]} ...
09:05 StationaryDiscretization: Solving ThermalBlock((1, 1))_CG for {diffusion: [0.921160399155]} ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="24" name="test_pickle_by_solving[discretization6]" time="0.526840925217"><system-err>09:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:05 DiffusionOperatorP1: Determine global dofs ...
09:05 DiffusionOperatorP1: Boundary treatment ...
09:05 DiffusionOperatorP1: Assemble system matrix ...
09:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:05 DiffusionOperatorP1: Determine global dofs ...
09:05 DiffusionOperatorP1: Boundary treatment ...
09:05 DiffusionOperatorP1: Assemble system matrix ...
09:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:05 DiffusionOperatorP1: Determine global dofs ...
09:05 DiffusionOperatorP1: Boundary treatment ...
09:05 DiffusionOperatorP1: Assemble system matrix ...
09:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:05 DiffusionOperatorP1: Determine global dofs ...
09:05 DiffusionOperatorP1: Boundary treatment ...
09:05 DiffusionOperatorP1: Assemble system matrix ...
09:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:05 DiffusionOperatorP1: Determine global dofs ...
09:05 DiffusionOperatorP1: Boundary treatment ...
09:05 DiffusionOperatorP1: Assemble system matrix ...
09:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:05 DiffusionOperatorP1: Determine global dofs ...
09:05 DiffusionOperatorP1: Boundary treatment ...
09:05 DiffusionOperatorP1: Assemble system matrix ...
09:05 L2ProductP1: Integrate the products of the shape functions on each element
09:05 L2ProductP1: Determine global dofs ...
09:05 L2ProductP1: Boundary treatment ...
09:05 L2ProductP1: Assemble system matrix ...
09:05 L2ProductP1: Integrate the products of the shape functions on each element
09:05 L2ProductP1: Determine global dofs ...
09:05 L2ProductP1: Boundary treatment ...
09:05 L2ProductP1: Assemble system matrix ...
09:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:05 DiffusionOperatorP1: Determine global dofs ...
09:05 DiffusionOperatorP1: Boundary treatment ...
09:05 DiffusionOperatorP1: Assemble system matrix ...
09:05 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [4.06576700353, 26.1739252502, 91.3276439071, 97.047245583]} ...
09:05 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [4.06576700353, 26.1739252502, 91.3276439071, 97.047245583]} ...
09:05 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [25.415357813, 70.1819340135, 86.7765026004, 64.312662864]} ...
09:05 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [25.415357813, 70.1819340135, 86.7765026004, 64.312662864]} ...
09:05 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [46.22752119, 50.3806804394, 72.3270256863, 27.8540657791]} ...
09:05 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [46.22752119, 50.3806804394, 72.3270256863, 27.8540657791]} ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="24" name="test_pickle_by_solving[discretization7]" time="2.30239534378"><system-err>09:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:05 DiffusionOperatorP1: Determine global dofs ...
09:05 DiffusionOperatorP1: Boundary treatment ...
09:05 DiffusionOperatorP1: Assemble system matrix ...
09:06 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:06 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:06 DiffusionOperatorP1: Determine global dofs ...
09:06 DiffusionOperatorP1: Boundary treatment ...
09:06 DiffusionOperatorP1: Assemble system matrix ...
09:06 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:06 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:06 DiffusionOperatorP1: Determine global dofs ...
09:06 DiffusionOperatorP1: Boundary treatment ...
09:06 DiffusionOperatorP1: Assemble system matrix ...
09:06 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:06 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:06 DiffusionOperatorP1: Determine global dofs ...
09:06 DiffusionOperatorP1: Boundary treatment ...
09:06 DiffusionOperatorP1: Assemble system matrix ...
09:06 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:06 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:06 DiffusionOperatorP1: Determine global dofs ...
09:06 DiffusionOperatorP1: Boundary treatment ...
09:06 DiffusionOperatorP1: Assemble system matrix ...
09:06 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:06 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:06 DiffusionOperatorP1: Determine global dofs ...
09:06 DiffusionOperatorP1: Boundary treatment ...
09:06 DiffusionOperatorP1: Assemble system matrix ...
09:06 L2ProductP1: Integrate the products of the shape functions on each element
09:06 L2ProductP1: Determine global dofs ...
09:06 L2ProductP1: Boundary treatment ...
09:06 L2ProductP1: Assemble system matrix ...
09:06 L2ProductP1: Integrate the products of the shape functions on each element
09:06 L2ProductP1: Determine global dofs ...
09:06 L2ProductP1: Boundary treatment ...
09:06 L2ProductP1: Assemble system matrix ...
09:06 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:06 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:07 DiffusionOperatorP1: Determine global dofs ...
09:07 DiffusionOperatorP1: Boundary treatment ...
09:07 DiffusionOperatorP1: Assemble system matrix ...
09:07 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [4.06576700353, 26.1739252502, 91.3276439071, 97.047245583]} ...
09:07 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [4.06576700353, 26.1739252502, 91.3276439071, 97.047245583]} ...
09:07 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [25.415357813, 70.1819340135, 86.7765026004, 64.312662864]} ...
09:07 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [25.415357813, 70.1819340135, 86.7765026004, 64.312662864]} ...
09:07 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [46.22752119, 50.3806804394, 72.3270256863, 27.8540657791]} ...
09:07 StationaryDiscretization: Solving ThermalBlock((2, 2))_CG for {diffusion: [46.22752119, 50.3806804394, 72.3270256863, 27.8540657791]} ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="24" name="test_pickle_by_solving[discretization8]" time="0.163441896439"><system-err>09:08 InstationaryDiscretization: Solving burgers_problem(1.0, True, &apos;sin&apos;)_FV for {exponent: 1.03096734347} ...
09:08 InstationaryDiscretization: Solving burgers_problem(1.0, True, &apos;sin&apos;)_FV for {exponent: 1.03096734347} ...
09:08 InstationaryDiscretization: Solving burgers_problem(1.0, True, &apos;sin&apos;)_FV for {exponent: 1.25428207323} ...
09:08 InstationaryDiscretization: Solving burgers_problem(1.0, True, &apos;sin&apos;)_FV for {exponent: 1.25428207323} ...
09:08 InstationaryDiscretization: Solving burgers_problem(1.0, True, &apos;sin&apos;)_FV for {exponent: 1.91240044351} ...
09:08 InstationaryDiscretization: Solving burgers_problem(1.0, True, &apos;sin&apos;)_FV for {exponent: 1.91240044351} ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="24" name="test_pickle_by_solving[discretization9]" time="0.130071163177"><system-err>09:08 InstationaryDiscretization: Solving burgers_problem(1.0, True, &apos;sin&apos;)_FV for {exponent: 1.03096734347} ...
09:08 InstationaryDiscretization: Solving burgers_problem(1.0, True, &apos;sin&apos;)_FV for {exponent: 1.03096734347} ...
09:08 InstationaryDiscretization: Solving burgers_problem(1.0, True, &apos;sin&apos;)_FV for {exponent: 1.25428207323} ...
09:08 InstationaryDiscretization: Solving burgers_problem(1.0, True, &apos;sin&apos;)_FV for {exponent: 1.25428207323} ...
09:08 InstationaryDiscretization: Solving burgers_problem(1.0, True, &apos;sin&apos;)_FV for {exponent: 1.91240044351} ...
09:08 InstationaryDiscretization: Solving burgers_problem(1.0, True, &apos;sin&apos;)_FV for {exponent: 1.91240044351} ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="24" name="test_pickle_by_solving[discretization10]" time="0.151267051697"><system-err>09:08 InstationaryDiscretization: Solving burgers_problem(0.2, False, &apos;sin&apos;)_FV for {exponent: 1.03096734347} ...
09:08 InstationaryDiscretization: Solving burgers_problem(0.2, False, &apos;sin&apos;)_FV for {exponent: 1.03096734347} ...
09:08 InstationaryDiscretization: Solving burgers_problem(0.2, False, &apos;sin&apos;)_FV for {exponent: 1.25428207323} ...
09:08 InstationaryDiscretization: Solving burgers_problem(0.2, False, &apos;sin&apos;)_FV for {exponent: 1.25428207323} ...
09:08 InstationaryDiscretization: Solving burgers_problem(0.2, False, &apos;sin&apos;)_FV for {exponent: 1.91240044351} ...
09:08 InstationaryDiscretization: Solving burgers_problem(0.2, False, &apos;sin&apos;)_FV for {exponent: 1.91240044351} ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="24" name="test_pickle_by_solving[discretization11]" time="0.153752803802"><system-err>09:08 InstationaryDiscretization: Solving burgers_problem(0.2, False, &apos;sin&apos;)_FV for {exponent: 1.03096734347} ...
09:08 InstationaryDiscretization: Solving burgers_problem(0.2, False, &apos;sin&apos;)_FV for {exponent: 1.03096734347} ...
09:08 InstationaryDiscretization: Solving burgers_problem(0.2, False, &apos;sin&apos;)_FV for {exponent: 1.25428207323} ...
09:08 InstationaryDiscretization: Solving burgers_problem(0.2, False, &apos;sin&apos;)_FV for {exponent: 1.25428207323} ...
09:08 InstationaryDiscretization: Solving burgers_problem(0.2, False, &apos;sin&apos;)_FV for {exponent: 1.91240044351} ...
09:08 InstationaryDiscretization: Solving burgers_problem(0.2, False, &apos;sin&apos;)_FV for {exponent: 1.91240044351} ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="24" name="test_pickle_by_solving[discretization12]" time="0.129561901093"><system-err>09:08 InstationaryDiscretization: Solving burgers_problem(0.4, True, &apos;bump&apos;)_FV for {exponent: 1.03096734347} ...
09:08 InstationaryDiscretization: Solving burgers_problem(0.4, True, &apos;bump&apos;)_FV for {exponent: 1.03096734347} ...
09:08 InstationaryDiscretization: Solving burgers_problem(0.4, True, &apos;bump&apos;)_FV for {exponent: 1.25428207323} ...
09:08 InstationaryDiscretization: Solving burgers_problem(0.4, True, &apos;bump&apos;)_FV for {exponent: 1.25428207323} ...
09:08 InstationaryDiscretization: Solving burgers_problem(0.4, True, &apos;bump&apos;)_FV for {exponent: 1.91240044351} ...
09:08 InstationaryDiscretization: Solving burgers_problem(0.4, True, &apos;bump&apos;)_FV for {exponent: 1.91240044351} ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="24" name="test_pickle_by_solving[discretization13]" time="0.132264852524"><system-err>09:08 InstationaryDiscretization: Solving burgers_problem(0.4, True, &apos;bump&apos;)_FV for {exponent: 1.03096734347} ...
09:08 InstationaryDiscretization: Solving burgers_problem(0.4, True, &apos;bump&apos;)_FV for {exponent: 1.03096734347} ...
09:08 InstationaryDiscretization: Solving burgers_problem(0.4, True, &apos;bump&apos;)_FV for {exponent: 1.25428207323} ...
09:08 InstationaryDiscretization: Solving burgers_problem(0.4, True, &apos;bump&apos;)_FV for {exponent: 1.25428207323} ...
09:08 InstationaryDiscretization: Solving burgers_problem(0.4, True, &apos;bump&apos;)_FV for {exponent: 1.91240044351} ...
09:08 InstationaryDiscretization: Solving burgers_problem(0.4, True, &apos;bump&apos;)_FV for {exponent: 1.91240044351} ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="24" name="test_pickle_by_solving[discretization14]" time="0.131539344788"><system-err>09:08 InstationaryDiscretization: Solving burgers_problem(1.0, True, &apos;sin&apos;)_FV for {exponent: 1.00929020304} ...
09:08 InstationaryDiscretization: Solving burgers_problem(1.0, True, &apos;sin&apos;)_FV for {exponent: 1.00929020304} ...
09:08 InstationaryDiscretization: Solving burgers_problem(1.0, True, &apos;sin&apos;)_FV for {exponent: 1.07628462197} ...
09:08 InstationaryDiscretization: Solving burgers_problem(1.0, True, &apos;sin&apos;)_FV for {exponent: 1.07628462197} ...
09:08 InstationaryDiscretization: Solving burgers_problem(1.0, True, &apos;sin&apos;)_FV for {exponent: 1.27372013305} ...
09:08 InstationaryDiscretization: Solving burgers_problem(1.0, True, &apos;sin&apos;)_FV for {exponent: 1.27372013305} ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="24" name="test_pickle_by_solving[discretization15]" time="0.132624864578"><system-err>09:09 InstationaryDiscretization: Solving burgers_problem(1.0, True, &apos;sin&apos;)_FV for {exponent: 1.00929020304} ...
09:09 InstationaryDiscretization: Solving burgers_problem(1.0, True, &apos;sin&apos;)_FV for {exponent: 1.00929020304} ...
09:09 InstationaryDiscretization: Solving burgers_problem(1.0, True, &apos;sin&apos;)_FV for {exponent: 1.07628462197} ...
09:09 InstationaryDiscretization: Solving burgers_problem(1.0, True, &apos;sin&apos;)_FV for {exponent: 1.07628462197} ...
09:09 InstationaryDiscretization: Solving burgers_problem(1.0, True, &apos;sin&apos;)_FV for {exponent: 1.27372013305} ...
09:09 InstationaryDiscretization: Solving burgers_problem(1.0, True, &apos;sin&apos;)_FV for {exponent: 1.27372013305} ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="24" name="test_pickle_by_solving[discretization16]" time="0.411299943924"><system-err>09:09 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.03096734347} ...
09:09 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.03096734347} ...
09:09 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.25428207323} ...
09:09 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.25428207323} ...
09:09 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.91240044351} ...
09:09 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.91240044351} ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="24" name="test_pickle_by_solving[discretization17]" time="0.786228895187"><system-err>09:09 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.03096734347} ...
09:09 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.03096734347} ...
09:09 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.25428207323} ...
09:10 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.25428207323} ...
09:10 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.91240044351} ...
09:10 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, True, &apos;sin&apos;)_FV for {exponent: 1.91240044351} ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="24" name="test_pickle_by_solving[discretization18]" time="0.435732126236"><system-err>09:10 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, False, &apos;bump&apos;)_FV for {exponent: 1.30619346869} ...
09:10 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, False, &apos;bump&apos;)_FV for {exponent: 1.30619346869} ...
09:10 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, False, &apos;bump&apos;)_FV for {exponent: 1.35085641465} ...
09:10 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, False, &apos;bump&apos;)_FV for {exponent: 1.35085641465} ...
09:10 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, False, &apos;bump&apos;)_FV for {exponent: 1.4824800887} ...
09:10 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, False, &apos;bump&apos;)_FV for {exponent: 1.4824800887} ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="24" name="test_pickle_by_solving[discretization19]" time="0.755502939224"><system-err>09:10 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, False, &apos;bump&apos;)_FV for {exponent: 1.30619346869} ...
09:10 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, False, &apos;bump&apos;)_FV for {exponent: 1.30619346869} ...
09:11 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, False, &apos;bump&apos;)_FV for {exponent: 1.35085641465} ...
09:11 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, False, &apos;bump&apos;)_FV for {exponent: 1.35085641465} ...
09:11 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, False, &apos;bump&apos;)_FV for {exponent: 1.4824800887} ...
09:11 InstationaryDiscretization: Solving burgers_problem_2d(1.0, 1.0, False, &apos;bump&apos;)_FV for {exponent: 1.4824800887} ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="24" name="test_pickle_by_solving[discretization20]" time="0.0103659629822"><system-err>09:11 load_matrix: Loading matrix from file /src/src/pymortests/testdata/Systemmatrix1.mat
09:11 load_matrix: MATLAB file detected.
09:11 load_matrix: Loading matrix from file /src/src/pymortests/testdata/Systemmatrix2.mat
09:11 load_matrix: MATLAB file detected.
09:11 load_matrix: Loading matrix from file /src/src/pymortests/testdata/rhs1.mat
09:11 load_matrix: MATLAB file detected.
09:11 load_matrix: Loading matrix from file /src/src/pymortests/testdata/rhs2.mat
09:11 load_matrix: MATLAB file detected.
09:11 StationaryDiscretization: Solving StationaryDiscretization for {c1: 1.06193468694, c2: 3.25428207323, d: 4.73720133052} ...
09:11 StationaryDiscretization: Solving StationaryDiscretization for {c1: 1.06193468694, c2: 3.25428207323, d: 4.73720133052} ...
09:11 StationaryDiscretization: Solving StationaryDiscretization for {c1: 2.94034839562, c2: 3.24661977589, d: 4.09642224283} ...
09:11 StationaryDiscretization: Solving StationaryDiscretization for {c1: 2.94034839562, c2: 3.24661977589, d: 4.09642224283} ...
09:11 StationaryDiscretization: Solving StationaryDiscretization for {c1: 2.73285863839, c2: 3.63952184711, d: 3.37053094515} ...
09:11 StationaryDiscretization: Solving StationaryDiscretization for {c1: 2.73285863839, c2: 3.63952184711, d: 3.37053094515} ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="24" name="test_pickle_by_solving[discretization21]" time="0.0200173854828"><system-err>09:11 load_matrix: Loading matrix from file /src/src/pymortests/testdata/Systemmatrix1.mat
09:11 load_matrix: MATLAB file detected.
09:11 load_matrix: Loading matrix from file /src/src/pymortests/testdata/Systemmatrix2.mat
09:11 load_matrix: MATLAB file detected.
09:11 load_matrix: Loading matrix from file /src/src/pymortests/testdata/rhs1.mat
09:11 load_matrix: MATLAB file detected.
09:11 load_matrix: Loading matrix from file /src/src/pymortests/testdata/rhs2.mat
09:11 load_matrix: MATLAB file detected.
09:11 load_matrix: Loading matrix from file /src/src/pymortests/testdata/Massmatrix.mat
09:11 load_matrix: MATLAB file detected.
09:11 load_matrix: Loading matrix from file /src/src/pymortests/testdata/u0.mat
09:11 load_matrix: MATLAB file detected.
09:11 InstationaryDiscretization: Solving InstationaryDiscretization for {c1: 1.06193468694, c2: 3.25428207323, d: 4.73720133052} ...
09:11 InstationaryDiscretization: Solving InstationaryDiscretization for {c1: 1.06193468694, c2: 3.25428207323, d: 4.73720133052} ...
09:11 InstationaryDiscretization: Solving InstationaryDiscretization for {c1: 2.94034839562, c2: 3.24661977589, d: 4.09642224283} ...
09:11 InstationaryDiscretization: Solving InstationaryDiscretization for {c1: 2.94034839562, c2: 3.24661977589, d: 4.09642224283} ...
09:11 InstationaryDiscretization: Solving InstationaryDiscretization for {c1: 2.73285863839, c2: 3.63952184711, d: 3.37053094515} ...
09:11 InstationaryDiscretization: Solving InstationaryDiscretization for {c1: 2.73285863839, c2: 3.63952184711, d: 3.37053094515} ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="24" name="test_pickle_by_solving[discretization22]" time="0.0941290855408"><system-err>09:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:11 DiffusionOperatorP1: Determine global dofs ...
09:11 DiffusionOperatorP1: Boundary treatment ...
09:11 DiffusionOperatorP1: Assemble system matrix ...
09:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:11 DiffusionOperatorP1: Determine global dofs ...
09:11 DiffusionOperatorP1: Boundary treatment ...
09:11 DiffusionOperatorP1: Assemble system matrix ...
09:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:11 DiffusionOperatorP1: Determine global dofs ...
09:11 DiffusionOperatorP1: Boundary treatment ...
09:11 DiffusionOperatorP1: Assemble system matrix ...
09:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:11 DiffusionOperatorP1: Determine global dofs ...
09:11 DiffusionOperatorP1: Boundary treatment ...
09:11 DiffusionOperatorP1: Assemble system matrix ...
09:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:11 DiffusionOperatorP1: Determine global dofs ...
09:11 DiffusionOperatorP1: Boundary treatment ...
09:11 DiffusionOperatorP1: Assemble system matrix ...
09:11 L2ProductP1: Integrate the products of the shape functions on each element
09:11 L2ProductP1: Determine global dofs ...
09:11 L2ProductP1: Boundary treatment ...
09:11 L2ProductP1: Assemble system matrix ...
09:11 L2ProductP1: Integrate the products of the shape functions on each element
09:11 L2ProductP1: Determine global dofs ...
09:11 L2ProductP1: Boundary treatment ...
09:11 L2ProductP1: Assemble system matrix ...
09:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:11 DiffusionOperatorP1: Determine global dofs ...
09:11 DiffusionOperatorP1: Boundary treatment ...
09:11 DiffusionOperatorP1: Assemble system matrix ...
09:11 StationaryDiscretization: Solving ThermalBlock((1, 3))_CG for {diffusion: [0.403096734347, 0.425428207323, 0.491240044351]} ...
09:11 StationaryDiscretization: Solving ThermalBlock((1, 3))_CG for {diffusion: [0.403096734347, 0.425428207323, 0.491240044351]} ...
09:11 StationaryDiscretization: Solving ThermalBlock((1, 3))_CG for {diffusion: [0.497017419781, 0.424661977589, 0.469880741428]} ...
09:11 StationaryDiscretization: Solving ThermalBlock((1, 3))_CG for {diffusion: [0.497017419781, 0.424661977589, 0.469880741428]} ...
09:11 StationaryDiscretization: Solving ThermalBlock((1, 3))_CG for {diffusion: [0.48664293192, 0.463952184711, 0.445684364838]} ...
09:11 StationaryDiscretization: Solving ThermalBlock((1, 3))_CG for {diffusion: [0.48664293192, 0.463952184711, 0.445684364838]} ...
</system-err></testcase><testcase classname="src.pymortests.discretization" file="src/pymortests/discretization.py" line="24" name="test_pickle_by_solving[discretization23]" time="0.17286491394"><system-err>09:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:11 DiffusionOperatorP1: Determine global dofs ...
09:11 DiffusionOperatorP1: Boundary treatment ...
09:11 DiffusionOperatorP1: Assemble system matrix ...
09:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:11 DiffusionOperatorP1: Determine global dofs ...
09:11 DiffusionOperatorP1: Boundary treatment ...
09:11 DiffusionOperatorP1: Assemble system matrix ...
09:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:11 DiffusionOperatorP1: Determine global dofs ...
09:11 DiffusionOperatorP1: Boundary treatment ...
09:11 DiffusionOperatorP1: Assemble system matrix ...
09:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:11 DiffusionOperatorP1: Determine global dofs ...
09:11 DiffusionOperatorP1: Boundary treatment ...
09:11 DiffusionOperatorP1: Assemble system matrix ...
09:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:11 DiffusionOperatorP1: Determine global dofs ...
09:11 DiffusionOperatorP1: Boundary treatment ...
09:11 DiffusionOperatorP1: Assemble system matrix ...
09:11 L2ProductP1: Integrate the products of the shape functions on each element
09:11 L2ProductP1: Determine global dofs ...
09:11 L2ProductP1: Boundary treatment ...
09:11 L2ProductP1: Assemble system matrix ...
09:11 L2ProductP1: Integrate the products of the shape functions on each element
09:11 L2ProductP1: Determine global dofs ...
09:11 L2ProductP1: Boundary treatment ...
09:11 L2ProductP1: Assemble system matrix ...
09:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
09:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
09:11 DiffusionOperatorP1: Determine global dofs ...
09:11 DiffusionOperatorP1: Boundary treatment ...
09:11 DiffusionOperatorP1: Assemble system matrix ...
09:11 StationaryDiscretization: Solving ThermalBlock((1, 3))_CG for {diffusion: [0.403096734347, 0.425428207323, 0.491240044351]} ...
09:11 StationaryDiscretization: Solving ThermalBlock((1, 3))_CG for {diffusion: [0.403096734347, 0.425428207323, 0.491240044351]} ...
09:11 StationaryDiscretization: Solving ThermalBlock((1, 3))_CG for {diffusion: [0.497017419781, 0.424661977589, 0.469880741428]} ...
09:11 StationaryDiscretization: Solving ThermalBlock((1, 3))_CG for {diffusion: [0.497017419781, 0.424661977589, 0.469880741428]} ...
09:11 StationaryDiscretization: Solving ThermalBlock((1, 3))_CG for {diffusion: [0.48664293192, 0.463952184711, 0.445684364838]} ...
09:11 StationaryDiscretization: Solving ThermalBlock((1, 3))_CG for {diffusion: [0.48664293192, 0.463952184711, 0.445684364838]} ...
</system-err></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="29" name="test_evaluate[function0]" time="0.00148010253906"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="29" name="test_evaluate[function1]" time="0.00119280815125"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="29" name="test_evaluate[function2]" time="0.000908136367798"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="29" name="test_evaluate[function3]" time="0.000860929489136"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="29" name="test_evaluate[function4]" time="0.00117874145508"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="29" name="test_evaluate[function5]" time="0.000842809677124"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="29" name="test_evaluate[function6]" time="0.000837087631226"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="29" name="test_evaluate[function7]" time="0.000848054885864"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="29" name="test_evaluate[function8]" time="0.000799894332886"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="29" name="test_evaluate[function9]" time="0.000794887542725"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="29" name="test_evaluate[function10]" time="0.000884771347046"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="29" name="test_evaluate[function11]" time="0.000963926315308"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="38" name="test_lincomb_function" time="0.00949597358704"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="63" name="test_pickle[function0]" time="0.00111293792725"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="63" name="test_pickle[function1]" time="0.000968933105469"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="63" name="test_pickle[function2]" time="0.000986099243164"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="63" name="test_pickle[function3]" time="0.000925302505493"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="63" name="test_pickle[function4]" time="0.00127792358398"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="63" name="test_pickle[function5]" time="0.00131392478943"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="63" name="test_pickle[function6]" time="0.00105690956116"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="63" name="test_pickle[function7]" time="0.00127100944519"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="63" name="test_pickle[function8]" time="0.00096607208252"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="63" name="test_pickle[function9]" time="0.00107407569885"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="63" name="test_pickle[function10]" time="0.00115633010864"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="63" name="test_pickle[function11]" time="0.00123023986816"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="67" name="test_pickle_without_dumps_function[picklable_function0]" time="0.00227379798889"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="67" name="test_pickle_without_dumps_function[picklable_function1]" time="0.00101613998413"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="67" name="test_pickle_without_dumps_function[picklable_function2]" time="0.00100708007812"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="67" name="test_pickle_without_dumps_function[picklable_function3]" time="0.000952005386353"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="67" name="test_pickle_without_dumps_function[picklable_function4]" time="0.000980854034424"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="67" name="test_pickle_without_dumps_function[picklable_function5]" time="0.00128197669983"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="67" name="test_pickle_without_dumps_function[picklable_function6]" time="0.0011670589447"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="67" name="test_pickle_without_dumps_function[picklable_function7]" time="0.00149178504944"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="71" name="test_pickle_by_evaluation[function0]" time="0.0010039806366"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="71" name="test_pickle_by_evaluation[function1]" time="0.000957012176514"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="71" name="test_pickle_by_evaluation[function2]" time="0.00098991394043"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="71" name="test_pickle_by_evaluation[function3]" time="0.000998735427856"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="71" name="test_pickle_by_evaluation[function4]" time="0.00104188919067"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="71" name="test_pickle_by_evaluation[function5]" time="0.00129985809326"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="71" name="test_pickle_by_evaluation[function6]" time="0.00142478942871"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="71" name="test_pickle_by_evaluation[function7]" time="0.00122594833374"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="71" name="test_pickle_by_evaluation[function8]" time="0.000999212265015"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="71" name="test_pickle_by_evaluation[function9]" time="0.00107574462891"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="71" name="test_pickle_by_evaluation[function10]" time="0.00132513046265"></testcase><testcase classname="src.pymortests.function" file="src/pymortests/function.py" line="71" name="test_pickle_by_evaluation[function11]" time="0.00140714645386"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid0]" time="0.00161004066467"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid1]" time="0.00131583213806"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid2]" time="0.00136780738831"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid3]" time="0.00106239318848"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid4]" time="0.00109004974365"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid5]" time="0.00109505653381"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid6]" time="0.00108027458191"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid7]" time="0.00111985206604"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid8]" time="0.00137186050415"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid9]" time="0.00123572349548"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid10]" time="0.00125598907471"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid11]" time="0.00119423866272"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid12]" time="0.00121116638184"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid13]" time="0.00112128257751"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid14]" time="0.00153613090515"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid15]" time="0.00153851509094"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid16]" time="0.00128436088562"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid17]" time="0.00116586685181"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid18]" time="0.00114703178406"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid19]" time="0.00118088722229"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid20]" time="0.00122475624084"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid21]" time="0.00147676467896"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid22]" time="0.00165271759033"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid23]" time="0.00134682655334"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid24]" time="0.000879764556885"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid25]" time="0.000798940658569"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid26]" time="0.000809192657471"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid27]" time="0.000781297683716"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid28]" time="0.000861167907715"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid29]" time="0.00118207931519"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid30]" time="0.00129079818726"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid31]" time="0.00135684013367"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid32]" time="0.00128817558289"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid33]" time="0.00136208534241"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid34]" time="0.00141596794128"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid35]" time="0.00136494636536"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid36]" time="0.00174903869629"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid37]" time="0.00142884254456"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid38]" time="0.00141024589539"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid39]" time="0.00268077850342"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid40]" time="0.00297713279724"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid41]" time="0.00228476524353"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="31" name="test_dim[grid42]" time="0.000890731811523"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid0]" time="0.00165200233459"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid1]" time="0.00108289718628"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid2]" time="0.00137782096863"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid3]" time="0.00119018554688"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid4]" time="0.00123691558838"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid5]" time="0.00120091438293"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid6]" time="0.00117492675781"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid7]" time="0.00146389007568"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid8]" time="0.001140832901"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid9]" time="0.00130295753479"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid10]" time="0.00131011009216"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid11]" time="0.00127840042114"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid12]" time="0.00129508972168"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid13]" time="0.00122594833374"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid14]" time="0.00186014175415"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid15]" time="0.0012834072113"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid16]" time="0.001305103302"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid17]" time="0.00123524665833"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid18]" time="0.00128579139709"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid19]" time="0.00125169754028"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid20]" time="0.00125074386597"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid21]" time="0.00225400924683"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid22]" time="0.00147724151611"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid23]" time="0.00145697593689"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid24]" time="0.000919818878174"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid25]" time="0.000885009765625"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid26]" time="0.000859975814819"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid27]" time="0.000910997390747"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid28]" time="0.00114607810974"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid29]" time="0.00100994110107"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid30]" time="0.00139212608337"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid31]" time="0.00138783454895"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid32]" time="0.00135111808777"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid33]" time="0.00154995918274"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid34]" time="0.00155067443848"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid35]" time="0.0017192363739"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid36]" time="0.00150275230408"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid37]" time="0.00146269798279"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid38]" time="0.00148677825928"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid39]" time="0.00279808044434"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid40]" time="0.0032000541687"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid41]" time="0.0024778842926"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="37" name="test_size[grid42]" time="0.00114297866821"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid0]" time="0.00131869316101"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid1]" time="0.00118803977966"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid2]" time="0.00147700309753"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid3]" time="0.00134897232056"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid4]" time="0.00131821632385"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid5]" time="0.00165414810181"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid6]" time="0.00128889083862"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid7]" time="0.00125789642334"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid8]" time="0.00130081176758"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid9]" time="0.00136685371399"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid10]" time="0.00146818161011"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid11]" time="0.00139117240906"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid12]" time="0.00181698799133"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid13]" time="0.001384973526"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid14]" time="0.00174498558044"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid15]" time="0.00152993202209"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid16]" time="0.0015082359314"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid17]" time="0.00144100189209"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid18]" time="0.00139904022217"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid19]" time="0.0016770362854"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid20]" time="0.00136923789978"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid21]" time="0.00166916847229"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid22]" time="0.00159788131714"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid23]" time="0.00158405303955"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid24]" time="0.000967979431152"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid25]" time="0.000958681106567"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid26]" time="0.00125193595886"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid27]" time="0.000919818878174"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid28]" time="0.000941753387451"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid29]" time="0.00104331970215"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid30]" time="0.00676989555359"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid31]" time="0.00667214393616"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid32]" time="0.0068621635437"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid33]" time="0.00667977333069"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid34]" time="0.00665783882141"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid35]" time="0.00665092468262"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid36]" time="0.00745224952698"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid37]" time="0.0071849822998"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid38]" time="0.00687718391418"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid39]" time="0.0247390270233"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid40]" time="0.0222022533417"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid41]" time="0.0164630413055"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="47" name="test_subentities_wrong_arguments[grid42]" time="0.00169491767883"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid0]" time="0.00536918640137"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid1]" time="0.00564479827881"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid2]" time="0.0292990207672"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid3]" time="0.00620412826538"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid4]" time="0.00484085083008"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid5]" time="0.00471115112305"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid6]" time="0.00471711158752"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid7]" time="0.00462365150452"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid8]" time="0.00470018386841"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid9]" time="0.0204563140869"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid10]" time="0.0219449996948"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid11]" time="0.020857334137"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid12]" time="0.00655317306519"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid13]" time="0.00478911399841"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid14]" time="0.0731370449066"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid15]" time="0.00721645355225"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid16]" time="0.00513005256653"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid17]" time="0.00499582290649"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid18]" time="0.00482606887817"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid19]" time="0.00479602813721"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid20]" time="0.00487089157104"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid21]" time="0.0464649200439"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid22]" time="0.0477700233459"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid23]" time="0.0481507778168"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid24]" time="0.00343298912048"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid25]" time="0.00254130363464"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid26]" time="0.00236010551453"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid27]" time="0.00217509269714"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid28]" time="0.0021448135376"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid29]" time="0.0327858924866"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid30]" time="0.00653600692749"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid31]" time="0.00508093833923"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid32]" time="0.00488305091858"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid33]" time="0.00499391555786"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid34]" time="0.00511980056763"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid35]" time="0.00545024871826"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid36]" time="0.0059609413147"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid37]" time="0.00581121444702"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid38]" time="0.00553703308105"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid39]" time="0.031772851944"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid40]" time="0.0350849628448"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid41]" time="0.0177128314972"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="60" name="test_subentities_shape[grid42]" time="0.00643110275269"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid0]" time="0.00537896156311"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid1]" time="0.00406002998352"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid2]" time="0.0253956317902"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid3]" time="0.00637793540955"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid4]" time="0.00446486473083"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid5]" time="0.00458216667175"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid6]" time="0.00402045249939"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid7]" time="0.00415396690369"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid8]" time="0.00415277481079"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid9]" time="0.0191531181335"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid10]" time="0.020583152771"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid11]" time="0.02072930336"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid12]" time="0.00652694702148"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid13]" time="0.00569200515747"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid14]" time="0.0642974376678"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid15]" time="0.00635814666748"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid16]" time="0.00465512275696"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid17]" time="0.00451278686523"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid18]" time="0.00474381446838"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid19]" time="0.00435090065002"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid20]" time="0.00666403770447"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid21]" time="0.0729157924652"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid22]" time="0.0467171669006"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid23]" time="0.0467219352722"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid24]" time="0.00322508811951"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid25]" time="0.002681016922"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid26]" time="0.00217604637146"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid27]" time="0.00197100639343"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid28]" time="0.00189781188965"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid29]" time="0.0248782634735"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid30]" time="0.00601887702942"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid31]" time="0.00440692901611"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid32]" time="0.00440382957458"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid33]" time="0.00448203086853"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid34]" time="0.00444483757019"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid35]" time="0.00440406799316"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid36]" time="0.00539588928223"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid37]" time="0.00523614883423"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid38]" time="0.00519418716431"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid39]" time="0.025890827179"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid40]" time="0.0338592529297"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid41]" time="0.0179500579834"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="68" name="test_subentities_dtype[grid42]" time="0.00561094284058"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid0]" time="0.00566911697388"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid1]" time="0.00582385063171"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid2]" time="0.0275220870972"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid3]" time="0.00712251663208"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid4]" time="0.00583624839783"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid5]" time="0.00732588768005"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid6]" time="0.00553297996521"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid7]" time="0.00554394721985"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid8]" time="0.00887608528137"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid9]" time="0.0212595462799"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid10]" time="0.0225203037262"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid11]" time="0.0223958492279"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid12]" time="0.00738978385925"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid13]" time="0.0054247379303"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid14]" time="0.0683007240295"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid15]" time="0.00754976272583"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid16]" time="0.00612759590149"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid17]" time="0.00572609901428"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid18]" time="0.00555801391602"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid19]" time="0.00562906265259"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid20]" time="0.0056037902832"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid21]" time="0.0494680404663"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid22]" time="0.0521950721741"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid23]" time="0.0500099658966"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid24]" time="0.00385308265686"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid25]" time="0.00276184082031"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid26]" time="0.00271415710449"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid27]" time="0.00245904922485"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid28]" time="0.00284385681152"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid29]" time="0.0271282196045"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid30]" time="0.00727701187134"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid31]" time="0.00558400154114"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid32]" time="0.00549292564392"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid33]" time="0.00575089454651"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid34]" time="0.00572943687439"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid35]" time="0.00617527961731"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid36]" time="0.00681614875793"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid37]" time="0.00717163085938"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid38]" time="0.00671911239624"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid39]" time="0.0269620418549"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid40]" time="0.0244109630585"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid41]" time="0.0185260772705"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="75" name="test_subentities_entry_value_range[grid42]" time="0.00656986236572"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid0]" time="0.00552892684937"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid1]" time="0.00435495376587"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid2]" time="0.186679840088"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid3]" time="0.00716996192932"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid4]" time="0.00642895698547"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid5]" time="0.00558495521545"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid6]" time="0.00592708587646"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid7]" time="0.00456786155701"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid8]" time="0.00465393066406"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid9]" time="0.135567903519"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid10]" time="0.135544776917"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid11]" time="0.137403011322"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid12]" time="0.0124671459198"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid13]" time="0.00687313079834"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid14]" time="0.597054243088"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid15]" time="0.0093240737915"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid16]" time="0.00924205780029"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid17]" time="0.00933599472046"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid18]" time="0.0074577331543"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid19]" time="0.00537872314453"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid20]" time="0.00585293769836"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid21]" time="0.416218996048"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid22]" time="0.470251083374"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid23]" time="0.422781944275"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid24]" time="0.00400900840759"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid25]" time="0.00600075721741"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid26]" time="0.00603580474854"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid27]" time="0.00244379043579"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid28]" time="0.00241422653198"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid29]" time="0.388569116592"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid30]" time="0.00646209716797"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid31]" time="0.00519800186157"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid32]" time="0.00480008125305"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid33]" time="0.00506377220154"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid34]" time="0.00484395027161"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid35]" time="0.00488805770874"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid36]" time="0.0122520923615"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid37]" time="0.00987887382507"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid38]" time="0.00814127922058"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid39]" time="0.203844070435"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid40]" time="0.13697385788"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid41]" time="0.0819461345673"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="83" name="test_subentities_entry_values_unique[grid42]" time="0.0061469078064"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid0]" time="0.00481390953064"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid1]" time="0.00570297241211"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid2]" time="0.0263440608978"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid3]" time="0.00646615028381"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid4]" time="0.00489473342896"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid5]" time="0.00461292266846"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid6]" time="0.0044949054718"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid7]" time="0.0044858455658"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid8]" time="0.00504517555237"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid9]" time="0.0201456546783"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid10]" time="0.0220320224762"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid11]" time="0.0207917690277"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid12]" time="0.00661277770996"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid13]" time="0.00459098815918"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid14]" time="0.0633437633514"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid15]" time="0.00670599937439"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid16]" time="0.00543808937073"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid17]" time="0.00498795509338"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid18]" time="0.00481700897217"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid19]" time="0.00469398498535"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid20]" time="0.00487208366394"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid21]" time="0.0469329357147"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid22]" time="0.0483849048615"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid23]" time="0.0478489398956"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid24]" time="0.00362372398376"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid25]" time="0.0025680065155"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid26]" time="0.00255608558655"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid27]" time="0.0022919178009"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid28]" time="0.00260710716248"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid29]" time="0.0254712104797"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid30]" time="0.00630497932434"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid31]" time="0.00471210479736"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid32]" time="0.00471711158752"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid33]" time="0.00480508804321"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid34]" time="0.00481510162354"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid35]" time="0.00483012199402"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid36]" time="0.00577306747437"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid37]" time="0.00561499595642"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid38]" time="0.00528526306152"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid39]" time="0.0256316661835"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid40]" time="0.0256834030151"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid41]" time="0.0200419425964"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="92" name="test_subentities_codim_d_codim_d[grid42]" time="0.00600290298462"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid0]" time="0.00281476974487"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid1]" time="0.00223588943481"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid2]" time="0.0570678710938"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid3]" time="0.0041298866272"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid4]" time="0.0026330947876"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid5]" time="0.00242781639099"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid6]" time="0.00225806236267"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid7]" time="0.00232720375061"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid8]" time="0.00236535072327"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid9]" time="0.0416080951691"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid10]" time="0.0431151390076"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid11]" time="0.0424561500549"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid12]" time="0.00489711761475"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid13]" time="0.00259232521057"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid14]" time="0.174386978149"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid15]" time="0.00485706329346"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid16]" time="0.00330901145935"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid17]" time="0.0031259059906"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid18]" time="0.00293064117432"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid19]" time="0.00250792503357"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid20]" time="0.00273823738098"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid21]" time="0.116868972778"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid22]" time="0.12087893486"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid23]" time="0.119351863861"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid24]" time="0.00172185897827"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid25]" time="0.00102281570435"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid26]" time="0.000847101211548"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid27]" time="0.000781774520874"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid28]" time="0.000911951065063"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid29]" time="0.000918626785278"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid30]" time="0.00267601013184"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid31]" time="0.00283694267273"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid32]" time="0.00248503684998"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid33]" time="0.00264978408813"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid34]" time="0.00257015228271"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid35]" time="0.0025429725647"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid36]" time="0.00480723381042"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid37]" time="0.00380325317383"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid38]" time="0.00432634353638"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid39]" time="0.0568518638611"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid40]" time="0.0346350669861"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid41]" time="0.0206348896027"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="99" name="test_subentities_transitivity[grid42]" time="0.00342178344727"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid0]" time="0.0047709941864"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid1]" time="0.00491285324097"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid2]" time="0.00467205047607"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid3]" time="0.00449800491333"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid4]" time="0.00453591346741"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid5]" time="0.00445008277893"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid6]" time="0.00437116622925"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid7]" time="0.00444793701172"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid8]" time="0.00481510162354"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid9]" time="0.00454807281494"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid10]" time="0.0046169757843"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid11]" time="0.0046169757843"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid12]" time="0.00466585159302"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid13]" time="0.00523996353149"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid14]" time="0.00540089607239"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid15]" time="0.00456690788269"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid16]" time="0.00452518463135"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid17]" time="0.00460386276245"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid18]" time="0.00460720062256"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid19]" time="0.00475931167603"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid20]" time="0.00528788566589"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid21]" time="0.00532293319702"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid22]" time="0.00532817840576"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid23]" time="0.00480604171753"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid24]" time="0.00356197357178"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid25]" time="0.00345277786255"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid26]" time="0.00339388847351"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid27]" time="0.00334930419922"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid28]" time="0.00372815132141"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid29]" time="0.00357675552368"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid30]" time="0.00476598739624"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid31]" time="0.0046443939209"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid32]" time="0.00500702857971"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid33]" time="0.00562620162964"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid34]" time="0.00539422035217"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid35]" time="0.00480484962463"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid36]" time="0.00501489639282"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid37]" time="0.00503206253052"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid38]" time="0.00488114356995"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid39]" time="0.00624871253967"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid40]" time="0.00657677650452"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid41]" time="0.00623393058777"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="113" name="test_superentities_wrong_arguments[grid42]" time="0.00424194335938"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid0]" time="0.00451898574829"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid1]" time="0.00427293777466"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid2]" time="0.0132238864899"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid3]" time="0.00441884994507"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid4]" time="0.00483512878418"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid5]" time="0.00441384315491"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid6]" time="0.00436902046204"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid7]" time="0.00456833839417"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid8]" time="0.00442242622375"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid9]" time="0.0107810497284"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid10]" time="0.0109221935272"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid11]" time="0.0109679698944"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid12]" time="0.00486612319946"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid13]" time="0.00441527366638"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid14]" time="0.0312280654907"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid15]" time="0.00611019134521"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid16]" time="0.00456213951111"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid17]" time="0.00495004653931"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid18]" time="0.0044150352478"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid19]" time="0.004469871521"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid20]" time="0.00441408157349"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid21]" time="0.0232117176056"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid22]" time="0.0243618488312"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid23]" time="0.0245971679688"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid24]" time="0.00328803062439"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid25]" time="0.00241208076477"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid26]" time="0.00184202194214"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid27]" time="0.00184178352356"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid28]" time="0.00188088417053"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid29]" time="0.00223064422607"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid30]" time="0.00455594062805"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid31]" time="0.00539016723633"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid32]" time="0.00468325614929"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid33]" time="0.00455188751221"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid34]" time="0.00454211235046"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid35]" time="0.00454902648926"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid36]" time="0.00515198707581"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid37]" time="0.00572609901428"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid38]" time="0.00486397743225"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid39]" time="0.014711856842"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid40]" time="0.0147578716278"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid41]" time="0.0109560489655"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="128" name="test_superentities_shape[grid42]" time="0.00555086135864"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid0]" time="0.00338292121887"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid1]" time="0.00345683097839"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid2]" time="0.0121400356293"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid3]" time="0.00347995758057"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid4]" time="0.0034008026123"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid5]" time="0.00330114364624"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid6]" time="0.00327706336975"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid7]" time="0.00353384017944"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid8]" time="0.00318002700806"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid9]" time="0.00950384140015"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid10]" time="0.00982904434204"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid11]" time="0.0107741355896"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid12]" time="0.00381803512573"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid13]" time="0.00324368476868"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid14]" time="0.0301599502563"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid15]" time="0.00507116317749"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid16]" time="0.0035343170166"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid17]" time="0.00347495079041"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid18]" time="0.00356006622314"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid19]" time="0.00351691246033"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid20]" time="0.00392389297485"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid21]" time="0.0220737457275"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid22]" time="0.0239222049713"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid23]" time="0.0235521793365"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid24]" time="0.00214099884033"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid25]" time="0.0015721321106"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid26]" time="0.00137376785278"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid27]" time="0.001629114151"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid28]" time="0.0013108253479"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid29]" time="0.00170111656189"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid30]" time="0.00339388847351"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid31]" time="0.00333023071289"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid32]" time="0.00339794158936"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid33]" time="0.00392603874207"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid34]" time="0.00356411933899"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid35]" time="0.00346994400024"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid36]" time="0.00393795967102"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid37]" time="0.00375890731812"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid38]" time="0.00370502471924"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid39]" time="0.012934923172"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid40]" time="0.0119326114655"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid41]" time="0.00831389427185"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="138" name="test_superentities_dtype[grid42]" time="0.00310087203979"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid0]" time="0.00432991981506"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid1]" time="0.00406289100647"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid2]" time="0.013463973999"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid3]" time="0.00466632843018"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid4]" time="0.00410461425781"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid5]" time="0.00421500205994"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid6]" time="0.00401091575623"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid7]" time="0.00419306755066"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid8]" time="0.00412511825562"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid9]" time="0.0107898712158"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid10]" time="0.0115411281586"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid11]" time="0.0123097896576"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid12]" time="0.00574588775635"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid13]" time="0.00422096252441"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid14]" time="0.0323085784912"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid15]" time="0.00595498085022"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid16]" time="0.00479793548584"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid17]" time="0.00443816184998"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid18]" time="0.00427293777466"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid19]" time="0.00426506996155"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid20]" time="0.00420522689819"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid21]" time="0.0252180099487"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid22]" time="0.0255529880524"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid23]" time="0.0311517715454"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid24]" time="0.00251913070679"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid25]" time="0.0018458366394"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid26]" time="0.0015549659729"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid27]" time="0.00164985656738"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid28]" time="0.00153112411499"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid29]" time="0.00254607200623"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid30]" time="0.00453686714172"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid31]" time="0.00421500205994"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid32]" time="0.00411605834961"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid33]" time="0.0043671131134"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid34]" time="0.00439500808716"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid35]" time="0.00442290306091"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid36]" time="0.00515198707581"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid37]" time="0.00483894348145"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid38]" time="0.00472402572632"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid39]" time="0.0150380134583"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid40]" time="0.0138559341431"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid41]" time="0.0113768577576"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="145" name="test_superentities_entry_value_range[grid42]" time="0.00514888763428"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid0]" time="0.00447916984558"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid1]" time="0.00332903862"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid2]" time="0.0965280532837"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid3]" time="0.00556492805481"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid4]" time="0.00406718254089"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid5]" time="0.00382590293884"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid6]" time="0.00397801399231"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid7]" time="0.00369215011597"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid8]" time="0.00351977348328"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid9]" time="0.0692229270935"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid10]" time="0.0716779232025"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid11]" time="0.0698804855347"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid12]" time="0.00657629966736"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid13]" time="0.00406169891357"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid14]" time="0.237897872925"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid15]" time="0.00642800331116"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid16]" time="0.00474095344543"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid17]" time="0.00611305236816"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid18]" time="0.00385904312134"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid19]" time="0.00425601005554"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid20]" time="0.00419402122498"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid21]" time="0.167302846909"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid22]" time="0.169965028763"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid23]" time="0.171843290329"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid24]" time="0.00247097015381"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid25]" time="0.00276398658752"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid26]" time="0.00309491157532"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid27]" time="0.00148224830627"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid28]" time="0.0014431476593"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid29]" time="0.127832889557"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid30]" time="0.00531077384949"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid31]" time="0.00370812416077"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid32]" time="0.00366687774658"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid33]" time="0.00411009788513"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid34]" time="0.00393080711365"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid35]" time="0.00366401672363"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid36]" time="0.00775933265686"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid37]" time="0.00676894187927"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid38]" time="0.00567007064819"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid39]" time="0.0827467441559"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid40]" time="0.070522069931"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid41]" time="0.0497460365295"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="153" name="test_superentities_entry_values_unique[grid42]" time="0.00496101379395"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid0]" time="0.00540900230408"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid1]" time="0.00325083732605"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid2]" time="0.0503287315369"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid3]" time="0.00610208511353"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid4]" time="0.00476813316345"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid5]" time="0.00336003303528"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid6]" time="0.00338912010193"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid7]" time="0.00355935096741"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid8]" time="0.00315594673157"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid9]" time="0.0323171615601"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid10]" time="0.0304622650146"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid11]" time="0.0218360424042"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid12]" time="0.00815677642822"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid13]" time="0.00410318374634"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid14]" time="0.254405975342"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid15]" time="0.00689125061035"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid16]" time="0.00684785842896"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid17]" time="0.00462484359741"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid18]" time="0.00406098365784"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid19]" time="0.00377082824707"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid20]" time="0.00400185585022"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid21]" time="0.173804759979"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid22]" time="0.18190407753"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid23]" time="0.165219068527"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid24]" time="0.00261831283569"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid25]" time="0.00187206268311"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid26]" time="0.00148224830627"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid27]" time="0.00147771835327"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid28]" time="0.00131583213806"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid29]" time="0.0183973312378"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid30]" time="0.00514197349548"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid31]" time="0.00362706184387"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid32]" time="0.0033700466156"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid33]" time="0.00425624847412"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid34]" time="0.00408124923706"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid35]" time="0.00351810455322"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid36]" time="0.0093982219696"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid37]" time="0.0129079818726"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid38]" time="0.0109000205994"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid39]" time="0.106645107269"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid40]" time="0.19267821312"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid41]" time="0.160663127899"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="162" name="test_superentities_entries_sorted[grid42]" time="0.00594401359558"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid0]" time="0.00607895851135"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid1]" time="0.00586318969727"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid2]" time="0.0272762775421"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid3]" time="0.00765204429626"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid4]" time="0.00610494613647"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid5]" time="0.00598573684692"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid6]" time="0.00625681877136"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid7]" time="0.00596475601196"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid8]" time="0.00623893737793"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid9]" time="0.0214412212372"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid10]" time="0.0226490497589"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid11]" time="0.0226421356201"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid12]" time="0.00848770141602"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid13]" time="0.0061252117157"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid14]" time="0.0646507740021"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid15]" time="0.0080668926239"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid16]" time="0.00646495819092"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid17]" time="0.00631403923035"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid18]" time="0.00608897209167"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid19]" time="0.00668406486511"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid20]" time="0.00618410110474"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid21]" time="0.04842710495"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid22]" time="0.0491459369659"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid23]" time="0.0491530895233"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid24]" time="0.00486087799072"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid25]" time="0.00355219841003"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid26]" time="0.00391411781311"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid27]" time="0.00326299667358"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid28]" time="0.00329995155334"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid29]" time="0.0272703170776"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid30]" time="0.00777792930603"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid31]" time="0.00639414787292"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid32]" time="0.0067150592804"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid33]" time="0.00631713867188"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid34]" time="0.00643682479858"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid35]" time="0.00629591941833"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid36]" time="0.00719094276428"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid37]" time="0.00725293159485"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid38]" time="0.00684213638306"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid39]" time="0.0275781154633"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid40]" time="0.02485704422"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid41]" time="0.0180230140686"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="175" name="test_superentities_codim_d_codim_d[grid42]" time="0.00735378265381"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid0]" time="0.00451993942261"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid1]" time="0.00358700752258"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid2]" time="0.167302370071"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid3]" time="0.00632262229919"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid4]" time="0.00478291511536"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid5]" time="0.00430202484131"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid6]" time="0.00377011299133"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid7]" time="0.00383710861206"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid8]" time="0.00382828712463"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid9]" time="0.120126247406"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid10]" time="0.120513916016"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid11]" time="0.145486116409"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid12]" time="0.00835299491882"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid13]" time="0.00397300720215"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid14]" time="0.552443027496"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid15]" time="0.00871205329895"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid16]" time="0.00627589225769"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid17]" time="0.00598692893982"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid18]" time="0.00426316261292"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid19]" time="0.00422263145447"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid20]" time="0.00481581687927"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid21]" time="0.359101772308"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid22]" time="0.356632232666"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid23]" time="0.356422185898"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid24]" time="0.00251221656799"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid25]" time="0.00316786766052"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid26]" time="0.0029239654541"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid27]" time="0.00152897834778"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid28]" time="0.00154519081116"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid29]" time="0.153100013733"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid30]" time="0.00552105903625"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid31]" time="0.0038731098175"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid32]" time="0.00383114814758"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid33]" time="0.00405859947205"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid34]" time="0.00396108627319"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid35]" time="0.00385308265686"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid36]" time="0.0103461742401"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid37]" time="0.00818490982056"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid38]" time="0.00641083717346"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid39]" time="0.169673681259"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid40]" time="0.121697902679"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid41]" time="0.0765480995178"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="182" name="test_superentities_each_entry_superentity[grid42]" time="0.00568604469299"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid0]" time="0.00453186035156"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid1]" time="0.00368499755859"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid2]" time="0.169780015945"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid3]" time="0.00614809989929"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid4]" time="0.00445103645325"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid5]" time="0.00431990623474"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid6]" time="0.00414180755615"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid7]" time="0.00378394126892"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid8]" time="0.0038800239563"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid9]" time="0.118494033813"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid10]" time="0.128133773804"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid11]" time="0.121748924255"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid12]" time="0.00852799415588"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid13]" time="0.00397133827209"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid14]" time="0.48361492157"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid15]" time="0.00798010826111"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid16]" time="0.00619578361511"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid17]" time="0.00599765777588"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid18]" time="0.0043261051178"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid19]" time="0.00464272499084"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid20]" time="0.00475096702576"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid21]" time="0.354936122894"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid22]" time="0.356343984604"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid23]" time="0.360585212708"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid24]" time="0.00256705284119"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid25]" time="0.00319910049438"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid26]" time="0.00299119949341"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid27]" time="0.00146698951721"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid28]" time="0.00144600868225"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid29]" time="0.152438402176"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid30]" time="0.00553488731384"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid31]" time="0.00377583503723"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid32]" time="0.00417399406433"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid33]" time="0.00410676002502"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid34]" time="0.00403118133545"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid35]" time="0.00390005111694"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid36]" time="0.0100860595703"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid37]" time="0.00818276405334"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid38]" time="0.00596809387207"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid39]" time="0.165542125702"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid40]" time="0.102472066879"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid41]" time="0.0583479404449"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="194" name="test_superentities_each_superentity_has_entry[grid42]" time="0.00519204139709"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid0]" time="0.00465631484985"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid1]" time="0.00452303886414"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid2]" time="0.00601696968079"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid3]" time="0.00447297096252"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid4]" time="0.0045690536499"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid5]" time="0.00456023216248"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid6]" time="0.00455093383789"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid7]" time="0.00445961952209"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid8]" time="0.00447201728821"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid9]" time="0.00489664077759"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid10]" time="0.00470662117004"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid11]" time="0.00454807281494"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid12]" time="0.00459599494934"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid13]" time="0.00447297096252"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid14]" time="0.00498080253601"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid15]" time="0.00513696670532"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid16]" time="0.00455236434937"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid17]" time="0.00474524497986"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid18]" time="0.00473809242249"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid19]" time="0.00467205047607"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid20]" time="0.00460314750671"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid21]" time="0.00493192672729"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid22]" time="0.00517201423645"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid23]" time="0.0048623085022"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid24]" time="0.00350642204285"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid25]" time="0.00347685813904"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid26]" time="0.0046079158783"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid27]" time="0.00358104705811"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid28]" time="0.00335192680359"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid29]" time="0.00383043289185"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid30]" time="0.00472712516785"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid31]" time="0.00456714630127"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid32]" time="0.00471997261047"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid33]" time="0.00474977493286"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid34]" time="0.00486207008362"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid35]" time="0.00514817237854"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid36]" time="0.00480508804321"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid37]" time="0.00490474700928"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid38]" time="0.00818490982056"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid39]" time="0.00622987747192"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid40]" time="0.00653386116028"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid41]" time="0.00582599639893"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="206" name="test_superentity_indices_wrong_arguments[grid42]" time="0.00462770462036"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid0]" time="0.00423836708069"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid1]" time="0.00388193130493"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid2]" time="0.0131349563599"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid3]" time="0.00562596321106"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid4]" time="0.00421619415283"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid5]" time="0.00443696975708"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid6]" time="0.00396108627319"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid7]" time="0.00395274162292"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid8]" time="0.00392007827759"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid9]" time="0.0103280544281"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid10]" time="0.0105547904968"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid11]" time="0.0105221271515"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid12]" time="0.00621104240417"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid13]" time="0.00426435470581"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid14]" time="0.0319120883942"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid15]" time="0.00668096542358"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid16]" time="0.00459384918213"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid17]" time="0.00441217422485"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid18]" time="0.00419688224792"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid19]" time="0.00422787666321"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid20]" time="0.00421714782715"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid21]" time="0.022833108902"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid22]" time="0.0244221687317"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid23]" time="0.0243592262268"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid24]" time="0.00257110595703"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid25]" time="0.00237083435059"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid26]" time="0.00172662734985"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid27]" time="0.00164008140564"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid28]" time="0.00222897529602"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid29]" time="0.00203585624695"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid30]" time="0.00451707839966"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid31]" time="0.00427794456482"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid32]" time="0.00450301170349"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid33]" time="0.00428009033203"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid34]" time="0.00432682037354"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid35]" time="0.00428676605225"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid36]" time="0.00478506088257"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid37]" time="0.00462794303894"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid38]" time="0.00448989868164"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid39]" time="0.0150096416473"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid40]" time="0.0125188827515"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid41]" time="0.0111598968506"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="221" name="test_superentity_indices_shape[grid42]" time="0.00511908531189"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid0]" time="0.0033700466156"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid1]" time="0.00312519073486"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid2]" time="0.0125710964203"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid3]" time="0.00459289550781"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid4]" time="0.00324320793152"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid5]" time="0.00318813323975"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid6]" time="0.00311994552612"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid7]" time="0.00316596031189"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid8]" time="0.00320482254028"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid9]" time="0.00988698005676"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid10]" time="0.00976896286011"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid11]" time="0.00950074195862"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid12]" time="0.00367307662964"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid13]" time="0.00333404541016"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid14]" time="0.0295262336731"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid15]" time="0.00563788414001"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid16]" time="0.00356292724609"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid17]" time="0.00359582901001"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid18]" time="0.00339317321777"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid19]" time="0.00338888168335"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid20]" time="0.0034441947937"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid21]" time="0.0224249362946"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid22]" time="0.0235249996185"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid23]" time="0.0231420993805"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid24]" time="0.00214695930481"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid25]" time="0.00157284736633"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid26]" time="0.00133085250854"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid27]" time="0.00132012367249"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid28]" time="0.00128698348999"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid29]" time="0.00203680992126"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid30]" time="0.00335502624512"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid31]" time="0.00327301025391"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid32]" time="0.00335907936096"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid33]" time="0.00343608856201"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid34]" time="0.00348520278931"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid35]" time="0.00342106819153"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid36]" time="0.00395512580872"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid37]" time="0.00382018089294"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid38]" time="0.00370216369629"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid39]" time="0.0131189823151"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid40]" time="0.0118079185486"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid41]" time="0.00841593742371"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="228" name="test_superentity_indices_dtype[grid42]" time="0.00348377227783"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid0]" time="0.00505542755127"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid1]" time="0.00455904006958"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid2]" time="0.108960866928"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid3]" time="0.00694704055786"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid4]" time="0.00506997108459"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid5]" time="0.00816297531128"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid6]" time="0.00454497337341"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid7]" time="0.00462293624878"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid8]" time="0.00454688072205"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid9]" time="0.0805430412292"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid10]" time="0.0790731906891"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid11]" time="0.0788292884827"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid12]" time="0.00849509239197"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid13]" time="0.00480580329895"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid14]" time="0.355320930481"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid15]" time="0.00799322128296"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid16]" time="0.00635814666748"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid17]" time="0.00629281997681"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid18]" time="0.00498270988464"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid19]" time="0.00484418869019"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid20]" time="0.00525784492493"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid21]" time="0.249568939209"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid22]" time="0.24426817894"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid23]" time="0.246328830719"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid24]" time="0.00302410125732"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid25]" time="0.00322580337524"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid26]" time="0.0025680065155"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid27]" time="0.00195384025574"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid28]" time="0.00175809860229"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid29]" time="0.0887441635132"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid30]" time="0.00627493858337"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid31]" time="0.0046591758728"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid32]" time="0.00569081306458"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid33]" time="0.00484991073608"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid34]" time="0.00476384162903"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid35]" time="0.00465703010559"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid36]" time="0.00897669792175"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid37]" time="0.00779104232788"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid38]" time="0.00642013549805"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid39]" time="0.11788392067"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid40]" time="0.096578836441"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid41]" time="0.0618212223053"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="235" name="test_superentity_indices_valid_entries[grid42]" time="0.0059506893158"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid0]" time="0.0103101730347"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid1]" time="0.0104579925537"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid2]" time="0.0103731155396"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid3]" time="0.0101010799408"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid4]" time="0.0105359554291"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid5]" time="0.0101590156555"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid6]" time="0.0105731487274"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid7]" time="0.0121691226959"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid8]" time="0.0116908550262"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid9]" time="0.0119550228119"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid10]" time="0.0118668079376"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid11]" time="0.0123090744019"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid12]" time="0.0120179653168"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid13]" time="0.0118470191956"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid14]" time="0.0122439861298"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid15]" time="0.0120370388031"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid16]" time="0.0125257968903"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid17]" time="0.0119380950928"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid18]" time="0.0117740631104"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid19]" time="0.0119657516479"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid20]" time="0.0124001502991"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid21]" time="0.0124590396881"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid22]" time="0.0120670795441"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid23]" time="0.012256860733"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid24]" time="0.00706672668457"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid25]" time="0.00556898117065"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid26]" time="0.00528264045715"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid27]" time="0.00576019287109"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid28]" time="0.00549125671387"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid29]" time="0.00543594360352"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid30]" time="0.0102858543396"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid31]" time="0.0117030143738"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid32]" time="0.0104682445526"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid33]" time="0.0139219760895"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid34]" time="0.0125720500946"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid35]" time="0.0122668743134"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid36]" time="0.0119550228119"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid37]" time="0.0121808052063"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid38]" time="0.0122950077057"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid39]" time="0.0131621360779"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid40]" time="0.0141010284424"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid41]" time="0.0130460262299"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="247" name="test_neighbours_wrong_arguments[grid42]" time="0.0114121437073"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid0]" time="0.0258259773254"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid1]" time="0.0157151222229"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid2]" time="2.19993591309"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid3]" time="0.0254018306732"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid4]" time="0.0259189605713"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid5]" time="0.0242969989777"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid6]" time="0.0172688961029"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid7]" time="0.0173311233521"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid8]" time="0.0195999145508"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid9]" time="1.55371904373"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid10]" time="1.55799388885"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid11]" time="1.57483386993"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid12]" time="0.0599958896637"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid13]" time="0.018923997879"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid14]" time="9.90450716019"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid15]" time="0.0600879192352"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid16]" time="0.0599818229675"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid17]" time="0.0610790252686"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid18]" time="0.0236079692841"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid19]" time="0.0262589454651"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid20]" time="0.0374529361725"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid21]" time="7.10431885719"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid22]" time="7.3290989399"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid23]" time="6.94518136978"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid24]" time="0.0102376937866"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid25]" time="0.0178871154785"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid26]" time="0.0179750919342"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid27]" time="0.00765109062195"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid28]" time="0.00587391853333"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid29]" time="1.1288151741"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid30]" time="0.0155670642853"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid31]" time="0.015777349472"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid32]" time="0.0156180858612"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid33]" time="0.0187680721283"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid34]" time="0.0165038108826"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid35]" time="0.0153303146362"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid36]" time="0.0936212539673"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid37]" time="0.0604391098022"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid38]" time="0.0387568473816"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid39]" time="3.16793584824"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid40]" time="1.86603069305"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid41]" time="0.931903123856"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="269" name="test_neighbours_shape[grid42]" time="0.0177431106567"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid0]" time="0.0231909751892"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid1]" time="0.0135130882263"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid2]" time="2.10585093498"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid3]" time="0.0223610401154"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid4]" time="0.023120880127"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid5]" time="0.0217697620392"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid6]" time="0.0146598815918"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid7]" time="0.0154168605804"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid8]" time="0.0167288780212"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid9]" time="1.5207722187"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid10]" time="1.54487419128"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid11]" time="1.51389074326"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid12]" time="0.0565578937531"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid13]" time="0.016517162323"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid14]" time="9.70759010315"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid15]" time="0.0556747913361"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid16]" time="0.0561830997467"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid17]" time="0.0549511909485"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid18]" time="0.0207049846649"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid19]" time="0.0207648277283"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid20]" time="0.0335001945496"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid21]" time="6.79022693634"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid22]" time="6.76001000404"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid23]" time="6.71576404572"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid24]" time="0.00656795501709"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid25]" time="0.0151510238647"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid26]" time="0.0157957077026"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid27]" time="0.00648188591003"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid28]" time="0.00515413284302"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid29]" time="1.11026191711"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid30]" time="0.0130639076233"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid31]" time="0.0132052898407"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid32]" time="0.0130317211151"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid33]" time="0.0165784358978"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid34]" time="0.0140149593353"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid35]" time="0.0128448009491"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid36]" time="0.0917439460754"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid37]" time="0.0585551261902"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid38]" time="0.0352687835693"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid39]" time="3.08418893814"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid40]" time="1.76590871811"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid41]" time="0.876916885376"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="277" name="test_neighbours_dtype[grid42]" time="0.0148003101349"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid0]" time="0.026792049408"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid1]" time="0.0165810585022"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid2]" time="2.07994675636"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid3]" time="0.0262250900269"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid4]" time="0.0282762050629"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid5]" time="0.0250589847565"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid6]" time="0.01797914505"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid7]" time="0.0179278850555"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid8]" time="0.0215747356415"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid9]" time="1.4955227375"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid10]" time="1.90366077423"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid11]" time="1.48471403122"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid12]" time="0.0604557991028"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid13]" time="0.0199408531189"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid14]" time="9.51294779778"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid15]" time="0.0601444244385"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid16]" time="0.0607941150665"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid17]" time="0.0602571964264"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid18]" time="0.0244519710541"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid19]" time="0.0243058204651"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid20]" time="0.0379409790039"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid21]" time="6.82657170296"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid22]" time="6.76194691658"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid23]" time="6.82162308693"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid24]" time="0.00797581672668"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid25]" time="0.0167109966278"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid26]" time="0.0183317661285"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid27]" time="0.00822305679321"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid28]" time="0.00649499893188"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid29]" time="1.11982417107"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid30]" time="0.0173661708832"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid31]" time="0.0172729492188"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid32]" time="0.0172159671783"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid33]" time="0.0211176872253"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid34]" time="0.0184161663055"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid35]" time="0.0170838832855"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid36]" time="0.0982739925385"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid37]" time="0.0639431476593"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid38]" time="0.040141582489"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid39]" time="3.11787605286"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid40]" time="1.84867143631"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid41]" time="0.896928310394"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="284" name="test_neighbours_entry_value_range[grid42]" time="0.0188150405884"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid0]" time="0.0258820056915"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid1]" time="0.0134677886963"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid2]" time="2.41740584373"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid3]" time="0.0240170955658"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid4]" time="0.0247669219971"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid5]" time="0.023647069931"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid6]" time="0.0152218341827"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid7]" time="0.0152907371521"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid8]" time="0.0185618400574"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid9]" time="1.73558783531"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid10]" time="1.7236828804"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid11]" time="1.71717619896"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid12]" time="0.0625288486481"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid13]" time="0.0174446105957"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid14]" time="10.5578291416"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid15]" time="0.0620801448822"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid16]" time="0.0627543926239"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid17]" time="0.0619959831238"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid18]" time="0.0224769115448"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid19]" time="0.0221617221832"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid20]" time="0.0375490188599"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid21]" time="7.53696680069"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid22]" time="7.51121211052"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid23]" time="7.52343702316"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid24]" time="0.00725102424622"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid25]" time="0.0197911262512"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid26]" time="0.0212786197662"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid27]" time="0.00737166404724"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid28]" time="0.00555300712585"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid29]" time="1.55856585503"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid30]" time="0.0141577720642"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid31]" time="0.0135939121246"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid32]" time="0.0122063159943"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid33]" time="0.0172727108002"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid34]" time="0.0149919986725"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid35]" time="0.0132880210876"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid36]" time="0.105435848236"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid37]" time="0.0670871734619"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid38]" time="0.0405797958374"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid39]" time="3.46735668182"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid40]" time="2.07572412491"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid41]" time="1.0643017292"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="292" name="test_neighbours_entry_values_unique[grid42]" time="0.0161428451538"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid0]" time="0.0297241210938"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid1]" time="0.0159862041473"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid2]" time="2.9764289856"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid3]" time="0.0285398960114"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid4]" time="0.032261133194"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid5]" time="0.0277938842773"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid6]" time="0.017834186554"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid7]" time="0.0177462100983"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid8]" time="0.0210330486298"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid9]" time="2.12900280952"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid10]" time="2.62811303139"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid11]" time="2.65198016167"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid12]" time="0.0820443630219"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid13]" time="0.022038936615"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid14]" time="14.919836998"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid15]" time="0.0789391994476"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid16]" time="0.0779662132263"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid17]" time="0.0777978897095"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid18]" time="0.0263991355896"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid19]" time="0.0255908966064"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid20]" time="0.0447101593018"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid21]" time="11.7501108646"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid22]" time="10.1463701725"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid23]" time="9.94189596176"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid24]" time="0.00786590576172"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid25]" time="0.0201721191406"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid26]" time="0.0221471786499"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid27]" time="0.00767493247986"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid28]" time="0.00664591789246"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid29]" time="1.5074338913"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid30]" time="0.0162010192871"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid31]" time="0.0159339904785"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid32]" time="0.0159027576447"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid33]" time="0.0204749107361"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid34]" time="0.0179669857025"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid35]" time="0.0158748626709"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid36]" time="0.128218173981"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid37]" time="0.0785691738129"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid38]" time="0.0472462177277"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid39]" time="4.48643279076"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid40]" time="2.56517362595"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid41]" time="1.25311398506"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="301" name="test_neighbours_each_entry_neighbour[grid42]" time="0.0187962055206"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid0]" time="0.0348460674286"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid1]" time="0.0199980735779"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid2]" time="3.45400714874"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid3]" time="0.0337991714478"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid4]" time="0.0415337085724"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid5]" time="0.0334141254425"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid6]" time="0.0208511352539"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid7]" time="0.0207381248474"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid8]" time="0.0254020690918"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid9]" time="2.48369312286"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid10]" time="2.46745634079"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid11]" time="2.4436621666"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid12]" time="0.0919778347015"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid13]" time="0.0234670639038"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid14]" time="15.9841399193"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid15]" time="0.0911140441895"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid16]" time="0.0905208587646"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid17]" time="0.0894370079041"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid18]" time="0.0308978557587"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid19]" time="0.0304951667786"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid20]" time="0.0531046390533"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid21]" time="11.4397060871"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid22]" time="11.3515729904"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid23]" time="11.341550827"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid24]" time="0.00944018363953"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid25]" time="0.0253911018372"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid26]" time="0.0253930091858"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid27]" time="0.00908708572388"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid28]" time="0.00978684425354"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid29]" time="1.78578782082"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid30]" time="0.0191028118134"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid31]" time="0.0186519622803"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid32]" time="0.0184648036957"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid33]" time="0.0236692428589"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid34]" time="0.0205218791962"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid35]" time="0.0180580615997"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid36]" time="0.146051168442"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid37]" time="0.0964071750641"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid38]" time="0.0550570487976"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid39]" time="5.19975185394"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid40]" time="3.13914275169"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid41]" time="1.65886211395"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="317" name="test_neighbours_each_neighbour_has_entry[grid42]" time="0.021607875824"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid0]" time="0.0104832649231"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid1]" time="0.00606298446655"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid2]" time="0.847962141037"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid3]" time="0.010143995285"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid4]" time="0.0105328559875"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid5]" time="0.00829291343689"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid6]" time="0.00534892082214"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid7]" time="0.00533509254456"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid8]" time="0.00636005401611"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid9]" time="0.602079153061"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid10]" time="0.607068061829"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid11]" time="0.602734088898"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid12]" time="0.0263528823853"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid13]" time="0.00765013694763"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid14]" time="4.30022501945"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid15]" time="0.0263822078705"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid16]" time="0.0262460708618"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid17]" time="0.0267691612244"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid18]" time="0.00974225997925"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid19]" time="0.00964593887329"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid20]" time="0.0147359371185"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid21]" time="3.09193658829"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid22]" time="3.08296394348"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid23]" time="3.09644293785"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid24]" time="0.00398278236389"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid25]" time="0.00793313980103"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid26]" time="0.00774192810059"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid27]" time="0.00259184837341"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid28]" time="0.00253701210022"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid29]" time="0.57156085968"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid30]" time="0.00682616233826"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid31]" time="0.00506901741028"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid32]" time="0.00508713722229"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid33]" time="0.00646209716797"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid34]" time="0.00556588172913"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid35]" time="0.00504398345947"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid36]" time="0.0371179580688"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid37]" time="0.0244681835175"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid38]" time="0.0152859687805"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid39]" time="1.41160488129"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid40]" time="0.816367864609"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid41]" time="0.404131174088"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="338" name="test_neighbours_not_neighbour_of_itself[grid42]" time="0.00698399543762"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid0]" time="0.00171685218811"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid1]" time="0.00157403945923"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid2]" time="0.00174689292908"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid3]" time="0.00147104263306"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid4]" time="0.00153207778931"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid5]" time="0.00147104263306"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid6]" time="0.00153994560242"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid7]" time="0.00175595283508"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid8]" time="0.00145578384399"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid9]" time="0.00169610977173"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid10]" time="0.00168776512146"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid11]" time="0.00159001350403"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid12]" time="0.00164413452148"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid13]" time="0.00151419639587"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid14]" time="0.00210285186768"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid15]" time="0.00169587135315"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid16]" time="0.00159692764282"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid17]" time="0.00158190727234"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid18]" time="0.00162172317505"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid19]" time="0.00165009498596"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid20]" time="0.00163316726685"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid21]" time="0.00274395942688"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid22]" time="0.00176000595093"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid23]" time="0.00172901153564"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid24]" time="0.00123524665833"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid25]" time="0.00120401382446"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid26]" time="0.00126886367798"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid27]" time="0.00122928619385"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid28]" time="0.00145506858826"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid29]" time="0.0013062953949"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid30]" time="0.00181794166565"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid31]" time="0.00169110298157"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid32]" time="0.00168895721436"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid33]" time="0.00179195404053"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid34]" time="0.00180983543396"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid35]" time="0.00202393531799"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid36]" time="0.00184106826782"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid37]" time="0.00188732147217"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid38]" time="0.00181865692139"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid39]" time="0.00291705131531"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid40]" time="0.00330185890198"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid41]" time="0.00281381607056"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="348" name="test_boundary_mask_wrong_arguments[grid42]" time="0.00129294395447"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid0]" time="0.00445413589478"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid1]" time="0.00410008430481"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid2]" time="0.0129570960999"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid3]" time="0.00434899330139"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid4]" time="0.00439119338989"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid5]" time="0.00285029411316"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid6]" time="0.0042188167572"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid7]" time="0.00431203842163"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid8]" time="0.00281810760498"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid9]" time="0.0103089809418"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid10]" time="0.0104458332062"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid11]" time="0.00465321540833"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid12]" time="0.00455808639526"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid13]" time="0.00433897972107"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid14]" time="0.0302739143372"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid15]" time="0.00600409507751"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid16]" time="0.00455904006958"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid17]" time="0.00336813926697"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid18]" time="0.00436186790466"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid19]" time="0.0044059753418"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid20]" time="0.00298881530762"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid21]" time="0.0223820209503"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid22]" time="0.0240640640259"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid23]" time="0.00481986999512"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid24]" time="0.00302171707153"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid25]" time="0.00269103050232"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid26]" time="0.0021858215332"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid27]" time="0.00263285636902"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid28]" time="0.00205874443054"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid29]" time="0.0032000541687"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid30]" time="0.00477385520935"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid31]" time="0.00444388389587"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid32]" time="0.00442790985107"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid33]" time="0.00483894348145"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid34]" time="0.00452995300293"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid35]" time="0.00451493263245"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid36]" time="0.0048987865448"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid37]" time="0.00515985488892"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid38]" time="0.00473618507385"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid39]" time="0.0139212608337"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid40]" time="0.0125908851624"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid41]" time="0.00921678543091"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="356" name="test_boundary_mask_shape[grid42]" time="0.00406289100647"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid0]" time="0.00439119338989"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid1]" time="0.00439190864563"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid2]" time="0.0128860473633"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid3]" time="0.00433206558228"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid4]" time="0.00441193580627"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid5]" time="0.00289583206177"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid6]" time="0.00423121452332"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid7]" time="0.00425696372986"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid8]" time="0.00313234329224"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid9]" time="0.0104858875275"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid10]" time="0.0104343891144"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid11]" time="0.00306129455566"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid12]" time="0.00453114509583"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid13]" time="0.00429487228394"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid14]" time="0.0294516086578"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid15]" time="0.00663089752197"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid16]" time="0.00449395179749"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid17]" time="0.00296306610107"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid18]" time="0.00449705123901"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid19]" time="0.00454473495483"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid20]" time="0.0029661655426"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid21]" time="0.0223867893219"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid22]" time="0.0239679813385"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid23]" time="0.00482487678528"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid24]" time="0.00267314910889"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid25]" time="0.00257420539856"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid26]" time="0.00210309028625"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid27]" time="0.00265407562256"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid28]" time="0.00220108032227"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid29]" time="0.00344800949097"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid30]" time="0.00441312789917"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid31]" time="0.00444722175598"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid32]" time="0.00434803962708"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid33]" time="0.00457978248596"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid34]" time="0.00460886955261"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid35]" time="0.00453019142151"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid36]" time="0.00514674186707"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid37]" time="0.00482296943665"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid38]" time="0.00487685203552"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid39]" time="0.0144288539886"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid40]" time="0.0126669406891"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid41]" time="0.00920820236206"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="362" name="test_boundary_mask_dtype[grid42]" time="0.00416111946106"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid0]" time="0.00265097618103"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid1]" time="0.0021607875824"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid2]" time="0.0152668952942"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid3]" time="0.00235509872437"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid4]" time="0.00243782997131"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid5]" time="0.00214028358459"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid6]" time="0.00223207473755"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid7]" time="0.00238609313965"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid8]" time="0.00215601921082"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid9]" time="0.0116262435913"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid10]" time="0.0114858150482"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid11]" time="0.0125091075897"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid12]" time="0.00275778770447"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid13]" time="0.00267314910889"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid14]" time="0.040323972702"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid15]" time="0.0040111541748"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid16]" time="0.00262713432312"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid17]" time="0.00244283676147"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid18]" time="0.00242614746094"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid19]" time="0.00239491462708"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid20]" time="0.00254607200623"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid21]" time="0.0292670726776"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid22]" time="0.0311288833618"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid23]" time="0.0302090644836"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid24]" time="0.00311374664307"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid25]" time="0.00240802764893"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid26]" time="0.00216197967529"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid27]" time="0.00222706794739"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid28]" time="0.00182890892029"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid29]" time="0.0378277301788"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid30]" time="0.00391960144043"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid31]" time="0.00252914428711"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid32]" time="0.00239276885986"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid33]" time="0.0026171207428"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid34]" time="0.00289130210876"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid35]" time="0.00245094299316"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid36]" time="0.00314283370972"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid37]" time="0.00296330451965"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid38]" time="0.00280809402466"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid39]" time="0.0159611701965"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid40]" time="0.0153708457947"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid41]" time="0.00989007949829"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="368" name="test_boundary_mask_entries_codim1[grid42]" time="0.00205636024475"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid0]" time="0.00319194793701"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid1]" time="0.00290060043335"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid2]" time="0.0254182815552"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid3]" time="0.00434494018555"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid4]" time="0.00352883338928"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid5]" time="0.0024938583374"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid6]" time="0.00296902656555"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid7]" time="0.00295400619507"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid8]" time="0.00239896774292"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid9]" time="0.0189611911774"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid10]" time="0.0209729671478"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid11]" time="0.0206658840179"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid12]" time="0.00501084327698"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid13]" time="0.00307416915894"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid14]" time="0.091582775116"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid15]" time="0.00518488883972"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid16]" time="0.00355195999146"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid17]" time="0.00294613838196"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid18]" time="0.00351905822754"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid19]" time="0.00453400611877"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid20]" time="0.0027551651001"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid21]" time="0.0648238658905"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid22]" time="0.0667378902435"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid23]" time="0.0671701431274"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid24]" time="0.00435900688171"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid25]" time="0.00397920608521"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid26]" time="0.00335121154785"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid27]" time="0.00273323059082"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid28]" time="0.0022439956665"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid29]" time="0.126132011414"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid30]" time="0.00467681884766"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid31]" time="0.00311326980591"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid32]" time="0.00300288200378"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid33]" time="0.00329303741455"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid34]" time="0.0031590461731"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid35]" time="0.00337815284729"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid36]" time="0.00405502319336"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid37]" time="0.00374102592468"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid38]" time="0.00344491004944"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid39]" time="0.0332460403442"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid40]" time="0.0217170715332"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid41]" time="0.0151891708374"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="377" name="test_boundary_mask_entries_codim0[grid42]" time="0.00416898727417"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid0]" time="0.00454926490784"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid1]" time="0.00398111343384"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid2]" time="0.0352077484131"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid3]" time="0.00589799880981"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid4]" time="0.00430202484131"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid5]" time="0.00360298156738"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid6]" time="0.00402593612671"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid7]" time="0.0041069984436"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid8]" time="0.00379490852356"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid9]" time="0.0265762805939"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid10]" time="0.0279879570007"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid11]" time="0.0266258716583"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid12]" time="0.00610494613647"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid13]" time="0.00419211387634"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid14]" time="0.0754201412201"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid15]" time="0.00598001480103"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid16]" time="0.00460815429688"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid17]" time="0.0039918422699"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid18]" time="0.00416588783264"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid19]" time="0.00447797775269"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid20]" time="0.00376915931702"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid21]" time="0.0543389320374"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid22]" time="0.0554139614105"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid23]" time="0.055025100708"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid24]" time="0.00158715248108"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid25]" time="0.00105810165405"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid26]" time="0.000767946243286"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid27]" time="0.000799179077148"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid28]" time="0.000755071640015"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid29]" time="0.000924825668335"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid30]" time="0.0044322013855"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid31]" time="0.0044538974762"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid32]" time="0.00435519218445"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid33]" time="0.00431227684021"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid34]" time="0.00435352325439"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid35]" time="0.00425386428833"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid36]" time="0.00595426559448"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid37]" time="0.00554490089417"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid38]" time="0.00496578216553"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid39]" time="0.0287289619446"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid40]" time="0.028413772583"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid41]" time="0.0236251354218"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="387" name="test_boundary_mask_entries_codim_d[grid42]" time="0.00524282455444"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid0]" time="0.00162553787231"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid1]" time="0.00151586532593"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid2]" time="0.00169324874878"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid3]" time="0.00184011459351"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid4]" time="0.00152230262756"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid5]" time="0.00175285339355"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid6]" time="0.00146484375"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid7]" time="0.001540184021"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid8]" time="0.00148820877075"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid9]" time="0.00157189369202"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid10]" time="0.00168371200562"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid11]" time="0.00188899040222"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid12]" time="0.00159931182861"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid13]" time="0.00158619880676"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid14]" time="0.00209403038025"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid15]" time="0.00175166130066"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid16]" time="0.0016348361969"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid17]" time="0.00161576271057"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid18]" time="0.00180602073669"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid19]" time="0.00163722038269"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid20]" time="0.00161504745483"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid21]" time="0.00179409980774"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid22]" time="0.00175595283508"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid23]" time="0.00174713134766"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid24]" time="0.00142598152161"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid25]" time="0.0011932849884"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid26]" time="0.00118446350098"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid27]" time="0.00121068954468"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid28]" time="0.00122594833374"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid29]" time="0.00132417678833"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid30]" time="0.00168418884277"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid31]" time="0.00188207626343"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid32]" time="0.00168609619141"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid33]" time="0.00171995162964"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid34]" time="0.00179004669189"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid35]" time="0.00186419487"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid36]" time="0.00179600715637"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid37]" time="0.00205111503601"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid38]" time="0.0018322467804"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid39]" time="0.00304484367371"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid40]" time="0.00334715843201"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid41]" time="0.00262403488159"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="398" name="test_boundaries_wrong_arguments[grid42]" time="0.0012469291687"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid0]" time="0.00335288047791"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid1]" time="0.00330018997192"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid2]" time="0.0117762088776"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid3]" time="0.00330519676208"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid4]" time="0.00328922271729"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid5]" time="0.002366065979"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid6]" time="0.00374698638916"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid7]" time="0.00318312644958"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid8]" time="0.00227308273315"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid9]" time="0.00933194160461"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid10]" time="0.00929689407349"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid11]" time="0.00256514549255"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid12]" time="0.00374293327332"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid13]" time="0.00322079658508"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid14]" time="0.0288419723511"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid15]" time="0.00501203536987"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid16]" time="0.00356030464172"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid17]" time="0.00245475769043"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid18]" time="0.00368809700012"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid19]" time="0.00339198112488"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid20]" time="0.00250315666199"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid21]" time="0.0211870670319"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid22]" time="0.0227630138397"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid23]" time="0.00441217422485"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid24]" time="0.00204706192017"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid25]" time="0.0019679069519"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid26]" time="0.00176477432251"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid27]" time="0.00194382667542"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid28]" time="0.00175929069519"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid29]" time="0.0025749206543"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid30]" time="0.00410914421082"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid31]" time="0.00337815284729"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid32]" time="0.00341439247131"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid33]" time="0.00351810455322"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid34]" time="0.00350713729858"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid35]" time="0.00359463691711"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid36]" time="0.00405287742615"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid37]" time="0.00386619567871"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid38]" time="0.00374102592468"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid39]" time="0.0130960941315"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid40]" time="0.0130088329315"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid41]" time="0.00856924057007"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="406" name="test_boundaries_shape[grid42]" time="0.00323534011841"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid0]" time="0.00336003303528"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid1]" time="0.00321817398071"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid2]" time="0.011794090271"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid3]" time="0.00335383415222"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid4]" time="0.00359296798706"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid5]" time="0.00237917900085"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid6]" time="0.00321078300476"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid7]" time="0.00329899787903"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid8]" time="0.00234794616699"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid9]" time="0.00941491127014"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid10]" time="0.00959491729736"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid11]" time="0.00266599655151"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid12]" time="0.00354599952698"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid13]" time="0.00338411331177"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid14]" time="0.0284788608551"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid15]" time="0.00522685050964"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid16]" time="0.00501489639282"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid17]" time="0.00250482559204"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid18]" time="0.00334620475769"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid19]" time="0.00342297554016"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid20]" time="0.0024631023407"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid21]" time="0.0215020179749"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid22]" time="0.0230159759521"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid23]" time="0.00442242622375"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid24]" time="0.00197911262512"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid25]" time="0.00202608108521"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid26]" time="0.00172901153564"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid27]" time="0.00197505950928"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid28]" time="0.00170612335205"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid29]" time="0.00250267982483"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid30]" time="0.00346899032593"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid31]" time="0.00335931777954"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid32]" time="0.00341987609863"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid33]" time="0.00354409217834"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid34]" time="0.00372695922852"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid35]" time="0.00363993644714"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid36]" time="0.00403308868408"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid37]" time="0.00390386581421"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid38]" time="0.00370907783508"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid39]" time="0.0128848552704"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid40]" time="0.0131571292877"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid41]" time="0.00822687149048"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="412" name="test_boundaries_dtype[grid42]" time="0.00306296348572"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid0]" time="0.00418400764465"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid1]" time="0.0039918422699"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid2]" time="0.0130989551544"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid3]" time="0.00419211387634"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid4]" time="0.00405812263489"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid5]" time="0.00314021110535"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid6]" time="0.00419306755066"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid7]" time="0.00420665740967"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid8]" time="0.00327229499817"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid9]" time="0.0103480815887"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid10]" time="0.0101990699768"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid11]" time="0.00328707695007"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid12]" time="0.00442385673523"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid13]" time="0.00500392913818"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid14]" time="0.0297145843506"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid15]" time="0.0057737827301"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid16]" time="0.00440311431885"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid17]" time="0.00331997871399"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid18]" time="0.00428199768066"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid19]" time="0.00496888160706"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid20]" time="0.00318813323975"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid21]" time="0.0226061344147"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid22]" time="0.0248351097107"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid23]" time="0.00520896911621"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid24]" time="0.00248885154724"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid25]" time="0.00254106521606"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid26]" time="0.0023980140686"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid27]" time="0.00246119499207"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid28]" time="0.00218915939331"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid29]" time="0.00321388244629"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid30]" time="0.00424909591675"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid31]" time="0.00421404838562"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid32]" time="0.00460600852966"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid33]" time="0.0044219493866"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid34]" time="0.00446820259094"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid35]" time="0.00447607040405"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid36]" time="0.00480008125305"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid37]" time="0.00467300415039"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid38]" time="0.00487780570984"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid39]" time="0.0141339302063"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid40]" time="0.0129148960114"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid41]" time="0.00928807258606"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="418" name="test_boundaries_entry_value_range[grid42]" time="0.00392484664917"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid0]" time="0.00544381141663"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid1]" time="0.00512790679932"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid2]" time="0.0137977600098"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid3]" time="0.00642919540405"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid4]" time="0.00511622428894"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid5]" time="0.00349020957947"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid6]" time="0.00484609603882"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid7]" time="0.00529503822327"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid8]" time="0.00341892242432"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid9]" time="0.0112218856812"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid10]" time="0.0127379894257"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid11]" time="0.00374698638916"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid12]" time="0.00512194633484"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid13]" time="0.00536012649536"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid14]" time="0.0305941104889"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid15]" time="0.00660395622253"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid16]" time="0.00524377822876"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid17]" time="0.00354790687561"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid18]" time="0.00509691238403"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid19]" time="0.00541520118713"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid20]" time="0.00358033180237"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid21]" time="0.0229549407959"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid22]" time="0.0244629383087"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid23]" time="0.00557208061218"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid24]" time="0.00307679176331"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid25]" time="0.00332641601562"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid26]" time="0.00240516662598"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid27]" time="0.0029981136322"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid28]" time="0.00253105163574"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid29]" time="0.00351095199585"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid30]" time="0.0051577091217"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid31]" time="0.00523805618286"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid32]" time="0.00514316558838"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid33]" time="0.00518035888672"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid34]" time="0.00521087646484"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid35]" time="0.00523614883423"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid36]" time="0.00558876991272"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid37]" time="0.00584292411804"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid38]" time="0.00539803504944"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid39]" time="0.0147709846497"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid40]" time="0.0136523246765"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid41]" time="0.0119159221649"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="425" name="test_boundaries_entries[grid42]" time="0.00484895706177"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid0]" time="0.00357890129089"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid1]" time="0.00206089019775"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid2]" time="0.00252103805542"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid3]" time="0.0022177696228"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid4]" time="0.0023181438446"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid5]" time="0.00216197967529"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid6]" time="0.00211572647095"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid7]" time="0.00239419937134"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid8]" time="0.00212693214417"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid9]" time="0.00236630439758"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid10]" time="0.00251793861389"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid11]" time="0.00240087509155"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid12]" time="0.00219345092773"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid13]" time="0.00237083435059"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid14]" time="0.00279402732849"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid15]" time="0.00231719017029"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid16]" time="0.00217509269714"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid17]" time="0.00218844413757"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid18]" time="0.00215983390808"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid19]" time="0.00217080116272"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid20]" time="0.00240778923035"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid21]" time="0.00265574455261"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid22]" time="0.00252413749695"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid23]" time="0.00252389907837"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid24]" time="0.00135111808777"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid25]" time="0.00121688842773"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid26]" time="0.00147891044617"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid27]" time="0.00125479698181"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid28]" time="0.00118613243103"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid29]" time="0.00158190727234"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid30]" time="0.00322818756104"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid31]" time="0.00295615196228"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid32]" time="0.00286984443665"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid33]" time="0.00233340263367"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid34]" time="0.00188207626343"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid35]" time="0.00193905830383"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid36]" time="0.00309085845947"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid37]" time="0.00309014320374"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid38]" time="0.00306606292725"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid39]" time="0.00373101234436"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid40]" time="0.00371599197388"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid41]" time="0.00292897224426"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="431" name="test_pickle[grid42]" time="0.00162696838379"></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize0]" time="0.00137400627136"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize1]" time="0.00191712379456"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize2]" time="0.00220131874084"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize3]" time="0.00185680389404"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize4]" time="0.00193095207214"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize5]" time="0.00195908546448"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize6]" time="0.00182127952576"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize7]" time="0.00186991691589"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize8]" time="0.00186991691589"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize9]" time="0.00195002555847"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize10]" time="0.00209021568298"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize11]" time="0.00198698043823"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize12]" time="0.00207495689392"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize13]" time="0.00196194648743"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize14]" time="0.00257802009583"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize15]" time="0.00201678276062"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize16]" time="0.00202679634094"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize17]" time="0.00198888778687"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize18]" time="0.00198292732239"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize19]" time="0.00200223922729"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize20]" time="0.00207018852234"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize21]" time="0.00230884552002"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize22]" time="0.00225400924683"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize23]" time="0.00230383872986"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize24]" time="0.00137400627136"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize25]" time="0.00136089324951"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize26]" time="0.00142478942871"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize27]" time="0.00209498405457"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize28]" time="0.0015709400177"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize29]" time="0.00171327590942"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.grid" file="src/pymortests/grid.py" line="435" name="test_visualize[grids_with_visualize30]" time="0.00168776512146"><skipped message="expected test failure">reason: Qt missing</skipped></testcase><testcase classname="src.pymortests.gui" file="src/pymortests/gui.py" line="29" name="test_visualize_patch[backend_gridtype0]" time="1.14238190651"><skipped message="expected test failure">reason: Qt missing</skipped><system-err>15:25 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
15:25 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
15:26 DiffusionOperatorQ1: Determine global dofs ...
15:26 DiffusionOperatorQ1: Boundary treatment ...
15:26 DiffusionOperatorQ1: Assemble system matrix ...
15:26 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
15:26 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
15:26 DiffusionOperatorQ1: Determine global dofs ...
15:26 DiffusionOperatorQ1: Boundary treatment ...
15:26 DiffusionOperatorQ1: Assemble system matrix ...
15:26 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
15:26 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
15:26 DiffusionOperatorQ1: Determine global dofs ...
15:26 DiffusionOperatorQ1: Boundary treatment ...
15:26 DiffusionOperatorQ1: Assemble system matrix ...
15:26 L2ProductQ1: Integrate the products of the shape functions on each element
15:26 L2ProductQ1: Determine global dofs ...
15:26 L2ProductQ1: Boundary treatment ...
15:26 L2ProductQ1: Assemble system matrix ...
15:26 L2ProductQ1: Integrate the products of the shape functions on each element
15:26 L2ProductQ1: Determine global dofs ...
15:26 L2ProductQ1: Boundary treatment ...
15:26 L2ProductQ1: Assemble system matrix ...
15:26 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
15:26 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
15:26 DiffusionOperatorQ1: Determine global dofs ...
15:26 DiffusionOperatorQ1: Boundary treatment ...
15:26 DiffusionOperatorQ1: Assemble system matrix ...
15:26 StationaryDiscretization: Solving StationaryProblem_CG for {} ...
</system-err><system-err>15:25 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
15:25 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
15:26 DiffusionOperatorQ1: Determine global dofs ...
15:26 DiffusionOperatorQ1: Boundary treatment ...
15:26 DiffusionOperatorQ1: Assemble system matrix ...
15:26 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
15:26 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
15:26 DiffusionOperatorQ1: Determine global dofs ...
15:26 DiffusionOperatorQ1: Boundary treatment ...
15:26 DiffusionOperatorQ1: Assemble system matrix ...
15:26 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
15:26 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
15:26 DiffusionOperatorQ1: Determine global dofs ...
15:26 DiffusionOperatorQ1: Boundary treatment ...
15:26 DiffusionOperatorQ1: Assemble system matrix ...
15:26 L2ProductQ1: Integrate the products of the shape functions on each element
15:26 L2ProductQ1: Determine global dofs ...
15:26 L2ProductQ1: Boundary treatment ...
15:26 L2ProductQ1: Assemble system matrix ...
15:26 L2ProductQ1: Integrate the products of the shape functions on each element
15:26 L2ProductQ1: Determine global dofs ...
15:26 L2ProductQ1: Boundary treatment ...
15:26 L2ProductQ1: Assemble system matrix ...
15:26 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
15:26 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
15:26 DiffusionOperatorQ1: Determine global dofs ...
15:26 DiffusionOperatorQ1: Boundary treatment ...
15:26 DiffusionOperatorQ1: Assemble system matrix ...
15:26 StationaryDiscretization: Solving StationaryProblem_CG for {} ...
</system-err></testcase><testcase classname="src.pymortests.gui" file="src/pymortests/gui.py" line="29" name="test_visualize_patch[backend_gridtype1]" time="1.1809360981"><skipped message="expected test failure">reason: Qt missing</skipped><system-err>15:27 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
15:27 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
15:27 DiffusionOperatorQ1: Determine global dofs ...
15:27 DiffusionOperatorQ1: Boundary treatment ...
15:27 DiffusionOperatorQ1: Assemble system matrix ...
15:27 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
15:27 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
15:27 DiffusionOperatorQ1: Determine global dofs ...
15:27 DiffusionOperatorQ1: Boundary treatment ...
15:27 DiffusionOperatorQ1: Assemble system matrix ...
15:27 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
15:27 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
15:27 DiffusionOperatorQ1: Determine global dofs ...
15:27 DiffusionOperatorQ1: Boundary treatment ...
15:27 DiffusionOperatorQ1: Assemble system matrix ...
15:27 L2ProductQ1: Integrate the products of the shape functions on each element
15:27 L2ProductQ1: Determine global dofs ...
15:27 L2ProductQ1: Boundary treatment ...
15:27 L2ProductQ1: Assemble system matrix ...
15:27 L2ProductQ1: Integrate the products of the shape functions on each element
15:27 L2ProductQ1: Determine global dofs ...
15:27 L2ProductQ1: Boundary treatment ...
15:27 L2ProductQ1: Assemble system matrix ...
15:27 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
15:27 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
15:27 DiffusionOperatorQ1: Determine global dofs ...
15:27 DiffusionOperatorQ1: Boundary treatment ...
15:27 DiffusionOperatorQ1: Assemble system matrix ...
15:27 StationaryDiscretization: Solving StationaryProblem_CG for {} ...
</system-err><system-err>15:27 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
15:27 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
15:27 DiffusionOperatorQ1: Determine global dofs ...
15:27 DiffusionOperatorQ1: Boundary treatment ...
15:27 DiffusionOperatorQ1: Assemble system matrix ...
15:27 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
15:27 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
15:27 DiffusionOperatorQ1: Determine global dofs ...
15:27 DiffusionOperatorQ1: Boundary treatment ...
15:27 DiffusionOperatorQ1: Assemble system matrix ...
15:27 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
15:27 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
15:27 DiffusionOperatorQ1: Determine global dofs ...
15:27 DiffusionOperatorQ1: Boundary treatment ...
15:27 DiffusionOperatorQ1: Assemble system matrix ...
15:27 L2ProductQ1: Integrate the products of the shape functions on each element
15:27 L2ProductQ1: Determine global dofs ...
15:27 L2ProductQ1: Boundary treatment ...
15:27 L2ProductQ1: Assemble system matrix ...
15:27 L2ProductQ1: Integrate the products of the shape functions on each element
15:27 L2ProductQ1: Determine global dofs ...
15:27 L2ProductQ1: Boundary treatment ...
15:27 L2ProductQ1: Assemble system matrix ...
15:27 DiffusionOperatorQ1: Calulate gradients of shape functions transformed by reference map ...
15:27 DiffusionOperatorQ1: Calculate all local scalar products beween gradients ...
15:27 DiffusionOperatorQ1: Determine global dofs ...
15:27 DiffusionOperatorQ1: Boundary treatment ...
15:27 DiffusionOperatorQ1: Assemble system matrix ...
15:27 StationaryDiscretization: Solving StationaryProblem_CG for {} ...
</system-err></testcase><testcase classname="src.pymortests.gui" file="src/pymortests/gui.py" line="29" name="test_visualize_patch[backend_gridtype2]" time="0.0340609550476"><skipped message="expected test failure">reason: Qt missing</skipped><system-err>15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 StationaryDiscretization: Solving StationaryProblem_CG for {} ...
</system-err><system-err>15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 StationaryDiscretization: Solving StationaryProblem_CG for {} ...
</system-err></testcase><testcase classname="src.pymortests.la" file="src/pymortests/la.py" line="16" name="test_induced" time="0.013151884079"><system-err>15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="24" name="test_selection_op" time="0.00266218185425"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="56" name="test_lincomb_op" time="0.00744986534119"><system-err>15:28 |WARNING|MonomOperator: Using inefficient generic projection operator
15:28 |WARNING|MonomOperator: Using inefficient generic projection operator
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator0]" time="0.00179100036621"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator1]" time="0.00170803070068"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator2]" time="0.00196814537048"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator3]" time="0.00170207023621"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator4]" time="0.0369021892548"><system-err>15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator5]" time="0.0281717777252"><system-err>15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator6]" time="0.0334389209747"><system-err>15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator7]" time="0.0276050567627"><system-err>15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator8]" time="0.0359213352203"><system-err>15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator9]" time="0.0286700725555"><system-err>15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator10]" time="0.0312969684601"><system-err>15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator11]" time="0.0275132656097"><system-err>15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator12]" time="0.031044960022"><system-err>15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator13]" time="0.0264298915863"><system-err>15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator14]" time="0.0316689014435"><system-err>15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator15]" time="0.0266811847687"><system-err>15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator16]" time="0.0321569442749"><system-err>15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator17]" time="0.0274288654327"><system-err>15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator18]" time="0.0313129425049"><system-err>15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator19]" time="0.0267722606659"><system-err>15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator20]" time="0.031635761261"><system-err>15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator21]" time="0.0266053676605"><system-err>15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator22]" time="0.0315492153168"><system-err>15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator23]" time="0.0269567966461"><system-err>15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator24]" time="0.0313701629639"><system-err>15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator25]" time="0.0270459651947"><system-err>15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator26]" time="0.0347900390625"><system-err>15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator27]" time="0.0279610157013"><system-err>15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 L2ProductP1: Integrate the products of the shape functions on each element
15:28 L2ProductP1: Determine global dofs ...
15:28 L2ProductP1: Boundary treatment ...
15:28 L2ProductP1: Assemble system matrix ...
15:28 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:28 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:28 DiffusionOperatorP1: Determine global dofs ...
15:28 DiffusionOperatorP1: Boundary treatment ...
15:28 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator28]" time="0.00421977043152"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator29]" time="0.00330805778503"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator30]" time="0.00355792045593"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator31]" time="0.00454497337341"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator32]" time="0.00389385223389"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator33]" time="0.00445508956909"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator34]" time="0.00416588783264"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator35]" time="0.00413584709167"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator36]" time="0.00818395614624"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator37]" time="0.00716423988342"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="80" name="test_pickle[operator38]" time="0.004887342453"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator0]" time="0.00167489051819"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator1]" time="0.00175285339355"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator2]" time="0.00169801712036"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator3]" time="0.00168204307556"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator4]" time="0.0496876239777"><system-err>15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator5]" time="0.0400400161743"><system-err>15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator6]" time="0.0340120792389"><system-err>15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator7]" time="0.0267543792725"><system-err>15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator8]" time="0.0348153114319"><system-err>15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator9]" time="0.0288498401642"><system-err>15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator10]" time="0.0305585861206"><system-err>15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator11]" time="0.0262472629547"><system-err>15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator12]" time="0.0321049690247"><system-err>15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator13]" time="0.0264089107513"><system-err>15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator14]" time="0.0307981967926"><system-err>15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator15]" time="0.0264451503754"><system-err>15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator16]" time="0.0307297706604"><system-err>15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator17]" time="0.0262050628662"><system-err>15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator18]" time="0.0318348407745"><system-err>15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator19]" time="0.0265941619873"><system-err>15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator20]" time="0.0314009189606"><system-err>15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator21]" time="0.0272374153137"><system-err>15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator22]" time="0.0312449932098"><system-err>15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator23]" time="0.0263328552246"><system-err>15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator24]" time="0.031653881073"><system-err>15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator25]" time="0.0266089439392"><system-err>15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator26]" time="0.0338037014008"><system-err>15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator27]" time="0.0276958942413"><system-err>15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator28]" time="0.00382804870605"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator29]" time="0.00333786010742"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator30]" time="0.00351428985596"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator31]" time="0.00398063659668"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator32]" time="0.00394296646118"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator33]" time="0.00445818901062"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator34]" time="0.004075050354"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator35]" time="0.00407767295837"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator36]" time="0.00764536857605"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="84" name="test_pickle_without_dumps_function[picklable_operator37]" time="0.00629663467407"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays0]" time="0.00706601142883"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays1]" time="0.00747013092041"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays2]" time="0.00744390487671"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays3]" time="0.0072340965271"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays4]" time="0.0646929740906"><system-err>15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 L2ProductP1: Integrate the products of the shape functions on each element
15:29 L2ProductP1: Determine global dofs ...
15:29 L2ProductP1: Boundary treatment ...
15:29 L2ProductP1: Assemble system matrix ...
15:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:29 DiffusionOperatorP1: Determine global dofs ...
15:29 DiffusionOperatorP1: Boundary treatment ...
15:29 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays5]" time="0.0368373394012"><system-err>15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays6]" time="0.0368399620056"><system-err>15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays7]" time="0.0319581031799"><system-err>15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays8]" time="0.0453798770905"><system-err>15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays9]" time="0.0350687503815"><system-err>15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays10]" time="0.034567117691"><system-err>15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays11]" time="0.0302412509918"><system-err>15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays12]" time="0.0350267887115"><system-err>15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays13]" time="0.0298938751221"><system-err>15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays14]" time="0.035539150238"><system-err>15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays15]" time="0.0302119255066"><system-err>15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays16]" time="0.0352647304535"><system-err>15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays17]" time="0.0297360420227"><system-err>15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays18]" time="0.0346398353577"><system-err>15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays19]" time="0.0306327342987"><system-err>15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays20]" time="0.0345711708069"><system-err>15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays21]" time="0.0306420326233"><system-err>15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays22]" time="0.0348448753357"><system-err>15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays23]" time="0.0299971103668"><system-err>15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays24]" time="0.0350091457367"><system-err>15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays25]" time="0.0312950611115"><system-err>15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays26]" time="0.0441834926605"><system-err>15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays27]" time="0.0344457626343"><system-err>15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 L2ProductP1: Integrate the products of the shape functions on each element
15:30 L2ProductP1: Determine global dofs ...
15:30 L2ProductP1: Boundary treatment ...
15:30 L2ProductP1: Assemble system matrix ...
15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:30 DiffusionOperatorP1: Determine global dofs ...
15:30 DiffusionOperatorP1: Boundary treatment ...
15:30 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays28]" time="0.0108299255371"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays29]" time="0.00916886329651"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays30]" time="0.0100693702698"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays31]" time="0.00990509986877"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays32]" time="0.0099310874939"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays33]" time="0.00949597358704"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays34]" time="0.00943326950073"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays35]" time="0.0100717544556"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays36]" time="0.0292639732361"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays37]" time="0.0281231403351"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="88" name="test_apply[operator_with_arrays38]" time="0.00992894172668"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays0]" time="0.00259709358215"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays1]" time="0.00243091583252"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays2]" time="0.00293207168579"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays3]" time="0.00266289710999"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays4]" time="0.0477180480957"><system-err>15:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays5]" time="0.0398540496826"><system-err>15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays6]" time="0.0327622890472"><system-err>15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays7]" time="0.0275478363037"><system-err>15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays8]" time="0.0330529212952"><system-err>15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays9]" time="0.0273928642273"><system-err>15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays10]" time="0.0312368869781"><system-err>15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays11]" time="0.027104139328"><system-err>15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays12]" time="0.0311307907104"><system-err>15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays13]" time="0.0265986919403"><system-err>15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays14]" time="0.0314860343933"><system-err>15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays15]" time="0.027658700943"><system-err>15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays16]" time="0.0311088562012"><system-err>15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays17]" time="0.0269923210144"><system-err>15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays18]" time="0.0316710472107"><system-err>15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays19]" time="0.0276217460632"><system-err>15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays20]" time="0.0336451530457"><system-err>15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays21]" time="0.0275480747223"><system-err>15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays22]" time="0.0319097042084"><system-err>15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays23]" time="0.027530670166"><system-err>15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays24]" time="0.0325798988342"><system-err>15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays25]" time="0.0276589393616"><system-err>15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays26]" time="0.0338582992554"><system-err>15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays27]" time="0.0286121368408"><system-err>15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays28]" time="0.00499129295349"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays29]" time="0.00423884391785"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays30]" time="0.00456595420837"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays31]" time="0.00468707084656"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays32]" time="0.00505089759827"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays33]" time="0.00380373001099"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays34]" time="0.00376796722412"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays35]" time="0.00381898880005"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays36]" time="0.00966501235962"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays37]" time="0.00892329216003"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="99" name="test_mul[operator_with_arrays38]" time="0.00479578971863"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays0]" time="0.00258994102478"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays1]" time="0.00271821022034"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays2]" time="0.00260186195374"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays3]" time="0.00266003608704"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays4]" time="0.0496740341187"><system-err>15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays5]" time="0.0403273105621"><system-err>15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays6]" time="0.0336606502533"><system-err>15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 L2ProductP1: Integrate the products of the shape functions on each element
15:31 L2ProductP1: Determine global dofs ...
15:31 L2ProductP1: Boundary treatment ...
15:31 L2ProductP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays7]" time="0.0279083251953"><system-err>15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:31 DiffusionOperatorP1: Determine global dofs ...
15:31 DiffusionOperatorP1: Boundary treatment ...
15:31 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays8]" time="0.0340216159821"><system-err>15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays9]" time="0.0289828777313"><system-err>15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays10]" time="0.0327322483063"><system-err>15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays11]" time="0.0277211666107"><system-err>15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays12]" time="0.032438993454"><system-err>15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays13]" time="0.0271770954132"><system-err>15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays14]" time="0.0317540168762"><system-err>15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays15]" time="0.0274109840393"><system-err>15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays16]" time="0.0316669940948"><system-err>15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays17]" time="0.0271079540253"><system-err>15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays18]" time="0.0322279930115"><system-err>15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays19]" time="0.0270719528198"><system-err>15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays20]" time="0.0315370559692"><system-err>15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays21]" time="0.0273902416229"><system-err>15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays22]" time="0.0323889255524"><system-err>15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays23]" time="0.0274789333344"><system-err>15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays24]" time="0.0330107212067"><system-err>15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays25]" time="0.0279378890991"><system-err>15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays26]" time="0.0331749916077"><system-err>15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays27]" time="0.0289690494537"><system-err>15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays28]" time="0.00521802902222"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays29]" time="0.00441193580627"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays30]" time="0.00470614433289"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays31]" time="0.00477623939514"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays32]" time="0.00465178489685"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays33]" time="0.004314661026"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays34]" time="0.00403189659119"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays35]" time="0.0039598941803"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays36]" time="0.00965595245361"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays37]" time="0.00866603851318"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="106" name="test_rmul[operator_with_arrays38]" time="0.00515341758728"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays0]" time="0.00151562690735"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays1]" time="0.00155377388"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays2]" time="0.00153374671936"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays3]" time="0.00147223472595"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays4]" time="0.0456790924072"><system-err>15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays5]" time="0.0386567115784"><system-err>15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays6]" time="0.035032749176"><system-err>15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays7]" time="0.0275838375092"><system-err>15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays8]" time="0.0321781635284"><system-err>15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays9]" time="0.0270903110504"><system-err>15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays10]" time="0.0316059589386"><system-err>15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays11]" time="0.0267868041992"><system-err>15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:32 DiffusionOperatorP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 L2ProductP1: Integrate the products of the shape functions on each element
15:32 L2ProductP1: Determine global dofs ...
15:32 L2ProductP1: Boundary treatment ...
15:32 L2ProductP1: Assemble system matrix ...
15:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:32 DiffusionOperatorP1: Determine global dofs ...
15:32 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays12]" time="0.0308308601379"><system-err>15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays13]" time="0.0266752243042"><system-err>15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays14]" time="0.0314309597015"><system-err>15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays15]" time="0.0275239944458"><system-err>15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays16]" time="0.0311188697815"><system-err>15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays17]" time="0.0264060497284"><system-err>15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays18]" time="0.0310699939728"><system-err>15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays19]" time="0.0268778800964"><system-err>15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays20]" time="0.0311789512634"><system-err>15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays21]" time="0.0264921188354"><system-err>15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays22]" time="0.0315942764282"><system-err>15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays23]" time="0.0266139507294"><system-err>15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays24]" time="0.0310797691345"><system-err>15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays25]" time="0.026771068573"><system-err>15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays26]" time="0.031585931778"><system-err>15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays27]" time="0.0266318321228"><system-err>15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays28]" time="0.00380802154541"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays29]" time="0.00319600105286"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays30]" time="0.00469589233398"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays31]" time="0.00357890129089"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays32]" time="0.00353598594666"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays33]" time="0.00262713432312"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays34]" time="0.00263452529907"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays35]" time="0.00277614593506"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays36]" time="0.00715517997742"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays37]" time="0.00572609901428"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="113" name="test_neg[operator_with_arrays38]" time="0.00352883338928"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays0]" time="0.0657901763916"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays1]" time="0.0589933395386"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays2]" time="0.0455188751221"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays3]" time="0.0458109378815"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays4]" time="0.201681852341"><system-err>15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays5]" time="0.121882915497"><system-err>15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:33 DiffusionOperatorP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 L2ProductP1: Integrate the products of the shape functions on each element
15:33 L2ProductP1: Determine global dofs ...
15:33 L2ProductP1: Boundary treatment ...
15:33 L2ProductP1: Assemble system matrix ...
15:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:33 DiffusionOperatorP1: Determine global dofs ...
15:33 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays6]" time="0.0850749015808"><system-err>15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 L2ProductP1: Integrate the products of the shape functions on each element
15:34 L2ProductP1: Determine global dofs ...
15:34 L2ProductP1: Boundary treatment ...
15:34 L2ProductP1: Assemble system matrix ...
15:34 L2ProductP1: Integrate the products of the shape functions on each element
15:34 L2ProductP1: Determine global dofs ...
15:34 L2ProductP1: Boundary treatment ...
15:34 L2ProductP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays7]" time="0.0791418552399"><system-err>15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 L2ProductP1: Integrate the products of the shape functions on each element
15:34 L2ProductP1: Determine global dofs ...
15:34 L2ProductP1: Boundary treatment ...
15:34 L2ProductP1: Assemble system matrix ...
15:34 L2ProductP1: Integrate the products of the shape functions on each element
15:34 L2ProductP1: Determine global dofs ...
15:34 L2ProductP1: Boundary treatment ...
15:34 L2ProductP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays8]" time="0.212799787521"><system-err>15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 L2ProductP1: Integrate the products of the shape functions on each element
15:34 L2ProductP1: Determine global dofs ...
15:34 L2ProductP1: Boundary treatment ...
15:34 L2ProductP1: Assemble system matrix ...
15:34 L2ProductP1: Integrate the products of the shape functions on each element
15:34 L2ProductP1: Determine global dofs ...
15:34 L2ProductP1: Boundary treatment ...
15:34 L2ProductP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays9]" time="0.136584043503"><system-err>15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 L2ProductP1: Integrate the products of the shape functions on each element
15:34 L2ProductP1: Determine global dofs ...
15:34 L2ProductP1: Boundary treatment ...
15:34 L2ProductP1: Assemble system matrix ...
15:34 L2ProductP1: Integrate the products of the shape functions on each element
15:34 L2ProductP1: Determine global dofs ...
15:34 L2ProductP1: Boundary treatment ...
15:34 L2ProductP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays10]" time="0.0689239501953"><system-err>15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 L2ProductP1: Integrate the products of the shape functions on each element
15:34 L2ProductP1: Determine global dofs ...
15:34 L2ProductP1: Boundary treatment ...
15:34 L2ProductP1: Assemble system matrix ...
15:34 L2ProductP1: Integrate the products of the shape functions on each element
15:34 L2ProductP1: Determine global dofs ...
15:34 L2ProductP1: Boundary treatment ...
15:34 L2ProductP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays11]" time="0.0645849704742"><system-err>15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 L2ProductP1: Integrate the products of the shape functions on each element
15:34 L2ProductP1: Determine global dofs ...
15:34 L2ProductP1: Boundary treatment ...
15:34 L2ProductP1: Assemble system matrix ...
15:34 L2ProductP1: Integrate the products of the shape functions on each element
15:34 L2ProductP1: Determine global dofs ...
15:34 L2ProductP1: Boundary treatment ...
15:34 L2ProductP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays12]" time="0.0684082508087"><system-err>15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 L2ProductP1: Integrate the products of the shape functions on each element
15:34 L2ProductP1: Determine global dofs ...
15:34 L2ProductP1: Boundary treatment ...
15:34 L2ProductP1: Assemble system matrix ...
15:34 L2ProductP1: Integrate the products of the shape functions on each element
15:34 L2ProductP1: Determine global dofs ...
15:34 L2ProductP1: Boundary treatment ...
15:34 L2ProductP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays13]" time="0.0632519721985"><system-err>15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 L2ProductP1: Integrate the products of the shape functions on each element
15:34 L2ProductP1: Determine global dofs ...
15:34 L2ProductP1: Boundary treatment ...
15:34 L2ProductP1: Assemble system matrix ...
15:34 L2ProductP1: Integrate the products of the shape functions on each element
15:34 L2ProductP1: Determine global dofs ...
15:34 L2ProductP1: Boundary treatment ...
15:34 L2ProductP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays14]" time="0.0773038864136"><system-err>15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 L2ProductP1: Integrate the products of the shape functions on each element
15:34 L2ProductP1: Determine global dofs ...
15:34 L2ProductP1: Boundary treatment ...
15:34 L2ProductP1: Assemble system matrix ...
15:34 L2ProductP1: Integrate the products of the shape functions on each element
15:34 L2ProductP1: Determine global dofs ...
15:34 L2ProductP1: Boundary treatment ...
15:34 L2ProductP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays15]" time="0.075076341629"><system-err>15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
15:34 L2ProductP1: Integrate the products of the shape functions on each element
15:34 L2ProductP1: Determine global dofs ...
15:34 L2ProductP1: Boundary treatment ...
15:34 L2ProductP1: Assemble system matrix ...
15:34 L2ProductP1: Integrate the products of the shape functions on each element
15:34 L2ProductP1: Determine global dofs ...
15:34 L2ProductP1: Boundary treatment ...
15:34 L2ProductP1: Assemble system matrix ...
15:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:34 DiffusionOperatorP1: Determine global dofs ...
15:34 DiffusionOperatorP1: Boundary treatment ...
15:34 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays16]" time="0.0702769756317"><system-err>15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 L2ProductP1: Integrate the products of the shape functions on each element
15:35 L2ProductP1: Determine global dofs ...
15:35 L2ProductP1: Boundary treatment ...
15:35 L2ProductP1: Assemble system matrix ...
15:35 L2ProductP1: Integrate the products of the shape functions on each element
15:35 L2ProductP1: Determine global dofs ...
15:35 L2ProductP1: Boundary treatment ...
15:35 L2ProductP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays17]" time="0.0657477378845"><system-err>15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 L2ProductP1: Integrate the products of the shape functions on each element
15:35 L2ProductP1: Determine global dofs ...
15:35 L2ProductP1: Boundary treatment ...
15:35 L2ProductP1: Assemble system matrix ...
15:35 L2ProductP1: Integrate the products of the shape functions on each element
15:35 L2ProductP1: Determine global dofs ...
15:35 L2ProductP1: Boundary treatment ...
15:35 L2ProductP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays18]" time="0.0749299526215"><system-err>15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 L2ProductP1: Integrate the products of the shape functions on each element
15:35 L2ProductP1: Determine global dofs ...
15:35 L2ProductP1: Boundary treatment ...
15:35 L2ProductP1: Assemble system matrix ...
15:35 L2ProductP1: Integrate the products of the shape functions on each element
15:35 L2ProductP1: Determine global dofs ...
15:35 L2ProductP1: Boundary treatment ...
15:35 L2ProductP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays19]" time="0.0709156990051"><system-err>15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 L2ProductP1: Integrate the products of the shape functions on each element
15:35 L2ProductP1: Determine global dofs ...
15:35 L2ProductP1: Boundary treatment ...
15:35 L2ProductP1: Assemble system matrix ...
15:35 L2ProductP1: Integrate the products of the shape functions on each element
15:35 L2ProductP1: Determine global dofs ...
15:35 L2ProductP1: Boundary treatment ...
15:35 L2ProductP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays20]" time="0.0738348960876"><system-err>15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 L2ProductP1: Integrate the products of the shape functions on each element
15:35 L2ProductP1: Determine global dofs ...
15:35 L2ProductP1: Boundary treatment ...
15:35 L2ProductP1: Assemble system matrix ...
15:35 L2ProductP1: Integrate the products of the shape functions on each element
15:35 L2ProductP1: Determine global dofs ...
15:35 L2ProductP1: Boundary treatment ...
15:35 L2ProductP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays21]" time="0.0662257671356"><system-err>15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 L2ProductP1: Integrate the products of the shape functions on each element
15:35 L2ProductP1: Determine global dofs ...
15:35 L2ProductP1: Boundary treatment ...
15:35 L2ProductP1: Assemble system matrix ...
15:35 L2ProductP1: Integrate the products of the shape functions on each element
15:35 L2ProductP1: Determine global dofs ...
15:35 L2ProductP1: Boundary treatment ...
15:35 L2ProductP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays22]" time="0.0768299102783"><system-err>15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 L2ProductP1: Integrate the products of the shape functions on each element
15:35 L2ProductP1: Determine global dofs ...
15:35 L2ProductP1: Boundary treatment ...
15:35 L2ProductP1: Assemble system matrix ...
15:35 L2ProductP1: Integrate the products of the shape functions on each element
15:35 L2ProductP1: Determine global dofs ...
15:35 L2ProductP1: Boundary treatment ...
15:35 L2ProductP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays23]" time="0.0714452266693"><system-err>15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 L2ProductP1: Integrate the products of the shape functions on each element
15:35 L2ProductP1: Determine global dofs ...
15:35 L2ProductP1: Boundary treatment ...
15:35 L2ProductP1: Assemble system matrix ...
15:35 L2ProductP1: Integrate the products of the shape functions on each element
15:35 L2ProductP1: Determine global dofs ...
15:35 L2ProductP1: Boundary treatment ...
15:35 L2ProductP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays24]" time="0.0763022899628"><system-err>15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 L2ProductP1: Integrate the products of the shape functions on each element
15:35 L2ProductP1: Determine global dofs ...
15:35 L2ProductP1: Boundary treatment ...
15:35 L2ProductP1: Assemble system matrix ...
15:35 L2ProductP1: Integrate the products of the shape functions on each element
15:35 L2ProductP1: Determine global dofs ...
15:35 L2ProductP1: Boundary treatment ...
15:35 L2ProductP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays25]" time="0.071711063385"><system-err>15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 L2ProductP1: Integrate the products of the shape functions on each element
15:35 L2ProductP1: Determine global dofs ...
15:35 L2ProductP1: Boundary treatment ...
15:35 L2ProductP1: Assemble system matrix ...
15:35 L2ProductP1: Integrate the products of the shape functions on each element
15:35 L2ProductP1: Determine global dofs ...
15:35 L2ProductP1: Boundary treatment ...
15:35 L2ProductP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays26]" time="0.195498943329"><system-err>15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 L2ProductP1: Integrate the products of the shape functions on each element
15:35 L2ProductP1: Determine global dofs ...
15:35 L2ProductP1: Boundary treatment ...
15:35 L2ProductP1: Assemble system matrix ...
15:35 L2ProductP1: Integrate the products of the shape functions on each element
15:35 L2ProductP1: Determine global dofs ...
15:35 L2ProductP1: Boundary treatment ...
15:35 L2ProductP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays27]" time="0.12145280838"><system-err>15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:35 DiffusionOperatorP1: Assemble system matrix ...
15:35 L2ProductP1: Integrate the products of the shape functions on each element
15:35 L2ProductP1: Determine global dofs ...
15:35 L2ProductP1: Boundary treatment ...
15:35 L2ProductP1: Assemble system matrix ...
15:35 L2ProductP1: Integrate the products of the shape functions on each element
15:35 L2ProductP1: Determine global dofs ...
15:35 L2ProductP1: Boundary treatment ...
15:35 L2ProductP1: Assemble system matrix ...
15:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:35 DiffusionOperatorP1: Determine global dofs ...
15:35 DiffusionOperatorP1: Boundary treatment ...
15:36 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays28]" time="0.0847020149231"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays29]" time="0.0682191848755"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays30]" time="0.0837910175323"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays31]" time="0.0775029659271"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays32]" time="0.0767529010773"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays33]" time="0.0807330608368"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays34]" time="0.0792012214661"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays35]" time="0.0807139873505"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays36]" time="0.206708908081"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays37]" time="0.21327996254"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="119" name="test_apply2[operator_with_arrays38]" time="0.0737159252167"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays0]" time="0.00856804847717"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays1]" time="0.00814700126648"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays2]" time="0.00785994529724"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays3]" time="0.00784397125244"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays4]" time="0.0450720787048"><system-err>15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays5]" time="0.0327522754669"><system-err>15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays6]" time="0.036229133606"><system-err>15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays7]" time="0.0304980278015"><system-err>15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays8]" time="0.0415661334991"><system-err>15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays9]" time="0.0326080322266"><system-err>15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays10]" time="0.0338108539581"><system-err>15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays11]" time="0.0302219390869"><system-err>15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays12]" time="0.032977104187"><system-err>15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays13]" time="0.0291469097137"><system-err>15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays14]" time="0.0346193313599"><system-err>15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays15]" time="0.0294616222382"><system-err>15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays16]" time="0.0346572399139"><system-err>15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays17]" time="0.0291368961334"><system-err>15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays18]" time="0.0349400043488"><system-err>15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays19]" time="0.0307989120483"><system-err>15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays20]" time="0.0344915390015"><system-err>15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays21]" time="0.0308208465576"><system-err>15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays22]" time="0.0349500179291"><system-err>15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays23]" time="0.0295648574829"><system-err>15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 L2ProductP1: Integrate the products of the shape functions on each element
15:37 L2ProductP1: Determine global dofs ...
15:37 L2ProductP1: Boundary treatment ...
15:37 L2ProductP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays24]" time="0.0347409248352"><system-err>15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:37 DiffusionOperatorP1: Boundary treatment ...
15:37 DiffusionOperatorP1: Assemble system matrix ...
15:37 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:37 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:37 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays25]" time="0.0301551818848"><system-err>15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays26]" time="0.042120218277"><system-err>15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays27]" time="0.0333847999573"><system-err>15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays28]" time="0.00898671150208"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays29]" time="0.00751829147339"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays30]" time="0.00863480567932"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays31]" time="0.0080349445343"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays32]" time="0.00799894332886"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays33]" time="0.00738406181335"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays34]" time="0.00722813606262"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays35]" time="0.00732588768005"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays36]" time="0.0214419364929"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays37]" time="0.0207772254944"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="129" name="test_pairwise_apply2[operator_with_arrays38]" time="0.00797820091248"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays0]" time="0.00376915931702"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays1]" time="0.00385665893555"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays2]" time="0.00394606590271"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays3]" time="0.00373721122742"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays4]" time="0.0592429637909"><system-err>15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays5]" time="0.0390777587891"><system-err>15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays6]" time="0.0349917411804"><system-err>15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays7]" time="0.0299510955811"><system-err>15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays8]" time="0.0419070720673"><system-err>15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays9]" time="0.0327291488647"><system-err>15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays10]" time="0.0320618152618"><system-err>15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays11]" time="0.0270798206329"><system-err>15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays12]" time="0.0328061580658"><system-err>15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays13]" time="0.0272541046143"><system-err>15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays14]" time="0.0305688381195"><system-err>15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays15]" time="0.026465177536"><system-err>15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays16]" time="0.0324399471283"><system-err>15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays17]" time="0.0277562141418"><system-err>15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays18]" time="0.0322759151459"><system-err>15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays19]" time="0.0275719165802"><system-err>15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays20]" time="0.0326070785522"><system-err>15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays21]" time="0.0283319950104"><system-err>15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays22]" time="0.0323250293732"><system-err>15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays23]" time="0.02738904953"><system-err>15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays24]" time="0.0323538780212"><system-err>15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 L2ProductP1: Integrate the products of the shape functions on each element
15:38 L2ProductP1: Determine global dofs ...
15:38 L2ProductP1: Boundary treatment ...
15:38 L2ProductP1: Assemble system matrix ...
15:38 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:38 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:38 DiffusionOperatorP1: Determine global dofs ...
15:38 DiffusionOperatorP1: Boundary treatment ...
15:38 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays25]" time="0.0272479057312"><system-err>15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays26]" time="0.0409722328186"><system-err>15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays27]" time="0.0318260192871"><system-err>15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays28]" time="0.00330018997192"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays29]" time="0.00281143188477"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays30]" time="0.0030300617218"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays31]" time="0.0055980682373"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays32]" time="0.00579905509949"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays33]" time="0.00520896911621"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays34]" time="0.004878282547"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays35]" time="0.00484395027161"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays36]" time="0.0153851509094"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays37]" time="0.0150027275085"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="138" name="test_apply_transpose[operator_with_arrays38]" time="0.00655364990234"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays0]" time="0.00146293640137"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays1]" time="0.00133419036865"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays2]" time="0.00133109092712"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays3]" time="0.00132012367249"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays4]" time="0.0454301834106"><system-err>15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays5]" time="0.0353147983551"><system-err>15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays6]" time="0.036899805069"><system-err>15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays7]" time="0.0276229381561"><system-err>15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays8]" time="0.0315639972687"><system-err>15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays9]" time="0.0269124507904"><system-err>15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays10]" time="0.0310070514679"><system-err>15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays11]" time="0.0264689922333"><system-err>15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays12]" time="0.0315389633179"><system-err>15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays13]" time="0.0266649723053"><system-err>15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays14]" time="0.0315129756927"><system-err>15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays15]" time="0.0261509418488"><system-err>15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays16]" time="0.0318276882172"><system-err>15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays17]" time="0.0267786979675"><system-err>15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays18]" time="0.0313138961792"><system-err>15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays19]" time="0.0264229774475"><system-err>15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays20]" time="0.0320632457733"><system-err>15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays21]" time="0.027028799057"><system-err>15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays22]" time="0.0321562290192"><system-err>15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays23]" time="0.0270669460297"><system-err>15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays24]" time="0.0318491458893"><system-err>15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays25]" time="0.0280630588531"><system-err>15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays26]" time="0.0324168205261"><system-err>15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays27]" time="0.0268778800964"><system-err>15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 L2ProductP1: Integrate the products of the shape functions on each element
15:39 L2ProductP1: Determine global dofs ...
15:39 L2ProductP1: Boundary treatment ...
15:39 L2ProductP1: Assemble system matrix ...
15:39 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:39 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:39 DiffusionOperatorP1: Determine global dofs ...
15:39 DiffusionOperatorP1: Boundary treatment ...
15:39 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays28]" time="0.00334095954895"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays29]" time="0.00285387039185"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays30]" time="0.00326871871948"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays31]" time="0.00334811210632"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays32]" time="0.00349998474121"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays33]" time="0.00275611877441"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays34]" time="0.00248885154724"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays35]" time="0.00259184837341"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays36]" time="0.00639796257019"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays37]" time="0.00542306900024"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="154" name="test_apply_transpose_2[operator_with_arrays38]" time="0.00334167480469"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays0]" time="0.00145506858826"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays1]" time="0.00158715248108"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays2]" time="0.00155305862427"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays3]" time="0.00183820724487"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays4]" time="0.0487229824066"><system-err>15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays5]" time="0.0393269062042"><system-err>15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays6]" time="0.0352001190186"><system-err>15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays7]" time="0.0268890857697"><system-err>15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays8]" time="0.0334420204163"><system-err>15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays9]" time="0.0276322364807"><system-err>15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays10]" time="0.0302729606628"><system-err>15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays11]" time="0.0265529155731"><system-err>15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays12]" time="0.0318253040314"><system-err>15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays13]" time="0.0261268615723"><system-err>15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays14]" time="0.0305778980255"><system-err>15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays15]" time="0.026004076004"><system-err>15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays16]" time="0.0310158729553"><system-err>15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays17]" time="0.0263359546661"><system-err>15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays18]" time="0.0310652256012"><system-err>15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays19]" time="0.0270419120789"><system-err>15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays20]" time="0.0319249629974"><system-err>15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays21]" time="0.0270991325378"><system-err>15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays22]" time="0.0313100814819"><system-err>15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays23]" time="0.0260028839111"><system-err>15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays24]" time="0.0311462879181"><system-err>15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays25]" time="0.0268862247467"><system-err>15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays26]" time="0.034282207489"><system-err>15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays27]" time="0.0286042690277"><system-err>15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays28]" time="0.0034339427948"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays29]" time="0.00296711921692"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays30]" time="0.00304913520813"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays31]" time="0.00340294837952"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays32]" time="0.0034191608429"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays33]" time="0.00360107421875"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays34]" time="0.00330591201782"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays35]" time="0.00325894355774"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays36]" time="0.0090320110321"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays37]" time="0.00742530822754"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="165" name="test_T[operator_with_arrays38]" time="0.00400900840759"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays0]" time="0.00520777702332"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays1]" time="0.00120902061462"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays2]" time="0.00120306015015"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays3]" time="0.00675797462463"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays4]" time="0.0865921974182"><system-err>15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays5]" time="0.0567021369934"><system-err>15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 L2ProductP1: Integrate the products of the shape functions on each element
15:40 L2ProductP1: Determine global dofs ...
15:40 L2ProductP1: Boundary treatment ...
15:40 L2ProductP1: Assemble system matrix ...
15:40 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:40 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:40 DiffusionOperatorP1: Determine global dofs ...
15:40 DiffusionOperatorP1: Boundary treatment ...
15:40 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays6]" time="0.0537128448486"><system-err>15:41 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:41 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:41 DiffusionOperatorP1: Determine global dofs ...
15:41 DiffusionOperatorP1: Boundary treatment ...
15:41 DiffusionOperatorP1: Assemble system matrix ...
15:41 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:41 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:41 DiffusionOperatorP1: Determine global dofs ...
15:41 DiffusionOperatorP1: Boundary treatment ...
15:41 DiffusionOperatorP1: Assemble system matrix ...
15:41 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:41 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:41 DiffusionOperatorP1: Determine global dofs ...
15:41 DiffusionOperatorP1: Boundary treatment ...
15:41 DiffusionOperatorP1: Assemble system matrix ...
15:41 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:41 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:41 DiffusionOperatorP1: Determine global dofs ...
15:41 DiffusionOperatorP1: Boundary treatment ...
15:41 DiffusionOperatorP1: Assemble system matrix ...
15:41 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:41 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:41 DiffusionOperatorP1: Determine global dofs ...
15:41 DiffusionOperatorP1: Boundary treatment ...
15:41 DiffusionOperatorP1: Assemble system matrix ...
15:41 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:41 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:41 DiffusionOperatorP1: Determine global dofs ...
15:41 DiffusionOperatorP1: Boundary treatment ...
15:41 DiffusionOperatorP1: Assemble system matrix ...
15:41 L2ProductP1: Integrate the products of the shape functions on each element
15:41 L2ProductP1: Determine global dofs ...
15:41 L2ProductP1: Boundary treatment ...
15:41 L2ProductP1: Assemble system matrix ...
15:41 L2ProductP1: Integrate the products of the shape functions on each element
15:41 L2ProductP1: Determine global dofs ...
15:41 L2ProductP1: Boundary treatment ...
15:41 L2ProductP1: Assemble system matrix ...
15:41 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:41 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:41 DiffusionOperatorP1: Determine global dofs ...
15:41 DiffusionOperatorP1: Boundary treatment ...
15:41 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays7]" time="0.0462203025818"><system-err>15:41 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:41 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:41 DiffusionOperatorP1: Determine global dofs ...
15:41 DiffusionOperatorP1: Boundary treatment ...
15:41 DiffusionOperatorP1: Assemble system matrix ...
15:41 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:41 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:41 DiffusionOperatorP1: Determine global dofs ...
15:41 DiffusionOperatorP1: Boundary treatment ...
15:41 DiffusionOperatorP1: Assemble system matrix ...
15:41 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:41 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:41 DiffusionOperatorP1: Determine global dofs ...
15:41 DiffusionOperatorP1: Boundary treatment ...
15:41 DiffusionOperatorP1: Assemble system matrix ...
15:41 L2ProductP1: Integrate the products of the shape functions on each element
15:41 L2ProductP1: Determine global dofs ...
15:41 L2ProductP1: Boundary treatment ...
15:41 L2ProductP1: Assemble system matrix ...
15:41 L2ProductP1: Integrate the products of the shape functions on each element
15:41 L2ProductP1: Determine global dofs ...
15:41 L2ProductP1: Boundary treatment ...
15:41 L2ProductP1: Assemble system matrix ...
15:41 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:41 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:41 DiffusionOperatorP1: Determine global dofs ...
15:41 DiffusionOperatorP1: Boundary treatment ...
15:41 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays8]" time="1.00110507011"><system-err>15:41 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:41 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:41 DiffusionOperatorP1: Determine global dofs ...
15:41 DiffusionOperatorP1: Boundary treatment ...
15:41 DiffusionOperatorP1: Assemble system matrix ...
15:41 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:41 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:41 DiffusionOperatorP1: Determine global dofs ...
15:41 DiffusionOperatorP1: Boundary treatment ...
15:41 DiffusionOperatorP1: Assemble system matrix ...
15:41 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:41 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:41 DiffusionOperatorP1: Determine global dofs ...
15:41 DiffusionOperatorP1: Boundary treatment ...
15:41 DiffusionOperatorP1: Assemble system matrix ...
15:41 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:41 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:41 DiffusionOperatorP1: Determine global dofs ...
15:41 DiffusionOperatorP1: Boundary treatment ...
15:41 DiffusionOperatorP1: Assemble system matrix ...
15:41 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:41 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:41 DiffusionOperatorP1: Determine global dofs ...
15:41 DiffusionOperatorP1: Boundary treatment ...
15:41 DiffusionOperatorP1: Assemble system matrix ...
15:41 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:41 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:41 DiffusionOperatorP1: Determine global dofs ...
15:41 DiffusionOperatorP1: Boundary treatment ...
15:41 DiffusionOperatorP1: Assemble system matrix ...
15:41 L2ProductP1: Integrate the products of the shape functions on each element
15:41 L2ProductP1: Determine global dofs ...
15:41 L2ProductP1: Boundary treatment ...
15:41 L2ProductP1: Assemble system matrix ...
15:41 L2ProductP1: Integrate the products of the shape functions on each element
15:41 L2ProductP1: Determine global dofs ...
15:41 L2ProductP1: Boundary treatment ...
15:41 L2ProductP1: Assemble system matrix ...
15:41 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:41 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:41 DiffusionOperatorP1: Determine global dofs ...
15:41 DiffusionOperatorP1: Boundary treatment ...
15:41 DiffusionOperatorP1: Assemble system matrix ...
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:41 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays9]" time="1.44051980972"><system-err>15:42 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:42 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:42 DiffusionOperatorP1: Determine global dofs ...
15:42 DiffusionOperatorP1: Boundary treatment ...
15:42 DiffusionOperatorP1: Assemble system matrix ...
15:42 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:42 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:42 DiffusionOperatorP1: Determine global dofs ...
15:42 DiffusionOperatorP1: Boundary treatment ...
15:42 DiffusionOperatorP1: Assemble system matrix ...
15:42 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:42 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:42 DiffusionOperatorP1: Determine global dofs ...
15:42 DiffusionOperatorP1: Boundary treatment ...
15:42 DiffusionOperatorP1: Assemble system matrix ...
15:42 L2ProductP1: Integrate the products of the shape functions on each element
15:42 L2ProductP1: Determine global dofs ...
15:42 L2ProductP1: Boundary treatment ...
15:42 L2ProductP1: Assemble system matrix ...
15:42 L2ProductP1: Integrate the products of the shape functions on each element
15:42 L2ProductP1: Determine global dofs ...
15:42 L2ProductP1: Boundary treatment ...
15:42 L2ProductP1: Assemble system matrix ...
15:42 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:42 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:42 DiffusionOperatorP1: Determine global dofs ...
15:42 DiffusionOperatorP1: Boundary treatment ...
15:42 DiffusionOperatorP1: Assemble system matrix ...
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:42 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
15:43 lgmres: Converged after 2 iterations
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays10]" time="0.0339810848236"><system-err>15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 L2ProductP1: Integrate the products of the shape functions on each element
15:43 L2ProductP1: Determine global dofs ...
15:43 L2ProductP1: Boundary treatment ...
15:43 L2ProductP1: Assemble system matrix ...
15:43 L2ProductP1: Integrate the products of the shape functions on each element
15:43 L2ProductP1: Determine global dofs ...
15:43 L2ProductP1: Boundary treatment ...
15:43 L2ProductP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays11]" time="0.028373003006"><system-err>15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 L2ProductP1: Integrate the products of the shape functions on each element
15:43 L2ProductP1: Determine global dofs ...
15:43 L2ProductP1: Boundary treatment ...
15:43 L2ProductP1: Assemble system matrix ...
15:43 L2ProductP1: Integrate the products of the shape functions on each element
15:43 L2ProductP1: Determine global dofs ...
15:43 L2ProductP1: Boundary treatment ...
15:43 L2ProductP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays12]" time="0.031094789505"><system-err>15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 L2ProductP1: Integrate the products of the shape functions on each element
15:43 L2ProductP1: Determine global dofs ...
15:43 L2ProductP1: Boundary treatment ...
15:43 L2ProductP1: Assemble system matrix ...
15:43 L2ProductP1: Integrate the products of the shape functions on each element
15:43 L2ProductP1: Determine global dofs ...
15:43 L2ProductP1: Boundary treatment ...
15:43 L2ProductP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays13]" time="0.0262951850891"><system-err>15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 L2ProductP1: Integrate the products of the shape functions on each element
15:43 L2ProductP1: Determine global dofs ...
15:43 L2ProductP1: Boundary treatment ...
15:43 L2ProductP1: Assemble system matrix ...
15:43 L2ProductP1: Integrate the products of the shape functions on each element
15:43 L2ProductP1: Determine global dofs ...
15:43 L2ProductP1: Boundary treatment ...
15:43 L2ProductP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays14]" time="0.0314002037048"><system-err>15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 L2ProductP1: Integrate the products of the shape functions on each element
15:43 L2ProductP1: Determine global dofs ...
15:43 L2ProductP1: Boundary treatment ...
15:43 L2ProductP1: Assemble system matrix ...
15:43 L2ProductP1: Integrate the products of the shape functions on each element
15:43 L2ProductP1: Determine global dofs ...
15:43 L2ProductP1: Boundary treatment ...
15:43 L2ProductP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 newton:       Initial Residual: 0.000000e+00
/src/src/pymor/algorithms/newton.py:108: RuntimeWarning: invalid value encountered in double_scalars
  if err/error_sequence[0] &lt;= rtol:
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays15]" time="0.0270619392395"><system-err>15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 L2ProductP1: Integrate the products of the shape functions on each element
15:43 L2ProductP1: Determine global dofs ...
15:43 L2ProductP1: Boundary treatment ...
15:43 L2ProductP1: Assemble system matrix ...
15:43 L2ProductP1: Integrate the products of the shape functions on each element
15:43 L2ProductP1: Determine global dofs ...
15:43 L2ProductP1: Boundary treatment ...
15:43 L2ProductP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 newton:       Initial Residual: 0.000000e+00
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays16]" time="0.0325853824615"><system-err>15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 L2ProductP1: Integrate the products of the shape functions on each element
15:43 L2ProductP1: Determine global dofs ...
15:43 L2ProductP1: Boundary treatment ...
15:43 L2ProductP1: Assemble system matrix ...
15:43 L2ProductP1: Integrate the products of the shape functions on each element
15:43 L2ProductP1: Determine global dofs ...
15:43 L2ProductP1: Boundary treatment ...
15:43 L2ProductP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays17]" time="0.0270450115204"><system-err>15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 L2ProductP1: Integrate the products of the shape functions on each element
15:43 L2ProductP1: Determine global dofs ...
15:43 L2ProductP1: Boundary treatment ...
15:43 L2ProductP1: Assemble system matrix ...
15:43 L2ProductP1: Integrate the products of the shape functions on each element
15:43 L2ProductP1: Determine global dofs ...
15:43 L2ProductP1: Boundary treatment ...
15:43 L2ProductP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays18]" time="0.0312757492065"><system-err>15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 L2ProductP1: Integrate the products of the shape functions on each element
15:43 L2ProductP1: Determine global dofs ...
15:43 L2ProductP1: Boundary treatment ...
15:43 L2ProductP1: Assemble system matrix ...
15:43 L2ProductP1: Integrate the products of the shape functions on each element
15:43 L2ProductP1: Determine global dofs ...
15:43 L2ProductP1: Boundary treatment ...
15:43 L2ProductP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays19]" time="0.0276777744293"><system-err>15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 L2ProductP1: Integrate the products of the shape functions on each element
15:43 L2ProductP1: Determine global dofs ...
15:43 L2ProductP1: Boundary treatment ...
15:43 L2ProductP1: Assemble system matrix ...
15:43 L2ProductP1: Integrate the products of the shape functions on each element
15:43 L2ProductP1: Determine global dofs ...
15:43 L2ProductP1: Boundary treatment ...
15:43 L2ProductP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays20]" time="0.0320942401886"><system-err>15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 L2ProductP1: Integrate the products of the shape functions on each element
15:43 L2ProductP1: Determine global dofs ...
15:43 L2ProductP1: Boundary treatment ...
15:43 L2ProductP1: Assemble system matrix ...
15:43 L2ProductP1: Integrate the products of the shape functions on each element
15:43 L2ProductP1: Determine global dofs ...
15:43 L2ProductP1: Boundary treatment ...
15:43 L2ProductP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays21]" time="0.0269708633423"><system-err>15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 L2ProductP1: Integrate the products of the shape functions on each element
15:43 L2ProductP1: Determine global dofs ...
15:43 L2ProductP1: Boundary treatment ...
15:43 L2ProductP1: Assemble system matrix ...
15:43 L2ProductP1: Integrate the products of the shape functions on each element
15:43 L2ProductP1: Determine global dofs ...
15:43 L2ProductP1: Boundary treatment ...
15:43 L2ProductP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays22]" time="0.031485080719"><system-err>15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 L2ProductP1: Integrate the products of the shape functions on each element
15:43 L2ProductP1: Determine global dofs ...
15:43 L2ProductP1: Boundary treatment ...
15:43 L2ProductP1: Assemble system matrix ...
15:43 L2ProductP1: Integrate the products of the shape functions on each element
15:43 L2ProductP1: Determine global dofs ...
15:43 L2ProductP1: Boundary treatment ...
15:43 L2ProductP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays23]" time="0.027361869812"><system-err>15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
15:43 L2ProductP1: Integrate the products of the shape functions on each element
15:43 L2ProductP1: Determine global dofs ...
15:43 L2ProductP1: Boundary treatment ...
15:43 L2ProductP1: Assemble system matrix ...
15:43 L2ProductP1: Integrate the products of the shape functions on each element
15:43 L2ProductP1: Determine global dofs ...
15:43 L2ProductP1: Boundary treatment ...
15:43 L2ProductP1: Assemble system matrix ...
15:43 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:43 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:43 DiffusionOperatorP1: Determine global dofs ...
15:43 DiffusionOperatorP1: Boundary treatment ...
15:43 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays24]" time="0.0317807197571"><system-err>15:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:44 DiffusionOperatorP1: Determine global dofs ...
15:44 DiffusionOperatorP1: Boundary treatment ...
15:44 DiffusionOperatorP1: Assemble system matrix ...
15:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:44 DiffusionOperatorP1: Determine global dofs ...
15:44 DiffusionOperatorP1: Boundary treatment ...
15:44 DiffusionOperatorP1: Assemble system matrix ...
15:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:44 DiffusionOperatorP1: Determine global dofs ...
15:44 DiffusionOperatorP1: Boundary treatment ...
15:44 DiffusionOperatorP1: Assemble system matrix ...
15:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:44 DiffusionOperatorP1: Determine global dofs ...
15:44 DiffusionOperatorP1: Boundary treatment ...
15:44 DiffusionOperatorP1: Assemble system matrix ...
15:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:44 DiffusionOperatorP1: Determine global dofs ...
15:44 DiffusionOperatorP1: Boundary treatment ...
15:44 DiffusionOperatorP1: Assemble system matrix ...
15:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:44 DiffusionOperatorP1: Determine global dofs ...
15:44 DiffusionOperatorP1: Boundary treatment ...
15:44 DiffusionOperatorP1: Assemble system matrix ...
15:44 L2ProductP1: Integrate the products of the shape functions on each element
15:44 L2ProductP1: Determine global dofs ...
15:44 L2ProductP1: Boundary treatment ...
15:44 L2ProductP1: Assemble system matrix ...
15:44 L2ProductP1: Integrate the products of the shape functions on each element
15:44 L2ProductP1: Determine global dofs ...
15:44 L2ProductP1: Boundary treatment ...
15:44 L2ProductP1: Assemble system matrix ...
15:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:44 DiffusionOperatorP1: Determine global dofs ...
15:44 DiffusionOperatorP1: Boundary treatment ...
15:44 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays25]" time="0.027440071106"><system-err>15:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:44 DiffusionOperatorP1: Determine global dofs ...
15:44 DiffusionOperatorP1: Boundary treatment ...
15:44 DiffusionOperatorP1: Assemble system matrix ...
15:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:44 DiffusionOperatorP1: Determine global dofs ...
15:44 DiffusionOperatorP1: Boundary treatment ...
15:44 DiffusionOperatorP1: Assemble system matrix ...
15:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:44 DiffusionOperatorP1: Determine global dofs ...
15:44 DiffusionOperatorP1: Boundary treatment ...
15:44 DiffusionOperatorP1: Assemble system matrix ...
15:44 L2ProductP1: Integrate the products of the shape functions on each element
15:44 L2ProductP1: Determine global dofs ...
15:44 L2ProductP1: Boundary treatment ...
15:44 L2ProductP1: Assemble system matrix ...
15:44 L2ProductP1: Integrate the products of the shape functions on each element
15:44 L2ProductP1: Determine global dofs ...
15:44 L2ProductP1: Boundary treatment ...
15:44 L2ProductP1: Assemble system matrix ...
15:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:44 DiffusionOperatorP1: Determine global dofs ...
15:44 DiffusionOperatorP1: Boundary treatment ...
15:44 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays26]" time="0.0649447441101"><system-err>15:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:44 DiffusionOperatorP1: Determine global dofs ...
15:44 DiffusionOperatorP1: Boundary treatment ...
15:44 DiffusionOperatorP1: Assemble system matrix ...
15:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:44 DiffusionOperatorP1: Determine global dofs ...
15:44 DiffusionOperatorP1: Boundary treatment ...
15:44 DiffusionOperatorP1: Assemble system matrix ...
15:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:44 DiffusionOperatorP1: Determine global dofs ...
15:44 DiffusionOperatorP1: Boundary treatment ...
15:44 DiffusionOperatorP1: Assemble system matrix ...
15:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:44 DiffusionOperatorP1: Determine global dofs ...
15:44 DiffusionOperatorP1: Boundary treatment ...
15:44 DiffusionOperatorP1: Assemble system matrix ...
15:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:44 DiffusionOperatorP1: Determine global dofs ...
15:44 DiffusionOperatorP1: Boundary treatment ...
15:44 DiffusionOperatorP1: Assemble system matrix ...
15:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:44 DiffusionOperatorP1: Determine global dofs ...
15:44 DiffusionOperatorP1: Boundary treatment ...
15:44 DiffusionOperatorP1: Assemble system matrix ...
15:44 L2ProductP1: Integrate the products of the shape functions on each element
15:44 L2ProductP1: Determine global dofs ...
15:44 L2ProductP1: Boundary treatment ...
15:44 L2ProductP1: Assemble system matrix ...
15:44 L2ProductP1: Integrate the products of the shape functions on each element
15:44 L2ProductP1: Determine global dofs ...
15:44 L2ProductP1: Boundary treatment ...
15:44 L2ProductP1: Assemble system matrix ...
15:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:44 DiffusionOperatorP1: Determine global dofs ...
15:44 DiffusionOperatorP1: Boundary treatment ...
15:44 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays27]" time="0.0601818561554"><system-err>15:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:44 DiffusionOperatorP1: Determine global dofs ...
15:44 DiffusionOperatorP1: Boundary treatment ...
15:44 DiffusionOperatorP1: Assemble system matrix ...
15:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:44 DiffusionOperatorP1: Determine global dofs ...
15:44 DiffusionOperatorP1: Boundary treatment ...
15:44 DiffusionOperatorP1: Assemble system matrix ...
15:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:44 DiffusionOperatorP1: Determine global dofs ...
15:44 DiffusionOperatorP1: Boundary treatment ...
15:44 DiffusionOperatorP1: Assemble system matrix ...
15:44 L2ProductP1: Integrate the products of the shape functions on each element
15:44 L2ProductP1: Determine global dofs ...
15:44 L2ProductP1: Boundary treatment ...
15:44 L2ProductP1: Assemble system matrix ...
15:44 L2ProductP1: Integrate the products of the shape functions on each element
15:44 L2ProductP1: Determine global dofs ...
15:44 L2ProductP1: Boundary treatment ...
15:44 L2ProductP1: Assemble system matrix ...
15:44 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:44 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:44 DiffusionOperatorP1: Determine global dofs ...
15:44 DiffusionOperatorP1: Boundary treatment ...
15:44 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays28]" time="0.00386786460876"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays29]" time="0.00331377983093"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays30]" time="0.00403118133545"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays31]" time="0.00327515602112"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays32]" time="0.00360584259033"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays33]" time="0.00930094718933"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays34]" time="0.00950193405151"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays35]" time="0.00943803787231"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays36]" time="0.0271682739258"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays37]" time="3.12554168701"><system-err>15:44 lgmres: Converged after 2 iterations
15:44 lgmres: Converged after 2 iterations
15:44 lgmres: Converged after 2 iterations
15:44 lgmres: Converged after 2 iterations
15:44 lgmres: Converged after 2 iterations
15:44 lgmres: Converged after 2 iterations
15:44 lgmres: Converged after 2 iterations
15:44 lgmres: Converged after 2 iterations
15:44 lgmres: Converged after 2 iterations
15:44 lgmres: Converged after 2 iterations
15:44 lgmres: Converged after 2 iterations
15:44 lgmres: Converged after 2 iterations
15:45 lgmres: Converged after 2 iterations
15:45 lgmres: Converged after 2 iterations
15:45 lgmres: Converged after 2 iterations
15:45 lgmres: Converged after 2 iterations
15:45 lgmres: Converged after 2 iterations
15:45 lgmres: Converged after 2 iterations
15:45 lgmres: Converged after 2 iterations
15:45 lgmres: Converged after 2 iterations
15:45 lgmres: Converged after 2 iterations
15:45 lgmres: Converged after 2 iterations
15:45 lgmres: Converged after 2 iterations
15:45 lgmres: Converged after 2 iterations
15:45 lgmres: Converged after 2 iterations
15:45 lgmres: Converged after 2 iterations
15:45 lgmres: Converged after 2 iterations
15:45 lgmres: Converged after 2 iterations
15:45 lgmres: Converged after 2 iterations
15:45 lgmres: Converged after 2 iterations
15:46 lgmres: Converged after 2 iterations
15:46 lgmres: Converged after 2 iterations
15:46 lgmres: Converged after 2 iterations
15:46 lgmres: Converged after 2 iterations
15:46 lgmres: Converged after 2 iterations
15:46 lgmres: Converged after 2 iterations
15:46 lgmres: Converged after 2 iterations
15:46 lgmres: Converged after 2 iterations
15:46 lgmres: Converged after 2 iterations
15:46 lgmres: Converged after 2 iterations
15:46 lgmres: Converged after 2 iterations
15:46 lgmres: Converged after 2 iterations
15:46 lgmres: Converged after 2 iterations
15:46 lgmres: Converged after 2 iterations
15:46 lgmres: Converged after 2 iterations
15:46 lgmres: Converged after 2 iterations
15:46 lgmres: Converged after 2 iterations
15:46 lgmres: Converged after 2 iterations
15:47 lgmres: Converged after 2 iterations
15:47 lgmres: Converged after 2 iterations
15:47 lgmres: Converged after 2 iterations
15:47 lgmres: Converged after 2 iterations
15:47 lgmres: Converged after 2 iterations
15:47 lgmres: Converged after 2 iterations
15:47 lgmres: Converged after 2 iterations
15:47 lgmres: Converged after 2 iterations
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="176" name="test_apply_inverse[operator_with_arrays38]" time="0.00435376167297"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays0]" time="0.00544118881226"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays1]" time="0.00120806694031"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays2]" time="0.0012378692627"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays3]" time="0.00709772109985"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays4]" time="0.093535900116"><system-err>15:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:47 DiffusionOperatorP1: Determine global dofs ...
15:47 DiffusionOperatorP1: Boundary treatment ...
15:47 DiffusionOperatorP1: Assemble system matrix ...
15:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:47 DiffusionOperatorP1: Determine global dofs ...
15:47 DiffusionOperatorP1: Boundary treatment ...
15:47 DiffusionOperatorP1: Assemble system matrix ...
15:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:47 DiffusionOperatorP1: Determine global dofs ...
15:47 DiffusionOperatorP1: Boundary treatment ...
15:47 DiffusionOperatorP1: Assemble system matrix ...
15:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:47 DiffusionOperatorP1: Determine global dofs ...
15:47 DiffusionOperatorP1: Boundary treatment ...
15:47 DiffusionOperatorP1: Assemble system matrix ...
15:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:47 DiffusionOperatorP1: Determine global dofs ...
15:47 DiffusionOperatorP1: Boundary treatment ...
15:47 DiffusionOperatorP1: Assemble system matrix ...
15:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:47 DiffusionOperatorP1: Determine global dofs ...
15:47 DiffusionOperatorP1: Boundary treatment ...
15:47 DiffusionOperatorP1: Assemble system matrix ...
15:47 L2ProductP1: Integrate the products of the shape functions on each element
15:47 L2ProductP1: Determine global dofs ...
15:47 L2ProductP1: Boundary treatment ...
15:47 L2ProductP1: Assemble system matrix ...
15:47 L2ProductP1: Integrate the products of the shape functions on each element
15:47 L2ProductP1: Determine global dofs ...
15:47 L2ProductP1: Boundary treatment ...
15:47 L2ProductP1: Assemble system matrix ...
15:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:47 DiffusionOperatorP1: Determine global dofs ...
15:47 DiffusionOperatorP1: Boundary treatment ...
15:47 DiffusionOperatorP1: Assemble system matrix ...
/usr/local/lib/python2.7/site-packages/scipy/sparse/linalg/dsolve/linsolve.py:253: SparseEfficiencyWarning: splu requires CSC matrix format
  warn(&apos;splu requires CSC matrix format&apos;, SparseEfficiencyWarning)
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays5]" time="0.0643062591553"><system-err>15:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:47 DiffusionOperatorP1: Determine global dofs ...
15:47 DiffusionOperatorP1: Boundary treatment ...
15:47 DiffusionOperatorP1: Assemble system matrix ...
15:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:47 DiffusionOperatorP1: Determine global dofs ...
15:47 DiffusionOperatorP1: Boundary treatment ...
15:47 DiffusionOperatorP1: Assemble system matrix ...
15:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:47 DiffusionOperatorP1: Determine global dofs ...
15:47 DiffusionOperatorP1: Boundary treatment ...
15:47 DiffusionOperatorP1: Assemble system matrix ...
15:47 L2ProductP1: Integrate the products of the shape functions on each element
15:47 L2ProductP1: Determine global dofs ...
15:47 L2ProductP1: Boundary treatment ...
15:47 L2ProductP1: Assemble system matrix ...
15:47 L2ProductP1: Integrate the products of the shape functions on each element
15:47 L2ProductP1: Determine global dofs ...
15:47 L2ProductP1: Boundary treatment ...
15:47 L2ProductP1: Assemble system matrix ...
15:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:47 DiffusionOperatorP1: Determine global dofs ...
15:47 DiffusionOperatorP1: Boundary treatment ...
15:47 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays6]" time="0.0633358955383"><system-err>15:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:47 DiffusionOperatorP1: Determine global dofs ...
15:47 DiffusionOperatorP1: Boundary treatment ...
15:47 DiffusionOperatorP1: Assemble system matrix ...
15:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:47 DiffusionOperatorP1: Determine global dofs ...
15:47 DiffusionOperatorP1: Boundary treatment ...
15:47 DiffusionOperatorP1: Assemble system matrix ...
15:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:47 DiffusionOperatorP1: Determine global dofs ...
15:47 DiffusionOperatorP1: Boundary treatment ...
15:47 DiffusionOperatorP1: Assemble system matrix ...
15:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:47 DiffusionOperatorP1: Determine global dofs ...
15:47 DiffusionOperatorP1: Boundary treatment ...
15:47 DiffusionOperatorP1: Assemble system matrix ...
15:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:47 DiffusionOperatorP1: Determine global dofs ...
15:47 DiffusionOperatorP1: Boundary treatment ...
15:47 DiffusionOperatorP1: Assemble system matrix ...
15:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:47 DiffusionOperatorP1: Determine global dofs ...
15:47 DiffusionOperatorP1: Boundary treatment ...
15:47 DiffusionOperatorP1: Assemble system matrix ...
15:47 L2ProductP1: Integrate the products of the shape functions on each element
15:47 L2ProductP1: Determine global dofs ...
15:47 L2ProductP1: Boundary treatment ...
15:47 L2ProductP1: Assemble system matrix ...
15:47 L2ProductP1: Integrate the products of the shape functions on each element
15:47 L2ProductP1: Determine global dofs ...
15:47 L2ProductP1: Boundary treatment ...
15:47 L2ProductP1: Assemble system matrix ...
15:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:47 DiffusionOperatorP1: Determine global dofs ...
15:47 DiffusionOperatorP1: Boundary treatment ...
15:47 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays7]" time="0.0563149452209"><system-err>15:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:47 DiffusionOperatorP1: Determine global dofs ...
15:47 DiffusionOperatorP1: Boundary treatment ...
15:47 DiffusionOperatorP1: Assemble system matrix ...
15:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:47 DiffusionOperatorP1: Determine global dofs ...
15:47 DiffusionOperatorP1: Boundary treatment ...
15:47 DiffusionOperatorP1: Assemble system matrix ...
15:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:47 DiffusionOperatorP1: Determine global dofs ...
15:47 DiffusionOperatorP1: Boundary treatment ...
15:47 DiffusionOperatorP1: Assemble system matrix ...
15:47 L2ProductP1: Integrate the products of the shape functions on each element
15:47 L2ProductP1: Determine global dofs ...
15:47 L2ProductP1: Boundary treatment ...
15:47 L2ProductP1: Assemble system matrix ...
15:47 L2ProductP1: Integrate the products of the shape functions on each element
15:47 L2ProductP1: Determine global dofs ...
15:47 L2ProductP1: Boundary treatment ...
15:47 L2ProductP1: Assemble system matrix ...
15:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:47 DiffusionOperatorP1: Determine global dofs ...
15:47 DiffusionOperatorP1: Boundary treatment ...
15:47 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays8]" time="1.64644503593"><system-err>15:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:47 DiffusionOperatorP1: Determine global dofs ...
15:47 DiffusionOperatorP1: Boundary treatment ...
15:47 DiffusionOperatorP1: Assemble system matrix ...
15:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:47 DiffusionOperatorP1: Determine global dofs ...
15:47 DiffusionOperatorP1: Boundary treatment ...
15:47 DiffusionOperatorP1: Assemble system matrix ...
15:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:47 DiffusionOperatorP1: Determine global dofs ...
15:47 DiffusionOperatorP1: Boundary treatment ...
15:47 DiffusionOperatorP1: Assemble system matrix ...
15:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:47 DiffusionOperatorP1: Determine global dofs ...
15:47 DiffusionOperatorP1: Boundary treatment ...
15:47 DiffusionOperatorP1: Assemble system matrix ...
15:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:47 DiffusionOperatorP1: Determine global dofs ...
15:47 DiffusionOperatorP1: Boundary treatment ...
15:47 DiffusionOperatorP1: Assemble system matrix ...
15:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:47 DiffusionOperatorP1: Determine global dofs ...
15:47 DiffusionOperatorP1: Boundary treatment ...
15:47 DiffusionOperatorP1: Assemble system matrix ...
15:47 L2ProductP1: Integrate the products of the shape functions on each element
15:47 L2ProductP1: Determine global dofs ...
15:47 L2ProductP1: Boundary treatment ...
15:47 L2ProductP1: Assemble system matrix ...
15:47 L2ProductP1: Integrate the products of the shape functions on each element
15:47 L2ProductP1: Determine global dofs ...
15:47 L2ProductP1: Boundary treatment ...
15:47 L2ProductP1: Assemble system matrix ...
15:47 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:47 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:47 DiffusionOperatorP1: Determine global dofs ...
15:47 DiffusionOperatorP1: Boundary treatment ...
15:47 DiffusionOperatorP1: Assemble system matrix ...
15:47 lgmres: Converged after 2 iterations
15:47 lgmres: Converged after 2 iterations
15:47 lgmres: Converged after 2 iterations
15:47 lgmres: Converged after 2 iterations
15:47 lgmres: Converged after 2 iterations
15:47 lgmres: Converged after 2 iterations
15:47 lgmres: Converged after 2 iterations
15:47 lgmres: Converged after 2 iterations
15:47 lgmres: Converged after 2 iterations
15:47 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:48 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays9]" time="1.91900491714"><system-err>15:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:49 DiffusionOperatorP1: Determine global dofs ...
15:49 DiffusionOperatorP1: Boundary treatment ...
15:49 DiffusionOperatorP1: Assemble system matrix ...
15:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:49 DiffusionOperatorP1: Determine global dofs ...
15:49 DiffusionOperatorP1: Boundary treatment ...
15:49 DiffusionOperatorP1: Assemble system matrix ...
15:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:49 DiffusionOperatorP1: Determine global dofs ...
15:49 DiffusionOperatorP1: Boundary treatment ...
15:49 DiffusionOperatorP1: Assemble system matrix ...
15:49 L2ProductP1: Integrate the products of the shape functions on each element
15:49 L2ProductP1: Determine global dofs ...
15:49 L2ProductP1: Boundary treatment ...
15:49 L2ProductP1: Assemble system matrix ...
15:49 L2ProductP1: Integrate the products of the shape functions on each element
15:49 L2ProductP1: Determine global dofs ...
15:49 L2ProductP1: Boundary treatment ...
15:49 L2ProductP1: Assemble system matrix ...
15:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:49 DiffusionOperatorP1: Determine global dofs ...
15:49 DiffusionOperatorP1: Boundary treatment ...
15:49 DiffusionOperatorP1: Assemble system matrix ...
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:49 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:50 lgmres: Converged after 2 iterations
15:51 lgmres: Converged after 2 iterations
15:51 lgmres: Converged after 2 iterations
15:51 lgmres: Converged after 2 iterations
15:51 lgmres: Converged after 2 iterations
15:51 lgmres: Converged after 2 iterations
15:51 lgmres: Converged after 2 iterations
15:51 lgmres: Converged after 2 iterations
15:51 lgmres: Converged after 2 iterations
15:51 lgmres: Converged after 2 iterations
15:51 lgmres: Converged after 2 iterations
15:51 lgmres: Converged after 2 iterations
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays10]" time="0.0344910621643"><system-err>15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays11]" time="0.0289378166199"><system-err>15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays12]" time="0.0314869880676"><system-err>15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays13]" time="0.0267772674561"><system-err>15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays14]" time="0.0310192108154"><system-err>15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays15]" time="0.026909828186"><system-err>15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays16]" time="0.0313141345978"><system-err>15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays17]" time="0.0273311138153"><system-err>15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays18]" time="0.0318291187286"><system-err>15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays19]" time="0.0271039009094"><system-err>15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays20]" time="0.0315499305725"><system-err>15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays21]" time="0.0279932022095"><system-err>15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays22]" time="0.0313189029694"><system-err>15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays23]" time="0.0268409252167"><system-err>15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays24]" time="0.0330140590668"><system-err>15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays25]" time="0.0268857479095"><system-err>15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays26]" time="0.0739419460297"><system-err>15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays27]" time="0.0665111541748"><system-err>15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 L2ProductP1: Integrate the products of the shape functions on each element
15:51 L2ProductP1: Determine global dofs ...
15:51 L2ProductP1: Boundary treatment ...
15:51 L2ProductP1: Assemble system matrix ...
15:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:51 DiffusionOperatorP1: Determine global dofs ...
15:51 DiffusionOperatorP1: Boundary treatment ...
15:51 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays28]" time="0.00378799438477"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays29]" time="0.00317406654358"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays30]" time="0.00321269035339"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays31]" time="0.0032331943512"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays32]" time="0.00350093841553"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays33]" time="0.00958490371704"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays34]" time="0.00913596153259"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays35]" time="0.0092830657959"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays36]" time="0.0290479660034"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays37]" time="3.65837597847"><system-err>15:52 lgmres: Converged after 2 iterations
15:52 lgmres: Converged after 2 iterations
15:52 lgmres: Converged after 2 iterations
15:52 lgmres: Converged after 2 iterations
15:52 lgmres: Converged after 2 iterations
15:52 lgmres: Converged after 2 iterations
15:52 lgmres: Converged after 2 iterations
15:52 lgmres: Converged after 2 iterations
15:52 lgmres: Converged after 2 iterations
15:52 lgmres: Converged after 2 iterations
15:52 lgmres: Converged after 2 iterations
15:52 lgmres: Converged after 2 iterations
15:52 lgmres: Converged after 2 iterations
15:52 lgmres: Converged after 2 iterations
15:52 lgmres: Converged after 2 iterations
15:52 lgmres: Converged after 2 iterations
15:53 lgmres: Converged after 2 iterations
15:53 lgmres: Converged after 2 iterations
15:53 lgmres: Converged after 2 iterations
15:53 lgmres: Converged after 2 iterations
15:53 lgmres: Converged after 2 iterations
15:53 lgmres: Converged after 2 iterations
15:53 lgmres: Converged after 2 iterations
15:53 lgmres: Converged after 2 iterations
15:53 lgmres: Converged after 2 iterations
15:53 lgmres: Converged after 2 iterations
15:53 lgmres: Converged after 2 iterations
15:53 lgmres: Converged after 2 iterations
15:53 lgmres: Converged after 2 iterations
15:53 lgmres: Converged after 2 iterations
15:53 lgmres: Converged after 2 iterations
15:53 lgmres: Converged after 2 iterations
15:53 lgmres: Converged after 2 iterations
15:53 lgmres: Converged after 2 iterations
15:54 lgmres: Converged after 2 iterations
15:54 lgmres: Converged after 2 iterations
15:54 lgmres: Converged after 2 iterations
15:54 lgmres: Converged after 2 iterations
15:54 lgmres: Converged after 2 iterations
15:54 lgmres: Converged after 2 iterations
15:54 lgmres: Converged after 2 iterations
15:54 lgmres: Converged after 2 iterations
15:54 lgmres: Converged after 2 iterations
15:54 lgmres: Converged after 2 iterations
15:54 lgmres: Converged after 2 iterations
15:54 lgmres: Converged after 2 iterations
15:54 lgmres: Converged after 2 iterations
15:54 lgmres: Converged after 2 iterations
15:54 lgmres: Converged after 2 iterations
15:54 lgmres: Converged after 2 iterations
15:54 lgmres: Converged after 2 iterations
15:54 lgmres: Converged after 2 iterations
15:55 lgmres: Converged after 2 iterations
15:55 lgmres: Converged after 2 iterations
15:55 lgmres: Converged after 2 iterations
15:55 lgmres: Converged after 2 iterations
15:55 lgmres: Converged after 2 iterations
15:55 lgmres: Converged after 2 iterations
15:55 lgmres: Converged after 2 iterations
15:55 lgmres: Converged after 2 iterations
15:55 lgmres: Converged after 2 iterations
15:55 lgmres: Converged after 2 iterations
15:55 lgmres: Converged after 2 iterations
15:55 lgmres: Converged after 2 iterations
15:55 lgmres: Converged after 2 iterations
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="189" name="test_apply_inverse_transpose[operator_with_arrays38]" time="0.00377893447876"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays0]" time="0.00165176391602"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays1]" time="0.00168323516846"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays2]" time="0.00167989730835"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays3]" time="0.00170993804932"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays4]" time="0.046807050705"><system-err>15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 L2ProductP1: Integrate the products of the shape functions on each element
15:55 L2ProductP1: Determine global dofs ...
15:55 L2ProductP1: Boundary treatment ...
15:55 L2ProductP1: Assemble system matrix ...
15:55 L2ProductP1: Integrate the products of the shape functions on each element
15:55 L2ProductP1: Determine global dofs ...
15:55 L2ProductP1: Boundary treatment ...
15:55 L2ProductP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays5]" time="0.038106918335"><system-err>15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 L2ProductP1: Integrate the products of the shape functions on each element
15:55 L2ProductP1: Determine global dofs ...
15:55 L2ProductP1: Boundary treatment ...
15:55 L2ProductP1: Assemble system matrix ...
15:55 L2ProductP1: Integrate the products of the shape functions on each element
15:55 L2ProductP1: Determine global dofs ...
15:55 L2ProductP1: Boundary treatment ...
15:55 L2ProductP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays6]" time="0.0352780818939"><system-err>15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 L2ProductP1: Integrate the products of the shape functions on each element
15:55 L2ProductP1: Determine global dofs ...
15:55 L2ProductP1: Boundary treatment ...
15:55 L2ProductP1: Assemble system matrix ...
15:55 L2ProductP1: Integrate the products of the shape functions on each element
15:55 L2ProductP1: Determine global dofs ...
15:55 L2ProductP1: Boundary treatment ...
15:55 L2ProductP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays7]" time="0.0282118320465"><system-err>15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 L2ProductP1: Integrate the products of the shape functions on each element
15:55 L2ProductP1: Determine global dofs ...
15:55 L2ProductP1: Boundary treatment ...
15:55 L2ProductP1: Assemble system matrix ...
15:55 L2ProductP1: Integrate the products of the shape functions on each element
15:55 L2ProductP1: Determine global dofs ...
15:55 L2ProductP1: Boundary treatment ...
15:55 L2ProductP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays8]" time="0.0323219299316"><system-err>15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 L2ProductP1: Integrate the products of the shape functions on each element
15:55 L2ProductP1: Determine global dofs ...
15:55 L2ProductP1: Boundary treatment ...
15:55 L2ProductP1: Assemble system matrix ...
15:55 L2ProductP1: Integrate the products of the shape functions on each element
15:55 L2ProductP1: Determine global dofs ...
15:55 L2ProductP1: Boundary treatment ...
15:55 L2ProductP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays9]" time="0.027853012085"><system-err>15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 L2ProductP1: Integrate the products of the shape functions on each element
15:55 L2ProductP1: Determine global dofs ...
15:55 L2ProductP1: Boundary treatment ...
15:55 L2ProductP1: Assemble system matrix ...
15:55 L2ProductP1: Integrate the products of the shape functions on each element
15:55 L2ProductP1: Determine global dofs ...
15:55 L2ProductP1: Boundary treatment ...
15:55 L2ProductP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays10]" time="0.0311918258667"><system-err>15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 L2ProductP1: Integrate the products of the shape functions on each element
15:55 L2ProductP1: Determine global dofs ...
15:55 L2ProductP1: Boundary treatment ...
15:55 L2ProductP1: Assemble system matrix ...
15:55 L2ProductP1: Integrate the products of the shape functions on each element
15:55 L2ProductP1: Determine global dofs ...
15:55 L2ProductP1: Boundary treatment ...
15:55 L2ProductP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays11]" time="0.0264649391174"><system-err>15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 L2ProductP1: Integrate the products of the shape functions on each element
15:55 L2ProductP1: Determine global dofs ...
15:55 L2ProductP1: Boundary treatment ...
15:55 L2ProductP1: Assemble system matrix ...
15:55 L2ProductP1: Integrate the products of the shape functions on each element
15:55 L2ProductP1: Determine global dofs ...
15:55 L2ProductP1: Boundary treatment ...
15:55 L2ProductP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays12]" time="0.0309810638428"><system-err>15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
15:55 L2ProductP1: Integrate the products of the shape functions on each element
15:55 L2ProductP1: Determine global dofs ...
15:55 L2ProductP1: Boundary treatment ...
15:55 L2ProductP1: Assemble system matrix ...
15:55 L2ProductP1: Integrate the products of the shape functions on each element
15:55 L2ProductP1: Determine global dofs ...
15:55 L2ProductP1: Boundary treatment ...
15:55 L2ProductP1: Assemble system matrix ...
15:55 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:55 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:55 DiffusionOperatorP1: Determine global dofs ...
15:55 DiffusionOperatorP1: Boundary treatment ...
15:55 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays13]" time="0.0266828536987"><system-err>15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays14]" time="0.0323069095612"><system-err>15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays15]" time="0.0269687175751"><system-err>15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays16]" time="0.0324649810791"><system-err>15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays17]" time="0.0267555713654"><system-err>15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays18]" time="0.0318460464478"><system-err>15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays19]" time="0.026880979538"><system-err>15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays20]" time="0.0312027931213"><system-err>15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays21]" time="0.0263679027557"><system-err>15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays22]" time="0.0318820476532"><system-err>15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays23]" time="0.026505947113"><system-err>15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays24]" time="0.0313758850098"><system-err>15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays25]" time="0.0273408889771"><system-err>15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays26]" time="0.0318441390991"><system-err>15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays27]" time="0.0268468856812"><system-err>15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays28]" time="0.00397491455078"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays29]" time="0.00339698791504"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays30]" time="0.00391411781311"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays31]" time="0.00380206108093"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays32]" time="0.00373506546021"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays33]" time="0.00538301467896"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays34]" time="0.00354599952698"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays35]" time="0.00391507148743"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays36]" time="0.00660514831543"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays37]" time="0.00601696968079"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="207" name="test_project[operator_with_arrays38]" time="0.00396108627319"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays0]" time="0.00228977203369"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays1]" time="0.00261688232422"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays2]" time="0.0027596950531"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays3]" time="0.00255417823792"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays4]" time="0.0526242256165"><system-err>15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays5]" time="0.0417098999023"><system-err>15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays6]" time="0.0329840183258"><system-err>15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays7]" time="0.0278718471527"><system-err>15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays8]" time="0.0369322299957"><system-err>15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays9]" time="0.0295119285583"><system-err>15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays10]" time="0.0317692756653"><system-err>15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays11]" time="0.0273377895355"><system-err>15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays12]" time="0.0313801765442"><system-err>15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays13]" time="0.0269200801849"><system-err>15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays14]" time="0.0316598415375"><system-err>15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays15]" time="0.0270311832428"><system-err>15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays16]" time="0.0319032669067"><system-err>15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 L2ProductP1: Integrate the products of the shape functions on each element
15:56 L2ProductP1: Determine global dofs ...
15:56 L2ProductP1: Boundary treatment ...
15:56 L2ProductP1: Assemble system matrix ...
15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:56 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays17]" time="0.0272750854492"><system-err>15:56 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:56 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:56 DiffusionOperatorP1: Determine global dofs ...
15:56 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays18]" time="0.0328798294067"><system-err>15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays19]" time="0.027361869812"><system-err>15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays20]" time="0.032906293869"><system-err>15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays21]" time="0.0272607803345"><system-err>15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays22]" time="0.0316071510315"><system-err>15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays23]" time="0.0273110866547"><system-err>15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays24]" time="0.0319719314575"><system-err>15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays25]" time="0.0271689891815"><system-err>15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays26]" time="0.0332880020142"><system-err>15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays27]" time="0.0279111862183"><system-err>15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays28]" time="0.00536417961121"><system-err>15:57 |WARNING|ComponentProjection: Using inefficient generic projection operator
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays29]" time="0.00442576408386"><system-err>15:57 |WARNING|ComponentProjection: Using inefficient generic projection operator
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays30]" time="0.00486707687378"><system-err>15:57 |WARNING|ComponentProjection: Using inefficient generic projection operator
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays31]" time="0.00594592094421"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays32]" time="0.004478931427"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays33]" time="0.00695180892944"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays34]" time="0.00688695907593"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays35]" time="0.00681591033936"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays36]" time="0.00793814659119"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays37]" time="0.00744104385376"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="217" name="test_project_2[operator_with_arrays38]" time="0.00453305244446"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products0]" time="0.0468504428864"><system-err>15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products1]" time="0.0387139320374"><system-err>15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products2]" time="0.0393340587616"><system-err>15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products3]" time="0.027706861496"><system-err>15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products4]" time="0.0323898792267"><system-err>15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products5]" time="0.0274879932404"><system-err>15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products6]" time="0.0306651592255"><system-err>15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products7]" time="0.0265889167786"><system-err>15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products8]" time="0.030455827713"><system-err>15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products9]" time="0.0267739295959"><system-err>15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products10]" time="0.0309240818024"><system-err>15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products11]" time="0.0265519618988"><system-err>15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products12]" time="0.031200170517"><system-err>15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products13]" time="0.0268268585205"><system-err>15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products14]" time="0.0311379432678"><system-err>15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products15]" time="0.0264980792999"><system-err>15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products16]" time="0.0315299034119"><system-err>15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products17]" time="0.0265851020813"><system-err>15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 L2ProductP1: Integrate the products of the shape functions on each element
15:57 L2ProductP1: Determine global dofs ...
15:57 L2ProductP1: Boundary treatment ...
15:57 L2ProductP1: Assemble system matrix ...
15:57 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:57 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:57 DiffusionOperatorP1: Determine global dofs ...
15:57 DiffusionOperatorP1: Boundary treatment ...
15:57 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products18]" time="0.0311579704285"><system-err>15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products19]" time="0.0271611213684"><system-err>15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products20]" time="0.0314557552338"><system-err>15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products21]" time="0.0276470184326"><system-err>15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products22]" time="0.0318930149078"><system-err>15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products23]" time="0.0267770290375"><system-err>15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products24]" time="0.00412893295288"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products25]" time="0.00349402427673"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products26]" time="0.00380063056946"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products27]" time="0.0040500164032"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products28]" time="0.00381588935852"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products29]" time="0.00385999679565"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products30]" time="0.00363779067993"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products31]" time="0.00366902351379"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products32]" time="0.00730109214783"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products33]" time="0.00623202323914"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="233" name="test_project_with_product[operator_with_arrays_and_products34]" time="0.00379300117493"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products0]" time="0.0539481639862"><system-err>15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products1]" time="0.0413062572479"><system-err>15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products2]" time="0.037449836731"><system-err>15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products3]" time="0.269567966461"><system-err>15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products4]" time="0.0374989509583"><system-err>15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products5]" time="0.0306823253632"><system-err>15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products6]" time="0.0316028594971"><system-err>15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products7]" time="0.0271239280701"><system-err>15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products8]" time="0.0316162109375"><system-err>15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products9]" time="0.0269491672516"><system-err>15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products10]" time="0.0319581031799"><system-err>15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products11]" time="0.0275220870972"><system-err>15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products12]" time="0.0318989753723"><system-err>15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products13]" time="0.0276551246643"><system-err>15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products14]" time="0.0318579673767"><system-err>15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 L2ProductP1: Integrate the products of the shape functions on each element
15:58 L2ProductP1: Determine global dofs ...
15:58 L2ProductP1: Boundary treatment ...
15:58 L2ProductP1: Assemble system matrix ...
15:58 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:58 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:58 DiffusionOperatorP1: Determine global dofs ...
15:58 DiffusionOperatorP1: Boundary treatment ...
15:58 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products15]" time="0.0273759365082"><system-err>15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products16]" time="0.0327260494232"><system-err>15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products17]" time="0.0280199050903"><system-err>15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products18]" time="0.0319118499756"><system-err>15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products19]" time="0.0274121761322"><system-err>15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products20]" time="0.0320942401886"><system-err>15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products21]" time="0.0273449420929"><system-err>15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products22]" time="0.0332982540131"><system-err>15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products23]" time="0.0281369686127"><system-err>15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products24]" time="0.00546097755432"><system-err>15:59 |WARNING|ComponentProjection: Using inefficient generic projection operator
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products25]" time="0.00473499298096"><system-err>15:59 |WARNING|ComponentProjection: Using inefficient generic projection operator
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products26]" time="0.00511240959167"><system-err>15:59 |WARNING|ComponentProjection: Using inefficient generic projection operator
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products27]" time="0.00483393669128"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products28]" time="0.00525593757629"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products29]" time="0.00719809532166"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products30]" time="0.00718402862549"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products31]" time="0.00721669197083"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products32]" time="0.00889301300049"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products33]" time="0.00905275344849"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="243" name="test_project_with_product_2[operator_with_arrays_and_products34]" time="0.00448799133301"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays0]" time="0.00105404853821"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays1]" time="0.00104522705078"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays2]" time="0.00102376937866"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays3]" time="0.0010838508606"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays4]" time="0.0448782444"><system-err>15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays5]" time="0.037250995636"><system-err>15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays6]" time="0.0373260974884"><system-err>15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays7]" time="0.0258872509003"><system-err>15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays8]" time="0.0320618152618"><system-err>15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays9]" time="0.0268249511719"><system-err>15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays10]" time="0.0306220054626"><system-err>15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays11]" time="0.0262589454651"><system-err>15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays12]" time="0.0311279296875"><system-err>15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays13]" time="0.025899887085"><system-err>15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays14]" time="0.0309011936188"><system-err>15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays15]" time="0.0266079902649"><system-err>15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays16]" time="0.0312790870667"><system-err>15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays17]" time="0.0261120796204"><system-err>15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays18]" time="0.0308508872986"><system-err>15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays19]" time="0.0263838768005"><system-err>15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays20]" time="0.0311479568481"><system-err>15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays21]" time="0.025808095932"><system-err>15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays22]" time="0.0307438373566"><system-err>15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays23]" time="0.025820016861"><system-err>15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
15:59 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
15:59 DiffusionOperatorP1: Determine global dofs ...
15:59 DiffusionOperatorP1: Boundary treatment ...
15:59 DiffusionOperatorP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
15:59 L2ProductP1: Integrate the products of the shape functions on each element
15:59 L2ProductP1: Determine global dofs ...
15:59 L2ProductP1: Boundary treatment ...
15:59 L2ProductP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays24]" time="0.0313510894775"><system-err>16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays25]" time="0.0264210700989"><system-err>16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays26]" time="0.0326390266418"><system-err>16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays27]" time="0.0278258323669"><system-err>16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays28]" time="0.00330185890198"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays29]" time="0.00277185440063"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays30]" time="0.00304508209229"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays31]" time="0.00309777259827"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays32]" time="0.00309872627258"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays33]" time="0.00256705284119"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays34]" time="0.00238680839539"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays35]" time="0.00227499008179"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays36]" time="0.00537180900574"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays37]" time="0.00446391105652"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="259" name="test_jacobian[operator_with_arrays38]" time="0.00338101387024"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays0]" time="0.00103497505188"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays1]" time="0.0010290145874"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays2]" time="0.00106382369995"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays3]" time="0.00100684165955"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays4]" time="0.0449759960175"><system-err>16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays5]" time="0.0369019508362"><system-err>16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays6]" time="0.0369350910187"><system-err>16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays7]" time="0.026643037796"><system-err>16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays8]" time="0.0304050445557"><system-err>16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays9]" time="0.0255000591278"><system-err>16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays10]" time="0.030693769455"><system-err>16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays11]" time="0.0255961418152"><system-err>16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays12]" time="0.0302121639252"><system-err>16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays13]" time="0.0266189575195"><system-err>16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays14]" time="0.0312440395355"><system-err>16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays15]" time="0.0257589817047"><system-err>16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays16]" time="0.0306358337402"><system-err>16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays17]" time="0.0262460708618"><system-err>16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays18]" time="0.0307369232178"><system-err>16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays19]" time="0.0262100696564"><system-err>16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays20]" time="0.0308265686035"><system-err>16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays21]" time="0.0258681774139"><system-err>16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays22]" time="0.0308470726013"><system-err>16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays23]" time="0.0257458686829"><system-err>16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays24]" time="0.0307569503784"><system-err>16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays25]" time="0.0272181034088"><system-err>16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays26]" time="0.0308029651642"><system-err>16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays27]" time="0.0259320735931"><system-err>16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 L2ProductP1: Integrate the products of the shape functions on each element
16:00 L2ProductP1: Determine global dofs ...
16:00 L2ProductP1: Boundary treatment ...
16:00 L2ProductP1: Assemble system matrix ...
16:00 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:00 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:00 DiffusionOperatorP1: Determine global dofs ...
16:00 DiffusionOperatorP1: Boundary treatment ...
16:00 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays28]" time="0.0033061504364"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays29]" time="0.00291085243225"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays30]" time="0.0029137134552"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays31]" time="0.00313878059387"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays32]" time="0.00301122665405"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays33]" time="0.00220131874084"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays34]" time="0.00218296051025"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays35]" time="0.00227618217468"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays36]" time="0.0052649974823"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays37]" time="0.00457406044006"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="272" name="test_assemble[operator_with_arrays38]" time="0.00316405296326"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays0]" time="0.00106692314148"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays1]" time="0.00106477737427"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays2]" time="0.00140190124512"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays3]" time="0.00110793113708"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays4]" time="0.043256521225"><system-err>16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays5]" time="0.0369288921356"><system-err>16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays6]" time="0.038586139679"><system-err>16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays7]" time="0.0269031524658"><system-err>16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays8]" time="0.030091047287"><system-err>16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays9]" time="0.0260932445526"><system-err>16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays10]" time="0.0313618183136"><system-err>16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays11]" time="0.0268130302429"><system-err>16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays12]" time="0.0316870212555"><system-err>16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays13]" time="0.0268268585205"><system-err>16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays14]" time="0.0320229530334"><system-err>16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays15]" time="0.0278990268707"><system-err>16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays16]" time="0.0317380428314"><system-err>16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays17]" time="0.0275049209595"><system-err>16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays18]" time="0.0311980247498"><system-err>16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays19]" time="0.0259518623352"><system-err>16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays20]" time="0.0321831703186"><system-err>16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays21]" time="0.0277757644653"><system-err>16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays22]" time="0.0310590267181"><system-err>16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays23]" time="0.0263910293579"><system-err>16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays24]" time="0.0309927463531"><system-err>16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays25]" time="0.0263118743896"><system-err>16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays26]" time="0.0306279659271"><system-err>16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays27]" time="0.026435136795"><system-err>16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays28]" time="0.00492882728577"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays29]" time="0.00272798538208"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays30]" time="0.00449085235596"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays31]" time="0.0031259059906"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays32]" time="0.00313210487366"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays33]" time="0.002605676651"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays34]" time="0.00229048728943"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays35]" time="0.00213479995728"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays36]" time="0.005450963974"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays37]" time="0.00437021255493"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="279" name="test_restricted[operator_with_arrays38]" time="0.00309705734253"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays0]" time="0.00211310386658"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays1]" time="0.00168991088867"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays2]" time="0.00181293487549"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays3]" time="0.00265622138977"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays4]" time="0.0583739280701"><system-err>16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays5]" time="0.045049905777"><system-err>16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays6]" time="0.0354888439178"><system-err>16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays7]" time="0.0291931629181"><system-err>16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 L2ProductP1: Integrate the products of the shape functions on each element
16:01 L2ProductP1: Determine global dofs ...
16:01 L2ProductP1: Boundary treatment ...
16:01 L2ProductP1: Assemble system matrix ...
16:01 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:01 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:01 DiffusionOperatorP1: Determine global dofs ...
16:01 DiffusionOperatorP1: Boundary treatment ...
16:01 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays8]" time="0.390112876892"><system-err>16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
16:02 L2ProductP1: Integrate the products of the shape functions on each element
16:02 L2ProductP1: Determine global dofs ...
16:02 L2ProductP1: Boundary treatment ...
16:02 L2ProductP1: Assemble system matrix ...
16:02 L2ProductP1: Integrate the products of the shape functions on each element
16:02 L2ProductP1: Determine global dofs ...
16:02 L2ProductP1: Boundary treatment ...
16:02 L2ProductP1: Assemble system matrix ...
16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays9]" time="0.494632005692"><system-err>16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
16:02 L2ProductP1: Integrate the products of the shape functions on each element
16:02 L2ProductP1: Determine global dofs ...
16:02 L2ProductP1: Boundary treatment ...
16:02 L2ProductP1: Assemble system matrix ...
16:02 L2ProductP1: Integrate the products of the shape functions on each element
16:02 L2ProductP1: Determine global dofs ...
16:02 L2ProductP1: Boundary treatment ...
16:02 L2ProductP1: Assemble system matrix ...
16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
16:02 lgmres: Converged after 2 iterations
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays10]" time="0.0332951545715"><system-err>16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
16:02 L2ProductP1: Integrate the products of the shape functions on each element
16:02 L2ProductP1: Determine global dofs ...
16:02 L2ProductP1: Boundary treatment ...
16:02 L2ProductP1: Assemble system matrix ...
16:02 L2ProductP1: Integrate the products of the shape functions on each element
16:02 L2ProductP1: Determine global dofs ...
16:02 L2ProductP1: Boundary treatment ...
16:02 L2ProductP1: Assemble system matrix ...
16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays11]" time="0.0267190933228"><system-err>16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
16:02 L2ProductP1: Integrate the products of the shape functions on each element
16:02 L2ProductP1: Determine global dofs ...
16:02 L2ProductP1: Boundary treatment ...
16:02 L2ProductP1: Assemble system matrix ...
16:02 L2ProductP1: Integrate the products of the shape functions on each element
16:02 L2ProductP1: Determine global dofs ...
16:02 L2ProductP1: Boundary treatment ...
16:02 L2ProductP1: Assemble system matrix ...
16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays12]" time="0.0310413837433"><system-err>16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
16:02 L2ProductP1: Integrate the products of the shape functions on each element
16:02 L2ProductP1: Determine global dofs ...
16:02 L2ProductP1: Boundary treatment ...
16:02 L2ProductP1: Assemble system matrix ...
16:02 L2ProductP1: Integrate the products of the shape functions on each element
16:02 L2ProductP1: Determine global dofs ...
16:02 L2ProductP1: Boundary treatment ...
16:02 L2ProductP1: Assemble system matrix ...
16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays13]" time="0.0267379283905"><system-err>16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
16:02 L2ProductP1: Integrate the products of the shape functions on each element
16:02 L2ProductP1: Determine global dofs ...
16:02 L2ProductP1: Boundary treatment ...
16:02 L2ProductP1: Assemble system matrix ...
16:02 L2ProductP1: Integrate the products of the shape functions on each element
16:02 L2ProductP1: Determine global dofs ...
16:02 L2ProductP1: Boundary treatment ...
16:02 L2ProductP1: Assemble system matrix ...
16:02 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:02 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:02 DiffusionOperatorP1: Determine global dofs ...
16:02 DiffusionOperatorP1: Boundary treatment ...
16:02 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays14]" time="0.031661272049"><system-err>16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 L2ProductP1: Integrate the products of the shape functions on each element
16:03 L2ProductP1: Determine global dofs ...
16:03 L2ProductP1: Boundary treatment ...
16:03 L2ProductP1: Assemble system matrix ...
16:03 L2ProductP1: Integrate the products of the shape functions on each element
16:03 L2ProductP1: Determine global dofs ...
16:03 L2ProductP1: Boundary treatment ...
16:03 L2ProductP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 newton:       Initial Residual: 0.000000e+00
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays15]" time="0.0269360542297"><system-err>16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 L2ProductP1: Integrate the products of the shape functions on each element
16:03 L2ProductP1: Determine global dofs ...
16:03 L2ProductP1: Boundary treatment ...
16:03 L2ProductP1: Assemble system matrix ...
16:03 L2ProductP1: Integrate the products of the shape functions on each element
16:03 L2ProductP1: Determine global dofs ...
16:03 L2ProductP1: Boundary treatment ...
16:03 L2ProductP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 newton:       Initial Residual: 0.000000e+00
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays16]" time="0.032482624054"><system-err>16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 L2ProductP1: Integrate the products of the shape functions on each element
16:03 L2ProductP1: Determine global dofs ...
16:03 L2ProductP1: Boundary treatment ...
16:03 L2ProductP1: Assemble system matrix ...
16:03 L2ProductP1: Integrate the products of the shape functions on each element
16:03 L2ProductP1: Determine global dofs ...
16:03 L2ProductP1: Boundary treatment ...
16:03 L2ProductP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays17]" time="0.0274348258972"><system-err>16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 L2ProductP1: Integrate the products of the shape functions on each element
16:03 L2ProductP1: Determine global dofs ...
16:03 L2ProductP1: Boundary treatment ...
16:03 L2ProductP1: Assemble system matrix ...
16:03 L2ProductP1: Integrate the products of the shape functions on each element
16:03 L2ProductP1: Determine global dofs ...
16:03 L2ProductP1: Boundary treatment ...
16:03 L2ProductP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays18]" time="0.0313880443573"><system-err>16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 L2ProductP1: Integrate the products of the shape functions on each element
16:03 L2ProductP1: Determine global dofs ...
16:03 L2ProductP1: Boundary treatment ...
16:03 L2ProductP1: Assemble system matrix ...
16:03 L2ProductP1: Integrate the products of the shape functions on each element
16:03 L2ProductP1: Determine global dofs ...
16:03 L2ProductP1: Boundary treatment ...
16:03 L2ProductP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays19]" time="0.0271441936493"><system-err>16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 L2ProductP1: Integrate the products of the shape functions on each element
16:03 L2ProductP1: Determine global dofs ...
16:03 L2ProductP1: Boundary treatment ...
16:03 L2ProductP1: Assemble system matrix ...
16:03 L2ProductP1: Integrate the products of the shape functions on each element
16:03 L2ProductP1: Determine global dofs ...
16:03 L2ProductP1: Boundary treatment ...
16:03 L2ProductP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays20]" time="0.0309448242188"><system-err>16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 L2ProductP1: Integrate the products of the shape functions on each element
16:03 L2ProductP1: Determine global dofs ...
16:03 L2ProductP1: Boundary treatment ...
16:03 L2ProductP1: Assemble system matrix ...
16:03 L2ProductP1: Integrate the products of the shape functions on each element
16:03 L2ProductP1: Determine global dofs ...
16:03 L2ProductP1: Boundary treatment ...
16:03 L2ProductP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays21]" time="0.0266439914703"><system-err>16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 L2ProductP1: Integrate the products of the shape functions on each element
16:03 L2ProductP1: Determine global dofs ...
16:03 L2ProductP1: Boundary treatment ...
16:03 L2ProductP1: Assemble system matrix ...
16:03 L2ProductP1: Integrate the products of the shape functions on each element
16:03 L2ProductP1: Determine global dofs ...
16:03 L2ProductP1: Boundary treatment ...
16:03 L2ProductP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays22]" time="0.0309791564941"><system-err>16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 L2ProductP1: Integrate the products of the shape functions on each element
16:03 L2ProductP1: Determine global dofs ...
16:03 L2ProductP1: Boundary treatment ...
16:03 L2ProductP1: Assemble system matrix ...
16:03 L2ProductP1: Integrate the products of the shape functions on each element
16:03 L2ProductP1: Determine global dofs ...
16:03 L2ProductP1: Boundary treatment ...
16:03 L2ProductP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays23]" time="0.0264258384705"><system-err>16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 L2ProductP1: Integrate the products of the shape functions on each element
16:03 L2ProductP1: Determine global dofs ...
16:03 L2ProductP1: Boundary treatment ...
16:03 L2ProductP1: Assemble system matrix ...
16:03 L2ProductP1: Integrate the products of the shape functions on each element
16:03 L2ProductP1: Determine global dofs ...
16:03 L2ProductP1: Boundary treatment ...
16:03 L2ProductP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays24]" time="0.0313062667847"><system-err>16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 L2ProductP1: Integrate the products of the shape functions on each element
16:03 L2ProductP1: Determine global dofs ...
16:03 L2ProductP1: Boundary treatment ...
16:03 L2ProductP1: Assemble system matrix ...
16:03 L2ProductP1: Integrate the products of the shape functions on each element
16:03 L2ProductP1: Determine global dofs ...
16:03 L2ProductP1: Boundary treatment ...
16:03 L2ProductP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays25]" time="0.0270299911499"><system-err>16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 L2ProductP1: Integrate the products of the shape functions on each element
16:03 L2ProductP1: Determine global dofs ...
16:03 L2ProductP1: Boundary treatment ...
16:03 L2ProductP1: Assemble system matrix ...
16:03 L2ProductP1: Integrate the products of the shape functions on each element
16:03 L2ProductP1: Determine global dofs ...
16:03 L2ProductP1: Boundary treatment ...
16:03 L2ProductP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays26]" time="0.0396897792816"><system-err>16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 L2ProductP1: Integrate the products of the shape functions on each element
16:03 L2ProductP1: Determine global dofs ...
16:03 L2ProductP1: Boundary treatment ...
16:03 L2ProductP1: Assemble system matrix ...
16:03 L2ProductP1: Integrate the products of the shape functions on each element
16:03 L2ProductP1: Determine global dofs ...
16:03 L2ProductP1: Boundary treatment ...
16:03 L2ProductP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays27]" time="0.0310089588165"><system-err>16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
16:03 L2ProductP1: Integrate the products of the shape functions on each element
16:03 L2ProductP1: Determine global dofs ...
16:03 L2ProductP1: Boundary treatment ...
16:03 L2ProductP1: Assemble system matrix ...
16:03 L2ProductP1: Integrate the products of the shape functions on each element
16:03 L2ProductP1: Determine global dofs ...
16:03 L2ProductP1: Boundary treatment ...
16:03 L2ProductP1: Assemble system matrix ...
16:03 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:03 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:03 DiffusionOperatorP1: Determine global dofs ...
16:03 DiffusionOperatorP1: Boundary treatment ...
16:03 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays28]" time="0.00430274009705"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays29]" time="0.0034019947052"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays30]" time="0.003986120224"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays31]" time="0.00388813018799"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays32]" time="0.0040168762207"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays33]" time="0.00429105758667"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays34]" time="0.0044162273407"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays35]" time="0.00417995452881"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays36]" time="0.0116190910339"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays37]" time="0.826845169067"><system-err>16:03 lgmres: Converged after 2 iterations
16:03 lgmres: Converged after 2 iterations
16:03 lgmres: Converged after 2 iterations
16:03 lgmres: Converged after 2 iterations
16:03 lgmres: Converged after 2 iterations
16:03 lgmres: Converged after 2 iterations
16:03 lgmres: Converged after 2 iterations
16:03 lgmres: Converged after 2 iterations
16:04 lgmres: Converged after 2 iterations
16:04 lgmres: Converged after 2 iterations
16:04 lgmres: Converged after 2 iterations
16:04 lgmres: Converged after 2 iterations
16:04 lgmres: Converged after 2 iterations
16:04 lgmres: Converged after 2 iterations
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="295" name="test_InverseOperator[operator_with_arrays38]" time="0.00455784797668"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays0]" time="0.00229406356812"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays1]" time="0.00179123878479"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays2]" time="0.00185990333557"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays3]" time="0.00312113761902"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays4]" time="0.0578861236572"><system-err>16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
16:04 L2ProductP1: Integrate the products of the shape functions on each element
16:04 L2ProductP1: Determine global dofs ...
16:04 L2ProductP1: Boundary treatment ...
16:04 L2ProductP1: Assemble system matrix ...
16:04 L2ProductP1: Integrate the products of the shape functions on each element
16:04 L2ProductP1: Determine global dofs ...
16:04 L2ProductP1: Boundary treatment ...
16:04 L2ProductP1: Assemble system matrix ...
16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays5]" time="0.0439999103546"><system-err>16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
16:04 L2ProductP1: Integrate the products of the shape functions on each element
16:04 L2ProductP1: Determine global dofs ...
16:04 L2ProductP1: Boundary treatment ...
16:04 L2ProductP1: Assemble system matrix ...
16:04 L2ProductP1: Integrate the products of the shape functions on each element
16:04 L2ProductP1: Determine global dofs ...
16:04 L2ProductP1: Boundary treatment ...
16:04 L2ProductP1: Assemble system matrix ...
16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays6]" time="0.0364048480988"><system-err>16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
16:04 L2ProductP1: Integrate the products of the shape functions on each element
16:04 L2ProductP1: Determine global dofs ...
16:04 L2ProductP1: Boundary treatment ...
16:04 L2ProductP1: Assemble system matrix ...
16:04 L2ProductP1: Integrate the products of the shape functions on each element
16:04 L2ProductP1: Determine global dofs ...
16:04 L2ProductP1: Boundary treatment ...
16:04 L2ProductP1: Assemble system matrix ...
16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays7]" time="0.0289916992188"><system-err>16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
16:04 L2ProductP1: Integrate the products of the shape functions on each element
16:04 L2ProductP1: Determine global dofs ...
16:04 L2ProductP1: Boundary treatment ...
16:04 L2ProductP1: Assemble system matrix ...
16:04 L2ProductP1: Integrate the products of the shape functions on each element
16:04 L2ProductP1: Determine global dofs ...
16:04 L2ProductP1: Boundary treatment ...
16:04 L2ProductP1: Assemble system matrix ...
16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays8]" time="0.388615846634"><system-err>16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
16:04 L2ProductP1: Integrate the products of the shape functions on each element
16:04 L2ProductP1: Determine global dofs ...
16:04 L2ProductP1: Boundary treatment ...
16:04 L2ProductP1: Assemble system matrix ...
16:04 L2ProductP1: Integrate the products of the shape functions on each element
16:04 L2ProductP1: Determine global dofs ...
16:04 L2ProductP1: Boundary treatment ...
16:04 L2ProductP1: Assemble system matrix ...
16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
16:04 lgmres: Converged after 2 iterations
16:04 lgmres: Converged after 2 iterations
16:04 lgmres: Converged after 2 iterations
16:04 lgmres: Converged after 2 iterations
16:04 lgmres: Converged after 2 iterations
16:04 lgmres: Converged after 2 iterations
16:04 lgmres: Converged after 2 iterations
16:04 lgmres: Converged after 2 iterations
16:04 lgmres: Converged after 2 iterations
16:04 lgmres: Converged after 2 iterations
16:04 lgmres: Converged after 2 iterations
16:04 lgmres: Converged after 2 iterations
16:04 lgmres: Converged after 2 iterations
16:04 lgmres: Converged after 2 iterations
16:04 lgmres: Converged after 2 iterations
16:04 lgmres: Converged after 2 iterations
16:04 lgmres: Converged after 2 iterations
16:04 lgmres: Converged after 2 iterations
16:04 lgmres: Converged after 2 iterations
16:04 lgmres: Converged after 2 iterations
16:04 lgmres: Converged after 2 iterations
16:04 lgmres: Converged after 2 iterations
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays9]" time="0.497378110886"><system-err>16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
16:04 L2ProductP1: Integrate the products of the shape functions on each element
16:04 L2ProductP1: Determine global dofs ...
16:04 L2ProductP1: Boundary treatment ...
16:04 L2ProductP1: Assemble system matrix ...
16:04 L2ProductP1: Integrate the products of the shape functions on each element
16:04 L2ProductP1: Determine global dofs ...
16:04 L2ProductP1: Boundary treatment ...
16:04 L2ProductP1: Assemble system matrix ...
16:04 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:04 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:04 DiffusionOperatorP1: Determine global dofs ...
16:04 DiffusionOperatorP1: Boundary treatment ...
16:04 DiffusionOperatorP1: Assemble system matrix ...
16:04 lgmres: Converged after 2 iterations
16:04 lgmres: Converged after 2 iterations
16:05 lgmres: Converged after 2 iterations
16:05 lgmres: Converged after 2 iterations
16:05 lgmres: Converged after 2 iterations
16:05 lgmres: Converged after 2 iterations
16:05 lgmres: Converged after 2 iterations
16:05 lgmres: Converged after 2 iterations
16:05 lgmres: Converged after 2 iterations
16:05 lgmres: Converged after 2 iterations
16:05 lgmres: Converged after 2 iterations
16:05 lgmres: Converged after 2 iterations
16:05 lgmres: Converged after 2 iterations
16:05 lgmres: Converged after 2 iterations
16:05 lgmres: Converged after 2 iterations
16:05 lgmres: Converged after 2 iterations
16:05 lgmres: Converged after 2 iterations
16:05 lgmres: Converged after 2 iterations
16:05 lgmres: Converged after 2 iterations
16:05 lgmres: Converged after 2 iterations
16:05 lgmres: Converged after 2 iterations
16:05 lgmres: Converged after 2 iterations
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays10]" time="0.0315368175507"><system-err>16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays11]" time="0.0263540744781"><system-err>16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays12]" time="0.0302979946136"><system-err>16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays13]" time="0.0259199142456"><system-err>16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays14]" time="0.0304861068726"><system-err>16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays15]" time="0.0263910293579"><system-err>16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays16]" time="0.0309870243073"><system-err>16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays17]" time="0.0269169807434"><system-err>16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays18]" time="0.0314130783081"><system-err>16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays19]" time="0.0261678695679"><system-err>16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays20]" time="0.0313348770142"><system-err>16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays21]" time="0.0268111228943"><system-err>16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays22]" time="0.0308668613434"><system-err>16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays23]" time="0.0267441272736"><system-err>16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays24]" time="0.0316410064697"><system-err>16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays25]" time="0.0272791385651"><system-err>16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays26]" time="0.0401039123535"><system-err>16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays27]" time="0.0312147140503"><system-err>16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 L2ProductP1: Integrate the products of the shape functions on each element
16:05 L2ProductP1: Determine global dofs ...
16:05 L2ProductP1: Boundary treatment ...
16:05 L2ProductP1: Assemble system matrix ...
16:05 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
16:05 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
16:05 DiffusionOperatorP1: Determine global dofs ...
16:05 DiffusionOperatorP1: Boundary treatment ...
16:05 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays28]" time="0.00396585464478"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays29]" time="0.00342917442322"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays30]" time="0.00375699996948"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays31]" time="0.00393676757812"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays32]" time="0.00408601760864"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays33]" time="0.00465178489685"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays34]" time="0.00412201881409"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays35]" time="0.00429892539978"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays36]" time="0.0109198093414"></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays37]" time="0.823492765427"><system-err>16:06 lgmres: Converged after 2 iterations
16:06 lgmres: Converged after 2 iterations
16:06 lgmres: Converged after 2 iterations
16:06 lgmres: Converged after 2 iterations
16:06 lgmres: Converged after 2 iterations
16:06 lgmres: Converged after 2 iterations
16:06 lgmres: Converged after 2 iterations
16:06 lgmres: Converged after 2 iterations
16:06 lgmres: Converged after 2 iterations
16:06 lgmres: Converged after 2 iterations
16:06 lgmres: Converged after 2 iterations
16:06 lgmres: Converged after 2 iterations
16:06 lgmres: Converged after 2 iterations
16:06 lgmres: Converged after 2 iterations
</system-err></testcase><testcase classname="src.pymortests.operators" file="src/pymortests/operators.py" line="320" name="test_InverseTransposeOperator[operator_with_arrays38]" time="0.00462532043457"></testcase><testcase classname="src.pymortests.parameters" file="src/pymortests/parameters.py" line="21" name="test_uniform" time="0.00688910484314"></testcase><testcase classname="src.pymortests.parameters" file="src/pymortests/parameters.py" line="28" name="test_randomly" time="0.00614809989929"></testcase><testcase classname="src.pymortests.playground" file="src/pymortests/playground.py" line="15" name="test_eval" time="0.00113606452942"><skipped message="expected test failure"></skipped></testcase><testcase classname="src.pymortests.solver" file="src/pymortests/solver.py" line="51" name="test_generic_solvers[generic_lgmres]" time="0.00758290290833"><system-err>16:06 lgmres: Converged after 2 iterations
</system-err></testcase><testcase classname="src.pymortests.solver" file="src/pymortests/solver.py" line="51" name="test_generic_solvers[generic_least_squares_lsmr]" time="0.00671815872192"><system-err>16:06 |WARNING|foo: Least squares solver selected for non-least squares probelm.
16:06 lsmr: Converged after 10 iterations
</system-err></testcase><testcase classname="src.pymortests.solver" file="src/pymortests/solver.py" line="51" name="test_generic_solvers[generic_least_squares_lsqr]" time="0.00650596618652"><system-err>16:06 |WARNING|foo: Least squares solver selected for non-least squares probelm.
16:06 lsqr: Converged after 10 iterations
</system-err></testcase><testcase classname="src.pymortests.solver" file="src/pymortests/solver.py" line="58" name="test_numpy_dense_solvers" time="0.00112795829773"></testcase><testcase classname="src.pymortests.solver" file="src/pymortests/solver.py" line="65" name="test_numpy_sparse_solvers[generic_lgmres]" time="0.00862288475037"><system-err>16:06 |WARNING|scipy_apply_inverse: You have selected a (potentially slow) generic solver for a NumPy matrix operator!
16:06 lgmres: Converged after 2 iterations
</system-err></testcase><testcase classname="src.pymortests.solver" file="src/pymortests/solver.py" line="65" name="test_numpy_sparse_solvers[scipy_least_squares_lsmr]" time="0.00649213790894"><system-err>16:06 |WARNING|foo: Least squares solver selected for non-least squares probelm.
</system-err></testcase><testcase classname="src.pymortests.solver" file="src/pymortests/solver.py" line="65" name="test_numpy_sparse_solvers[scipy_bicgstab_spilu]" time="0.00271797180176"><system-err>/usr/local/lib/python2.7/site-packages/scipy/sparse/linalg/dsolve/linsolve.py:315: SparseEfficiencyWarning: splu requires CSC matrix format
  warn(&apos;splu requires CSC matrix format&apos;, SparseEfficiencyWarning)
</system-err></testcase><testcase classname="src.pymortests.solver" file="src/pymortests/solver.py" line="65" name="test_numpy_sparse_solvers[scipy_least_squares_lsqr]" time="0.00437021255493"><system-err>16:06 |WARNING|foo: Least squares solver selected for non-least squares probelm.
</system-err></testcase><testcase classname="src.pymortests.solver" file="src/pymortests/solver.py" line="65" name="test_numpy_sparse_solvers[scipy_lgmres]" time="0.00406002998352"></testcase><testcase classname="src.pymortests.solver" file="src/pymortests/solver.py" line="65" name="test_numpy_sparse_solvers[scipy_bicgstab]" time="0.0030300617218"></testcase><testcase classname="src.pymortests.solver" file="src/pymortests/solver.py" line="65" name="test_numpy_sparse_solvers[pyamg_sa]" time="0.0034019947052"><system-err>/usr/local/lib/python2.7/site-packages/pyamg/aggregation/aggregation.py:207: SparseEfficiencyWarning: Implicit conversion of A to CSR
  SparseEfficiencyWarning)
</system-err></testcase><testcase classname="src.pymortests.solver" file="src/pymortests/solver.py" line="65" name="test_numpy_sparse_solvers[generic_least_squares_lsmr]" time="0.00963306427002"><system-err>16:06 |WARNING|scipy_apply_inverse: You have selected a (potentially slow) generic solver for a NumPy matrix operator!
16:06 |WARNING|foo: Least squares solver selected for non-least squares probelm.
16:06 lsmr: Converged after 10 iterations
</system-err></testcase><testcase classname="src.pymortests.solver" file="src/pymortests/solver.py" line="65" name="test_numpy_sparse_solvers[generic_least_squares_lsqr]" time="0.00912237167358"><system-err>16:06 |WARNING|scipy_apply_inverse: You have selected a (potentially slow) generic solver for a NumPy matrix operator!
16:06 |WARNING|foo: Least squares solver selected for non-least squares probelm.
16:06 lsqr: Converged after 10 iterations
</system-err></testcase><testcase classname="src.pymortests.solver" file="src/pymortests/solver.py" line="65" name="test_numpy_sparse_solvers[scipy_spsolve]" time="0.00152325630188"></testcase><testcase classname="src.pymortests.solver" file="src/pymortests/solver.py" line="65" name="test_numpy_sparse_solvers[pyamg_rs]" time="0.0022439956665"><system-err>/usr/local/lib/python2.7/site-packages/pyamg/classical/classical.py:101: SparseEfficiencyWarning: Implicit conversion of A to CSR
  SparseEfficiencyWarning)
</system-err></testcase><testcase classname="src.pymortests.solver" file="src/pymortests/solver.py" line="65" name="test_numpy_sparse_solvers[pyamg_solve]" time="0.00317215919495"><system-out>Implicit conversion of A to CSR in pyamg.blackbox.make_csr
  Detected a Hermitian matrix
    maxiter = 400
    iteration 1
  Residuals ||r_k||_M, ||r_0||_M = 2.15e-16, 2.82e+00
  Residual reduction ||r_k||_M/||r_0||_M = 7.62e-17
</system-out></testcase><testcase classname="src.pymortests.to_matrix" file="src/pymortests/to_matrix.py" line="36" name="test_to_matrix_NumpyMatrixOperator" time="0.00332999229431"></testcase><testcase classname="src.pymortests.to_matrix" file="src/pymortests/to_matrix.py" line="47" name="test_to_matrix_BlockOperator" time="0.0152215957642"></testcase><testcase classname="src.pymortests.to_matrix" file="src/pymortests/to_matrix.py" line="70" name="test_to_matrix_BlockDiagonalOperator" time="0.0157151222229"></testcase><testcase classname="src.pymortests.to_matrix" file="src/pymortests/to_matrix.py" line="88" name="test_to_matrix_AdjointOperator" time="0.0576920509338"><system-err>/usr/local/lib/python2.7/site-packages/scipy/sparse/linalg/dsolve/linsolve.py:171: SparseEfficiencyWarning: spsolve is more efficient when sparse b is in the CSC matrix format
  &apos;is in the CSC matrix format&apos;, SparseEfficiencyWarning)
</system-err></testcase><testcase classname="src.pymortests.to_matrix" file="src/pymortests/to_matrix.py" line="129" name="test_to_matrix_ComponentProjection" time="0.00378894805908"></testcase><testcase classname="src.pymortests.to_matrix" file="src/pymortests/to_matrix.py" line="140" name="test_to_matrix_Concatenation" time="0.0154278278351"></testcase><testcase classname="src.pymortests.to_matrix" file="src/pymortests/to_matrix.py" line="167" name="test_to_matrix_IdentityOperator" time="0.00250387191772"></testcase><testcase classname="src.pymortests.to_matrix" file="src/pymortests/to_matrix.py" line="175" name="test_to_matrix_LincombOperator" time="0.0356822013855"></testcase><testcase classname="src.pymortests.to_matrix" file="src/pymortests/to_matrix.py" line="204" name="test_to_matrix_VectorArrayOperator" time="0.00524282455444"></testcase><testcase classname="src.pymortests.to_matrix" file="src/pymortests/to_matrix.py" line="216" name="test_to_matrix_ZeroOperator" time="0.00244164466858"></testcase><testcase classname="src.pymortests.tools.TestGaussQuadrature" file="src/pymortests/tools.py" line="30" name="test_polynomials" time="0.0080029964447"></testcase><testcase classname="src.pymortests.tools.TestGaussQuadrature" file="src/pymortests/tools.py" line="41" name="test_other_functions" time="0.000877141952515"></testcase><testcase classname="src.pymortests.tools.TestGaussQuadrature" file="src/pymortests/tools.py" line="49" name="test_weights" time="0.0011625289917"></testcase><testcase classname="src.pymortests.tools.TestGaussQuadrature" file="src/pymortests/tools.py" line="54" name="test_points" time="0.00140380859375"></testcase><testcase classname="src.pymortests.tools.TestCmp" file="src/pymortests/tools.py" line="64" name="test_props" time="0.00232195854187"><system-err>/src/src/pymor/tools/floatcmp.py:38: RuntimeWarning: invalid value encountered in double_scalars
  return np.abs(x - y) &lt;= atol + np.abs(y) * rtol
</system-err></testcase><testcase classname="src.pymortests.tools" file="src/pymortests/tools.py" line="90" name="test_vtkio[rect_or_tria_grid0]" time="0.0138158798218"></testcase><testcase classname="src.pymortests.tools" file="src/pymortests/tools.py" line="90" name="test_vtkio[rect_or_tria_grid1]" time="0.00981211662292"></testcase><testcase classname="src.pymortests.tools" file="src/pymortests/tools.py" line="90" name="test_vtkio[rect_or_tria_grid2]" time="0.0639359951019"></testcase><testcase classname="src.pymortests.tools" file="src/pymortests/tools.py" line="90" name="test_vtkio[rect_or_tria_grid3]" time="0.0128576755524"></testcase><testcase classname="src.pymortests.tools" file="src/pymortests/tools.py" line="90" name="test_vtkio[rect_or_tria_grid4]" time="0.0122179985046"></testcase><testcase classname="src.pymortests.tools" file="src/pymortests/tools.py" line="90" name="test_vtkio[rect_or_tria_grid5]" time="0.0123090744019"></testcase><testcase classname="src.pymortests.tools" file="src/pymortests/tools.py" line="90" name="test_vtkio[rect_or_tria_grid6]" time="0.0102016925812"></testcase><testcase classname="src.pymortests.tools" file="src/pymortests/tools.py" line="90" name="test_vtkio[rect_or_tria_grid7]" time="0.0105261802673"></testcase><testcase classname="src.pymortests.tools" file="src/pymortests/tools.py" line="90" name="test_vtkio[rect_or_tria_grid8]" time="0.0122377872467"></testcase><testcase classname="src.pymortests.tools" file="src/pymortests/tools.py" line="90" name="test_vtkio[rect_or_tria_grid9]" time="0.0519330501556"></testcase><testcase classname="src.pymortests.tools" file="src/pymortests/tools.py" line="90" name="test_vtkio[rect_or_tria_grid10]" time="0.0530331134796"></testcase><testcase classname="src.pymortests.tools" file="src/pymortests/tools.py" line="90" name="test_vtkio[rect_or_tria_grid11]" time="0.0527732372284"></testcase><testcase classname="src.pymortests.tools" file="src/pymortests/tools.py" line="90" name="test_vtkio[rect_or_tria_grid12]" time="0.0105829238892"></testcase><testcase classname="src.pymortests.tools" file="src/pymortests/tools.py" line="90" name="test_vtkio[rect_or_tria_grid13]" time="0.0085608959198"></testcase><testcase classname="src.pymortests.tools" file="src/pymortests/tools.py" line="90" name="test_vtkio[rect_or_tria_grid14]" time="0.137629985809"></testcase><testcase classname="src.pymortests.tools" file="src/pymortests/tools.py" line="90" name="test_vtkio[rect_or_tria_grid15]" time="0.0153357982635"></testcase><testcase classname="src.pymortests.tools" file="src/pymortests/tools.py" line="90" name="test_vtkio[rect_or_tria_grid16]" time="0.0146338939667"></testcase><testcase classname="src.pymortests.tools" file="src/pymortests/tools.py" line="90" name="test_vtkio[rect_or_tria_grid17]" time="0.014612197876"></testcase><testcase classname="src.pymortests.tools" file="src/pymortests/tools.py" line="90" name="test_vtkio[rect_or_tria_grid18]" time="0.0122857093811"></testcase><testcase classname="src.pymortests.tools" file="src/pymortests/tools.py" line="90" name="test_vtkio[rect_or_tria_grid19]" time="0.0110590457916"></testcase><testcase classname="src.pymortests.tools" file="src/pymortests/tools.py" line="90" name="test_vtkio[rect_or_tria_grid20]" time="0.0143628120422"></testcase><testcase classname="src.pymortests.tools" file="src/pymortests/tools.py" line="90" name="test_vtkio[rect_or_tria_grid21]" time="0.111060142517"></testcase><testcase classname="src.pymortests.tools" file="src/pymortests/tools.py" line="90" name="test_vtkio[rect_or_tria_grid22]" time="0.111875772476"></testcase><testcase classname="src.pymortests.tools" file="src/pymortests/tools.py" line="90" name="test_vtkio[rect_or_tria_grid23]" time="0.110776185989"></testcase><testcase classname="src.pymortests.tools.TestTiming" file="src/pymortests/tools.py" line="105" name="testTimingContext" time="0.0074450969696"><system-err>16:08 timing: Execution of defaultlog took 0.002519 (s)
</system-err></testcase><testcase classname="src.pymortests.tools.TestTiming" file="src/pymortests/tools.py" line="115" name="testTimingDecorator" time="0.0254290103912"></testcase><testcase classname="src.pymortests.tools.TestTiming" file="src/pymortests/tools.py" line="118" name="testTiming" time="0.0274121761322"></testcase><testcase classname="src.pymortests.tools" file="src/pymortests/tools.py" line="126" name="testDeprecated" time="0.000794410705566"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[0-vector_array_without_reserve0]" time="0.00165295600891"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[0-vector_array_without_reserve1]" time="0.00105595588684"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[0-vector_array_without_reserve2]" time="0.00100588798523"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[0-vector_array_without_reserve3]" time="0.00106287002563"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[0-vector_array_without_reserve4]" time="0.00105595588684"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[0-vector_array_without_reserve5]" time="0.000910997390747"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[0-vector_array_without_reserve6]" time="0.000947952270508"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[0-vector_array_without_reserve7]" time="0.000983953475952"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[0-vector_array_without_reserve8]" time="0.00113892555237"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[0-vector_array_without_reserve9]" time="0.00166487693787"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[0-vector_array_without_reserve10]" time="0.00130295753479"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[0-vector_array_without_reserve11]" time="0.00114297866821"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[0-vector_array_without_reserve12]" time="0.00123906135559"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[0-vector_array_without_reserve13]" time="0.00107502937317"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[0-vector_array_without_reserve14]" time="0.00154614448547"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[0-vector_array_without_reserve15]" time="0.00135707855225"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[0-vector_array_without_reserve16]" time="0.00120902061462"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[1-vector_array_without_reserve0]" time="0.00100302696228"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[1-vector_array_without_reserve1]" time="0.000999927520752"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[1-vector_array_without_reserve2]" time="0.000986814498901"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[1-vector_array_without_reserve3]" time="0.00122880935669"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[1-vector_array_without_reserve4]" time="0.00102925300598"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[1-vector_array_without_reserve5]" time="0.000955104827881"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[1-vector_array_without_reserve6]" time="0.000933885574341"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[1-vector_array_without_reserve7]" time="0.00104022026062"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[1-vector_array_without_reserve8]" time="0.00151896476746"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[1-vector_array_without_reserve9]" time="0.00153207778931"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[1-vector_array_without_reserve10]" time="0.00231099128723"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[1-vector_array_without_reserve11]" time="0.00123381614685"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[1-vector_array_without_reserve12]" time="0.001216173172"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[1-vector_array_without_reserve13]" time="0.00115013122559"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[1-vector_array_without_reserve14]" time="0.00128602981567"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[1-vector_array_without_reserve15]" time="0.0016918182373"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[1-vector_array_without_reserve16]" time="0.00128412246704"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[2-vector_array_without_reserve0]" time="0.00103402137756"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[2-vector_array_without_reserve1]" time="0.000973701477051"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[2-vector_array_without_reserve2]" time="0.00103616714478"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[2-vector_array_without_reserve3]" time="0.000967025756836"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[2-vector_array_without_reserve4]" time="0.00116491317749"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[2-vector_array_without_reserve5]" time="0.000980854034424"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[2-vector_array_without_reserve6]" time="0.000926971435547"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[2-vector_array_without_reserve7]" time="0.00100421905518"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[2-vector_array_without_reserve8]" time="0.00126171112061"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[2-vector_array_without_reserve9]" time="0.00174975395203"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[2-vector_array_without_reserve10]" time="0.00134515762329"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[2-vector_array_without_reserve11]" time="0.00150418281555"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[2-vector_array_without_reserve12]" time="0.00125908851624"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[2-vector_array_without_reserve13]" time="0.00122165679932"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[2-vector_array_without_reserve14]" time="0.00128889083862"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[2-vector_array_without_reserve15]" time="0.00140833854675"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="156" name="test_empty[2-vector_array_without_reserve16]" time="0.00153398513794"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[0-vector_array_without_reserve0]" time="0.0012469291687"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[0-vector_array_without_reserve1]" time="0.00137782096863"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[0-vector_array_without_reserve2]" time="0.00155210494995"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[0-vector_array_without_reserve3]" time="0.00137305259705"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[0-vector_array_without_reserve4]" time="0.00127005577087"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[0-vector_array_without_reserve5]" time="0.00169610977173"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[0-vector_array_without_reserve6]" time="0.0019690990448"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[0-vector_array_without_reserve7]" time="0.00195503234863"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[0-vector_array_without_reserve8]" time="0.00207901000977"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[0-vector_array_without_reserve9]" time="0.00204181671143"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[0-vector_array_without_reserve10]" time="0.00189208984375"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[0-vector_array_without_reserve11]" time="0.00196480751038"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[0-vector_array_without_reserve12]" time="0.00160717964172"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[0-vector_array_without_reserve13]" time="0.00182700157166"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[0-vector_array_without_reserve14]" time="0.00193214416504"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[0-vector_array_without_reserve15]" time="0.00236225128174"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[0-vector_array_without_reserve16]" time="0.00211620330811"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[1-vector_array_without_reserve0]" time="0.00136590003967"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[1-vector_array_without_reserve1]" time="0.00150084495544"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[1-vector_array_without_reserve2]" time="0.00145101547241"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[1-vector_array_without_reserve3]" time="0.00153017044067"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[1-vector_array_without_reserve4]" time="0.00148820877075"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[1-vector_array_without_reserve5]" time="0.00152254104614"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[1-vector_array_without_reserve6]" time="0.00212168693542"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[1-vector_array_without_reserve7]" time="0.00212478637695"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[1-vector_array_without_reserve8]" time="0.00254797935486"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[1-vector_array_without_reserve9]" time="0.00214910507202"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[1-vector_array_without_reserve10]" time="0.00206208229065"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[1-vector_array_without_reserve11]" time="0.00232195854187"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[1-vector_array_without_reserve12]" time="0.00179290771484"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[1-vector_array_without_reserve13]" time="0.00176095962524"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[1-vector_array_without_reserve14]" time="0.00214529037476"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[1-vector_array_without_reserve15]" time="0.00256991386414"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[1-vector_array_without_reserve16]" time="0.00275492668152"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[2-vector_array_without_reserve0]" time="0.00133109092712"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[2-vector_array_without_reserve1]" time="0.00144600868225"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[2-vector_array_without_reserve2]" time="0.00152087211609"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[2-vector_array_without_reserve3]" time="0.00152516365051"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[2-vector_array_without_reserve4]" time="0.00126791000366"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[2-vector_array_without_reserve5]" time="0.00165414810181"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[2-vector_array_without_reserve6]" time="0.00190782546997"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[2-vector_array_without_reserve7]" time="0.00196218490601"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[2-vector_array_without_reserve8]" time="0.0024299621582"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[2-vector_array_without_reserve9]" time="0.00232100486755"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[2-vector_array_without_reserve10]" time="0.00215411186218"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[2-vector_array_without_reserve11]" time="0.00199007987976"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[2-vector_array_without_reserve12]" time="0.00179624557495"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[2-vector_array_without_reserve13]" time="0.00175905227661"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[2-vector_array_without_reserve14]" time="0.00200986862183"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[2-vector_array_without_reserve15]" time="0.00222325325012"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="167" name="test_zeros[2-vector_array_without_reserve16]" time="0.00219178199768"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[0-vector_array_without_reserve0]" time="0.00126600265503"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[0-vector_array_without_reserve1]" time="0.000993967056274"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[0-vector_array_without_reserve2]" time="0.000963687896729"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[0-vector_array_without_reserve3]" time="0.00101113319397"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[0-vector_array_without_reserve4]" time="0.00100016593933"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[0-vector_array_without_reserve5]" time="0.00096607208252"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[0-vector_array_without_reserve6]" time="0.00100088119507"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[0-vector_array_without_reserve7]" time="0.00106477737427"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[0-vector_array_without_reserve8]" time="0.00146889686584"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[0-vector_array_without_reserve9]" time="0.00218796730042"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[0-vector_array_without_reserve10]" time="0.00110292434692"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[0-vector_array_without_reserve11]" time="0.00111389160156"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[0-vector_array_without_reserve12]" time="0.00115418434143"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[0-vector_array_without_reserve13]" time="0.00114893913269"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[0-vector_array_without_reserve14]" time="0.00125098228455"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[0-vector_array_without_reserve15]" time="0.0014317035675"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[0-vector_array_without_reserve16]" time="0.00121688842773"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[1-vector_array_without_reserve0]" time="0.00112009048462"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[1-vector_array_without_reserve1]" time="0.00100302696228"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[1-vector_array_without_reserve2]" time="0.000978946685791"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[1-vector_array_without_reserve3]" time="0.0010187625885"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[1-vector_array_without_reserve4]" time="0.00124835968018"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[1-vector_array_without_reserve5]" time="0.00098991394043"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[1-vector_array_without_reserve6]" time="0.000985145568848"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[1-vector_array_without_reserve7]" time="0.00110912322998"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[1-vector_array_without_reserve8]" time="0.00182294845581"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[1-vector_array_without_reserve9]" time="0.00237512588501"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[1-vector_array_without_reserve10]" time="0.00133609771729"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[1-vector_array_without_reserve11]" time="0.00149965286255"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[1-vector_array_without_reserve12]" time="0.00131988525391"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[1-vector_array_without_reserve13]" time="0.00117111206055"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[1-vector_array_without_reserve14]" time="0.00128817558289"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[1-vector_array_without_reserve15]" time="0.00127100944519"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[1-vector_array_without_reserve16]" time="0.00146913528442"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[2-vector_array_without_reserve0]" time="0.00105309486389"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[2-vector_array_without_reserve1]" time="0.000980138778687"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[2-vector_array_without_reserve2]" time="0.000950813293457"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[2-vector_array_without_reserve3]" time="0.0011351108551"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[2-vector_array_without_reserve4]" time="0.000967979431152"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[2-vector_array_without_reserve5]" time="0.00177145004272"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[2-vector_array_without_reserve6]" time="0.000940561294556"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[2-vector_array_without_reserve7]" time="0.000993967056274"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[2-vector_array_without_reserve8]" time="0.00160694122314"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[2-vector_array_without_reserve9]" time="0.00263094902039"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[2-vector_array_without_reserve10]" time="0.00119471549988"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[2-vector_array_without_reserve11]" time="0.00130295753479"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[2-vector_array_without_reserve12]" time="0.00134491920471"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[2-vector_array_without_reserve13]" time="0.00119686126709"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[2-vector_array_without_reserve14]" time="0.00136375427246"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[2-vector_array_without_reserve15]" time="0.0014271736145"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="182" name="test_from_data[2-vector_array_without_reserve16]" time="0.00126099586487"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[0-vector_array_without_reserve0]" time="0.00087571144104"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[0-vector_array_without_reserve1]" time="0.00101685523987"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[0-vector_array_without_reserve2]" time="0.000813007354736"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[0-vector_array_without_reserve3]" time="0.000869750976562"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[0-vector_array_without_reserve4]" time="0.000879049301147"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[0-vector_array_without_reserve5]" time="0.000878810882568"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[0-vector_array_without_reserve6]" time="0.000859975814819"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[0-vector_array_without_reserve7]" time="0.0010507106781"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[0-vector_array_without_reserve8]" time="0.00105214118958"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[0-vector_array_without_reserve9]" time="0.00136590003967"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[0-vector_array_without_reserve10]" time="0.0010461807251"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[0-vector_array_without_reserve11]" time="0.00141906738281"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[0-vector_array_without_reserve12]" time="0.00103187561035"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[0-vector_array_without_reserve13]" time="0.000944852828979"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[0-vector_array_without_reserve14]" time="0.00109624862671"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[0-vector_array_without_reserve15]" time="0.00102806091309"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[0-vector_array_without_reserve16]" time="0.00106906890869"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[1-vector_array_without_reserve0]" time="0.000926971435547"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[1-vector_array_without_reserve1]" time="0.00093674659729"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[1-vector_array_without_reserve2]" time="0.000877141952515"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[1-vector_array_without_reserve3]" time="0.000923871994019"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[1-vector_array_without_reserve4]" time="0.000905990600586"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[1-vector_array_without_reserve5]" time="0.00113701820374"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[1-vector_array_without_reserve6]" time="0.00090217590332"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[1-vector_array_without_reserve7]" time="0.000865936279297"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[1-vector_array_without_reserve8]" time="0.00120878219604"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[1-vector_array_without_reserve9]" time="0.00190615653992"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[1-vector_array_without_reserve10]" time="0.00100207328796"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[1-vector_array_without_reserve11]" time="0.00106954574585"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[1-vector_array_without_reserve12]" time="0.00130009651184"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[1-vector_array_without_reserve13]" time="0.00100994110107"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[1-vector_array_without_reserve14]" time="0.00106501579285"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[1-vector_array_without_reserve15]" time="0.00110626220703"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[1-vector_array_without_reserve16]" time="0.00115919113159"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[2-vector_array_without_reserve0]" time="0.000951766967773"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[2-vector_array_without_reserve1]" time="0.00105476379395"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[2-vector_array_without_reserve2]" time="0.000895023345947"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[2-vector_array_without_reserve3]" time="0.000874996185303"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[2-vector_array_without_reserve4]" time="0.000969886779785"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[2-vector_array_without_reserve5]" time="0.000910758972168"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[2-vector_array_without_reserve6]" time="0.000868082046509"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[2-vector_array_without_reserve7]" time="0.00105714797974"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[2-vector_array_without_reserve8]" time="0.00127720832825"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[2-vector_array_without_reserve9]" time="0.0026957988739"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[2-vector_array_without_reserve10]" time="0.0010826587677"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[2-vector_array_without_reserve11]" time="0.000975131988525"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[2-vector_array_without_reserve12]" time="0.00108194351196"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[2-vector_array_without_reserve13]" time="0.00125813484192"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[2-vector_array_without_reserve14]" time="0.00110983848572"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[2-vector_array_without_reserve15]" time="0.00110507011414"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="192" name="test_shape[2-vector_array_without_reserve16]" time="0.00119781494141"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[0-vector_array_without_reserve0]" time="0.000836849212646"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[0-vector_array_without_reserve1]" time="0.000837087631226"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[0-vector_array_without_reserve2]" time="0.00106120109558"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[0-vector_array_without_reserve3]" time="0.000820159912109"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[0-vector_array_without_reserve4]" time="0.000825166702271"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[0-vector_array_without_reserve5]" time="0.00089168548584"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[0-vector_array_without_reserve6]" time="0.000822305679321"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[0-vector_array_without_reserve7]" time="0.000899314880371"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[0-vector_array_without_reserve8]" time="0.00126791000366"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[0-vector_array_without_reserve9]" time="0.00114107131958"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[0-vector_array_without_reserve10]" time="0.00101399421692"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[0-vector_array_without_reserve11]" time="0.000953197479248"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[0-vector_array_without_reserve12]" time="0.00134992599487"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[0-vector_array_without_reserve13]" time="0.000975847244263"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[0-vector_array_without_reserve14]" time="0.000951051712036"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[0-vector_array_without_reserve15]" time="0.00101184844971"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[0-vector_array_without_reserve16]" time="0.000973701477051"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[1-vector_array_without_reserve0]" time="0.000850915908813"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[1-vector_array_without_reserve1]" time="0.00110602378845"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[1-vector_array_without_reserve2]" time="0.000929117202759"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[1-vector_array_without_reserve3]" time="0.000886201858521"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[1-vector_array_without_reserve4]" time="0.000850915908813"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[1-vector_array_without_reserve5]" time="0.00090503692627"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[1-vector_array_without_reserve6]" time="0.000879287719727"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[1-vector_array_without_reserve7]" time="0.00110292434692"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[1-vector_array_without_reserve8]" time="0.00113701820374"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[1-vector_array_without_reserve9]" time="0.00183486938477"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[1-vector_array_without_reserve10]" time="0.00101399421692"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[1-vector_array_without_reserve11]" time="0.00100636482239"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[1-vector_array_without_reserve12]" time="0.0010302066803"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[1-vector_array_without_reserve13]" time="0.00105881690979"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[1-vector_array_without_reserve14]" time="0.00123906135559"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[1-vector_array_without_reserve15]" time="0.00110268592834"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[1-vector_array_without_reserve16]" time="0.00110411643982"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[2-vector_array_without_reserve0]" time="0.000886917114258"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[2-vector_array_without_reserve1]" time="0.000868082046509"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[2-vector_array_without_reserve2]" time="0.000967025756836"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[2-vector_array_without_reserve3]" time="0.000831127166748"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[2-vector_array_without_reserve4]" time="0.00102567672729"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[2-vector_array_without_reserve5]" time="0.000949144363403"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[2-vector_array_without_reserve6]" time="0.000895023345947"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[2-vector_array_without_reserve7]" time="0.000851154327393"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[2-vector_array_without_reserve8]" time="0.00151491165161"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[2-vector_array_without_reserve9]" time="0.00160002708435"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[2-vector_array_without_reserve10]" time="0.00099515914917"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[2-vector_array_without_reserve11]" time="0.00104427337646"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[2-vector_array_without_reserve12]" time="0.00101590156555"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[2-vector_array_without_reserve13]" time="0.00106501579285"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[2-vector_array_without_reserve14]" time="0.00108408927917"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[2-vector_array_without_reserve15]" time="0.00206708908081"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="200" name="test_space[2-vector_array_without_reserve16]" time="0.00118017196655"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[0-vector_array_without_reserve0]" time="0.0177519321442"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[0-vector_array_without_reserve1]" time="0.0179567337036"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[0-vector_array_without_reserve2]" time="0.0281538963318"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[0-vector_array_without_reserve3]" time="0.0333530902863"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[0-vector_array_without_reserve4]" time="0.034677028656"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[0-vector_array_without_reserve5]" time="0.0136041641235"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[0-vector_array_without_reserve6]" time="0.0116119384766"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[0-vector_array_without_reserve7]" time="0.0379140377045"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[0-vector_array_without_reserve8]" time="0.106217861176"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[0-vector_array_without_reserve9]" time="0.18209695816"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[0-vector_array_without_reserve10]" time="0.0318450927734"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[0-vector_array_without_reserve11]" time="0.057243347168"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[0-vector_array_without_reserve12]" time="0.053426027298"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[0-vector_array_without_reserve13]" time="0.038489818573"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[0-vector_array_without_reserve14]" time="0.0561969280243"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[0-vector_array_without_reserve15]" time="0.0833420753479"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[0-vector_array_without_reserve16]" time="0.0900337696075"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[1-vector_array_without_reserve0]" time="0.020099401474"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[1-vector_array_without_reserve1]" time="0.0198619365692"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[1-vector_array_without_reserve2]" time="0.0279271602631"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[1-vector_array_without_reserve3]" time="0.0332012176514"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[1-vector_array_without_reserve4]" time="0.0347800254822"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[1-vector_array_without_reserve5]" time="0.01349401474"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[1-vector_array_without_reserve6]" time="0.0112521648407"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[1-vector_array_without_reserve7]" time="0.0371952056885"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[1-vector_array_without_reserve8]" time="0.106697320938"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[1-vector_array_without_reserve9]" time="0.179662942886"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[1-vector_array_without_reserve10]" time="0.0315039157867"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[1-vector_array_without_reserve11]" time="0.0566742420197"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[1-vector_array_without_reserve12]" time="0.0531611442566"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[1-vector_array_without_reserve13]" time="0.0376799106598"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[1-vector_array_without_reserve14]" time="0.0552361011505"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[1-vector_array_without_reserve15]" time="0.082245349884"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[1-vector_array_without_reserve16]" time="0.0897829532623"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[2-vector_array_without_reserve0]" time="0.0199210643768"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[2-vector_array_without_reserve1]" time="0.0195500850677"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[2-vector_array_without_reserve2]" time="0.0280220508575"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[2-vector_array_without_reserve3]" time="0.0335109233856"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[2-vector_array_without_reserve4]" time="0.0350122451782"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[2-vector_array_without_reserve5]" time="0.0140511989594"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[2-vector_array_without_reserve6]" time="0.0134599208832"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[2-vector_array_without_reserve7]" time="0.0369277000427"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[2-vector_array_without_reserve8]" time="0.107259750366"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[2-vector_array_without_reserve9]" time="0.180374860764"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[2-vector_array_without_reserve10]" time="0.0316069126129"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[2-vector_array_without_reserve11]" time="0.0570743083954"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[2-vector_array_without_reserve12]" time="0.0532200336456"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[2-vector_array_without_reserve13]" time="0.0379781723022"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[2-vector_array_without_reserve14]" time="0.0561199188232"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[2-vector_array_without_reserve15]" time="0.0812160968781"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="206" name="test_getitem_repeated[2-vector_array_without_reserve16]" time="0.0886569023132"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[0-vector_array_without_reserve0]" time="0.00748705863953"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[0-vector_array_without_reserve1]" time="0.00567817687988"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[0-vector_array_without_reserve2]" time="0.00743198394775"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[0-vector_array_without_reserve3]" time="0.00837993621826"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[0-vector_array_without_reserve4]" time="0.00806927680969"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[0-vector_array_without_reserve5]" time="0.00459098815918"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[0-vector_array_without_reserve6]" time="0.00447201728821"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[0-vector_array_without_reserve7]" time="0.00943183898926"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[0-vector_array_without_reserve8]" time="0.0330910682678"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[0-vector_array_without_reserve9]" time="0.0629258155823"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[0-vector_array_without_reserve10]" time="0.011168718338"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[0-vector_array_without_reserve11]" time="0.0147569179535"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[0-vector_array_without_reserve12]" time="0.0143702030182"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[0-vector_array_without_reserve13]" time="0.0116980075836"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[0-vector_array_without_reserve14]" time="0.0131711959839"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[0-vector_array_without_reserve15]" time="0.0198500156403"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[0-vector_array_without_reserve16]" time="0.0204811096191"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[1-vector_array_without_reserve0]" time="0.0072009563446"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[1-vector_array_without_reserve1]" time="0.00553226470947"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[1-vector_array_without_reserve2]" time="0.00713038444519"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[1-vector_array_without_reserve3]" time="0.00818300247192"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[1-vector_array_without_reserve4]" time="0.00779104232788"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[1-vector_array_without_reserve5]" time="0.00464701652527"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[1-vector_array_without_reserve6]" time="0.00457406044006"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[1-vector_array_without_reserve7]" time="0.00927901268005"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[1-vector_array_without_reserve8]" time="0.0342299938202"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[1-vector_array_without_reserve9]" time="0.062292098999"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[1-vector_array_without_reserve10]" time="0.0113270282745"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[1-vector_array_without_reserve11]" time="0.0147161483765"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[1-vector_array_without_reserve12]" time="0.0143270492554"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[1-vector_array_without_reserve13]" time="0.011791229248"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[1-vector_array_without_reserve14]" time="0.0134220123291"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[1-vector_array_without_reserve15]" time="0.0200681686401"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[1-vector_array_without_reserve16]" time="0.0204658508301"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[2-vector_array_without_reserve0]" time="0.00732588768005"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[2-vector_array_without_reserve1]" time="0.00562787055969"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[2-vector_array_without_reserve2]" time="0.00690412521362"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[2-vector_array_without_reserve3]" time="0.00875902175903"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[2-vector_array_without_reserve4]" time="0.00783109664917"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[2-vector_array_without_reserve5]" time="0.00452995300293"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[2-vector_array_without_reserve6]" time="0.00459313392639"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[2-vector_array_without_reserve7]" time="0.00919580459595"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[2-vector_array_without_reserve8]" time="0.0329322814941"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[2-vector_array_without_reserve9]" time="0.0634288787842"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[2-vector_array_without_reserve10]" time="0.0109338760376"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[2-vector_array_without_reserve11]" time="0.0132417678833"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[2-vector_array_without_reserve12]" time="0.0143280029297"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[2-vector_array_without_reserve13]" time="0.0115938186646"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[2-vector_array_without_reserve14]" time="0.0131568908691"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[2-vector_array_without_reserve15]" time="0.0196189880371"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="217" name="test_copy[2-vector_array_without_reserve16]" time="0.020565032959"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[0-vector_array_without_reserve0]" time="0.0012731552124"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[0-vector_array_without_reserve1]" time="0.00123691558838"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[0-vector_array_without_reserve2]" time="0.00190091133118"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[0-vector_array_without_reserve3]" time="0.00188565254211"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[0-vector_array_without_reserve4]" time="0.00175786018372"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[0-vector_array_without_reserve5]" time="0.000846862792969"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[0-vector_array_without_reserve6]" time="0.000874280929565"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[0-vector_array_without_reserve7]" time="0.00223016738892"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[0-vector_array_without_reserve8]" time="0.00247812271118"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[0-vector_array_without_reserve9]" time="0.00316905975342"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[0-vector_array_without_reserve10]" time="0.000948905944824"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[0-vector_array_without_reserve11]" time="0.003093957901"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[0-vector_array_without_reserve12]" time="0.00302076339722"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[0-vector_array_without_reserve13]" time="0.00281286239624"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[0-vector_array_without_reserve14]" time="0.0031464099884"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[0-vector_array_without_reserve15]" time="0.00374007225037"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[0-vector_array_without_reserve16]" time="0.00361084938049"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[1-vector_array_without_reserve0]" time="0.000922441482544"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[1-vector_array_without_reserve1]" time="0.000859022140503"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[1-vector_array_without_reserve2]" time="0.00215101242065"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[1-vector_array_without_reserve3]" time="0.0018892288208"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[1-vector_array_without_reserve4]" time="0.00185298919678"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[1-vector_array_without_reserve5]" time="0.000875949859619"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[1-vector_array_without_reserve6]" time="0.00090503692627"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[1-vector_array_without_reserve7]" time="0.00208401679993"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[1-vector_array_without_reserve8]" time="0.00279378890991"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[1-vector_array_without_reserve9]" time="0.00343728065491"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[1-vector_array_without_reserve10]" time="0.00105023384094"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[1-vector_array_without_reserve11]" time="0.00319409370422"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[1-vector_array_without_reserve12]" time="0.00319504737854"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[1-vector_array_without_reserve13]" time="0.00260591506958"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[1-vector_array_without_reserve14]" time="0.00431609153748"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[1-vector_array_without_reserve15]" time="0.00394487380981"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[1-vector_array_without_reserve16]" time="0.00423216819763"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[2-vector_array_without_reserve0]" time="0.000873804092407"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[2-vector_array_without_reserve1]" time="0.000969886779785"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[2-vector_array_without_reserve2]" time="0.00203394889832"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[2-vector_array_without_reserve3]" time="0.00221109390259"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[2-vector_array_without_reserve4]" time="0.00176501274109"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[2-vector_array_without_reserve5]" time="0.000863075256348"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[2-vector_array_without_reserve6]" time="0.000847816467285"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[2-vector_array_without_reserve7]" time="0.00215005874634"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[2-vector_array_without_reserve8]" time="0.00281929969788"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[2-vector_array_without_reserve9]" time="0.00332307815552"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[2-vector_array_without_reserve10]" time="0.00152206420898"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[2-vector_array_without_reserve11]" time="0.00340962409973"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[2-vector_array_without_reserve12]" time="0.00336289405823"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[2-vector_array_without_reserve13]" time="0.00280618667603"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[2-vector_array_without_reserve14]" time="0.00327014923096"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[2-vector_array_without_reserve15]" time="0.00434494018555"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="236" name="test_copy_repeated_index[2-vector_array_without_reserve16]" time="0.00399589538574"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve0]" time="0.00752282142639"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve1]" time="0.00952363014221"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve2]" time="0.0114421844482"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve3]" time="0.010956287384"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve4]" time="0.0140488147736"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve5]" time="0.0114290714264"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve6]" time="0.00764012336731"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve7]" time="0.010674238205"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve8]" time="0.0350091457367"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve9]" time="0.0224244594574"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve10]" time="0.0869808197021"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve11]" time="0.0136184692383"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve12]" time="0.0142707824707"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve13]" time="0.0246250629425"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve14]" time="0.0156238079071"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve15]" time="0.027291059494"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve16]" time="0.0251772403717"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve17]" time="0.0305480957031"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve0]" time="0.00931334495544"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve1]" time="0.00960803031921"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve2]" time="0.0114822387695"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve3]" time="0.0115077495575"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve4]" time="0.0143039226532"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve5]" time="0.0114629268646"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve6]" time="0.00614881515503"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve7]" time="0.0106437206268"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve8]" time="0.0351481437683"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve9]" time="0.0235567092896"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve10]" time="0.0858891010284"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve11]" time="0.0133230686188"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve12]" time="0.0126042366028"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve13]" time="0.0247571468353"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve14]" time="0.0158488750458"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve15]" time="0.0270390510559"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve16]" time="0.0255632400513"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve17]" time="0.0302860736847"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve0]" time="0.00902438163757"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve1]" time="0.00986814498901"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve2]" time="0.0118429660797"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve3]" time="0.0106070041656"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve4]" time="0.0126912593842"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve5]" time="0.01154088974"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve6]" time="0.00601387023926"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve7]" time="0.010819196701"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve8]" time="0.0355780124664"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve9]" time="0.0231249332428"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve10]" time="0.0903778076172"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve11]" time="0.0130605697632"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve12]" time="0.0143299102783"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve13]" time="0.0250818729401"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve14]" time="0.0161070823669"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve15]" time="0.027186870575"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve16]" time="0.0254812240601"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve17]" time="0.030868768692"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve0]" time="0.00905299186707"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve1]" time="0.00967621803284"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve2]" time="0.01176404953"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve3]" time="0.0105237960815"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve4]" time="0.012463092804"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve5]" time="0.0114619731903"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve6]" time="0.00593304634094"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve7]" time="0.0107610225677"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve8]" time="0.0350489616394"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve9]" time="0.0233700275421"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve10]" time="0.0866277217865"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve11]" time="0.0130298137665"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve12]" time="0.0141360759735"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve13]" time="0.0250849723816"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve14]" time="0.0159993171692"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve15]" time="0.0271468162537"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve16]" time="0.0253350734711"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve17]" time="0.030855178833"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve0]" time="0.00878691673279"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve1]" time="0.00936388969421"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve2]" time="0.0116319656372"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve3]" time="0.0106110572815"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve4]" time="0.012482881546"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve5]" time="0.0115368366241"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve6]" time="0.00605511665344"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve7]" time="0.0105330944061"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve8]" time="0.0355882644653"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve9]" time="0.0234320163727"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve10]" time="0.0851192474365"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve11]" time="0.0132927894592"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve12]" time="0.012806892395"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve13]" time="0.0245609283447"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve14]" time="0.0163300037384"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve15]" time="0.0271983146667"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve16]" time="0.0252730846405"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve17]" time="0.0308349132538"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve0]" time="0.00893592834473"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve1]" time="0.00981307029724"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve2]" time="0.0112471580505"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve3]" time="0.0104653835297"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve4]" time="0.0125916004181"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve5]" time="0.0115959644318"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve6]" time="0.00628876686096"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve7]" time="0.010555267334"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve8]" time="0.0359220504761"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve9]" time="0.0228328704834"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve10]" time="0.0871620178223"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve11]" time="0.0133497714996"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve12]" time="0.0146269798279"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve13]" time="0.0246891975403"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve14]" time="0.0160713195801"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve15]" time="0.0274641513824"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve16]" time="0.02530169487"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve17]" time="0.0309519767761"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve0]" time="0.00906801223755"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve1]" time="0.00963306427002"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve2]" time="0.0117568969727"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve3]" time="0.0103867053986"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve4]" time="0.0123980045319"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve5]" time="0.0113408565521"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve6]" time="0.00745820999146"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve7]" time="0.0108070373535"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve8]" time="0.0350050926208"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve9]" time="0.0225739479065"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve10]" time="0.0863502025604"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve11]" time="0.0129880905151"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve12]" time="0.0127282142639"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve13]" time="0.0245957374573"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve14]" time="0.0155539512634"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve15]" time="0.027195930481"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve16]" time="0.0249791145325"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve17]" time="0.0302588939667"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve0]" time="0.00898385047913"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve1]" time="0.00938487052917"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve2]" time="0.0115847587585"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve3]" time="0.0104999542236"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve4]" time="0.0125141143799"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve5]" time="0.0113499164581"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve6]" time="0.00597381591797"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve7]" time="0.010733127594"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve8]" time="0.0351982116699"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve9]" time="0.0238337516785"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve10]" time="0.0867598056793"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve11]" time="0.0132780075073"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve12]" time="0.0142848491669"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve13]" time="0.0242059230804"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve14]" time="0.016077041626"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve15]" time="0.0269100666046"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve16]" time="0.0252499580383"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve17]" time="0.030287027359"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve0]" time="0.00908184051514"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve1]" time="0.011118888855"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve2]" time="0.0112719535828"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve3]" time="0.0107679367065"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve4]" time="0.0139827728271"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve5]" time="0.00988292694092"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve6]" time="0.0079653263092"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve7]" time="0.0106027126312"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve8]" time="0.034903049469"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve9]" time="0.023236989975"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve10]" time="0.0879991054535"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve11]" time="0.0134429931641"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve12]" time="0.0126008987427"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve13]" time="0.024530172348"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve14]" time="0.0160958766937"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve15]" time="0.0269870758057"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve16]" time="0.0248863697052"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="254" name="test_append[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve17]" time="0.0305368900299"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[0-vector_array_without_reserve0]" time="0.00170516967773"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[0-vector_array_without_reserve1]" time="0.00186729431152"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[0-vector_array_without_reserve2]" time="0.00119400024414"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[0-vector_array_without_reserve3]" time="0.00127100944519"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[0-vector_array_without_reserve4]" time="0.00128722190857"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[0-vector_array_without_reserve5]" time="0.0011100769043"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[0-vector_array_without_reserve6]" time="0.0011613368988"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[0-vector_array_without_reserve7]" time="0.00149393081665"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[0-vector_array_without_reserve8]" time="0.0028932094574"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[0-vector_array_without_reserve9]" time="0.00511717796326"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[0-vector_array_without_reserve10]" time="0.00146675109863"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[0-vector_array_without_reserve11]" time="0.00152921676636"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[0-vector_array_without_reserve12]" time="0.00148510932922"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[0-vector_array_without_reserve13]" time="0.00134897232056"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[0-vector_array_without_reserve14]" time="0.00150513648987"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[0-vector_array_without_reserve15]" time="0.00206398963928"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[0-vector_array_without_reserve16]" time="0.00163221359253"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[1-vector_array_without_reserve0]" time="0.00113916397095"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[1-vector_array_without_reserve1]" time="0.00114679336548"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[1-vector_array_without_reserve2]" time="0.00116109848022"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[1-vector_array_without_reserve3]" time="0.00123000144958"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[1-vector_array_without_reserve4]" time="0.00147485733032"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[1-vector_array_without_reserve5]" time="0.00119137763977"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[1-vector_array_without_reserve6]" time="0.00110602378845"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[1-vector_array_without_reserve7]" time="0.00137901306152"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[1-vector_array_without_reserve8]" time="0.00318598747253"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[1-vector_array_without_reserve9]" time="0.0055820941925"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[1-vector_array_without_reserve10]" time="0.00147795677185"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[1-vector_array_without_reserve11]" time="0.00160098075867"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[1-vector_array_without_reserve12]" time="0.00163531303406"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[1-vector_array_without_reserve13]" time="0.00153040885925"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[1-vector_array_without_reserve14]" time="0.00159883499146"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[1-vector_array_without_reserve15]" time="0.00212621688843"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[1-vector_array_without_reserve16]" time="0.00183606147766"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[2-vector_array_without_reserve0]" time="0.00119066238403"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[2-vector_array_without_reserve1]" time="0.00116300582886"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[2-vector_array_without_reserve2]" time="0.00124096870422"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[2-vector_array_without_reserve3]" time="0.00126004219055"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[2-vector_array_without_reserve4]" time="0.00137686729431"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[2-vector_array_without_reserve5]" time="0.00125193595886"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[2-vector_array_without_reserve6]" time="0.00117802619934"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[2-vector_array_without_reserve7]" time="0.0012800693512"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[2-vector_array_without_reserve8]" time="0.00313878059387"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[2-vector_array_without_reserve9]" time="0.00513792037964"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[2-vector_array_without_reserve10]" time="0.00145125389099"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[2-vector_array_without_reserve11]" time="0.00159978866577"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[2-vector_array_without_reserve12]" time="0.00162887573242"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[2-vector_array_without_reserve13]" time="0.00155091285706"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[2-vector_array_without_reserve14]" time="0.00159692764282"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[2-vector_array_without_reserve15]" time="0.00197410583496"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="276" name="test_append_self[2-vector_array_without_reserve16]" time="0.00178503990173"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[0-vector_array_without_reserve0]" time="0.00383424758911"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[0-vector_array_without_reserve1]" time="0.00380277633667"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[0-vector_array_without_reserve2]" time="0.00483083724976"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[0-vector_array_without_reserve3]" time="0.00584506988525"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[0-vector_array_without_reserve4]" time="0.0062210559845"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[0-vector_array_without_reserve5]" time="0.00307488441467"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[0-vector_array_without_reserve6]" time="0.00303292274475"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[0-vector_array_without_reserve7]" time="0.00413823127747"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[0-vector_array_without_reserve8]" time="0.0154531002045"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[0-vector_array_without_reserve9]" time="0.0283117294312"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[0-vector_array_without_reserve10]" time="0.00759482383728"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[0-vector_array_without_reserve11]" time="0.00804376602173"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[0-vector_array_without_reserve12]" time="0.00770998001099"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[0-vector_array_without_reserve13]" time="0.00606083869934"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[0-vector_array_without_reserve14]" time="0.0080361366272"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[0-vector_array_without_reserve15]" time="0.0118329524994"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[0-vector_array_without_reserve16]" time="0.0130667686462"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[1-vector_array_without_reserve0]" time="0.00551867485046"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[1-vector_array_without_reserve1]" time="0.00421524047852"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[1-vector_array_without_reserve2]" time="0.00485181808472"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[1-vector_array_without_reserve3]" time="0.0057897567749"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[1-vector_array_without_reserve4]" time="0.00615072250366"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[1-vector_array_without_reserve5]" time="0.00301814079285"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[1-vector_array_without_reserve6]" time="0.00305509567261"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[1-vector_array_without_reserve7]" time="0.00409984588623"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[1-vector_array_without_reserve8]" time="0.0156898498535"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[1-vector_array_without_reserve9]" time="0.0303752422333"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[1-vector_array_without_reserve10]" time="0.00754404067993"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[1-vector_array_without_reserve11]" time="0.00811886787415"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[1-vector_array_without_reserve12]" time="0.00782299041748"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[1-vector_array_without_reserve13]" time="0.00601291656494"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[1-vector_array_without_reserve14]" time="0.0081000328064"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[1-vector_array_without_reserve15]" time="0.0117781162262"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[1-vector_array_without_reserve16]" time="0.0128929615021"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[2-vector_array_without_reserve0]" time="0.00559401512146"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[2-vector_array_without_reserve1]" time="0.00404095649719"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[2-vector_array_without_reserve2]" time="0.00483083724976"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[2-vector_array_without_reserve3]" time="0.00599098205566"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[2-vector_array_without_reserve4]" time="0.0061616897583"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[2-vector_array_without_reserve5]" time="0.00287795066833"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[2-vector_array_without_reserve6]" time="0.00302004814148"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[2-vector_array_without_reserve7]" time="0.00414204597473"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[2-vector_array_without_reserve8]" time="0.016184091568"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[2-vector_array_without_reserve9]" time="0.0304460525513"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[2-vector_array_without_reserve10]" time="0.00750088691711"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[2-vector_array_without_reserve11]" time="0.00835084915161"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[2-vector_array_without_reserve12]" time="0.00781297683716"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[2-vector_array_without_reserve13]" time="0.00603866577148"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[2-vector_array_without_reserve14]" time="0.00811624526978"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[2-vector_array_without_reserve15]" time="0.0118470191956"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="290" name="test_del[2-vector_array_without_reserve16]" time="0.0144100189209"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[0-vector_array_without_reserve0]" time="0.0235657691956"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[0-vector_array_without_reserve1]" time="0.0249080657959"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[0-vector_array_without_reserve2]" time="0.0239808559418"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[0-vector_array_without_reserve3]" time="0.0278677940369"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[0-vector_array_without_reserve4]" time="0.0267040729523"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[0-vector_array_without_reserve5]" time="0.0179657936096"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[0-vector_array_without_reserve6]" time="0.0179226398468"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[0-vector_array_without_reserve7]" time="0.0214309692383"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[0-vector_array_without_reserve8]" time="0.0905351638794"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[0-vector_array_without_reserve9]" time="0.164061307907"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[0-vector_array_without_reserve10]" time="0.0414831638336"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[0-vector_array_without_reserve11]" time="0.0418059825897"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[0-vector_array_without_reserve12]" time="0.0389587879181"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[0-vector_array_without_reserve13]" time="0.0313539505005"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[0-vector_array_without_reserve14]" time="0.0436918735504"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[0-vector_array_without_reserve15]" time="0.0593070983887"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[0-vector_array_without_reserve16]" time="0.0629887580872"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[1-vector_array_without_reserve0]" time="0.0238757133484"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[1-vector_array_without_reserve1]" time="0.0244979858398"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[1-vector_array_without_reserve2]" time="0.0236248970032"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[1-vector_array_without_reserve3]" time="0.0278608798981"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[1-vector_array_without_reserve4]" time="0.0275750160217"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[1-vector_array_without_reserve5]" time="0.0178620815277"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[1-vector_array_without_reserve6]" time="0.0178620815277"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[1-vector_array_without_reserve7]" time="0.0220348834991"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[1-vector_array_without_reserve8]" time="0.0903785228729"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[1-vector_array_without_reserve9]" time="0.165616989136"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[1-vector_array_without_reserve10]" time="0.0404069423676"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[1-vector_array_without_reserve11]" time="0.043224811554"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[1-vector_array_without_reserve12]" time="0.0394475460052"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[1-vector_array_without_reserve13]" time="0.0311169624329"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[1-vector_array_without_reserve14]" time="0.0429670810699"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[1-vector_array_without_reserve15]" time="0.060261964798"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[1-vector_array_without_reserve16]" time="0.0633518695831"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[2-vector_array_without_reserve0]" time="0.0234749317169"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[2-vector_array_without_reserve1]" time="0.0252857208252"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[2-vector_array_without_reserve2]" time="0.0248870849609"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[2-vector_array_without_reserve3]" time="0.0284161567688"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[2-vector_array_without_reserve4]" time="0.0269238948822"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[2-vector_array_without_reserve5]" time="0.0180160999298"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[2-vector_array_without_reserve6]" time="0.0179009437561"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[2-vector_array_without_reserve7]" time="0.0215668678284"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[2-vector_array_without_reserve8]" time="0.0920948982239"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[2-vector_array_without_reserve9]" time="0.164952754974"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[2-vector_array_without_reserve10]" time="0.0408120155334"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[2-vector_array_without_reserve11]" time="0.0423889160156"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[2-vector_array_without_reserve12]" time="0.0392248630524"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[2-vector_array_without_reserve13]" time="0.0311341285706"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[2-vector_array_without_reserve14]" time="0.0431342124939"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[2-vector_array_without_reserve15]" time="0.0595111846924"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="305" name="test_scal[2-vector_array_without_reserve16]" time="0.0646591186523"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve0]" time="0.0217328071594"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve1]" time="0.00579404830933"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve2]" time="0.0331418514252"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve3]" time="0.0347490310669"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve4]" time="0.0348000526428"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve5]" time="0.0511028766632"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve6]" time="0.0157821178436"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve7]" time="0.00478386878967"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve8]" time="0.0652711391449"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve9]" time="0.110231161118"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve10]" time="0.260851144791"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve11]" time="0.0528025627136"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve12]" time="0.038115978241"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve13]" time="0.00981092453003"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve14]" time="0.0480239391327"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve15]" time="0.0788149833679"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve16]" time="0.084456205368"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve17]" time="0.0868079662323"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve0]" time="0.0213069915771"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve1]" time="0.00569009780884"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve2]" time="0.0329911708832"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve3]" time="0.034824848175"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve4]" time="0.0351409912109"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve5]" time="0.0519461631775"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve6]" time="0.0161409378052"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve7]" time="0.00462818145752"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve8]" time="0.0659279823303"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve9]" time="0.109792947769"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve10]" time="0.262905836105"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve11]" time="0.0532162189484"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve12]" time="0.0380401611328"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve13]" time="0.00965976715088"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve14]" time="0.0461699962616"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve15]" time="0.0787558555603"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve16]" time="0.0834720134735"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve17]" time="0.0862739086151"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve0]" time="0.0226418972015"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve1]" time="0.0059700012207"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve2]" time="0.0324897766113"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve3]" time="0.0343232154846"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve4]" time="0.0360524654388"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve5]" time="0.0516629219055"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve6]" time="0.0157692432404"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve7]" time="0.00490283966064"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve8]" time="0.0652091503143"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve9]" time="0.110692977905"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve10]" time="0.264008998871"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve11]" time="0.0523879528046"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve12]" time="0.0379979610443"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve13]" time="0.00983691215515"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve14]" time="0.0476920604706"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve15]" time="0.0804870128632"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve16]" time="0.0841670036316"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve17]" time="0.0866000652313"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve0]" time="0.0218389034271"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve1]" time="0.00571084022522"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve2]" time="0.0324420928955"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve3]" time="0.0353090763092"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve4]" time="0.0357098579407"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve5]" time="0.0516619682312"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve6]" time="0.016211271286"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve7]" time="0.00490212440491"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve8]" time="0.0658791065216"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve9]" time="0.111247062683"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve10]" time="0.261553764343"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve11]" time="0.0523550510406"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve12]" time="0.0381672382355"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve13]" time="0.00984382629395"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve14]" time="0.0480558872223"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve15]" time="0.0795147418976"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve16]" time="0.0833690166473"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve17]" time="0.0867722034454"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve0]" time="0.0217533111572"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve1]" time="0.00575017929077"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve2]" time="0.0328319072723"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve3]" time="0.034675359726"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve4]" time="0.0347709655762"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve5]" time="0.051687002182"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve6]" time="0.0157930850983"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve7]" time="0.00492811203003"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve8]" time="0.066349029541"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve9]" time="0.113863229752"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve10]" time="0.260765075684"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve11]" time="0.0534751415253"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve12]" time="0.0374269485474"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve13]" time="0.00990509986877"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve14]" time="0.0484278202057"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve15]" time="0.0779259204865"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve16]" time="0.083062171936"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve17]" time="0.0859689712524"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve0]" time="0.0214149951935"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve1]" time="0.00603294372559"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve2]" time="0.0325708389282"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve3]" time="0.034805059433"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve4]" time="0.0347030162811"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve5]" time="0.0512490272522"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve6]" time="0.0162978172302"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve7]" time="0.00478887557983"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve8]" time="0.0665640830994"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve9]" time="0.110414028168"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve10]" time="0.260906934738"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve11]" time="0.0525739192963"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve12]" time="0.0388519763947"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve13]" time="0.00975179672241"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve14]" time="0.047600030899"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve15]" time="0.0791699886322"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve16]" time="0.0909831523895"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve17]" time="0.0848398208618"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve0]" time="0.0214219093323"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve1]" time="0.00588488578796"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve2]" time="0.0315990447998"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve3]" time="0.0351300239563"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve4]" time="0.0349011421204"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve5]" time="0.0517179965973"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve6]" time="0.0161213874817"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve7]" time="0.00479412078857"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve8]" time="0.0659120082855"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve9]" time="0.112410068512"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve10]" time="0.259534835815"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve11]" time="0.0529458522797"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve12]" time="0.03781914711"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve13]" time="0.00972509384155"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve14]" time="0.0465977191925"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve15]" time="0.0796508789062"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve16]" time="0.0836379528046"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve17]" time="0.0849609375"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve0]" time="0.0212070941925"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve1]" time="0.00561714172363"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve2]" time="0.0325667858124"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve3]" time="0.0344061851501"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve4]" time="0.034765958786"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve5]" time="0.0502421855927"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve6]" time="0.0158698558807"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve7]" time="0.0045759677887"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve8]" time="0.0682189464569"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve9]" time="0.112766265869"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve10]" time="0.262370109558"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve11]" time="0.0529339313507"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve12]" time="0.0380749702454"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve13]" time="0.0101199150085"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve14]" time="0.0480082035065"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve15]" time="0.0788249969482"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve16]" time="0.0838510990143"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve17]" time="0.0849370956421"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve0]" time="0.021763086319"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve1]" time="0.00590324401855"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve2]" time="0.0324409008026"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve3]" time="0.0352578163147"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve4]" time="0.0351502895355"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve5]" time="0.0506019592285"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve6]" time="0.0158667564392"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve7]" time="0.00465679168701"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve8]" time="0.0667552947998"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve9]" time="0.114484786987"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve10]" time="0.259265184402"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve11]" time="0.0517449378967"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve12]" time="0.0379800796509"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve13]" time="0.00994086265564"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve14]" time="0.0475771427155"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve15]" time="0.0776419639587"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve16]" time="0.082720041275"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="341" name="test_axpy[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve17]" time="0.08509516716"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve0]" time="0.0616638660431"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve1]" time="0.164697170258"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve2]" time="0.126821994781"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve3]" time="0.143064975739"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve4]" time="0.148698091507"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve5]" time="0.12541270256"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve6]" time="0.0426549911499"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve7]" time="0.129663944244"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve8]" time="0.285592079163"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve9]" time="0.538630962372"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve10]" time="1.39526963234"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve11]" time="0.130882024765"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve12]" time="0.110694169998"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve13]" time="0.329164028168"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve14]" time="0.188905954361"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve15]" time="0.326085090637"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve16]" time="0.367504119873"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve17]" time="0.389710187912"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve0]" time="0.0612132549286"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve1]" time="0.164484024048"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve2]" time="0.126219034195"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve3]" time="0.143128871918"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve4]" time="0.1490650177"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve5]" time="0.125960826874"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve6]" time="0.0428867340088"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve7]" time="0.131672143936"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve8]" time="0.287851810455"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve9]" time="0.540153980255"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve10]" time="1.39440774918"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve11]" time="0.131341934204"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve12]" time="0.110523939133"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve13]" time="0.331104755402"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve14]" time="0.187795162201"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve15]" time="0.325053215027"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve16]" time="0.367124795914"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve17]" time="0.391595125198"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve0]" time="0.0615177154541"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve1]" time="0.162931203842"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve2]" time="0.126705169678"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve3]" time="0.144397974014"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve4]" time="0.14973115921"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve5]" time="0.126044034958"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve6]" time="0.042623758316"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve7]" time="0.131527423859"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve8]" time="0.288563013077"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve9]" time="0.54736328125"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve10]" time="1.38813090324"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve11]" time="0.12878704071"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve12]" time="0.109487056732"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve13]" time="0.326721191406"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve14]" time="0.186896085739"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve15]" time="0.318581104279"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve16]" time="0.367605209351"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve17]" time="0.390467882156"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve0]" time="0.061870098114"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve1]" time="0.162295103073"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve2]" time="0.125783920288"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve3]" time="0.142226934433"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve4]" time="0.149111032486"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve5]" time="0.123498916626"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve6]" time="0.0420727729797"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve7]" time="0.13055896759"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve8]" time="0.288820266724"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve9]" time="0.543986082077"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve10]" time="1.38628101349"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve11]" time="0.130024909973"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve12]" time="0.111096858978"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve13]" time="0.32776093483"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve14]" time="0.188770055771"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve15]" time="0.323740959167"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve16]" time="0.362206935883"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve17]" time="0.38728427887"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve0]" time="0.0615830421448"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve1]" time="0.163752794266"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve2]" time="0.12840628624"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve3]" time="0.143531084061"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve4]" time="0.151162862778"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve5]" time="0.125610113144"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve6]" time="0.0424227714539"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve7]" time="0.1316010952"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve8]" time="0.295192718506"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve9]" time="0.550266027451"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve10]" time="1.38782119751"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve11]" time="0.131786346436"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve12]" time="0.113355875015"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve13]" time="0.330193281174"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve14]" time="0.189272642136"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve15]" time="0.322291135788"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve16]" time="0.366484165192"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve17]" time="0.387487888336"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve0]" time="0.0619552135468"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve1]" time="0.163992881775"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve2]" time="0.126781225204"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve3]" time="0.143592119217"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve4]" time="0.149651050568"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve5]" time="0.124465942383"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve6]" time="0.0431709289551"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve7]" time="0.131021738052"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve8]" time="0.290411233902"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve9]" time="0.549083948135"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve10]" time="1.383466959"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve11]" time="0.130023956299"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve12]" time="0.110344171524"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve13]" time="0.325239181519"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve14]" time="0.190574169159"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve15]" time="0.322148084641"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve16]" time="0.358213424683"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve17]" time="0.382183074951"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve0]" time="0.060870885849"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve1]" time="0.161866903305"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve2]" time="0.125385046005"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve3]" time="0.141499042511"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve4]" time="0.147158145905"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve5]" time="0.123393774033"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve6]" time="0.0422112941742"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve7]" time="0.130368947983"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve8]" time="0.287266969681"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve9]" time="0.537077903748"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve10]" time="1.37380218506"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve11]" time="0.130480766296"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve12]" time="0.110089302063"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve13]" time="0.325258016586"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve14]" time="0.187539100647"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve15]" time="0.322159051895"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve16]" time="0.359653949738"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve17]" time="0.38493514061"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve0]" time="0.0609006881714"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve1]" time="0.163353204727"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve2]" time="0.125584840775"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve3]" time="0.142141103745"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve4]" time="0.148783922195"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve5]" time="0.122891187668"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve6]" time="0.041944026947"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve7]" time="0.129611968994"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve8]" time="0.290770053864"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve9]" time="0.542857885361"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve10]" time="1.39814066887"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve11]" time="0.132625102997"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve12]" time="0.112492084503"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve13]" time="0.329503059387"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve14]" time="0.190565824509"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve15]" time="0.322278022766"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve16]" time="0.365175008774"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve17]" time="0.385270118713"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve0]" time="0.0613529682159"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve1]" time="0.162974596024"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve2]" time="0.126219034195"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve3]" time="0.142973899841"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve4]" time="0.151049137115"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve5]" time="0.125914812088"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve6]" time="0.0428369045258"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve7]" time="0.130253791809"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve8]" time="0.283615112305"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve9]" time="0.540154933929"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve10]" time="1.4037539959"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve11]" time="0.132446050644"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve12]" time="0.11145401001"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve13]" time="0.33301615715"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve14]" time="0.191345930099"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve15]" time="0.330291032791"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve16]" time="0.368156909943"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="387" name="test_axpy_one_x[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve17]" time="0.396959066391"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[0-vector_array_without_reserve0]" time="0.022864818573"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[0-vector_array_without_reserve1]" time="0.0242371559143"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[0-vector_array_without_reserve2]" time="0.0467488765717"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[0-vector_array_without_reserve3]" time="0.0483779907227"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[0-vector_array_without_reserve4]" time="0.0466802120209"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[0-vector_array_without_reserve5]" time="0.0176911354065"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[0-vector_array_without_reserve6]" time="0.0171279907227"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[0-vector_array_without_reserve7]" time="0.0459890365601"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[0-vector_array_without_reserve8]" time="0.220808982849"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[0-vector_array_without_reserve9]" time="0.410125255585"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[0-vector_array_without_reserve10]" time="0.0397591590881"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[0-vector_array_without_reserve11]" time="0.0803728103638"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[0-vector_array_without_reserve12]" time="0.0793399810791"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[0-vector_array_without_reserve13]" time="0.0674681663513"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[0-vector_array_without_reserve14]" time="0.088433265686"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[0-vector_array_without_reserve15]" time="0.119528770447"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[0-vector_array_without_reserve16]" time="0.127503156662"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[1-vector_array_without_reserve0]" time="0.0233428478241"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[1-vector_array_without_reserve1]" time="0.0235540866852"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[1-vector_array_without_reserve2]" time="0.0470168590546"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[1-vector_array_without_reserve3]" time="0.0502963066101"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[1-vector_array_without_reserve4]" time="0.0452058315277"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[1-vector_array_without_reserve5]" time="0.016542673111"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[1-vector_array_without_reserve6]" time="0.0168690681458"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[1-vector_array_without_reserve7]" time="0.0457348823547"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[1-vector_array_without_reserve8]" time="0.220548868179"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[1-vector_array_without_reserve9]" time="0.413346290588"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[1-vector_array_without_reserve10]" time="0.0403397083282"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[1-vector_array_without_reserve11]" time="0.0808200836182"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[1-vector_array_without_reserve12]" time="0.0804789066315"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[1-vector_array_without_reserve13]" time="0.0679321289062"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[1-vector_array_without_reserve14]" time="0.0878260135651"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[1-vector_array_without_reserve15]" time="0.119009017944"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[1-vector_array_without_reserve16]" time="0.12680721283"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[2-vector_array_without_reserve0]" time="0.0228111743927"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[2-vector_array_without_reserve1]" time="0.0241329669952"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[2-vector_array_without_reserve2]" time="0.0476143360138"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[2-vector_array_without_reserve3]" time="0.0486159324646"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[2-vector_array_without_reserve4]" time="0.0461308956146"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[2-vector_array_without_reserve5]" time="0.0174729824066"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[2-vector_array_without_reserve6]" time="0.0174090862274"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[2-vector_array_without_reserve7]" time="0.0449900627136"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[2-vector_array_without_reserve8]" time="0.220180988312"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[2-vector_array_without_reserve9]" time="0.413039922714"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[2-vector_array_without_reserve10]" time="0.0402398109436"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[2-vector_array_without_reserve11]" time="0.0816690921783"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[2-vector_array_without_reserve12]" time="0.0795960426331"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[2-vector_array_without_reserve13]" time="0.0663027763367"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[2-vector_array_without_reserve14]" time="0.0876488685608"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[2-vector_array_without_reserve15]" time="0.120342969894"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="433" name="test_axpy_self[2-vector_array_without_reserve16]" time="0.1272752285"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve0]" time="0.00425291061401"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve1]" time="0.00134086608887"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve2]" time="0.0043580532074"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve3]" time="0.00488901138306"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve4]" time="0.00632047653198"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve5]" time="0.00571703910828"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve6]" time="0.0021288394928"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve7]" time="0.00128078460693"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve8]" time="0.0057430267334"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve9]" time="0.00728368759155"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve10]" time="0.0205676555634"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve11]" time="0.00881671905518"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve12]" time="0.00464916229248"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve13]" time="0.00182366371155"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve14]" time="0.0055558681488"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve15]" time="0.00944590568542"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve16]" time="0.0102729797363"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve17]" time="0.0169370174408"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve0]" time="0.00417590141296"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve1]" time="0.00129318237305"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve2]" time="0.00446510314941"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve3]" time="0.00476908683777"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve4]" time="0.00635004043579"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve5]" time="0.00544285774231"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve6]" time="0.00227880477905"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve7]" time="0.00116014480591"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve8]" time="0.0059449672699"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve9]" time="0.00751709938049"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve10]" time="0.0208430290222"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve11]" time="0.00741362571716"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve12]" time="0.00480794906616"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve13]" time="0.00219130516052"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve14]" time="0.00577521324158"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve15]" time="0.00971603393555"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve16]" time="0.0105361938477"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve17]" time="0.0172021389008"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve0]" time="0.00401401519775"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve1]" time="0.00131177902222"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve2]" time="0.00415992736816"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve3]" time="0.00459122657776"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve4]" time="0.00656986236572"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve5]" time="0.00590705871582"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve6]" time="0.00215125083923"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve7]" time="0.00120282173157"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve8]" time="0.00578618049622"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve9]" time="0.00750589370728"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve10]" time="0.0209422111511"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve11]" time="0.00727915763855"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve12]" time="0.00476431846619"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve13]" time="0.00196409225464"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve14]" time="0.00571227073669"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve15]" time="0.00895500183105"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve16]" time="0.00942206382751"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve17]" time="0.0153090953827"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve0]" time="0.00420594215393"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve1]" time="0.00159430503845"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve2]" time="0.0044150352478"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve3]" time="0.0046980381012"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve4]" time="0.00650691986084"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve5]" time="0.00551390647888"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve6]" time="0.00231027603149"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve7]" time="0.00294232368469"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve8]" time="0.00549173355103"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve9]" time="0.00766396522522"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve10]" time="0.0210437774658"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve11]" time="0.00761079788208"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve12]" time="0.00476408004761"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve13]" time="0.0019268989563"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve14]" time="0.0056848526001"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve15]" time="0.0093469619751"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve16]" time="0.0103278160095"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve17]" time="0.0150821208954"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve0]" time="0.00425314903259"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve1]" time="0.00133800506592"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve2]" time="0.00438833236694"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve3]" time="0.00479173660278"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve4]" time="0.00652122497559"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve5]" time="0.00561213493347"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve6]" time="0.0021800994873"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve7]" time="0.0012059211731"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve8]" time="0.00606417655945"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve9]" time="0.0076060295105"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve10]" time="0.02161693573"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve11]" time="0.0071427822113"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve12]" time="0.00493788719177"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve13]" time="0.00207686424255"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve14]" time="0.00575995445251"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve15]" time="0.00950789451599"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve16]" time="0.0106678009033"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve17]" time="0.0174553394318"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve0]" time="0.00426006317139"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve1]" time="0.00160503387451"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve2]" time="0.00442790985107"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve3]" time="0.00504612922668"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve4]" time="0.00632357597351"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve5]" time="0.00565505027771"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve6]" time="0.00217723846436"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve7]" time="0.00144290924072"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve8]" time="0.00570034980774"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve9]" time="0.00758266448975"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve10]" time="0.0232796669006"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve11]" time="0.00733399391174"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve12]" time="0.00485301017761"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve13]" time="0.0021538734436"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve14]" time="0.0061092376709"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve15]" time="0.00951886177063"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve16]" time="0.0101532936096"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve17]" time="0.0169880390167"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve0]" time="0.00453782081604"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve1]" time="0.00139093399048"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve2]" time="0.00437712669373"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve3]" time="0.00471782684326"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve4]" time="0.00649094581604"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve5]" time="0.00566005706787"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve6]" time="0.0027129650116"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve7]" time="0.00129890441895"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve8]" time="0.00545692443848"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve9]" time="0.00745606422424"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve10]" time="0.0215530395508"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve11]" time="0.00745916366577"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve12]" time="0.00476884841919"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve13]" time="0.00199913978577"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve14]" time="0.00570011138916"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve15]" time="0.00978016853333"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve16]" time="0.00986170768738"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve17]" time="0.0154287815094"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve0]" time="0.00413990020752"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve1]" time="0.001305103302"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve2]" time="0.00468778610229"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve3]" time="0.00465798377991"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve4]" time="0.00625109672546"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve5]" time="0.00558590888977"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve6]" time="0.0021390914917"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve7]" time="0.00117802619934"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve8]" time="0.00581002235413"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve9]" time="0.00772619247437"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve10]" time="0.0216999053955"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve11]" time="0.00734877586365"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve12]" time="0.00483989715576"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve13]" time="0.00225496292114"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve14]" time="0.00577092170715"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve15]" time="0.00949788093567"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve16]" time="0.00988483428955"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve17]" time="0.0168259143829"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve0]" time="0.00415182113647"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve1]" time="0.0013382434845"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve2]" time="0.00431180000305"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve3]" time="0.00453782081604"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve4]" time="0.00580930709839"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve5]" time="0.00556373596191"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve6]" time="0.00200009346008"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve7]" time="0.00125789642334"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve8]" time="0.00590205192566"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve9]" time="0.00788521766663"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve10]" time="0.0208778381348"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve11]" time="0.00726294517517"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve12]" time="0.00492811203003"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve13]" time="0.00202012062073"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve14]" time="0.00570201873779"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve15]" time="0.00958204269409"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve16]" time="0.0103931427002"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="487" name="test_pairwise_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve17]" time="0.0164341926575"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[0-vector_array_without_reserve0]" time="0.00588202476501"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[0-vector_array_without_reserve1]" time="0.00458717346191"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[0-vector_array_without_reserve2]" time="0.00798201560974"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[0-vector_array_without_reserve3]" time="0.0104088783264"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[0-vector_array_without_reserve4]" time="0.0112512111664"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[0-vector_array_without_reserve5]" time="0.00364089012146"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[0-vector_array_without_reserve6]" time="0.00336289405823"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[0-vector_array_without_reserve7]" time="0.00835204124451"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[0-vector_array_without_reserve8]" time="0.0274722576141"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[0-vector_array_without_reserve9]" time="0.0520739555359"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[0-vector_array_without_reserve10]" time="0.00979399681091"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[0-vector_array_without_reserve11]" time="0.0162007808685"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[0-vector_array_without_reserve12]" time="0.0165967941284"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[0-vector_array_without_reserve13]" time="0.0129866600037"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[0-vector_array_without_reserve14]" time="0.0150990486145"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[0-vector_array_without_reserve15]" time="0.024542093277"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[0-vector_array_without_reserve16]" time="0.0289130210876"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[1-vector_array_without_reserve0]" time="0.00611209869385"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[1-vector_array_without_reserve1]" time="0.00447559356689"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[1-vector_array_without_reserve2]" time="0.00872683525085"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[1-vector_array_without_reserve3]" time="0.0104689598083"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[1-vector_array_without_reserve4]" time="0.0116391181946"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[1-vector_array_without_reserve5]" time="0.00521206855774"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[1-vector_array_without_reserve6]" time="0.00356483459473"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[1-vector_array_without_reserve7]" time="0.00855588912964"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[1-vector_array_without_reserve8]" time="0.0287687778473"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[1-vector_array_without_reserve9]" time="0.0525588989258"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[1-vector_array_without_reserve10]" time="0.00956416130066"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[1-vector_array_without_reserve11]" time="0.0166969299316"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[1-vector_array_without_reserve12]" time="0.0166800022125"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[1-vector_array_without_reserve13]" time="0.0133512020111"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[1-vector_array_without_reserve14]" time="0.0189461708069"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[1-vector_array_without_reserve15]" time="0.0247948169708"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[1-vector_array_without_reserve16]" time="0.0290100574493"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[2-vector_array_without_reserve0]" time="0.00623536109924"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[2-vector_array_without_reserve1]" time="0.00449514389038"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[2-vector_array_without_reserve2]" time="0.00846791267395"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[2-vector_array_without_reserve3]" time="0.0106489658356"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[2-vector_array_without_reserve4]" time="0.0117259025574"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[2-vector_array_without_reserve5]" time="0.00526595115662"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[2-vector_array_without_reserve6]" time="0.00358486175537"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[2-vector_array_without_reserve7]" time="0.00829839706421"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[2-vector_array_without_reserve8]" time="0.0276339054108"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[2-vector_array_without_reserve9]" time="0.053065776825"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[2-vector_array_without_reserve10]" time="0.0100660324097"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[2-vector_array_without_reserve11]" time="0.0168149471283"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[2-vector_array_without_reserve12]" time="0.0164680480957"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[2-vector_array_without_reserve13]" time="0.0130300521851"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[2-vector_array_without_reserve14]" time="0.015280008316"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[2-vector_array_without_reserve15]" time="0.0248627662659"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="500" name="test_pairwise_dot_self[2-vector_array_without_reserve16]" time="0.0284221172333"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve0]" time="0.00471472740173"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve1]" time="0.00196385383606"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve2]" time="0.00802707672119"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve3]" time="0.0106213092804"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve4]" time="0.0144658088684"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve5]" time="0.00989603996277"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve6]" time="0.00265312194824"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve7]" time="0.00175476074219"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve8]" time="0.0322320461273"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve9]" time="0.0643997192383"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve10]" time="0.91928935051"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve11]" time="0.0129909515381"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve12]" time="0.0062313079834"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve13]" time="0.00338983535767"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve14]" time="0.0121419429779"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve15]" time="0.0167531967163"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve16]" time="0.0231363773346"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve17]" time="0.0336618423462"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve0]" time="0.00492596626282"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve1]" time="0.00208902359009"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve2]" time="0.00818109512329"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve3]" time="0.010064125061"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve4]" time="0.0149521827698"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve5]" time="0.00999164581299"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve6]" time="0.00418615341187"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve7]" time="0.00195932388306"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve8]" time="0.0330412387848"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve9]" time="0.064582824707"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve10]" time="0.928599834442"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve11]" time="0.0125212669373"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve12]" time="0.00634288787842"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve13]" time="0.00353789329529"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve14]" time="0.0120599269867"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve15]" time="0.0184576511383"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve16]" time="0.0227100849152"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve17]" time="0.0324490070343"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve0]" time="0.00473785400391"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve1]" time="0.00198698043823"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve2]" time="0.00820684432983"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve3]" time="0.0102570056915"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve4]" time="0.0144860744476"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve5]" time="0.0100519657135"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve6]" time="0.00316882133484"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve7]" time="0.00184917449951"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve8]" time="0.0335958003998"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve9]" time="0.0651581287384"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve10]" time="0.920696020126"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve11]" time="0.0125279426575"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve12]" time="0.00662183761597"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve13]" time="0.00343608856201"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve14]" time="0.0120120048523"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve15]" time="0.0167257785797"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve16]" time="0.0230309963226"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve17]" time="0.0330727100372"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve0]" time="0.00479602813721"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve1]" time="0.00228404998779"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve2]" time="0.00826787948608"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve3]" time="0.0104641914368"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve4]" time="0.0140731334686"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve5]" time="0.0107328891754"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve6]" time="0.00447797775269"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve7]" time="0.00188589096069"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve8]" time="0.0331888198853"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve9]" time="0.0657708644867"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve10]" time="0.919846057892"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve11]" time="0.0123410224915"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve12]" time="0.00631403923035"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve13]" time="0.00362610816956"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve14]" time="0.0120499134064"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve15]" time="0.0168311595917"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve16]" time="0.0231776237488"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve17]" time="0.0330290794373"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve0]" time="0.00493407249451"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve1]" time="0.00216484069824"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve2]" time="0.00857305526733"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve3]" time="0.010498046875"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve4]" time="0.0143010616302"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve5]" time="0.011754989624"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve6]" time="0.00406694412231"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve7]" time="0.0018892288208"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve8]" time="0.0321822166443"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve9]" time="0.0675086975098"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve10]" time="0.922990560532"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve11]" time="0.0122730731964"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve12]" time="0.00661492347717"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve13]" time="0.00336790084839"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve14]" time="0.01194024086"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve15]" time="0.0166318416595"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve16]" time="0.0229687690735"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve17]" time="0.0321638584137"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve0]" time="0.00473976135254"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve1]" time="0.00210475921631"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve2]" time="0.00827693939209"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve3]" time="0.0107281208038"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve4]" time="0.0144701004028"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve5]" time="0.0108346939087"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve6]" time="0.00456500053406"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve7]" time="0.00185370445251"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve8]" time="0.033047914505"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve9]" time="0.0646660327911"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve10]" time="0.920119285583"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve11]" time="0.0125710964203"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve12]" time="0.00639510154724"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve13]" time="0.00348114967346"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve14]" time="0.0118861198425"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve15]" time="0.0167002677917"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve16]" time="0.0230369567871"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve17]" time="0.0334820747375"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve0]" time="0.00477004051208"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve1]" time="0.00215077400208"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve2]" time="0.00818204879761"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve3]" time="0.010124206543"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve4]" time="0.014417886734"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve5]" time="0.0104222297668"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve6]" time="0.00438785552979"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve7]" time="0.00216484069824"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve8]" time="0.0322790145874"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve9]" time="0.0648310184479"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve10]" time="0.912099838257"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve11]" time="0.0158681869507"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve12]" time="0.00515818595886"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve13]" time="0.00352692604065"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve14]" time="0.0119640827179"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve15]" time="0.0182809829712"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve16]" time="0.0232717990875"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve17]" time="0.0331950187683"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve0]" time="0.00463032722473"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve1]" time="0.00199890136719"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve2]" time="0.00819730758667"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve3]" time="0.0106301307678"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve4]" time="0.0142652988434"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve5]" time="0.00958728790283"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve6]" time="0.00260710716248"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve7]" time="0.00178074836731"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve8]" time="0.0331583023071"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve9]" time="0.0640997886658"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve10]" time="0.9089179039"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve11]" time="0.0125668048859"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve12]" time="0.00630307197571"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve13]" time="0.00325798988342"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve14]" time="0.0116698741913"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve15]" time="0.0168027877808"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve16]" time="0.0224449634552"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve17]" time="0.0330398082733"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve0]" time="0.00459694862366"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve1]" time="0.00236582756042"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve2]" time="0.00855016708374"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve3]" time="0.010174036026"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve4]" time="0.0138947963715"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve5]" time="0.00985598564148"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve6]" time="0.00249981880188"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve7]" time="0.00193929672241"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve8]" time="0.0312418937683"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve9]" time="0.0640048980713"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve10]" time="0.898576974869"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve11]" time="0.0125479698181"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve12]" time="0.00639295578003"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve13]" time="0.00345468521118"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve14]" time="0.0118911266327"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve15]" time="0.0168859958649"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve16]" time="0.0227167606354"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="516" name="test_dot[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve17]" time="0.0343360900879"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[0-vector_array_without_reserve0]" time="0.00579476356506"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[0-vector_array_without_reserve1]" time="0.00400876998901"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[0-vector_array_without_reserve2]" time="0.00819969177246"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[0-vector_array_without_reserve3]" time="0.0217192173004"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[0-vector_array_without_reserve4]" time="0.0293562412262"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[0-vector_array_without_reserve5]" time="0.00594735145569"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[0-vector_array_without_reserve6]" time="0.00539875030518"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[0-vector_array_without_reserve7]" time="0.0253520011902"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[0-vector_array_without_reserve8]" time="0.424618721008"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[0-vector_array_without_reserve9]" time="2.08891606331"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[0-vector_array_without_reserve10]" time="0.00798296928406"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[0-vector_array_without_reserve11]" time="0.0203449726105"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[0-vector_array_without_reserve12]" time="0.0205521583557"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[0-vector_array_without_reserve13]" time="0.0126478672028"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[0-vector_array_without_reserve14]" time="0.020406961441"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[0-vector_array_without_reserve15]" time="0.0331630706787"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[0-vector_array_without_reserve16]" time="0.0417239665985"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[1-vector_array_without_reserve0]" time="0.00552868843079"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[1-vector_array_without_reserve1]" time="0.00391483306885"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[1-vector_array_without_reserve2]" time="0.00851964950562"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[1-vector_array_without_reserve3]" time="0.0209739208221"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[1-vector_array_without_reserve4]" time="0.027774810791"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[1-vector_array_without_reserve5]" time="0.00556612014771"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[1-vector_array_without_reserve6]" time="0.00521516799927"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[1-vector_array_without_reserve7]" time="0.0253968238831"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[1-vector_array_without_reserve8]" time="0.427539110184"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[1-vector_array_without_reserve9]" time="2.09222269058"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[1-vector_array_without_reserve10]" time="0.00885987281799"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[1-vector_array_without_reserve11]" time="0.020220041275"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[1-vector_array_without_reserve12]" time="0.0200538635254"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[1-vector_array_without_reserve13]" time="0.0124790668488"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[1-vector_array_without_reserve14]" time="0.0197510719299"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[1-vector_array_without_reserve15]" time="0.0462400913239"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[1-vector_array_without_reserve16]" time="0.0665090084076"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[2-vector_array_without_reserve0]" time="0.00604820251465"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[2-vector_array_without_reserve1]" time="0.00588703155518"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[2-vector_array_without_reserve2]" time="0.0130031108856"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[2-vector_array_without_reserve3]" time="0.0233449935913"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[2-vector_array_without_reserve4]" time="0.0271370410919"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[2-vector_array_without_reserve5]" time="0.00526213645935"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[2-vector_array_without_reserve6]" time="0.00515007972717"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[2-vector_array_without_reserve7]" time="0.0255889892578"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[2-vector_array_without_reserve8]" time="0.426124095917"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[2-vector_array_without_reserve9]" time="2.07294130325"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[2-vector_array_without_reserve10]" time="0.00892186164856"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[2-vector_array_without_reserve11]" time="0.0202009677887"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[2-vector_array_without_reserve12]" time="0.0201609134674"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[2-vector_array_without_reserve13]" time="0.0129930973053"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[2-vector_array_without_reserve14]" time="0.0205159187317"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[2-vector_array_without_reserve15]" time="0.0465490818024"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="529" name="test_dot_self[2-vector_array_without_reserve16]" time="0.0665717124939"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[0-vector_array_without_reserve0]" time="0.00386190414429"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[0-vector_array_without_reserve1]" time="0.00364375114441"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[0-vector_array_without_reserve2]" time="0.00640082359314"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[0-vector_array_without_reserve3]" time="0.0196080207825"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[0-vector_array_without_reserve4]" time="0.0234932899475"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[0-vector_array_without_reserve5]" time="0.00425291061401"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[0-vector_array_without_reserve6]" time="0.00263285636902"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[0-vector_array_without_reserve7]" time="0.00552797317505"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[0-vector_array_without_reserve8]" time="0.0203640460968"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[0-vector_array_without_reserve9]" time="0.0370469093323"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[0-vector_array_without_reserve10]" time="0.00615382194519"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[0-vector_array_without_reserve11]" time="0.0093047618866"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[0-vector_array_without_reserve12]" time="0.00857186317444"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[0-vector_array_without_reserve13]" time="0.0062952041626"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[0-vector_array_without_reserve14]" time="0.00983095169067"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[0-vector_array_without_reserve15]" time="0.0411546230316"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[0-vector_array_without_reserve16]" time="0.0863618850708"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[1-vector_array_without_reserve0]" time="0.00404000282288"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[1-vector_array_without_reserve1]" time="0.00261497497559"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[1-vector_array_without_reserve2]" time="0.00424718856812"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[1-vector_array_without_reserve3]" time="0.0122799873352"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[1-vector_array_without_reserve4]" time="0.0216777324677"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[1-vector_array_without_reserve5]" time="0.0041778087616"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[1-vector_array_without_reserve6]" time="0.00267696380615"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[1-vector_array_without_reserve7]" time="0.0056369304657"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[1-vector_array_without_reserve8]" time="0.02090883255"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[1-vector_array_without_reserve9]" time="0.0389540195465"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[1-vector_array_without_reserve10]" time="0.00577998161316"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[1-vector_array_without_reserve11]" time="0.0099458694458"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[1-vector_array_without_reserve12]" time="0.0090868473053"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[1-vector_array_without_reserve13]" time="0.00622296333313"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[1-vector_array_without_reserve14]" time="0.0102269649506"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[1-vector_array_without_reserve15]" time="0.0433070659637"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[1-vector_array_without_reserve16]" time="0.090038061142"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[2-vector_array_without_reserve0]" time="0.0038628578186"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[2-vector_array_without_reserve1]" time="0.00256967544556"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[2-vector_array_without_reserve2]" time="0.00419688224792"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[2-vector_array_without_reserve3]" time="0.0126159191132"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[2-vector_array_without_reserve4]" time="0.021556854248"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[2-vector_array_without_reserve5]" time="0.00410389900208"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[2-vector_array_without_reserve6]" time="0.00264620780945"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[2-vector_array_without_reserve7]" time="0.00542902946472"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[2-vector_array_without_reserve8]" time="0.0204920768738"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[2-vector_array_without_reserve9]" time="0.037718296051"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[2-vector_array_without_reserve10]" time="0.00603485107422"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[2-vector_array_without_reserve11]" time="0.00995302200317"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[2-vector_array_without_reserve12]" time="0.00844883918762"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[2-vector_array_without_reserve13]" time="0.00610184669495"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[2-vector_array_without_reserve14]" time="0.0103816986084"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[2-vector_array_without_reserve15]" time="0.0440192222595"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="545" name="test_lincomb_1d[2-vector_array_without_reserve16]" time="0.0889420509338"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[0-vector_array_without_reserve0]" time="0.00874781608582"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[0-vector_array_without_reserve1]" time="0.00730681419373"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[0-vector_array_without_reserve2]" time="0.00970911979675"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[0-vector_array_without_reserve3]" time="0.0110940933228"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[0-vector_array_without_reserve4]" time="0.0110890865326"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[0-vector_array_without_reserve5]" time="0.00917792320251"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[0-vector_array_without_reserve6]" time="0.00888991355896"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[0-vector_array_without_reserve7]" time="0.016065120697"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[0-vector_array_without_reserve8]" time="0.0471901893616"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[0-vector_array_without_reserve9]" time="0.0759234428406"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[0-vector_array_without_reserve10]" time="0.017826795578"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[0-vector_array_without_reserve11]" time="0.0218441486359"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[0-vector_array_without_reserve12]" time="0.0199921131134"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[0-vector_array_without_reserve13]" time="0.0160632133484"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[0-vector_array_without_reserve14]" time="0.0226309299469"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[0-vector_array_without_reserve15]" time="0.030524969101"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[0-vector_array_without_reserve16]" time="0.0333287715912"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[1-vector_array_without_reserve0]" time="0.00868678092957"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[1-vector_array_without_reserve1]" time="0.00713181495667"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[1-vector_array_without_reserve2]" time="0.0102550983429"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[1-vector_array_without_reserve3]" time="0.0108609199524"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[1-vector_array_without_reserve4]" time="0.011344909668"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[1-vector_array_without_reserve5]" time="0.00908303260803"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[1-vector_array_without_reserve6]" time="0.0091187953949"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[1-vector_array_without_reserve7]" time="0.0160868167877"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[1-vector_array_without_reserve8]" time="0.0507528781891"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[1-vector_array_without_reserve9]" time="0.0787439346313"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[1-vector_array_without_reserve10]" time="0.0181851387024"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[1-vector_array_without_reserve11]" time="0.021919965744"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[1-vector_array_without_reserve12]" time="0.0206272602081"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[1-vector_array_without_reserve13]" time="0.0161888599396"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[1-vector_array_without_reserve14]" time="0.0230691432953"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[1-vector_array_without_reserve15]" time="0.0310618877411"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[1-vector_array_without_reserve16]" time="0.0335550308228"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[2-vector_array_without_reserve0]" time="0.00896596908569"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[2-vector_array_without_reserve1]" time="0.0070276260376"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[2-vector_array_without_reserve2]" time="0.00946831703186"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[2-vector_array_without_reserve3]" time="0.0111129283905"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[2-vector_array_without_reserve4]" time="0.0106558799744"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[2-vector_array_without_reserve5]" time="0.00909113883972"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[2-vector_array_without_reserve6]" time="0.00887727737427"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[2-vector_array_without_reserve7]" time="0.0158729553223"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[2-vector_array_without_reserve8]" time="0.0474872589111"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[2-vector_array_without_reserve9]" time="0.0784208774567"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[2-vector_array_without_reserve10]" time="0.0176746845245"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[2-vector_array_without_reserve11]" time="0.0224566459656"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[2-vector_array_without_reserve12]" time="0.0199568271637"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[2-vector_array_without_reserve13]" time="0.0164711475372"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[2-vector_array_without_reserve14]" time="0.0225400924683"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[2-vector_array_without_reserve15]" time="0.0310838222504"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="559" name="test_lincomb_2d[2-vector_array_without_reserve16]" time="0.0337450504303"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[0-vector_array_without_reserve0]" time="0.00351977348328"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[0-vector_array_without_reserve1]" time="0.00235795974731"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[0-vector_array_without_reserve2]" time="0.00360488891602"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[0-vector_array_without_reserve3]" time="0.00467276573181"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[0-vector_array_without_reserve4]" time="0.00482392311096"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[0-vector_array_without_reserve5]" time="0.00200819969177"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[0-vector_array_without_reserve6]" time="0.00183200836182"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[0-vector_array_without_reserve7]" time="0.0027801990509"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[0-vector_array_without_reserve8]" time="0.00398993492126"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[0-vector_array_without_reserve9]" time="0.00448822975159"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[0-vector_array_without_reserve10]" time="0.00276827812195"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[0-vector_array_without_reserve11]" time="0.0047550201416"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[0-vector_array_without_reserve12]" time="0.00482988357544"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[0-vector_array_without_reserve13]" time="0.00464797019958"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[0-vector_array_without_reserve14]" time="0.00461006164551"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[0-vector_array_without_reserve15]" time="0.00659084320068"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[0-vector_array_without_reserve16]" time="0.00787305831909"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[1-vector_array_without_reserve0]" time="0.00207996368408"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[1-vector_array_without_reserve1]" time="0.00236773490906"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[1-vector_array_without_reserve2]" time="0.00331807136536"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[1-vector_array_without_reserve3]" time="0.00395607948303"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[1-vector_array_without_reserve4]" time="0.00468897819519"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[1-vector_array_without_reserve5]" time="0.00188589096069"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[1-vector_array_without_reserve6]" time="0.00180411338806"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[1-vector_array_without_reserve7]" time="0.00340390205383"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[1-vector_array_without_reserve8]" time="0.00397825241089"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[1-vector_array_without_reserve9]" time="0.00536489486694"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[1-vector_array_without_reserve10]" time="0.00272917747498"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[1-vector_array_without_reserve11]" time="0.00476908683777"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[1-vector_array_without_reserve12]" time="0.00474619865417"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[1-vector_array_without_reserve13]" time="0.00412702560425"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[1-vector_array_without_reserve14]" time="0.00498294830322"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[1-vector_array_without_reserve15]" time="0.00683116912842"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[1-vector_array_without_reserve16]" time="0.00824785232544"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[2-vector_array_without_reserve0]" time="0.00207495689392"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[2-vector_array_without_reserve1]" time="0.0022132396698"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[2-vector_array_without_reserve2]" time="0.00376486778259"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[2-vector_array_without_reserve3]" time="0.00418567657471"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[2-vector_array_without_reserve4]" time="0.0049159526825"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[2-vector_array_without_reserve5]" time="0.00192284584045"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[2-vector_array_without_reserve6]" time="0.00189423561096"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[2-vector_array_without_reserve7]" time="0.00294947624207"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[2-vector_array_without_reserve8]" time="0.00426530838013"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[2-vector_array_without_reserve9]" time="0.00525283813477"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[2-vector_array_without_reserve10]" time="0.00277280807495"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[2-vector_array_without_reserve11]" time="0.00516510009766"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[2-vector_array_without_reserve12]" time="0.00484204292297"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[2-vector_array_without_reserve13]" time="0.004065990448"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[2-vector_array_without_reserve14]" time="0.00479769706726"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[2-vector_array_without_reserve15]" time="0.00697684288025"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="574" name="test_lincomb_wrong_coefficients[2-vector_array_without_reserve16]" time="0.00848507881165"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[0-vector_array_without_reserve0]" time="0.0059769153595"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[0-vector_array_without_reserve1]" time="0.00579023361206"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[0-vector_array_without_reserve2]" time="0.00708794593811"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[0-vector_array_without_reserve3]" time="0.00797605514526"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[0-vector_array_without_reserve4]" time="0.00811100006104"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[0-vector_array_without_reserve5]" time="0.00479483604431"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[0-vector_array_without_reserve6]" time="0.00457811355591"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[0-vector_array_without_reserve7]" time="0.00725126266479"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[0-vector_array_without_reserve8]" time="0.0251891613007"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[0-vector_array_without_reserve9]" time="0.0461781024933"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[0-vector_array_without_reserve10]" time="0.0106110572815"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[0-vector_array_without_reserve11]" time="0.0110700130463"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[0-vector_array_without_reserve12]" time="0.0111260414124"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[0-vector_array_without_reserve13]" time="0.0105447769165"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[0-vector_array_without_reserve14]" time="0.011390209198"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[0-vector_array_without_reserve15]" time="0.0164549350739"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[0-vector_array_without_reserve16]" time="0.0182628631592"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[1-vector_array_without_reserve0]" time="0.00782203674316"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[1-vector_array_without_reserve1]" time="0.00593209266663"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[1-vector_array_without_reserve2]" time="0.0072808265686"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[1-vector_array_without_reserve3]" time="0.00798988342285"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[1-vector_array_without_reserve4]" time="0.00861930847168"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[1-vector_array_without_reserve5]" time="0.00474905967712"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[1-vector_array_without_reserve6]" time="0.00420212745667"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[1-vector_array_without_reserve7]" time="0.00726127624512"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[1-vector_array_without_reserve8]" time="0.0246028900146"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[1-vector_array_without_reserve9]" time="0.0458841323853"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[1-vector_array_without_reserve10]" time="0.010183095932"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[1-vector_array_without_reserve11]" time="0.0106899738312"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[1-vector_array_without_reserve12]" time="0.0104598999023"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[1-vector_array_without_reserve13]" time="0.00858473777771"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[1-vector_array_without_reserve14]" time="0.0109438896179"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[1-vector_array_without_reserve15]" time="0.01691198349"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[1-vector_array_without_reserve16]" time="0.017804145813"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[2-vector_array_without_reserve0]" time="0.00744414329529"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[2-vector_array_without_reserve1]" time="0.00570297241211"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[2-vector_array_without_reserve2]" time="0.00684809684753"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[2-vector_array_without_reserve3]" time="0.00814986228943"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[2-vector_array_without_reserve4]" time="0.00835776329041"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[2-vector_array_without_reserve5]" time="0.00469470024109"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[2-vector_array_without_reserve6]" time="0.00443387031555"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[2-vector_array_without_reserve7]" time="0.00709009170532"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[2-vector_array_without_reserve8]" time="0.0249869823456"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[2-vector_array_without_reserve9]" time="0.0473821163177"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[2-vector_array_without_reserve10]" time="0.0114550590515"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[2-vector_array_without_reserve11]" time="0.0121610164642"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[2-vector_array_without_reserve12]" time="0.0124640464783"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[2-vector_array_without_reserve13]" time="0.0103147029877"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[2-vector_array_without_reserve14]" time="0.0110921859741"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[2-vector_array_without_reserve15]" time="0.0163888931274"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="593" name="test_l1_norm[2-vector_array_without_reserve16]" time="0.0178771018982"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[0-vector_array_without_reserve0]" time="0.00795793533325"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[0-vector_array_without_reserve1]" time="0.00604510307312"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[0-vector_array_without_reserve2]" time="0.00733065605164"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[0-vector_array_without_reserve3]" time="0.00848603248596"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[0-vector_array_without_reserve4]" time="0.00824904441833"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[0-vector_array_without_reserve5]" time="0.00445771217346"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[0-vector_array_without_reserve6]" time="0.00459098815918"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[0-vector_array_without_reserve7]" time="0.00776600837708"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[0-vector_array_without_reserve8]" time="0.0280382633209"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[0-vector_array_without_reserve9]" time="0.0484008789062"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[0-vector_array_without_reserve10]" time="0.0102560520172"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[0-vector_array_without_reserve11]" time="0.0104973316193"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[0-vector_array_without_reserve12]" time="0.0104932785034"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[0-vector_array_without_reserve13]" time="0.00823283195496"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[0-vector_array_without_reserve14]" time="0.0106999874115"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[0-vector_array_without_reserve15]" time="0.015260219574"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[0-vector_array_without_reserve16]" time="0.0170931816101"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[1-vector_array_without_reserve0]" time="0.00785112380981"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[1-vector_array_without_reserve1]" time="0.00563430786133"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[1-vector_array_without_reserve2]" time="0.00742030143738"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[1-vector_array_without_reserve3]" time="0.00828862190247"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[1-vector_array_without_reserve4]" time="0.00854873657227"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[1-vector_array_without_reserve5]" time="0.00446391105652"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[1-vector_array_without_reserve6]" time="0.00471806526184"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[1-vector_array_without_reserve7]" time="0.00791692733765"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[1-vector_array_without_reserve8]" time="0.0283770561218"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[1-vector_array_without_reserve9]" time="0.0487308502197"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[1-vector_array_without_reserve10]" time="0.0104370117188"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[1-vector_array_without_reserve11]" time="0.0122449398041"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[1-vector_array_without_reserve12]" time="0.0122399330139"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[1-vector_array_without_reserve13]" time="0.0100507736206"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[1-vector_array_without_reserve14]" time="0.011125087738"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[1-vector_array_without_reserve15]" time="0.0165338516235"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[1-vector_array_without_reserve16]" time="0.017215013504"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[2-vector_array_without_reserve0]" time="0.00792980194092"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[2-vector_array_without_reserve1]" time="0.00597882270813"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[2-vector_array_without_reserve2]" time="0.00722217559814"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[2-vector_array_without_reserve3]" time="0.00839304924011"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[2-vector_array_without_reserve4]" time="0.00857186317444"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[2-vector_array_without_reserve5]" time="0.00479698181152"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[2-vector_array_without_reserve6]" time="0.0045599937439"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[2-vector_array_without_reserve7]" time="0.0079882144928"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[2-vector_array_without_reserve8]" time="0.0283479690552"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[2-vector_array_without_reserve9]" time="0.0502898693085"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[2-vector_array_without_reserve10]" time="0.0103120803833"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[2-vector_array_without_reserve11]" time="0.0121171474457"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[2-vector_array_without_reserve12]" time="0.0107939243317"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[2-vector_array_without_reserve13]" time="0.0105359554291"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[2-vector_array_without_reserve14]" time="0.0125539302826"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[2-vector_array_without_reserve15]" time="0.0167317390442"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="613" name="test_l2_norm[2-vector_array_without_reserve16]" time="0.0180289745331"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[0-vector_array_without_reserve0]" time="0.00777792930603"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[0-vector_array_without_reserve1]" time="0.00563502311707"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[0-vector_array_without_reserve2]" time="0.00689888000488"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[0-vector_array_without_reserve3]" time="0.00819396972656"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[0-vector_array_without_reserve4]" time="0.00810503959656"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[0-vector_array_without_reserve5]" time="0.00484704971313"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[0-vector_array_without_reserve6]" time="0.00445985794067"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[0-vector_array_without_reserve7]" time="0.00722694396973"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[0-vector_array_without_reserve8]" time="0.0258197784424"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[0-vector_array_without_reserve9]" time="0.0477857589722"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[0-vector_array_without_reserve10]" time="0.0102066993713"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[0-vector_array_without_reserve11]" time="0.010725736618"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[0-vector_array_without_reserve12]" time="0.0105042457581"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[0-vector_array_without_reserve13]" time="0.00849390029907"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[0-vector_array_without_reserve14]" time="0.0111172199249"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[0-vector_array_without_reserve15]" time="0.0173518657684"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[0-vector_array_without_reserve16]" time="0.0172262191772"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[1-vector_array_without_reserve0]" time="0.00755524635315"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[1-vector_array_without_reserve1]" time="0.00556898117065"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[1-vector_array_without_reserve2]" time="0.00673913955688"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[1-vector_array_without_reserve3]" time="0.00787782669067"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[1-vector_array_without_reserve4]" time="0.00834321975708"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[1-vector_array_without_reserve5]" time="0.00462794303894"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[1-vector_array_without_reserve6]" time="0.00442886352539"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[1-vector_array_without_reserve7]" time="0.00729393959045"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[1-vector_array_without_reserve8]" time="0.0259132385254"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[1-vector_array_without_reserve9]" time="0.0481042861938"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[1-vector_array_without_reserve10]" time="0.0101120471954"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[1-vector_array_without_reserve11]" time="0.0118157863617"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[1-vector_array_without_reserve12]" time="0.0103688240051"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[1-vector_array_without_reserve13]" time="0.0104222297668"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[1-vector_array_without_reserve14]" time="0.0121021270752"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[1-vector_array_without_reserve15]" time="0.0144460201263"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[1-vector_array_without_reserve16]" time="0.017183303833"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[2-vector_array_without_reserve0]" time="0.00718021392822"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[2-vector_array_without_reserve1]" time="0.00533604621887"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[2-vector_array_without_reserve2]" time="0.00671315193176"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[2-vector_array_without_reserve3]" time="0.0078661441803"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[2-vector_array_without_reserve4]" time="0.0078980922699"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[2-vector_array_without_reserve5]" time="0.00468707084656"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[2-vector_array_without_reserve6]" time="0.00435209274292"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[2-vector_array_without_reserve7]" time="0.00710606575012"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[2-vector_array_without_reserve8]" time="0.0258500576019"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[2-vector_array_without_reserve9]" time="0.0479681491852"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[2-vector_array_without_reserve10]" time="0.0103380680084"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[2-vector_array_without_reserve11]" time="0.0111978054047"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[2-vector_array_without_reserve12]" time="0.0108633041382"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[2-vector_array_without_reserve13]" time="0.010359287262"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[2-vector_array_without_reserve14]" time="0.011040687561"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[2-vector_array_without_reserve15]" time="0.0151000022888"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="633" name="test_l2_norm2[2-vector_array_without_reserve16]" time="0.0178318023682"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[0-vector_array_without_reserve0]" time="0.00622487068176"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[0-vector_array_without_reserve1]" time="0.00609183311462"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[0-vector_array_without_reserve2]" time="0.00742268562317"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[0-vector_array_without_reserve3]" time="0.00846576690674"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[0-vector_array_without_reserve4]" time="0.00643610954285"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[0-vector_array_without_reserve5]" time="0.0041491985321"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[0-vector_array_without_reserve6]" time="0.00460696220398"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[0-vector_array_without_reserve7]" time="0.00699400901794"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[0-vector_array_without_reserve8]" time="0.0229387283325"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[0-vector_array_without_reserve9]" time="0.02774310112"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[0-vector_array_without_reserve10]" time="0.0108261108398"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[0-vector_array_without_reserve11]" time="0.0110642910004"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[0-vector_array_without_reserve12]" time="0.00828003883362"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[0-vector_array_without_reserve13]" time="0.00902318954468"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[0-vector_array_without_reserve14]" time="0.0113611221313"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[0-vector_array_without_reserve15]" time="0.0162289142609"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[0-vector_array_without_reserve16]" time="0.0180101394653"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[1-vector_array_without_reserve0]" time="0.00612711906433"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[1-vector_array_without_reserve1]" time="0.00577020645142"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[1-vector_array_without_reserve2]" time="0.00728893280029"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[1-vector_array_without_reserve3]" time="0.00832390785217"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[1-vector_array_without_reserve4]" time="0.0065290927887"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[1-vector_array_without_reserve5]" time="0.0037899017334"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[1-vector_array_without_reserve6]" time="0.00424194335938"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[1-vector_array_without_reserve7]" time="0.00717926025391"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[1-vector_array_without_reserve8]" time="0.0227980613708"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[1-vector_array_without_reserve9]" time="0.0275783538818"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[1-vector_array_without_reserve10]" time="0.0109801292419"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[1-vector_array_without_reserve11]" time="0.0120780467987"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[1-vector_array_without_reserve12]" time="0.0101532936096"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[1-vector_array_without_reserve13]" time="0.00915503501892"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[1-vector_array_without_reserve14]" time="0.012326002121"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[1-vector_array_without_reserve15]" time="0.0171542167664"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[1-vector_array_without_reserve16]" time="0.018835067749"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[2-vector_array_without_reserve0]" time="0.00600671768188"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[2-vector_array_without_reserve1]" time="0.00606393814087"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[2-vector_array_without_reserve2]" time="0.00756788253784"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[2-vector_array_without_reserve3]" time="0.00830984115601"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[2-vector_array_without_reserve4]" time="0.00608205795288"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[2-vector_array_without_reserve5]" time="0.00390291213989"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[2-vector_array_without_reserve6]" time="0.0044219493866"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[2-vector_array_without_reserve7]" time="0.00718975067139"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[2-vector_array_without_reserve8]" time="0.0234639644623"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[2-vector_array_without_reserve9]" time="0.0275013446808"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[2-vector_array_without_reserve10]" time="0.010763168335"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[2-vector_array_without_reserve11]" time="0.0109701156616"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[2-vector_array_without_reserve12]" time="0.00842094421387"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[2-vector_array_without_reserve13]" time="0.0087878704071"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[2-vector_array_without_reserve14]" time="0.0118598937988"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[2-vector_array_without_reserve15]" time="0.0174803733826"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="653" name="test_sup_norm[2-vector_array_without_reserve16]" time="0.0187847614288"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[0-vector_array_without_reserve0]" time="0.0024242401123"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[0-vector_array_without_reserve1]" time="0.013601064682"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[0-vector_array_without_reserve2]" time="0.0164790153503"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[0-vector_array_without_reserve3]" time="0.0201530456543"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[0-vector_array_without_reserve4]" time="0.00378370285034"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[0-vector_array_without_reserve5]" time="0.00143003463745"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[0-vector_array_without_reserve6]" time="0.0103709697723"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[0-vector_array_without_reserve7]" time="0.0161960124969"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[0-vector_array_without_reserve8]" time="0.0619990825653"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[0-vector_array_without_reserve9]" time="0.0153307914734"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[0-vector_array_without_reserve10]" time="0.0363261699677"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[0-vector_array_without_reserve11]" time="0.0432279109955"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[0-vector_array_without_reserve12]" time="0.00448703765869"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[0-vector_array_without_reserve13]" time="0.0353574752808"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[0-vector_array_without_reserve14]" time="0.0432329177856"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[0-vector_array_without_reserve15]" time="0.0528271198273"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[0-vector_array_without_reserve16]" time="0.0578320026398"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[1-vector_array_without_reserve0]" time="0.00367403030396"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[1-vector_array_without_reserve1]" time="0.0135698318481"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[1-vector_array_without_reserve2]" time="0.0171358585358"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[1-vector_array_without_reserve3]" time="0.0202627182007"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[1-vector_array_without_reserve4]" time="0.00397181510925"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[1-vector_array_without_reserve5]" time="0.00147414207458"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[1-vector_array_without_reserve6]" time="0.0110473632812"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[1-vector_array_without_reserve7]" time="0.0161578655243"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[1-vector_array_without_reserve8]" time="0.0610029697418"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[1-vector_array_without_reserve9]" time="0.0155081748962"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[1-vector_array_without_reserve10]" time="0.0371952056885"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[1-vector_array_without_reserve11]" time="0.0419731140137"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[1-vector_array_without_reserve12]" time="0.00439691543579"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[1-vector_array_without_reserve13]" time="0.0361800193787"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[1-vector_array_without_reserve14]" time="0.0433597564697"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[1-vector_array_without_reserve15]" time="0.0546460151672"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[1-vector_array_without_reserve16]" time="0.0586721897125"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[2-vector_array_without_reserve0]" time="0.00264000892639"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[2-vector_array_without_reserve1]" time="0.0141258239746"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[2-vector_array_without_reserve2]" time="0.0179452896118"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[2-vector_array_without_reserve3]" time="0.0205748081207"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[2-vector_array_without_reserve4]" time="0.0038959980011"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[2-vector_array_without_reserve5]" time="0.00131893157959"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[2-vector_array_without_reserve6]" time="0.0109360218048"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[2-vector_array_without_reserve7]" time="0.0159931182861"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[2-vector_array_without_reserve8]" time="0.0592000484467"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[2-vector_array_without_reserve9]" time="0.0153610706329"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[2-vector_array_without_reserve10]" time="0.037230014801"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[2-vector_array_without_reserve11]" time="0.0425801277161"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[2-vector_array_without_reserve12]" time="0.00429320335388"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[2-vector_array_without_reserve13]" time="0.036474943161"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[2-vector_array_without_reserve14]" time="0.0436639785767"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[2-vector_array_without_reserve15]" time="0.052631855011"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="673" name="test_components[2-vector_array_without_reserve16]" time="0.0586099624634"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[0-vector_array_without_reserve0]" time="0.00453424453735"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[0-vector_array_without_reserve1]" time="0.00282716751099"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[0-vector_array_without_reserve2]" time="0.00329804420471"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[0-vector_array_without_reserve3]" time="0.00392723083496"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[0-vector_array_without_reserve4]" time="0.0046489238739"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[0-vector_array_without_reserve5]" time="0.00267815589905"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[0-vector_array_without_reserve6]" time="0.00263381004333"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[0-vector_array_without_reserve7]" time="0.0036141872406"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[0-vector_array_without_reserve8]" time="0.00384211540222"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[0-vector_array_without_reserve9]" time="0.00510883331299"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[0-vector_array_without_reserve10]" time="0.00518226623535"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[0-vector_array_without_reserve11]" time="0.00552153587341"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[0-vector_array_without_reserve12]" time="0.00552916526794"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[0-vector_array_without_reserve13]" time="0.00462484359741"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[0-vector_array_without_reserve14]" time="0.00591206550598"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[0-vector_array_without_reserve15]" time="0.00752019882202"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[0-vector_array_without_reserve16]" time="0.00932002067566"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[1-vector_array_without_reserve0]" time="0.0027859210968"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[1-vector_array_without_reserve1]" time="0.00279498100281"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[1-vector_array_without_reserve2]" time="0.00326633453369"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[1-vector_array_without_reserve3]" time="0.00403380393982"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[1-vector_array_without_reserve4]" time="0.00465512275696"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[1-vector_array_without_reserve5]" time="0.00397086143494"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[1-vector_array_without_reserve6]" time="0.00281524658203"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[1-vector_array_without_reserve7]" time="0.0034122467041"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[1-vector_array_without_reserve8]" time="0.00420594215393"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[1-vector_array_without_reserve9]" time="0.271857976913"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[1-vector_array_without_reserve10]" time="0.00621771812439"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[1-vector_array_without_reserve11]" time="0.00584602355957"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[1-vector_array_without_reserve12]" time="0.00553107261658"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[1-vector_array_without_reserve13]" time="0.00548791885376"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[1-vector_array_without_reserve14]" time="0.00560784339905"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[1-vector_array_without_reserve15]" time="0.00780010223389"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[1-vector_array_without_reserve16]" time="0.00880408287048"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[2-vector_array_without_reserve0]" time="0.00294899940491"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[2-vector_array_without_reserve1]" time="0.00290489196777"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[2-vector_array_without_reserve2]" time="0.00345373153687"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[2-vector_array_without_reserve3]" time="0.00441789627075"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[2-vector_array_without_reserve4]" time="0.00425219535828"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[2-vector_array_without_reserve5]" time="0.00291299819946"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[2-vector_array_without_reserve6]" time="0.00280404090881"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[2-vector_array_without_reserve7]" time="0.00354504585266"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[2-vector_array_without_reserve8]" time="0.00459313392639"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[2-vector_array_without_reserve9]" time="0.005215883255"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[2-vector_array_without_reserve10]" time="0.00523281097412"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[2-vector_array_without_reserve11]" time="0.0057806968689"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[2-vector_array_without_reserve12]" time="0.00570201873779"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[2-vector_array_without_reserve13]" time="0.005450963974"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[2-vector_array_without_reserve14]" time="0.00588512420654"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[2-vector_array_without_reserve15]" time="0.00737166404724"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="707" name="test_components_wrong_component_indices[2-vector_array_without_reserve16]" time="0.00919699668884"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[0-vector_array_without_reserve0]" time="0.000920057296753"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[0-vector_array_without_reserve1]" time="0.00244188308716"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[0-vector_array_without_reserve2]" time="0.0064218044281"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[0-vector_array_without_reserve3]" time="0.0366988182068"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[0-vector_array_without_reserve4]" time="0.00142908096313"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[0-vector_array_without_reserve5]" time="0.00126910209656"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[0-vector_array_without_reserve6]" time="0.00203013420105"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[0-vector_array_without_reserve7]" time="0.00588178634644"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[0-vector_array_without_reserve8]" time="0.0356600284576"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[0-vector_array_without_reserve9]" time="0.00176787376404"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[0-vector_array_without_reserve10]" time="0.00438714027405"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[0-vector_array_without_reserve11]" time="0.016725063324"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[0-vector_array_without_reserve12]" time="0.00145888328552"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[0-vector_array_without_reserve13]" time="0.011369228363"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[0-vector_array_without_reserve14]" time="0.0161559581757"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[0-vector_array_without_reserve15]" time="0.0764081478119"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[0-vector_array_without_reserve16]" time="0.16438293457"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[1-vector_array_without_reserve0]" time="0.00232601165771"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[1-vector_array_without_reserve1]" time="0.00238633155823"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[1-vector_array_without_reserve2]" time="0.00674891471863"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[1-vector_array_without_reserve3]" time="0.0367069244385"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[1-vector_array_without_reserve4]" time="0.00134992599487"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[1-vector_array_without_reserve5]" time="0.00121903419495"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[1-vector_array_without_reserve6]" time="0.0021767616272"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[1-vector_array_without_reserve7]" time="0.00629472732544"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[1-vector_array_without_reserve8]" time="0.0364327430725"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[1-vector_array_without_reserve9]" time="0.00285387039185"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[1-vector_array_without_reserve10]" time="0.00425386428833"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[1-vector_array_without_reserve11]" time="0.0168001651764"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[1-vector_array_without_reserve12]" time="0.00181412696838"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[1-vector_array_without_reserve13]" time="0.0117347240448"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[1-vector_array_without_reserve14]" time="0.0170209407806"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[1-vector_array_without_reserve15]" time="0.0778260231018"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[1-vector_array_without_reserve16]" time="0.159075737"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[2-vector_array_without_reserve0]" time="0.00144386291504"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[2-vector_array_without_reserve1]" time="0.00276803970337"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[2-vector_array_without_reserve2]" time="0.00699520111084"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[2-vector_array_without_reserve3]" time="0.0368030071259"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[2-vector_array_without_reserve4]" time="0.00131034851074"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[2-vector_array_without_reserve5]" time="0.00121712684631"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[2-vector_array_without_reserve6]" time="0.00195908546448"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[2-vector_array_without_reserve7]" time="0.00643825531006"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[2-vector_array_without_reserve8]" time="0.0365731716156"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[2-vector_array_without_reserve9]" time="0.00307679176331"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[2-vector_array_without_reserve10]" time="0.00449275970459"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[2-vector_array_without_reserve11]" time="0.0168998241425"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[2-vector_array_without_reserve12]" time="0.00159978866577"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[2-vector_array_without_reserve13]" time="0.012677192688"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[2-vector_array_without_reserve14]" time="0.0170629024506"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[2-vector_array_without_reserve15]" time="0.0786879062653"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="721" name="test_amax[2-vector_array_without_reserve16]" time="0.160851955414"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[0-vector_array_without_reserve0]" time="0.00342273712158"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[0-vector_array_without_reserve1]" time="0.00225615501404"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[0-vector_array_without_reserve2]" time="0.00284004211426"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[0-vector_array_without_reserve3]" time="0.00529003143311"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[0-vector_array_without_reserve4]" time="0.006432056427"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[0-vector_array_without_reserve5]" time="0.00283002853394"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[0-vector_array_without_reserve6]" time="0.00255370140076"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[0-vector_array_without_reserve7]" time="0.0230798721313"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[0-vector_array_without_reserve8]" time="0.278854131699"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[0-vector_array_without_reserve9]" time="1.29635906219"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[0-vector_array_without_reserve10]" time="0.00505208969116"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[0-vector_array_without_reserve11]" time="0.00471377372742"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[0-vector_array_without_reserve12]" time="0.00438284873962"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[0-vector_array_without_reserve13]" time="0.00370502471924"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[0-vector_array_without_reserve14]" time="0.00475311279297"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[0-vector_array_without_reserve15]" time="0.00859618186951"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[0-vector_array_without_reserve16]" time="0.0109071731567"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[1-vector_array_without_reserve0]" time="0.00202703475952"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[1-vector_array_without_reserve1]" time="0.00199222564697"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[1-vector_array_without_reserve2]" time="0.00262904167175"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[1-vector_array_without_reserve3]" time="0.00526022911072"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[1-vector_array_without_reserve4]" time="0.00661325454712"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[1-vector_array_without_reserve5]" time="0.00295734405518"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[1-vector_array_without_reserve6]" time="0.00288677215576"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[1-vector_array_without_reserve7]" time="0.0243239402771"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[1-vector_array_without_reserve8]" time="0.281538009644"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[1-vector_array_without_reserve9]" time="1.30037498474"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[1-vector_array_without_reserve10]" time="0.00484395027161"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[1-vector_array_without_reserve11]" time="0.00493192672729"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[1-vector_array_without_reserve12]" time="0.00453782081604"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[1-vector_array_without_reserve13]" time="0.00364303588867"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[1-vector_array_without_reserve14]" time="0.0047709941864"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[1-vector_array_without_reserve15]" time="0.0116612911224"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[1-vector_array_without_reserve16]" time="0.0168550014496"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[2-vector_array_without_reserve0]" time="0.00334668159485"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[2-vector_array_without_reserve1]" time="0.00304365158081"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[2-vector_array_without_reserve2]" time="0.00416493415833"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[2-vector_array_without_reserve3]" time="0.00525522232056"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[2-vector_array_without_reserve4]" time="0.00645303726196"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[2-vector_array_without_reserve5]" time="0.00276684761047"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[2-vector_array_without_reserve6]" time="0.00279784202576"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[2-vector_array_without_reserve7]" time="0.0229160785675"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[2-vector_array_without_reserve8]" time="0.279135942459"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[2-vector_array_without_reserve9]" time="1.32763910294"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[2-vector_array_without_reserve10]" time="0.00522708892822"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[2-vector_array_without_reserve11]" time="0.00501108169556"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[2-vector_array_without_reserve12]" time="0.00455784797668"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[2-vector_array_without_reserve13]" time="0.003662109375"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[2-vector_array_without_reserve14]" time="0.00475692749023"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[2-vector_array_without_reserve15]" time="0.0114600658417"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="740" name="test_gramian[2-vector_array_without_reserve16]" time="0.0171418190002"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve0]" time="0.001797914505"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve1]" time="0.00173711776733"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve2]" time="0.00184202194214"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve3]" time="0.00233912467957"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve4]" time="0.00178384780884"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve5]" time="0.00164914131165"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve6]" time="0.00186800956726"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve7]" time="0.00165224075317"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve8]" time="0.00220370292664"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve9]" time="0.00769877433777"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve10]" time="0.0159487724304"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve11]" time="0.00197005271912"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve12]" time="0.00241088867188"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve13]" time="0.00241994857788"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve14]" time="0.00228500366211"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve15]" time="0.00323987007141"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve16]" time="0.00378894805908"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve17]" time="0.00329923629761"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve0]" time="0.00189208984375"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve1]" time="0.00196290016174"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve2]" time="0.00135183334351"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve3]" time="0.00165414810181"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve4]" time="0.00139904022217"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve5]" time="0.00119805335999"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve6]" time="0.0012309551239"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve7]" time="0.00117301940918"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve8]" time="0.00186848640442"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve9]" time="0.00464510917664"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve10]" time="0.00932192802429"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve11]" time="0.00133323669434"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve12]" time="0.00156903266907"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve13]" time="0.00170302391052"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve14]" time="0.00161099433899"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve15]" time="0.00244617462158"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve16]" time="0.00250697135925"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve17]" time="0.00224900245667"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve0]" time="0.00122880935669"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve1]" time="0.00130820274353"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve2]" time="0.00122404098511"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve3]" time="0.00166392326355"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve4]" time="0.00134325027466"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve5]" time="0.00118589401245"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve6]" time="0.0011739730835"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve7]" time="0.00110006332397"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve8]" time="0.00201392173767"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve9]" time="0.00473690032959"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve10]" time="0.00953221321106"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve11]" time="0.00142121315002"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve12]" time="0.00151181221008"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve13]" time="0.00179696083069"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve14]" time="0.00157809257507"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve15]" time="0.00230669975281"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve16]" time="0.00227808952332"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve17]" time="0.00230598449707"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve0]" time="0.00115919113159"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve1]" time="0.00115203857422"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve2]" time="0.00134921073914"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve3]" time="0.00153994560242"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve4]" time="0.00127100944519"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve5]" time="0.00119614601135"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve6]" time="0.00114798545837"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve7]" time="0.00116395950317"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve8]" time="0.00176000595093"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve9]" time="0.0047070980072"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve10]" time="0.00894904136658"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve11]" time="0.00133299827576"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve12]" time="0.00151324272156"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve13]" time="0.00177597999573"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve14]" time="0.00165200233459"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve15]" time="0.00228643417358"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve16]" time="0.00237131118774"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve17]" time="0.00216913223267"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve0]" time="0.00115013122559"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve1]" time="0.00127196311951"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve2]" time="0.00123596191406"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve3]" time="0.00163292884827"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve4]" time="0.00134015083313"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve5]" time="0.00120615959167"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve6]" time="0.00113391876221"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve7]" time="0.00107884407043"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve8]" time="0.00179505348206"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve9]" time="0.00479006767273"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve10]" time="0.00942063331604"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve11]" time="0.00134897232056"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve12]" time="0.00148391723633"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve13]" time="0.00168204307556"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve14]" time="0.0015389919281"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve15]" time="0.00230097770691"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve16]" time="0.00225591659546"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve17]" time="0.0022759437561"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve0]" time="0.00115060806274"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve1]" time="0.00112414360046"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve2]" time="0.00124382972717"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve3]" time="0.0012800693512"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve4]" time="0.00115489959717"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve5]" time="0.00128507614136"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve6]" time="0.00114512443542"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve7]" time="0.00113725662231"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve8]" time="0.00186896324158"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve9]" time="0.00459790229797"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve10]" time="0.00898504257202"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve11]" time="0.00151085853577"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve12]" time="0.00155329704285"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve13]" time="0.00164604187012"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve14]" time="0.00171279907227"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve15]" time="0.00239896774292"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve16]" time="0.00242185592651"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve17]" time="0.00202798843384"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve0]" time="0.00122594833374"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve1]" time="0.00130724906921"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve2]" time="0.00156807899475"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve3]" time="0.00127100944519"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve4]" time="0.00126171112061"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve5]" time="0.00116205215454"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve6]" time="0.00110387802124"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve7]" time="0.00105905532837"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve8]" time="0.00166296958923"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve9]" time="0.00456380844116"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve10]" time="0.00960612297058"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve11]" time="0.00202178955078"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve12]" time="0.00162529945374"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve13]" time="0.00166416168213"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve14]" time="0.00169086456299"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve15]" time="0.00231075286865"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve16]" time="0.00230669975281"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve17]" time="0.00207805633545"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve0]" time="0.00120902061462"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve1]" time="0.00128507614136"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve2]" time="0.00131106376648"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve3]" time="0.00156116485596"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve4]" time="0.00120806694031"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve5]" time="0.00119090080261"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve6]" time="0.00118803977966"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve7]" time="0.00125217437744"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve8]" time="0.00185680389404"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve9]" time="0.00477123260498"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve10]" time="0.00903820991516"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve11]" time="0.00135517120361"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve12]" time="0.0014591217041"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve13]" time="0.00177407264709"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve14]" time="0.00174689292908"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve15]" time="0.00248575210571"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve16]" time="0.00234603881836"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve17]" time="0.00229001045227"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve0]" time="0.00116539001465"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve1]" time="0.0012629032135"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve2]" time="0.00146389007568"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve3]" time="0.00139284133911"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve4]" time="0.00124788284302"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve5]" time="0.00126385688782"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve6]" time="0.00110411643982"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve7]" time="0.00120115280151"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve8]" time="0.00165581703186"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve9]" time="0.00462412834167"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve10]" time="0.00983285903931"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve11]" time="0.00130796432495"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve12]" time="0.00159406661987"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve13]" time="0.00182700157166"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve14]" time="0.00159978866577"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve15]" time="0.00237584114075"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve16]" time="0.00234293937683"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="746" name="test_add[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve17]" time="0.00207495689392"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve0]" time="0.00106287002563"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve1]" time="0.00114488601685"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve2]" time="0.00115013122559"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve3]" time="0.00163793563843"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve4]" time="0.00105786323547"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve5]" time="0.00100612640381"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve6]" time="0.00106906890869"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve7]" time="0.00102400779724"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve8]" time="0.00157618522644"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve9]" time="0.00315690040588"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve10]" time="0.00548815727234"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve11]" time="0.00117802619934"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve12]" time="0.00128936767578"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve13]" time="0.00141882896423"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve14]" time="0.00178074836731"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve15]" time="0.00165104866028"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve16]" time="0.00181484222412"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve17]" time="0.00179886817932"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve0]" time="0.00110077857971"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve1]" time="0.00111818313599"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve2]" time="0.00132298469543"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve3]" time="0.00121116638184"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve4]" time="0.0011157989502"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve5]" time="0.00111079216003"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve6]" time="0.000965118408203"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve7]" time="0.00114417076111"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve8]" time="0.00150299072266"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve9]" time="0.00324988365173"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve10]" time="0.00598406791687"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve11]" time="0.00119090080261"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve12]" time="0.00130200386047"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve13]" time="0.00149369239807"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve14]" time="0.00150799751282"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve15]" time="0.00212812423706"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve16]" time="0.00194191932678"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve17]" time="0.00179481506348"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve0]" time="0.00111198425293"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve1]" time="0.00109219551086"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve2]" time="0.00106906890869"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve3]" time="0.00162291526794"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve4]" time="0.00123715400696"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve5]" time="0.0011670589447"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve6]" time="0.00101089477539"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve7]" time="0.00108790397644"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve8]" time="0.00235986709595"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve9]" time="0.00304818153381"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve10]" time="0.00592279434204"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve11]" time="0.00121283531189"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve12]" time="0.00141191482544"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve13]" time="0.00150585174561"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve14]" time="0.00144171714783"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve15]" time="0.00202608108521"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve16]" time="0.00197100639343"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve17]" time="0.00193119049072"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve0]" time="0.00103163719177"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve1]" time="0.00107002258301"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve2]" time="0.00138187408447"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve3]" time="0.00121283531189"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve4]" time="0.00128507614136"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve5]" time="0.00110602378845"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve6]" time="0.00102305412292"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve7]" time="0.00102996826172"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve8]" time="0.00155186653137"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve9]" time="0.00310587882996"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve10]" time="0.00599884986877"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve11]" time="0.00123810768127"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve12]" time="0.00140118598938"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve13]" time="0.00160527229309"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve14]" time="0.00142312049866"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve15]" time="0.00198984146118"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve16]" time="0.00200295448303"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve17]" time="0.00194907188416"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve0]" time="0.00105500221252"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve1]" time="0.00120997428894"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve2]" time="0.00141572952271"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve3]" time="0.0012059211731"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve4]" time="0.00122237205505"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve5]" time="0.00112104415894"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve6]" time="0.00104880332947"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve7]" time="0.00103688240051"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve8]" time="0.00168085098267"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve9]" time="0.00361275672913"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve10]" time="0.0077862739563"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve11]" time="0.00120902061462"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve12]" time="0.00134372711182"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve13]" time="0.00156903266907"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve14]" time="0.00145506858826"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve15]" time="0.00224018096924"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve16]" time="0.00205111503601"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve17]" time="0.0018937587738"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve0]" time="0.00103402137756"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve1]" time="0.00108098983765"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve2]" time="0.00143694877625"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve3]" time="0.00138211250305"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve4]" time="0.00120401382446"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve5]" time="0.00110387802124"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve6]" time="0.000972032546997"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve7]" time="0.00103831291199"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve8]" time="0.00153303146362"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve9]" time="0.00331282615662"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve10]" time="0.00643396377563"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve11]" time="0.00118803977966"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve12]" time="0.00137901306152"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve13]" time="0.00162792205811"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve14]" time="0.00149488449097"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve15]" time="0.00208687782288"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve16]" time="0.00212025642395"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve17]" time="0.00189208984375"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve0]" time="0.00108814239502"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve1]" time="0.00105786323547"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve2]" time="0.00136280059814"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve3]" time="0.001305103302"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve4]" time="0.00113701820374"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve5]" time="0.00116086006165"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve6]" time="0.00104904174805"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve7]" time="0.00109601020813"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve8]" time="0.00151109695435"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve9]" time="0.00327801704407"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve10]" time="0.00736904144287"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve11]" time="0.00121712684631"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve12]" time="0.00156402587891"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve13]" time="0.00158214569092"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve14]" time="0.00144600868225"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve15]" time="0.00210905075073"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve16]" time="0.00205779075623"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve17]" time="0.00187969207764"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve0]" time="0.00110006332397"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve1]" time="0.0011670589447"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve2]" time="0.00123310089111"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve3]" time="0.00144696235657"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve4]" time="0.00125169754028"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve5]" time="0.00108003616333"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve6]" time="0.00109076499939"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve7]" time="0.00109076499939"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve8]" time="0.00164413452148"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve9]" time="0.00339317321777"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve10]" time="0.00619578361511"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve11]" time="0.00123310089111"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve12]" time="0.00133419036865"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve13]" time="0.00194692611694"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve14]" time="0.00155305862427"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve15]" time="0.0020489692688"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve16]" time="0.0020809173584"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve17]" time="0.00194501876831"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve0]" time="0.00118517875671"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve1]" time="0.00109028816223"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve2]" time="0.00137519836426"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve3]" time="0.00120186805725"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve4]" time="0.00115299224854"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve5]" time="0.00109887123108"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve6]" time="0.000982761383057"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve7]" time="0.00109696388245"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve8]" time="0.00142669677734"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve9]" time="0.00349688529968"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve10]" time="0.00731801986694"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve11]" time="0.00139021873474"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve12]" time="0.00135207176208"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve13]" time="0.00156879425049"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve14]" time="0.00161409378052"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve15]" time="0.00199222564697"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve16]" time="0.00206208229065"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="759" name="test_iadd[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve17]" time="0.00195813179016"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve0]" time="0.00112175941467"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve1]" time="0.00115489959717"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve2]" time="0.00122499465942"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve3]" time="0.00147390365601"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve4]" time="0.00123119354248"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve5]" time="0.00117206573486"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve6]" time="0.00104665756226"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve7]" time="0.00110530853271"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve8]" time="0.00172400474548"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve9]" time="0.00462794303894"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve10]" time="0.0088529586792"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve11]" time="0.00131106376648"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve12]" time="0.00159811973572"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve13]" time="0.00175476074219"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve14]" time="0.00162363052368"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve15]" time="0.00230503082275"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve16]" time="0.00228214263916"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve17]" time="0.00210499763489"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve0]" time="0.00119686126709"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve1]" time="0.00118923187256"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve2]" time="0.0012469291687"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve3]" time="0.00156712532043"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve4]" time="0.00125312805176"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve5]" time="0.00138378143311"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve6]" time="0.00115203857422"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve7]" time="0.00111889839172"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve8]" time="0.00198578834534"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve9]" time="0.00476002693176"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve10]" time="0.00896596908569"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve11]" time="0.00129771232605"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve12]" time="0.00149202346802"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve13]" time="0.0017991065979"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve14]" time="0.00168418884277"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve15]" time="0.00310683250427"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve16]" time="0.0023341178894"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve17]" time="0.00229620933533"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve0]" time="0.00120902061462"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve1]" time="0.00118660926819"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve2]" time="0.00134372711182"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve3]" time="0.00166893005371"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve4]" time="0.00126719474792"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve5]" time="0.00121569633484"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve6]" time="0.00105500221252"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve7]" time="0.00114226341248"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve8]" time="0.00180792808533"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve9]" time="0.00452518463135"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve10]" time="0.00958299636841"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve11]" time="0.00153279304504"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve12]" time="0.0014820098877"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve13]" time="0.00176405906677"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve14]" time="0.00165414810181"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve15]" time="0.00238418579102"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve16]" time="0.0023820400238"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve17]" time="0.00221872329712"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve0]" time="0.0011100769043"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve1]" time="0.00122904777527"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve2]" time="0.00131487846375"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve3]" time="0.00156021118164"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve4]" time="0.00129079818726"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve5]" time="0.00133800506592"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve6]" time="0.00107097625732"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve7]" time="0.00113201141357"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve8]" time="0.00174617767334"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve9]" time="0.00469183921814"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve10]" time="0.00881218910217"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve11]" time="0.00130009651184"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve12]" time="0.00160384178162"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve13]" time="0.00172591209412"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve14]" time="0.00163602828979"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve15]" time="0.00280928611755"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve16]" time="0.00236010551453"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve17]" time="0.00219488143921"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve0]" time="0.00117111206055"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve1]" time="0.00125789642334"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve2]" time="0.00133085250854"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve3]" time="0.00161695480347"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve4]" time="0.00127720832825"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve5]" time="0.00125694274902"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve6]" time="0.00111484527588"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve7]" time="0.00119185447693"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve8]" time="0.00189280509949"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve9]" time="0.0047926902771"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve10]" time="0.00926303863525"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve11]" time="0.0013120174408"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve12]" time="0.00164294242859"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve13]" time="0.00172877311707"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve14]" time="0.00161576271057"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve15]" time="0.00254893302917"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve16]" time="0.00246691703796"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve17]" time="0.00217509269714"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve0]" time="0.00123310089111"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve1]" time="0.00125503540039"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve2]" time="0.00146198272705"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve3]" time="0.00131702423096"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve4]" time="0.00126886367798"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve5]" time="0.00119709968567"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve6]" time="0.0010359287262"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve7]" time="0.00113797187805"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve8]" time="0.00158214569092"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve9]" time="0.00472402572632"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve10]" time="0.00911116600037"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve11]" time="0.00142502784729"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve12]" time="0.00161099433899"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve13]" time="0.00176978111267"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve14]" time="0.00162506103516"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve15]" time="0.00358581542969"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve16]" time="0.0024151802063"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve17]" time="0.00221395492554"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve0]" time="0.00112962722778"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve1]" time="0.00131916999817"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve2]" time="0.0014488697052"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve3]" time="0.00129985809326"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve4]" time="0.00124192237854"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve5]" time="0.00133109092712"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve6]" time="0.0010461807251"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve7]" time="0.00120615959167"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve8]" time="0.00170469284058"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve9]" time="0.00501894950867"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve10]" time="0.00884222984314"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve11]" time="0.00137591362"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve12]" time="0.00158214569092"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve13]" time="0.00168299674988"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve14]" time="0.00164103507996"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve15]" time="0.00244212150574"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve16]" time="0.00226140022278"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve17]" time="0.00209403038025"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve0]" time="0.00118184089661"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve1]" time="0.00125908851624"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve2]" time="0.00121402740479"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve3]" time="0.00151681900024"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve4]" time="0.00135207176208"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve5]" time="0.00129628181458"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve6]" time="0.00107502937317"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve7]" time="0.00117230415344"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve8]" time="0.00175094604492"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve9]" time="0.00476884841919"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve10]" time="0.00909614562988"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve11]" time="0.00134086608887"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve12]" time="0.00156593322754"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve13]" time="0.00201511383057"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve14]" time="0.0016028881073"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve15]" time="0.00299715995789"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve16]" time="0.00242781639099"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve17]" time="0.00214171409607"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve0]" time="0.00118207931519"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve1]" time="0.00112819671631"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve2]" time="0.00153517723083"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve3]" time="0.00129103660583"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve4]" time="0.00128173828125"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve5]" time="0.00109815597534"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve6]" time="0.000999927520752"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve7]" time="0.00115084648132"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve8]" time="0.00160002708435"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve9]" time="0.0046501159668"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve10]" time="0.00883984565735"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve11]" time="0.00140023231506"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve12]" time="0.00143909454346"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve13]" time="0.00177097320557"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve14]" time="0.00166177749634"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve15]" time="0.00253009796143"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve16]" time="0.0023512840271"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="771" name="test_sub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve17]" time="0.00229525566101"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve0]" time="0.00108790397644"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve1]" time="0.00110673904419"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve2]" time="0.00141096115112"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve3]" time="0.00121903419495"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve4]" time="0.00115585327148"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve5]" time="0.00113701820374"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve6]" time="0.000994920730591"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve7]" time="0.00105690956116"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve8]" time="0.00157594680786"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve9]" time="0.00310373306274"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve10]" time="0.00558114051819"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve11]" time="0.00118207931519"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve12]" time="0.00129914283752"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve13]" time="0.00147986412048"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve14]" time="0.00153589248657"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve15]" time="0.00203990936279"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve16]" time="0.00202679634094"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve17]" time="0.00182414054871"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve0]" time="0.001060962677"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve1]" time="0.00106716156006"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve2]" time="0.00113487243652"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve3]" time="0.00266003608704"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve4]" time="0.00116920471191"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve5]" time="0.00101518630981"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve6]" time="0.00103783607483"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve7]" time="0.000993013381958"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve8]" time="0.0016610622406"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve9]" time="0.00337314605713"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve10]" time="0.0060338973999"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve11]" time="0.00109577178955"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve12]" time="0.00137710571289"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve13]" time="0.00162625312805"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve14]" time="0.00144004821777"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve15]" time="0.00194525718689"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve16]" time="0.00193619728088"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve17]" time="0.00173711776733"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve0]" time="0.00106287002563"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve1]" time="0.0010929107666"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve2]" time="0.00131773948669"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve3]" time="0.0013792514801"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve4]" time="0.00113892555237"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve5]" time="0.00105404853821"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve6]" time="0.00103092193604"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve7]" time="0.00106906890869"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve8]" time="0.00176525115967"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve9]" time="0.00331974029541"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve10]" time="0.00615000724792"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve11]" time="0.00125074386597"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve12]" time="0.00132083892822"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve13]" time="0.00147104263306"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve14]" time="0.00147604942322"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve15]" time="0.00196504592896"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve16]" time="0.00217366218567"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve17]" time="0.00187706947327"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve0]" time="0.00115418434143"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve1]" time="0.00115013122559"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve2]" time="0.00131797790527"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve3]" time="0.00131893157959"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve4]" time="0.00117826461792"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve5]" time="0.00103902816772"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve6]" time="0.00110006332397"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve7]" time="0.00110650062561"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve8]" time="0.00159788131714"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve9]" time="0.00327205657959"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve10]" time="0.00730037689209"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve11]" time="0.00114989280701"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve12]" time="0.00131869316101"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve13]" time="0.00144958496094"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve14]" time="0.00145602226257"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve15]" time="0.00222015380859"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve16]" time="0.00196981430054"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve17]" time="0.00189924240112"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve0]" time="0.00108098983765"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve1]" time="0.00115156173706"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve2]" time="0.0014021396637"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve3]" time="0.00122618675232"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve4]" time="0.00117301940918"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve5]" time="0.00110507011414"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve6]" time="0.00107026100159"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve7]" time="0.00104284286499"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve8]" time="0.00171089172363"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve9]" time="0.00359201431274"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve10]" time="0.00644421577454"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve11]" time="0.00126791000366"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve12]" time="0.00138998031616"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve13]" time="0.00154113769531"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve14]" time="0.00151586532593"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve15]" time="0.00224447250366"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve16]" time="0.00207591056824"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve17]" time="0.00189185142517"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve0]" time="0.00105404853821"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve1]" time="0.00110912322998"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve2]" time="0.00140762329102"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve3]" time="0.00128889083862"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve4]" time="0.00119686126709"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve5]" time="0.00104689598083"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve6]" time="0.00101017951965"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve7]" time="0.0010838508606"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve8]" time="0.00148773193359"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve9]" time="0.00351214408875"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve10]" time="0.0073070526123"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve11]" time="0.00127506256104"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve12]" time="0.00132894515991"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve13]" time="0.00155901908875"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve14]" time="0.00144720077515"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve15]" time="0.00206899642944"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve16]" time="0.00213098526001"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve17]" time="0.00193619728088"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve0]" time="0.00102210044861"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve1]" time="0.00109815597534"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve2]" time="0.00143718719482"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve3]" time="0.00129008293152"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve4]" time="0.00117182731628"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve5]" time="0.00109791755676"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve6]" time="0.000998973846436"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve7]" time="0.000991821289062"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve8]" time="0.00154209136963"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve9]" time="0.00327014923096"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve10]" time="0.00621724128723"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve11]" time="0.00125074386597"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve12]" time="0.0013599395752"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve13]" time="0.0015070438385"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve14]" time="0.00155782699585"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve15]" time="0.00211024284363"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve16]" time="0.00195503234863"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve17]" time="0.00200486183167"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve0]" time="0.00103402137756"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve1]" time="0.00118613243103"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve2]" time="0.00135707855225"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve3]" time="0.00125694274902"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve4]" time="0.00115513801575"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve5]" time="0.00113916397095"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve6]" time="0.00106191635132"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve7]" time="0.00115156173706"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve8]" time="0.00165295600891"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve9]" time="0.00336217880249"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve10]" time="0.00747108459473"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve11]" time="0.00123524665833"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve12]" time="0.00146412849426"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve13]" time="0.00161504745483"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve14]" time="0.00158476829529"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve15]" time="0.00205183029175"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve16]" time="0.00211310386658"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve17]" time="0.0019211769104"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve0]" time="0.00110006332397"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve1]" time="0.00108575820923"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve2]" time="0.00137853622437"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve3]" time="0.00125598907471"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve4]" time="0.00117588043213"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve5]" time="0.00112318992615"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve6]" time="0.00107312202454"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve7]" time="0.00106501579285"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve8]" time="0.00153183937073"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve9]" time="0.00335597991943"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve10]" time="0.00646114349365"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve11]" time="0.0012469291687"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve12]" time="0.00164389610291"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve13]" time="0.00166606903076"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve14]" time="0.00146865844727"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve15]" time="0.00214195251465"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve16]" time="0.0021641254425"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="784" name="test_isub[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve17]" time="0.00206089019775"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[0-vector_array_without_reserve0]" time="0.00103712081909"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[0-vector_array_without_reserve1]" time="0.00120902061462"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[0-vector_array_without_reserve2]" time="0.0014340877533"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[0-vector_array_without_reserve3]" time="0.00115585327148"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[0-vector_array_without_reserve4]" time="0.00112581253052"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[0-vector_array_without_reserve5]" time="0.0010929107666"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[0-vector_array_without_reserve6]" time="0.00102782249451"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[0-vector_array_without_reserve7]" time="0.00119209289551"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[0-vector_array_without_reserve8]" time="0.0042200088501"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[0-vector_array_without_reserve9]" time="0.00772404670715"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[0-vector_array_without_reserve10]" time="0.00146985054016"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[0-vector_array_without_reserve11]" time="0.00146889686584"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[0-vector_array_without_reserve12]" time="0.00154399871826"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[0-vector_array_without_reserve13]" time="0.00134325027466"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[0-vector_array_without_reserve14]" time="0.00152325630188"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[0-vector_array_without_reserve15]" time="0.00290417671204"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[0-vector_array_without_reserve16]" time="0.00161623954773"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[1-vector_array_without_reserve0]" time="0.00118398666382"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[1-vector_array_without_reserve1]" time="0.00110769271851"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[1-vector_array_without_reserve2]" time="0.00114822387695"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[1-vector_array_without_reserve3]" time="0.00113391876221"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[1-vector_array_without_reserve4]" time="0.00128221511841"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[1-vector_array_without_reserve5]" time="0.00104999542236"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[1-vector_array_without_reserve6]" time="0.000931024551392"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[1-vector_array_without_reserve7]" time="0.0013370513916"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[1-vector_array_without_reserve8]" time="0.00443506240845"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[1-vector_array_without_reserve9]" time="0.00785613059998"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[1-vector_array_without_reserve10]" time="0.00150108337402"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[1-vector_array_without_reserve11]" time="0.00155186653137"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[1-vector_array_without_reserve12]" time="0.00160670280457"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[1-vector_array_without_reserve13]" time="0.00142002105713"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[1-vector_array_without_reserve14]" time="0.00149011611938"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[1-vector_array_without_reserve15]" time="0.00199294090271"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[1-vector_array_without_reserve16]" time="0.00165486335754"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[2-vector_array_without_reserve0]" time="0.00116896629333"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[2-vector_array_without_reserve1]" time="0.0012891292572"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[2-vector_array_without_reserve2]" time="0.00113701820374"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[2-vector_array_without_reserve3]" time="0.00141096115112"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[2-vector_array_without_reserve4]" time="0.00141787528992"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[2-vector_array_without_reserve5]" time="0.00114893913269"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[2-vector_array_without_reserve6]" time="0.00101208686829"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[2-vector_array_without_reserve7]" time="0.00126481056213"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[2-vector_array_without_reserve8]" time="0.004310131073"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[2-vector_array_without_reserve9]" time="0.00950407981873"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[2-vector_array_without_reserve10]" time="0.00149297714233"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[2-vector_array_without_reserve11]" time="0.00168991088867"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[2-vector_array_without_reserve12]" time="0.00159478187561"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[2-vector_array_without_reserve13]" time="0.00141096115112"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[2-vector_array_without_reserve14]" time="0.00173783302307"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[2-vector_array_without_reserve15]" time="0.00210022926331"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="796" name="test_neg[2-vector_array_without_reserve16]" time="0.00183033943176"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[0-vector_array_without_reserve0]" time="0.00180983543396"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[0-vector_array_without_reserve1]" time="0.00185298919678"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[0-vector_array_without_reserve2]" time="0.00183296203613"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[0-vector_array_without_reserve3]" time="0.00214290618896"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[0-vector_array_without_reserve4]" time="0.00211596488953"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[0-vector_array_without_reserve5]" time="0.00136089324951"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[0-vector_array_without_reserve6]" time="0.00151491165161"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[0-vector_array_without_reserve7]" time="0.00213193893433"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[0-vector_array_without_reserve8]" time="0.0161969661713"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[0-vector_array_without_reserve9]" time="0.0328521728516"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[0-vector_array_without_reserve10]" time="0.0040590763092"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[0-vector_array_without_reserve11]" time="0.00335812568665"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[0-vector_array_without_reserve12]" time="0.00326228141785"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[0-vector_array_without_reserve13]" time="0.00249981880188"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[0-vector_array_without_reserve14]" time="0.00337100028992"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[0-vector_array_without_reserve15]" time="0.00482988357544"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[0-vector_array_without_reserve16]" time="0.0038902759552"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[1-vector_array_without_reserve0]" time="0.00180387496948"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[1-vector_array_without_reserve1]" time="0.00202703475952"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[1-vector_array_without_reserve2]" time="0.00191807746887"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[1-vector_array_without_reserve3]" time="0.00196409225464"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[1-vector_array_without_reserve4]" time="0.0020112991333"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[1-vector_array_without_reserve5]" time="0.00145220756531"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[1-vector_array_without_reserve6]" time="0.00145101547241"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[1-vector_array_without_reserve7]" time="0.00223803520203"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[1-vector_array_without_reserve8]" time="0.0154020786285"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[1-vector_array_without_reserve9]" time="0.033017873764"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[1-vector_array_without_reserve10]" time="0.00396227836609"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[1-vector_array_without_reserve11]" time="0.00348281860352"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[1-vector_array_without_reserve12]" time="0.00327610969543"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[1-vector_array_without_reserve13]" time="0.00259208679199"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[1-vector_array_without_reserve14]" time="0.00325608253479"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[1-vector_array_without_reserve15]" time="0.00460481643677"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[1-vector_array_without_reserve16]" time="0.00392484664917"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[2-vector_array_without_reserve0]" time="0.00182867050171"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[2-vector_array_without_reserve1]" time="0.0020010471344"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[2-vector_array_without_reserve2]" time="0.00189876556396"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[2-vector_array_without_reserve3]" time="0.00215911865234"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[2-vector_array_without_reserve4]" time="0.00213885307312"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[2-vector_array_without_reserve5]" time="0.00143885612488"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[2-vector_array_without_reserve6]" time="0.00146508216858"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[2-vector_array_without_reserve7]" time="0.00215792655945"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[2-vector_array_without_reserve8]" time="0.0159130096436"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[2-vector_array_without_reserve9]" time="0.0328559875488"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[2-vector_array_without_reserve10]" time="0.00406193733215"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[2-vector_array_without_reserve11]" time="0.0032799243927"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[2-vector_array_without_reserve12]" time="0.00304985046387"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[2-vector_array_without_reserve13]" time="0.00287532806396"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[2-vector_array_without_reserve14]" time="0.00356388092041"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[2-vector_array_without_reserve15]" time="0.0047459602356"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="805" name="test_mul[2-vector_array_without_reserve16]" time="0.00422286987305"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[0-vector_array_without_reserve0]" time="0.000889301300049"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[0-vector_array_without_reserve1]" time="0.000951051712036"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[0-vector_array_without_reserve2]" time="0.000885009765625"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[0-vector_array_without_reserve3]" time="0.000923156738281"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[0-vector_array_without_reserve4]" time="0.00106477737427"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[0-vector_array_without_reserve5]" time="0.000928163528442"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[0-vector_array_without_reserve6]" time="0.000943183898926"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[0-vector_array_without_reserve7]" time="0.00100994110107"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[0-vector_array_without_reserve8]" time="0.00148820877075"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[0-vector_array_without_reserve9]" time="0.00173377990723"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[0-vector_array_without_reserve10]" time="0.00109505653381"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[0-vector_array_without_reserve11]" time="0.00118517875671"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[0-vector_array_without_reserve12]" time="0.0014169216156"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[0-vector_array_without_reserve13]" time="0.00102186203003"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[0-vector_array_without_reserve14]" time="0.00110411643982"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[0-vector_array_without_reserve15]" time="0.00134110450745"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[0-vector_array_without_reserve16]" time="0.00107383728027"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[1-vector_array_without_reserve0]" time="0.00094199180603"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[1-vector_array_without_reserve1]" time="0.00120806694031"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[1-vector_array_without_reserve2]" time="0.000897884368896"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[1-vector_array_without_reserve3]" time="0.00102090835571"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[1-vector_array_without_reserve4]" time="0.000918865203857"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[1-vector_array_without_reserve5]" time="0.00089693069458"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[1-vector_array_without_reserve6]" time="0.000843286514282"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[1-vector_array_without_reserve7]" time="0.00116896629333"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[1-vector_array_without_reserve8]" time="0.00128102302551"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[1-vector_array_without_reserve9]" time="0.00220489501953"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[1-vector_array_without_reserve10]" time="0.00107002258301"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[1-vector_array_without_reserve11]" time="0.00107979774475"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[1-vector_array_without_reserve12]" time="0.00113582611084"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[1-vector_array_without_reserve13]" time="0.00137591362"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[1-vector_array_without_reserve14]" time="0.00104188919067"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[1-vector_array_without_reserve15]" time="0.00124478340149"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[1-vector_array_without_reserve16]" time="0.00137686729431"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[2-vector_array_without_reserve0]" time="0.000988006591797"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[2-vector_array_without_reserve1]" time="0.000924110412598"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[2-vector_array_without_reserve2]" time="0.00124096870422"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[2-vector_array_without_reserve3]" time="0.000952959060669"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[2-vector_array_without_reserve4]" time="0.00102281570435"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[2-vector_array_without_reserve5]" time="0.00088095664978"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[2-vector_array_without_reserve6]" time="0.000888109207153"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[2-vector_array_without_reserve7]" time="0.000911712646484"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[2-vector_array_without_reserve8]" time="0.00161385536194"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[2-vector_array_without_reserve9]" time="0.00199890136719"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[2-vector_array_without_reserve10]" time="0.00118684768677"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[2-vector_array_without_reserve11]" time="0.00119614601135"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[2-vector_array_without_reserve12]" time="0.0011613368988"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[2-vector_array_without_reserve13]" time="0.00104594230652"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[2-vector_array_without_reserve14]" time="0.00138115882874"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[2-vector_array_without_reserve15]" time="0.00121712684631"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="815" name="test_mul_wrong_factor[2-vector_array_without_reserve16]" time="0.00123906135559"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[0-vector_array_without_reserve0]" time="0.0021538734436"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[0-vector_array_without_reserve1]" time="0.00189995765686"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[0-vector_array_without_reserve2]" time="0.00193023681641"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[0-vector_array_without_reserve3]" time="0.00308132171631"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[0-vector_array_without_reserve4]" time="0.00175189971924"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[0-vector_array_without_reserve5]" time="0.00151109695435"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[0-vector_array_without_reserve6]" time="0.00160479545593"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[0-vector_array_without_reserve7]" time="0.00216102600098"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[0-vector_array_without_reserve8]" time="0.0156052112579"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[0-vector_array_without_reserve9]" time="0.0305531024933"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[0-vector_array_without_reserve10]" time="0.00404810905457"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[0-vector_array_without_reserve11]" time="0.00339007377625"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[0-vector_array_without_reserve12]" time="0.00317883491516"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[0-vector_array_without_reserve13]" time="0.00251889228821"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[0-vector_array_without_reserve14]" time="0.00338411331177"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[0-vector_array_without_reserve15]" time="0.00471115112305"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[0-vector_array_without_reserve16]" time="0.00397205352783"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[1-vector_array_without_reserve0]" time="0.00183486938477"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[1-vector_array_without_reserve1]" time="0.00177574157715"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[1-vector_array_without_reserve2]" time="0.00185704231262"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[1-vector_array_without_reserve3]" time="0.00212073326111"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[1-vector_array_without_reserve4]" time="0.00225424766541"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[1-vector_array_without_reserve5]" time="0.00146794319153"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[1-vector_array_without_reserve6]" time="0.00146698951721"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[1-vector_array_without_reserve7]" time="0.0022029876709"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[1-vector_array_without_reserve8]" time="0.0158751010895"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[1-vector_array_without_reserve9]" time="0.0323207378387"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[1-vector_array_without_reserve10]" time="0.00400304794312"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[1-vector_array_without_reserve11]" time="0.00350189208984"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[1-vector_array_without_reserve12]" time="0.00339317321777"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[1-vector_array_without_reserve13]" time="0.00273990631104"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[1-vector_array_without_reserve14]" time="0.00338006019592"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[1-vector_array_without_reserve15]" time="0.00466823577881"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[1-vector_array_without_reserve16]" time="0.00394797325134"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[2-vector_array_without_reserve0]" time="0.00191712379456"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[2-vector_array_without_reserve1]" time="0.00182104110718"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[2-vector_array_without_reserve2]" time="0.00193428993225"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[2-vector_array_without_reserve3]" time="0.00211453437805"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[2-vector_array_without_reserve4]" time="0.00211000442505"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[2-vector_array_without_reserve5]" time="0.00141668319702"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[2-vector_array_without_reserve6]" time="0.00141739845276"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[2-vector_array_without_reserve7]" time="0.00213432312012"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[2-vector_array_without_reserve8]" time="0.0157332420349"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[2-vector_array_without_reserve9]" time="0.0328447818756"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[2-vector_array_without_reserve10]" time="0.0040340423584"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[2-vector_array_without_reserve11]" time="0.00318622589111"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[2-vector_array_without_reserve12]" time="0.00312662124634"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[2-vector_array_without_reserve13]" time="0.00267100334167"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[2-vector_array_without_reserve14]" time="0.00347995758057"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[2-vector_array_without_reserve15]" time="0.00443577766418"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="821" name="test_rmul[2-vector_array_without_reserve16]" time="0.00372409820557"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[0-vector_array_without_reserve0]" time="0.00147795677185"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[0-vector_array_without_reserve1]" time="0.00149393081665"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[0-vector_array_without_reserve2]" time="0.00143003463745"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[0-vector_array_without_reserve3]" time="0.00181818008423"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[0-vector_array_without_reserve4]" time="0.00160503387451"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[0-vector_array_without_reserve5]" time="0.00117802619934"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[0-vector_array_without_reserve6]" time="0.00122117996216"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[0-vector_array_without_reserve7]" time="0.00159001350403"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[0-vector_array_without_reserve8]" time="0.0105829238892"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[0-vector_array_without_reserve9]" time="0.0189838409424"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[0-vector_array_without_reserve10]" time="0.00328278541565"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[0-vector_array_without_reserve11]" time="0.00241184234619"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[0-vector_array_without_reserve12]" time="0.00222277641296"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[0-vector_array_without_reserve13]" time="0.00178813934326"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[0-vector_array_without_reserve14]" time="0.00215697288513"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[0-vector_array_without_reserve15]" time="0.00328874588013"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[0-vector_array_without_reserve16]" time="0.00277590751648"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[1-vector_array_without_reserve0]" time="0.0014591217041"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[1-vector_array_without_reserve1]" time="0.0013542175293"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[1-vector_array_without_reserve2]" time="0.00148582458496"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[1-vector_array_without_reserve3]" time="0.00171327590942"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[1-vector_array_without_reserve4]" time="0.00165009498596"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[1-vector_array_without_reserve5]" time="0.00121593475342"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[1-vector_array_without_reserve6]" time="0.00110006332397"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[1-vector_array_without_reserve7]" time="0.0016930103302"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[1-vector_array_without_reserve8]" time="0.0105788707733"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[1-vector_array_without_reserve9]" time="0.0197100639343"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[1-vector_array_without_reserve10]" time="0.0030529499054"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[1-vector_array_without_reserve11]" time="0.00227284431458"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[1-vector_array_without_reserve12]" time="0.00229477882385"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[1-vector_array_without_reserve13]" time="0.00191831588745"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[1-vector_array_without_reserve14]" time="0.00237202644348"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[1-vector_array_without_reserve15]" time="0.00316619873047"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[1-vector_array_without_reserve16]" time="0.0028657913208"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[2-vector_array_without_reserve0]" time="0.00156092643738"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[2-vector_array_without_reserve1]" time="0.00139904022217"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[2-vector_array_without_reserve2]" time="0.00159502029419"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[2-vector_array_without_reserve3]" time="0.00164198875427"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[2-vector_array_without_reserve4]" time="0.00170278549194"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[2-vector_array_without_reserve5]" time="0.00118708610535"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[2-vector_array_without_reserve6]" time="0.00112891197205"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[2-vector_array_without_reserve7]" time="0.00168490409851"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[2-vector_array_without_reserve8]" time="0.0103168487549"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[2-vector_array_without_reserve9]" time="0.0197508335114"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[2-vector_array_without_reserve10]" time="0.00321984291077"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[2-vector_array_without_reserve11]" time="0.00251388549805"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[2-vector_array_without_reserve12]" time="0.0024950504303"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[2-vector_array_without_reserve13]" time="0.00212001800537"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[2-vector_array_without_reserve14]" time="0.00263810157776"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[2-vector_array_without_reserve15]" time="0.00340795516968"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="831" name="test_imul[2-vector_array_without_reserve16]" time="0.00289678573608"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[0-vector_array_without_reserve0]" time="0.000927686691284"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[0-vector_array_without_reserve1]" time="0.000845909118652"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[0-vector_array_without_reserve2]" time="0.000818252563477"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[0-vector_array_without_reserve3]" time="0.000849723815918"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[0-vector_array_without_reserve4]" time="0.00117301940918"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[0-vector_array_without_reserve5]" time="0.000947952270508"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[0-vector_array_without_reserve6]" time="0.000894069671631"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[0-vector_array_without_reserve7]" time="0.000906944274902"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[0-vector_array_without_reserve8]" time="0.0010941028595"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[0-vector_array_without_reserve9]" time="0.00146079063416"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[0-vector_array_without_reserve10]" time="0.000966787338257"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[0-vector_array_without_reserve11]" time="0.00106287002563"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[0-vector_array_without_reserve12]" time="0.000938892364502"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[0-vector_array_without_reserve13]" time="0.00101804733276"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[0-vector_array_without_reserve14]" time="0.00120401382446"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[0-vector_array_without_reserve15]" time="0.00115203857422"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[0-vector_array_without_reserve16]" time="0.0011100769043"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[1-vector_array_without_reserve0]" time="0.00101804733276"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[1-vector_array_without_reserve1]" time="0.000863075256348"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[1-vector_array_without_reserve2]" time="0.000964879989624"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[1-vector_array_without_reserve3]" time="0.00117087364197"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[1-vector_array_without_reserve4]" time="0.000903844833374"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[1-vector_array_without_reserve5]" time="0.000847578048706"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[1-vector_array_without_reserve6]" time="0.000938892364502"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[1-vector_array_without_reserve7]" time="0.000981092453003"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[1-vector_array_without_reserve8]" time="0.00130009651184"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[1-vector_array_without_reserve9]" time="0.00170397758484"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[1-vector_array_without_reserve10]" time="0.00106024742126"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[1-vector_array_without_reserve11]" time="0.00119805335999"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[1-vector_array_without_reserve12]" time="0.00111794471741"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[1-vector_array_without_reserve13]" time="0.00105690956116"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[1-vector_array_without_reserve14]" time="0.00107908248901"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[1-vector_array_without_reserve15]" time="0.00138998031616"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[1-vector_array_without_reserve16]" time="0.00109720230103"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[2-vector_array_without_reserve0]" time="0.00084924697876"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[2-vector_array_without_reserve1]" time="0.000967979431152"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[2-vector_array_without_reserve2]" time="0.000998973846436"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[2-vector_array_without_reserve3]" time="0.00100588798523"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[2-vector_array_without_reserve4]" time="0.00130987167358"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[2-vector_array_without_reserve5]" time="0.000949144363403"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[2-vector_array_without_reserve6]" time="0.000950813293457"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[2-vector_array_without_reserve7]" time="0.000935077667236"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[2-vector_array_without_reserve8]" time="0.00150275230408"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[2-vector_array_without_reserve9]" time="0.0015881061554"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[2-vector_array_without_reserve10]" time="0.00111770629883"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[2-vector_array_without_reserve11]" time="0.00138115882874"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[2-vector_array_without_reserve12]" time="0.00107526779175"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[2-vector_array_without_reserve13]" time="0.00105285644531"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[2-vector_array_without_reserve14]" time="0.00116467475891"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[2-vector_array_without_reserve15]" time="0.00114274024963"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="841" name="test_imul_wrong_factor[2-vector_array_without_reserve16]" time="0.00202202796936"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="850" name="test_append_incompatible[incompatible_vector_array_pair0]" time="0.000823020935059"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="850" name="test_append_incompatible[incompatible_vector_array_pair1]" time="0.000857353210449"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="850" name="test_append_incompatible[incompatible_vector_array_pair2]" time="0.000776767730713"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="850" name="test_append_incompatible[incompatible_vector_array_pair3]" time="0.00089693069458"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="850" name="test_append_incompatible[incompatible_vector_array_pair4]" time="0.000802993774414"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="850" name="test_append_incompatible[incompatible_vector_array_pair5]" time="0.000906944274902"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="850" name="test_append_incompatible[incompatible_vector_array_pair6]" time="0.000998973846436"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="850" name="test_append_incompatible[incompatible_vector_array_pair7]" time="0.000939130783081"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="850" name="test_append_incompatible[incompatible_vector_array_pair8]" time="0.0016303062439"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="850" name="test_append_incompatible[incompatible_vector_array_pair9]" time="0.00238966941833"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="850" name="test_append_incompatible[incompatible_vector_array_pair10]" time="0.00111889839172"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="850" name="test_append_incompatible[incompatible_vector_array_pair11]" time="0.00108981132507"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="850" name="test_append_incompatible[incompatible_vector_array_pair12]" time="0.00113725662231"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="850" name="test_append_incompatible[incompatible_vector_array_pair13]" time="0.00108289718628"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="850" name="test_append_incompatible[incompatible_vector_array_pair14]" time="0.00120997428894"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="861" name="test_axpy_incompatible[incompatible_vector_array_pair0]" time="0.00270009040833"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="861" name="test_axpy_incompatible[incompatible_vector_array_pair1]" time="0.00105714797974"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="861" name="test_axpy_incompatible[incompatible_vector_array_pair2]" time="0.00513195991516"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="861" name="test_axpy_incompatible[incompatible_vector_array_pair3]" time="0.00403666496277"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="861" name="test_axpy_incompatible[incompatible_vector_array_pair4]" time="0.00439691543579"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="861" name="test_axpy_incompatible[incompatible_vector_array_pair5]" time="0.00228905677795"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="861" name="test_axpy_incompatible[incompatible_vector_array_pair6]" time="0.00105714797974"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="861" name="test_axpy_incompatible[incompatible_vector_array_pair7]" time="0.00566697120667"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="861" name="test_axpy_incompatible[incompatible_vector_array_pair8]" time="0.0106561183929"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="861" name="test_axpy_incompatible[incompatible_vector_array_pair9]" time="0.0192608833313"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="861" name="test_axpy_incompatible[incompatible_vector_array_pair10]" time="0.00535941123962"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="861" name="test_axpy_incompatible[incompatible_vector_array_pair11]" time="0.00130128860474"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="861" name="test_axpy_incompatible[incompatible_vector_array_pair12]" time="0.0104651451111"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="861" name="test_axpy_incompatible[incompatible_vector_array_pair13]" time="0.00764489173889"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="861" name="test_axpy_incompatible[incompatible_vector_array_pair14]" time="0.00918889045715"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="878" name="test_dot_incompatible[incompatible_vector_array_pair0]" time="0.00123763084412"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="878" name="test_dot_incompatible[incompatible_vector_array_pair1]" time="0.000850915908813"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="878" name="test_dot_incompatible[incompatible_vector_array_pair2]" time="0.00193810462952"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="878" name="test_dot_incompatible[incompatible_vector_array_pair3]" time="0.00175094604492"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="878" name="test_dot_incompatible[incompatible_vector_array_pair4]" time="0.00206089019775"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="878" name="test_dot_incompatible[incompatible_vector_array_pair5]" time="0.00110793113708"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="878" name="test_dot_incompatible[incompatible_vector_array_pair6]" time="0.000916242599487"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="878" name="test_dot_incompatible[incompatible_vector_array_pair7]" time="0.00194692611694"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="878" name="test_dot_incompatible[incompatible_vector_array_pair8]" time="0.00383424758911"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="878" name="test_dot_incompatible[incompatible_vector_array_pair9]" time="0.00645709037781"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="878" name="test_dot_incompatible[incompatible_vector_array_pair10]" time="0.00194787979126"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="878" name="test_dot_incompatible[incompatible_vector_array_pair11]" time="0.00103902816772"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="878" name="test_dot_incompatible[incompatible_vector_array_pair12]" time="0.00352787971497"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="878" name="test_dot_incompatible[incompatible_vector_array_pair13]" time="0.00271892547607"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="878" name="test_dot_incompatible[incompatible_vector_array_pair14]" time="0.00342011451721"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="886" name="test_pairwise_dot_incompatible[incompatible_vector_array_pair0]" time="0.0011248588562"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="886" name="test_pairwise_dot_incompatible[incompatible_vector_array_pair1]" time="0.000946998596191"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="886" name="test_pairwise_dot_incompatible[incompatible_vector_array_pair2]" time="0.00194406509399"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="886" name="test_pairwise_dot_incompatible[incompatible_vector_array_pair3]" time="0.00173306465149"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="886" name="test_pairwise_dot_incompatible[incompatible_vector_array_pair4]" time="0.00163316726685"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="886" name="test_pairwise_dot_incompatible[incompatible_vector_array_pair5]" time="0.00114107131958"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="886" name="test_pairwise_dot_incompatible[incompatible_vector_array_pair6]" time="0.0010871887207"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="886" name="test_pairwise_dot_incompatible[incompatible_vector_array_pair7]" time="0.00189614295959"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="886" name="test_pairwise_dot_incompatible[incompatible_vector_array_pair8]" time="0.00368094444275"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="886" name="test_pairwise_dot_incompatible[incompatible_vector_array_pair9]" time="0.0064070224762"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="886" name="test_pairwise_dot_incompatible[incompatible_vector_array_pair10]" time="0.0017728805542"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="886" name="test_pairwise_dot_incompatible[incompatible_vector_array_pair11]" time="0.00105881690979"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="886" name="test_pairwise_dot_incompatible[incompatible_vector_array_pair12]" time="0.00336790084839"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="886" name="test_pairwise_dot_incompatible[incompatible_vector_array_pair13]" time="0.00293231010437"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="886" name="test_pairwise_dot_incompatible[incompatible_vector_array_pair14]" time="0.00341486930847"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="894" name="test_add_incompatible[incompatible_vector_array_pair0]" time="0.000836849212646"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="894" name="test_add_incompatible[incompatible_vector_array_pair1]" time="0.000765800476074"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="894" name="test_add_incompatible[incompatible_vector_array_pair2]" time="0.000809907913208"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="894" name="test_add_incompatible[incompatible_vector_array_pair3]" time="0.000777006149292"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="894" name="test_add_incompatible[incompatible_vector_array_pair4]" time="0.000787734985352"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="894" name="test_add_incompatible[incompatible_vector_array_pair5]" time="0.000791788101196"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="894" name="test_add_incompatible[incompatible_vector_array_pair6]" time="0.001060962677"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="894" name="test_add_incompatible[incompatible_vector_array_pair7]" time="0.000881910324097"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="894" name="test_add_incompatible[incompatible_vector_array_pair8]" time="0.00117611885071"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="894" name="test_add_incompatible[incompatible_vector_array_pair9]" time="0.00175619125366"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="894" name="test_add_incompatible[incompatible_vector_array_pair10]" time="0.000990152359009"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="894" name="test_add_incompatible[incompatible_vector_array_pair11]" time="0.00100207328796"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="894" name="test_add_incompatible[incompatible_vector_array_pair12]" time="0.00107908248901"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="894" name="test_add_incompatible[incompatible_vector_array_pair13]" time="0.00105714797974"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="894" name="test_add_incompatible[incompatible_vector_array_pair14]" time="0.00109910964966"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="900" name="test_iadd_incompatible[incompatible_vector_array_pair0]" time="0.000996112823486"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="900" name="test_iadd_incompatible[incompatible_vector_array_pair1]" time="0.000773668289185"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="900" name="test_iadd_incompatible[incompatible_vector_array_pair2]" time="0.00078010559082"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="900" name="test_iadd_incompatible[incompatible_vector_array_pair3]" time="0.000792026519775"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="900" name="test_iadd_incompatible[incompatible_vector_array_pair4]" time="0.000809192657471"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="900" name="test_iadd_incompatible[incompatible_vector_array_pair5]" time="0.000816345214844"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="900" name="test_iadd_incompatible[incompatible_vector_array_pair6]" time="0.000765800476074"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="900" name="test_iadd_incompatible[incompatible_vector_array_pair7]" time="0.00104260444641"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="900" name="test_iadd_incompatible[incompatible_vector_array_pair8]" time="0.000972986221313"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="900" name="test_iadd_incompatible[incompatible_vector_array_pair9]" time="0.00118613243103"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="900" name="test_iadd_incompatible[incompatible_vector_array_pair10]" time="0.000962018966675"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="900" name="test_iadd_incompatible[incompatible_vector_array_pair11]" time="0.00147080421448"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="900" name="test_iadd_incompatible[incompatible_vector_array_pair12]" time="0.0010142326355"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="900" name="test_iadd_incompatible[incompatible_vector_array_pair13]" time="0.000986814498901"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="900" name="test_iadd_incompatible[incompatible_vector_array_pair14]" time="0.00100207328796"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="906" name="test_sub_incompatible[incompatible_vector_array_pair0]" time="0.000801801681519"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="906" name="test_sub_incompatible[incompatible_vector_array_pair1]" time="0.000775098800659"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="906" name="test_sub_incompatible[incompatible_vector_array_pair2]" time="0.00096607208252"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="906" name="test_sub_incompatible[incompatible_vector_array_pair3]" time="0.00075888633728"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="906" name="test_sub_incompatible[incompatible_vector_array_pair4]" time="0.000770807266235"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="906" name="test_sub_incompatible[incompatible_vector_array_pair5]" time="0.00079607963562"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="906" name="test_sub_incompatible[incompatible_vector_array_pair6]" time="0.000900030136108"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="906" name="test_sub_incompatible[incompatible_vector_array_pair7]" time="0.000869750976562"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="906" name="test_sub_incompatible[incompatible_vector_array_pair8]" time="0.00138902664185"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="906" name="test_sub_incompatible[incompatible_vector_array_pair9]" time="0.00159215927124"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="906" name="test_sub_incompatible[incompatible_vector_array_pair10]" time="0.000968933105469"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="906" name="test_sub_incompatible[incompatible_vector_array_pair11]" time="0.0012092590332"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="906" name="test_sub_incompatible[incompatible_vector_array_pair12]" time="0.00103402137756"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="906" name="test_sub_incompatible[incompatible_vector_array_pair13]" time="0.00105810165405"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="906" name="test_sub_incompatible[incompatible_vector_array_pair14]" time="0.00102305412292"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="912" name="test_isub_incompatible[incompatible_vector_array_pair0]" time="0.000755071640015"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="912" name="test_isub_incompatible[incompatible_vector_array_pair1]" time="0.000751972198486"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="912" name="test_isub_incompatible[incompatible_vector_array_pair2]" time="0.00120544433594"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="912" name="test_isub_incompatible[incompatible_vector_array_pair3]" time="0.000816106796265"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="912" name="test_isub_incompatible[incompatible_vector_array_pair4]" time="0.000842809677124"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="912" name="test_isub_incompatible[incompatible_vector_array_pair5]" time="0.00077486038208"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="912" name="test_isub_incompatible[incompatible_vector_array_pair6]" time="0.000799179077148"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="912" name="test_isub_incompatible[incompatible_vector_array_pair7]" time="0.000789165496826"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="912" name="test_isub_incompatible[incompatible_vector_array_pair8]" time="0.00112128257751"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="912" name="test_isub_incompatible[incompatible_vector_array_pair9]" time="0.001060962677"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="912" name="test_isub_incompatible[incompatible_vector_array_pair10]" time="0.000988245010376"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="912" name="test_isub_incompatible[incompatible_vector_array_pair11]" time="0.000886917114258"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="912" name="test_isub_incompatible[incompatible_vector_array_pair12]" time="0.00105118751526"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="912" name="test_isub_incompatible[incompatible_vector_array_pair13]" time="0.00177407264709"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="912" name="test_isub_incompatible[incompatible_vector_array_pair14]" time="0.000975370407104"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[0-vector_array_without_reserve0]" time="0.00113391876221"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[0-vector_array_without_reserve1]" time="0.00108218193054"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[0-vector_array_without_reserve2]" time="0.00111889839172"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[0-vector_array_without_reserve3]" time="0.00109624862671"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[0-vector_array_without_reserve4]" time="0.00144410133362"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[0-vector_array_without_reserve5]" time="0.0011990070343"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[0-vector_array_without_reserve6]" time="0.00129580497742"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[0-vector_array_without_reserve7]" time="0.0011157989502"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[0-vector_array_without_reserve8]" time="0.00127792358398"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[0-vector_array_without_reserve9]" time="0.00191378593445"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[0-vector_array_without_reserve10]" time="0.00137186050415"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[0-vector_array_without_reserve11]" time="0.00134611129761"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[0-vector_array_without_reserve12]" time="0.0013530254364"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[0-vector_array_without_reserve13]" time="0.00134325027466"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[0-vector_array_without_reserve14]" time="0.0015332698822"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[0-vector_array_without_reserve15]" time="0.00142216682434"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[0-vector_array_without_reserve16]" time="0.00143980979919"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[1-vector_array_without_reserve0]" time="0.00115299224854"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[1-vector_array_without_reserve1]" time="0.00120687484741"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[1-vector_array_without_reserve2]" time="0.00118899345398"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[1-vector_array_without_reserve3]" time="0.00146913528442"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[1-vector_array_without_reserve4]" time="0.00118613243103"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[1-vector_array_without_reserve5]" time="0.00119805335999"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[1-vector_array_without_reserve6]" time="0.00122666358948"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[1-vector_array_without_reserve7]" time="0.00123405456543"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[1-vector_array_without_reserve8]" time="0.00176382064819"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[1-vector_array_without_reserve9]" time="0.00201678276062"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[1-vector_array_without_reserve10]" time="0.00150418281555"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[1-vector_array_without_reserve11]" time="0.00139093399048"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[1-vector_array_without_reserve12]" time="0.00150513648987"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[1-vector_array_without_reserve13]" time="0.00134706497192"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[1-vector_array_without_reserve14]" time="0.00144982337952"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[1-vector_array_without_reserve15]" time="0.00171780586243"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[1-vector_array_without_reserve16]" time="0.00147199630737"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[2-vector_array_without_reserve0]" time="0.00115323066711"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[2-vector_array_without_reserve1]" time="0.00113415718079"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[2-vector_array_without_reserve2]" time="0.00125098228455"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[2-vector_array_without_reserve3]" time="0.00129103660583"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[2-vector_array_without_reserve4]" time="0.00148391723633"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[2-vector_array_without_reserve5]" time="0.00142097473145"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[2-vector_array_without_reserve6]" time="0.00122594833374"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[2-vector_array_without_reserve7]" time="0.00119495391846"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[2-vector_array_without_reserve8]" time="0.00181674957275"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[2-vector_array_without_reserve9]" time="0.00191020965576"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[2-vector_array_without_reserve10]" time="0.00144076347351"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[2-vector_array_without_reserve11]" time="0.00183200836182"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[2-vector_array_without_reserve12]" time="0.00152111053467"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[2-vector_array_without_reserve13]" time="0.00129008293152"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[2-vector_array_without_reserve14]" time="0.0014500617981"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[2-vector_array_without_reserve15]" time="0.00148701667786"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="921" name="test_copy_wrong_ind[2-vector_array_without_reserve16]" time="0.00163292884827"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[0-vector_array_without_reserve0]" time="0.00116419792175"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[0-vector_array_without_reserve1]" time="0.00109171867371"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[0-vector_array_without_reserve2]" time="0.00130701065063"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[0-vector_array_without_reserve3]" time="0.00114989280701"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[0-vector_array_without_reserve4]" time="0.00120997428894"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[0-vector_array_without_reserve5]" time="0.00207924842834"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[0-vector_array_without_reserve6]" time="0.00117897987366"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[0-vector_array_without_reserve7]" time="0.00123810768127"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[0-vector_array_without_reserve8]" time="0.00224423408508"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[0-vector_array_without_reserve9]" time="0.00396609306335"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[0-vector_array_without_reserve10]" time="0.00142693519592"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[0-vector_array_without_reserve11]" time="0.00134372711182"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[0-vector_array_without_reserve12]" time="0.00134110450745"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[0-vector_array_without_reserve13]" time="0.00142884254456"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[0-vector_array_without_reserve14]" time="0.00134921073914"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[0-vector_array_without_reserve15]" time="0.00191497802734"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[0-vector_array_without_reserve16]" time="0.00147700309753"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[1-vector_array_without_reserve0]" time="0.00118517875671"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[1-vector_array_without_reserve1]" time="0.00115203857422"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[1-vector_array_without_reserve2]" time="0.00122404098511"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[1-vector_array_without_reserve3]" time="0.00125503540039"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[1-vector_array_without_reserve4]" time="0.0013952255249"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[1-vector_array_without_reserve5]" time="0.00122117996216"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[1-vector_array_without_reserve6]" time="0.0011351108551"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[1-vector_array_without_reserve7]" time="0.001225233078"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[1-vector_array_without_reserve8]" time="0.00259304046631"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[1-vector_array_without_reserve9]" time="0.00429511070251"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[1-vector_array_without_reserve10]" time="0.00145292282104"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[1-vector_array_without_reserve11]" time="0.00138902664185"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[1-vector_array_without_reserve12]" time="0.00158977508545"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[1-vector_array_without_reserve13]" time="0.0014181137085"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[1-vector_array_without_reserve14]" time="0.00154399871826"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[1-vector_array_without_reserve15]" time="0.00180196762085"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[1-vector_array_without_reserve16]" time="0.00158023834229"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[2-vector_array_without_reserve0]" time="0.00123333930969"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[2-vector_array_without_reserve1]" time="0.00120615959167"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[2-vector_array_without_reserve2]" time="0.00125622749329"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[2-vector_array_without_reserve3]" time="0.00120902061462"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[2-vector_array_without_reserve4]" time="0.00153708457947"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[2-vector_array_without_reserve5]" time="0.00137901306152"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[2-vector_array_without_reserve6]" time="0.0011887550354"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[2-vector_array_without_reserve7]" time="0.00134372711182"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[2-vector_array_without_reserve8]" time="0.00263094902039"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[2-vector_array_without_reserve9]" time="0.00426316261292"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[2-vector_array_without_reserve10]" time="0.00150489807129"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[2-vector_array_without_reserve11]" time="0.00147700309753"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[2-vector_array_without_reserve12]" time="0.00158381462097"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[2-vector_array_without_reserve13]" time="0.00136995315552"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[2-vector_array_without_reserve14]" time="0.0014750957489"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[2-vector_array_without_reserve15]" time="0.00185513496399"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="928" name="test_remove_wrong_ind[2-vector_array_without_reserve16]" time="0.00172686576843"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[0-vector_array_without_reserve0]" time="0.00212979316711"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[0-vector_array_without_reserve1]" time="0.00196290016174"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[0-vector_array_without_reserve2]" time="0.00194025039673"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[0-vector_array_without_reserve3]" time="0.00212001800537"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[0-vector_array_without_reserve4]" time="0.00224924087524"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[0-vector_array_without_reserve5]" time="0.00191974639893"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[0-vector_array_without_reserve6]" time="0.00196814537048"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[0-vector_array_without_reserve7]" time="0.0021288394928"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[0-vector_array_without_reserve8]" time="0.00663113594055"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[0-vector_array_without_reserve9]" time="0.0110070705414"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[0-vector_array_without_reserve10]" time="0.00286483764648"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[0-vector_array_without_reserve11]" time="0.00282192230225"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[0-vector_array_without_reserve12]" time="0.00280714035034"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[0-vector_array_without_reserve13]" time="0.00278496742249"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[0-vector_array_without_reserve14]" time="0.00273895263672"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[0-vector_array_without_reserve15]" time="0.00302195549011"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[0-vector_array_without_reserve16]" time="0.0027289390564"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[1-vector_array_without_reserve0]" time="0.00207495689392"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[1-vector_array_without_reserve1]" time="0.00236868858337"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[1-vector_array_without_reserve2]" time="0.00195407867432"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[1-vector_array_without_reserve3]" time="0.00205588340759"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[1-vector_array_without_reserve4]" time="0.00218105316162"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[1-vector_array_without_reserve5]" time="0.00192904472351"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[1-vector_array_without_reserve6]" time="0.00202798843384"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[1-vector_array_without_reserve7]" time="0.00223898887634"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[1-vector_array_without_reserve8]" time="0.00600600242615"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[1-vector_array_without_reserve9]" time="0.0119459629059"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[1-vector_array_without_reserve10]" time="0.00423192977905"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[1-vector_array_without_reserve11]" time="0.0030300617218"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[1-vector_array_without_reserve12]" time="0.00269222259521"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[1-vector_array_without_reserve13]" time="0.00279998779297"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[1-vector_array_without_reserve14]" time="0.00275874137878"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[1-vector_array_without_reserve15]" time="0.0028829574585"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[1-vector_array_without_reserve16]" time="0.0028669834137"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[2-vector_array_without_reserve0]" time="0.00202417373657"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[2-vector_array_without_reserve1]" time="0.00189924240112"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[2-vector_array_without_reserve2]" time="0.00206923484802"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[2-vector_array_without_reserve3]" time="0.00213098526001"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[2-vector_array_without_reserve4]" time="0.00341796875"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[2-vector_array_without_reserve5]" time="0.00186085700989"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[2-vector_array_without_reserve6]" time="0.00168108940125"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[2-vector_array_without_reserve7]" time="0.00188875198364"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[2-vector_array_without_reserve8]" time="0.00609803199768"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[2-vector_array_without_reserve9]" time="0.0110151767731"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[2-vector_array_without_reserve10]" time="0.00254225730896"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[2-vector_array_without_reserve11]" time="0.00291895866394"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[2-vector_array_without_reserve12]" time="0.00273299217224"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[2-vector_array_without_reserve13]" time="0.00256419181824"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[2-vector_array_without_reserve14]" time="0.00300669670105"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[2-vector_array_without_reserve15]" time="0.00304079055786"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="936" name="test_scal_wrong_ind[2-vector_array_without_reserve16]" time="0.00299382209778"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[0-vector_array_without_reserve0]" time="0.00148105621338"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[0-vector_array_without_reserve1]" time="0.0014660358429"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[0-vector_array_without_reserve2]" time="0.00262999534607"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[0-vector_array_without_reserve3]" time="0.0040397644043"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[0-vector_array_without_reserve4]" time="0.00432896614075"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[0-vector_array_without_reserve5]" time="0.00171184539795"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[0-vector_array_without_reserve6]" time="0.00151896476746"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[0-vector_array_without_reserve7]" time="0.0028510093689"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[0-vector_array_without_reserve8]" time="0.0039279460907"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[0-vector_array_without_reserve9]" time="0.00477862358093"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[0-vector_array_without_reserve10]" time="0.0019748210907"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[0-vector_array_without_reserve11]" time="0.00399208068848"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[0-vector_array_without_reserve12]" time="0.00386095046997"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[0-vector_array_without_reserve13]" time="0.00332307815552"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[0-vector_array_without_reserve14]" time="0.00386929512024"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[0-vector_array_without_reserve15]" time="0.00511693954468"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[0-vector_array_without_reserve16]" time="0.00664329528809"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[1-vector_array_without_reserve0]" time="0.00203704833984"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[1-vector_array_without_reserve1]" time="0.0017032623291"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[1-vector_array_without_reserve2]" time="0.00293707847595"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[1-vector_array_without_reserve3]" time="0.00349521636963"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[1-vector_array_without_reserve4]" time="0.00440502166748"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[1-vector_array_without_reserve5]" time="0.00146579742432"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[1-vector_array_without_reserve6]" time="0.00196504592896"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[1-vector_array_without_reserve7]" time="0.00277423858643"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[1-vector_array_without_reserve8]" time="0.00373601913452"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[1-vector_array_without_reserve9]" time="0.00547814369202"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[1-vector_array_without_reserve10]" time="0.00194597244263"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[1-vector_array_without_reserve11]" time="0.00419902801514"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[1-vector_array_without_reserve12]" time="0.00394988059998"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[1-vector_array_without_reserve13]" time="0.0030951499939"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[1-vector_array_without_reserve14]" time="0.00390195846558"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[1-vector_array_without_reserve15]" time="0.00577402114868"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[1-vector_array_without_reserve16]" time="0.00669384002686"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[2-vector_array_without_reserve0]" time="0.00170516967773"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[2-vector_array_without_reserve1]" time="0.00158095359802"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[2-vector_array_without_reserve2]" time="0.00263810157776"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[2-vector_array_without_reserve3]" time="0.00358009338379"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[2-vector_array_without_reserve4]" time="0.00428485870361"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[2-vector_array_without_reserve5]" time="0.00151395797729"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[2-vector_array_without_reserve6]" time="0.00185513496399"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[2-vector_array_without_reserve7]" time="0.00280928611755"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[2-vector_array_without_reserve8]" time="0.00393605232239"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[2-vector_array_without_reserve9]" time="0.00544786453247"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[2-vector_array_without_reserve10]" time="0.00193500518799"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[2-vector_array_without_reserve11]" time="0.00404191017151"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[2-vector_array_without_reserve12]" time="0.00417923927307"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[2-vector_array_without_reserve13]" time="0.00335216522217"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[2-vector_array_without_reserve14]" time="0.00392413139343"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[2-vector_array_without_reserve15]" time="0.00562477111816"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="953" name="test_scal_wrong_coefficients[2-vector_array_without_reserve16]" time="0.00713491439819"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve0]" time="0.00302624702454"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve1]" time="0.00347685813904"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve2]" time="0.0105991363525"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve3]" time="0.0154409408569"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve4]" time="0.0194389820099"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve5]" time="0.0096538066864"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve6]" time="0.00307178497314"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve7]" time="0.00324702262878"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve8]" time="0.0271029472351"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve9]" time="0.0467758178711"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve10]" time="0.141031742096"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve11]" time="0.0101690292358"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve12]" time="0.00452184677124"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve13]" time="0.0117642879486"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve14]" time="0.0123980045319"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve15]" time="0.0214178562164"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve16]" time="0.0294620990753"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve17]" time="0.0399010181427"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve0]" time="0.00465679168701"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve1]" time="0.00348496437073"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve2]" time="0.0106291770935"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve3]" time="0.0141129493713"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve4]" time="0.0198163986206"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve5]" time="0.0100779533386"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve6]" time="0.00293278694153"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve7]" time="0.00318670272827"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve8]" time="0.0267000198364"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve9]" time="0.045459985733"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve10]" time="0.138119220734"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve11]" time="0.00973892211914"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve12]" time="0.00448989868164"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve13]" time="0.0117993354797"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve14]" time="0.0119247436523"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve15]" time="0.0202836990356"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve16]" time="0.0290718078613"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve17]" time="0.0361008644104"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve0]" time="0.00446796417236"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve1]" time="0.00355911254883"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve2]" time="0.00973296165466"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve3]" time="0.0134222507477"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve4]" time="0.0171868801117"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve5]" time="0.00966691970825"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve6]" time="0.00274777412415"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve7]" time="0.00323033332825"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve8]" time="0.0268180370331"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve9]" time="0.0466938018799"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve10]" time="0.140132904053"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve11]" time="0.00979232788086"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve12]" time="0.00454473495483"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve13]" time="0.0113041400909"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve14]" time="0.0114650726318"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve15]" time="0.0199892520905"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve16]" time="0.0287165641785"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve17]" time="0.0375890731812"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve0]" time="0.00470805168152"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve1]" time="0.0034191608429"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve2]" time="0.010434627533"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve3]" time="0.0134654045105"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve4]" time="0.018532037735"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve5]" time="0.00898933410645"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve6]" time="0.00260210037231"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve7]" time="0.00298690795898"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve8]" time="0.0271272659302"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve9]" time="0.0451698303223"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve10]" time="0.136070013046"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve11]" time="0.0102126598358"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve12]" time="0.00473284721375"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve13]" time="0.011491060257"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve14]" time="0.0123379230499"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve15]" time="0.0209429264069"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve16]" time="0.0293889045715"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve17]" time="0.0371739864349"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve0]" time="0.00437164306641"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve1]" time="0.00361204147339"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve2]" time="0.0100200176239"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve3]" time="0.0137312412262"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve4]" time="0.0193350315094"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve5]" time="0.00910615921021"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve6]" time="0.00299072265625"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve7]" time="0.00368714332581"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve8]" time="0.0266790390015"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve9]" time="0.0438590049744"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve10]" time="0.134314060211"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve11]" time="0.0100440979004"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve12]" time="0.00450706481934"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve13]" time="0.0116600990295"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve14]" time="0.0137069225311"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve15]" time="0.0223529338837"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve16]" time="0.0306529998779"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve17]" time="0.0383868217468"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve0]" time="0.00467610359192"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve1]" time="0.00372982025146"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve2]" time="0.0105018615723"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve3]" time="0.0136759281158"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve4]" time="0.018905878067"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve5]" time="0.00936913490295"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve6]" time="0.00266194343567"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve7]" time="0.00327086448669"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve8]" time="0.0258440971375"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve9]" time="0.0453469753265"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve10]" time="0.141505718231"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve11]" time="0.00999093055725"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve12]" time="0.0051257610321"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve13]" time="0.0116801261902"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve14]" time="0.0125937461853"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve15]" time="0.0202238559723"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve16]" time="0.029904127121"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve17]" time="0.0373373031616"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve0]" time="0.00422215461731"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve1]" time="0.00337982177734"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve2]" time="0.0100929737091"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve3]" time="0.0140330791473"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve4]" time="0.0197331905365"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve5]" time="0.00976467132568"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve6]" time="0.00278687477112"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve7]" time="0.00355792045593"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve8]" time="0.0272440910339"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve9]" time="0.0462908744812"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve10]" time="0.136285066605"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve11]" time="0.0102977752686"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve12]" time="0.0045177936554"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve13]" time="0.0114777088165"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve14]" time="0.0120322704315"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve15]" time="0.0212638378143"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve16]" time="0.0305418968201"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve17]" time="0.0375530719757"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve0]" time="0.00462079048157"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve1]" time="0.003338098526"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve2]" time="0.0105850696564"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve3]" time="0.0141723155975"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve4]" time="0.0204567909241"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve5]" time="0.00979781150818"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve6]" time="0.00271892547607"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve7]" time="0.00376486778259"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve8]" time="0.0271711349487"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve9]" time="0.0463812351227"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve10]" time="0.139047861099"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve11]" time="0.0104870796204"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve12]" time="0.00593209266663"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve13]" time="0.0115010738373"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve14]" time="0.0128130912781"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve15]" time="0.0202777385712"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve16]" time="0.0305051803589"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve17]" time="0.0380091667175"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve0]" time="0.00463438034058"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve1]" time="0.00360679626465"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve2]" time="0.010241985321"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve3]" time="0.0140128135681"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve4]" time="0.0193500518799"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve5]" time="0.00942611694336"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve6]" time="0.00244212150574"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve7]" time="0.00322794914246"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve8]" time="0.0262846946716"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve9]" time="0.045389175415"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve10]" time="0.136949062347"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve11]" time="0.0101261138916"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve12]" time="0.00584411621094"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve13]" time="0.0114018917084"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve14]" time="0.0140311717987"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve15]" time="0.0200192928314"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve16]" time="0.0301940441132"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="964" name="test_axpy_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve17]" time="0.0385210514069"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve0]" time="0.00235199928284"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve1]" time="0.00141477584839"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve2]" time="0.00297999382019"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve3]" time="0.00350499153137"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve4]" time="0.00575637817383"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve5]" time="0.00426173210144"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve6]" time="0.00153803825378"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve7]" time="0.00128889083862"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve8]" time="0.00321102142334"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve9]" time="0.00371813774109"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve10]" time="0.00706601142883"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve11]" time="0.00420022010803"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve12]" time="0.00197768211365"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve13]" time="0.00130391120911"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve14]" time="0.00374913215637"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve15]" time="0.00492596626282"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve16]" time="0.00582909584045"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve17]" time="0.0100741386414"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve0]" time="0.00168108940125"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve1]" time="0.00120496749878"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve2]" time="0.00303602218628"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve3]" time="0.00340795516968"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve4]" time="0.00568723678589"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve5]" time="0.0038743019104"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve6]" time="0.00141406059265"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve7]" time="0.00123882293701"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve8]" time="0.00350499153137"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve9]" time="0.00351023674011"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve10]" time="0.00759983062744"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve11]" time="0.0042359828949"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve12]" time="0.00188899040222"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve13]" time="0.00136494636536"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve14]" time="0.00335884094238"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve15]" time="0.005215883255"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve16]" time="0.00555396080017"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve17]" time="0.0102722644806"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve0]" time="0.00161290168762"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve1]" time="0.00114488601685"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve2]" time="0.0032799243927"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve3]" time="0.00357484817505"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve4]" time="0.00579404830933"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve5]" time="0.00427508354187"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve6]" time="0.00155210494995"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve7]" time="0.0010929107666"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve8]" time="0.00377130508423"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve9]" time="0.00399112701416"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve10]" time="0.00876593589783"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve11]" time="0.00426077842712"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve12]" time="0.00199317932129"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve13]" time="0.00169467926025"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve14]" time="0.00373578071594"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve15]" time="0.00484800338745"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve16]" time="0.00579404830933"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve17]" time="0.0110337734222"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve0]" time="0.00150513648987"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve1]" time="0.00104093551636"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve2]" time="0.0030779838562"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve3]" time="0.00352382659912"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve4]" time="0.00576591491699"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve5]" time="0.00436210632324"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve6]" time="0.00154185295105"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve7]" time="0.00105214118958"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve8]" time="0.00340580940247"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve9]" time="0.00434374809265"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve10]" time="0.00738120079041"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve11]" time="0.00446915626526"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve12]" time="0.00206089019775"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve13]" time="0.00138807296753"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve14]" time="0.00371694564819"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve15]" time="0.00462007522583"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve16]" time="0.00540781021118"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve17]" time="0.00983881950378"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve0]" time="0.0017671585083"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve1]" time="0.00110077857971"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve2]" time="0.00306916236877"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve3]" time="0.00325489044189"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve4]" time="0.00551223754883"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve5]" time="0.00392293930054"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve6]" time="0.00171399116516"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve7]" time="0.000983953475952"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve8]" time="0.0032901763916"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve9]" time="0.00390386581421"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve10]" time="0.00698900222778"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve11]" time="0.00415110588074"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve12]" time="0.00199294090271"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve13]" time="0.00131821632385"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve14]" time="0.00380420684814"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve15]" time="0.00504803657532"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve16]" time="0.007239818573"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve17]" time="0.00964188575745"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve0]" time="0.00146508216858"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve1]" time="0.000975847244263"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve2]" time="0.00306987762451"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve3]" time="0.00330805778503"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve4]" time="0.00541806221008"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve5]" time="0.00384068489075"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve6]" time="0.00155377388"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve7]" time="0.000982999801636"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve8]" time="0.00345897674561"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve9]" time="0.00410890579224"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve10]" time="0.00753378868103"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve11]" time="0.00435304641724"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve12]" time="0.0019199848175"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve13]" time="0.00141978263855"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve14]" time="0.00347018241882"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve15]" time="0.00510025024414"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve16]" time="0.00534510612488"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve17]" time="0.00975298881531"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve0]" time="0.00132393836975"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve1]" time="0.000983953475952"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve2]" time="0.00308704376221"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve3]" time="0.00348782539368"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve4]" time="0.00515723228455"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve5]" time="0.00381875038147"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve6]" time="0.00159406661987"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve7]" time="0.00100588798523"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve8]" time="0.00351405143738"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve9]" time="0.00391507148743"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve10]" time="0.00716805458069"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve11]" time="0.00412392616272"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve12]" time="0.00197601318359"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve13]" time="0.00131320953369"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve14]" time="0.00364303588867"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve15]" time="0.00465822219849"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve16]" time="0.00588035583496"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve17]" time="0.010116815567"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve0]" time="0.00160098075867"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve1]" time="0.000988006591797"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve2]" time="0.00304388999939"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve3]" time="0.00373005867004"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve4]" time="0.00563526153564"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve5]" time="0.00429010391235"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve6]" time="0.0015287399292"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve7]" time="0.00103116035461"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve8]" time="0.00328803062439"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve9]" time="0.00502514839172"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve10]" time="0.00751423835754"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve11]" time="0.00430464744568"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve12]" time="0.00193786621094"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve13]" time="0.00131297111511"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve14]" time="0.00375604629517"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve15]" time="0.00497221946716"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve16]" time="0.00587201118469"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve17]" time="0.0108740329742"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve0]" time="0.00151395797729"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve1]" time="0.00100803375244"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve2]" time="0.00339674949646"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve3]" time="0.00337195396423"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve4]" time="0.00536108016968"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve5]" time="0.00380611419678"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve6]" time="0.001633644104"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve7]" time="0.00114870071411"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve8]" time="0.00364208221436"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve9]" time="0.00384187698364"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve10]" time="0.00729012489319"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve11]" time="0.004075050354"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve12]" time="0.00178718566895"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve13]" time="0.00148606300354"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve14]" time="0.00352001190186"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve15]" time="0.00470209121704"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve16]" time="0.00539994239807"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="983" name="test_axpy_wrong_coefficients[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve17]" time="0.0100090503693"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve0]" time="0.00184607505798"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve1]" time="0.00304818153381"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve2]" time="0.00568795204163"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve3]" time="0.0060920715332"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve4]" time="0.00718784332275"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve5]" time="0.00569701194763"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve6]" time="0.00198435783386"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve7]" time="0.0030369758606"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve8]" time="0.0134489536285"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve9]" time="0.0195958614349"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve10]" time="0.0566837787628"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve11]" time="0.00751280784607"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve12]" time="0.00312185287476"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve13]" time="0.00588607788086"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve14]" time="0.00746083259583"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve15]" time="0.00987315177917"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve16]" time="0.0116620063782"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve17]" time="0.0137739181519"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve0]" time="0.00341606140137"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve1]" time="0.00288796424866"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve2]" time="0.00525283813477"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve3]" time="0.00622606277466"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve4]" time="0.00695705413818"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve5]" time="0.00528001785278"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve6]" time="0.00186014175415"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve7]" time="0.00282001495361"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve8]" time="0.0128061771393"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve9]" time="0.0195970535278"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve10]" time="0.0563280582428"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve11]" time="0.00759196281433"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve12]" time="0.00330305099487"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve13]" time="0.00553512573242"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve14]" time="0.00774431228638"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve15]" time="0.00991892814636"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve16]" time="0.0120129585266"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve17]" time="0.0146927833557"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve0]" time="0.00345683097839"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve1]" time="0.00329828262329"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve2]" time="0.00540637969971"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve3]" time="0.00597596168518"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve4]" time="0.00742602348328"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve5]" time="0.00548005104065"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve6]" time="0.00193500518799"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve7]" time="0.00345087051392"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve8]" time="0.0134642124176"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve9]" time="0.0207459926605"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve10]" time="0.0582389831543"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve11]" time="0.0072910785675"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve12]" time="0.00333285331726"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve13]" time="0.00570774078369"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve14]" time="0.00795698165894"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve15]" time="0.0108067989349"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve16]" time="0.0121142864227"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve17]" time="0.0146679878235"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve0]" time="0.00333571434021"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve1]" time="0.00326180458069"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve2]" time="0.00544190406799"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve3]" time="0.00603103637695"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve4]" time="0.00711631774902"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve5]" time="0.0054247379303"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve6]" time="0.00198578834534"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve7]" time="0.00302886962891"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve8]" time="0.0134189128876"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve9]" time="0.0203378200531"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve10]" time="0.057962179184"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve11]" time="0.00734496116638"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve12]" time="0.00306415557861"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve13]" time="0.0061023235321"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve14]" time="0.00764989852905"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve15]" time="0.0101039409637"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve16]" time="0.0122051239014"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve17]" time="0.0141787528992"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve0]" time="0.00341081619263"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve1]" time="0.00337100028992"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve2]" time="0.00532197952271"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve3]" time="0.00625920295715"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve4]" time="0.00737619400024"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve5]" time="0.00544881820679"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve6]" time="0.00189781188965"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve7]" time="0.00330996513367"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve8]" time="0.0133697986603"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve9]" time="0.0208351612091"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve10]" time="0.0571730136871"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve11]" time="0.00763320922852"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve12]" time="0.00322508811951"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve13]" time="0.00627279281616"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve14]" time="0.00827217102051"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve15]" time="0.00959491729736"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve16]" time="0.0118207931519"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve17]" time="0.0145831108093"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve0]" time="0.00344395637512"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve1]" time="0.00495719909668"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve2]" time="0.00530576705933"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve3]" time="0.00625514984131"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve4]" time="0.00763010978699"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve5]" time="0.0054030418396"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve6]" time="0.00196886062622"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve7]" time="0.00308895111084"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve8]" time="0.0131423473358"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve9]" time="0.0185749530792"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve10]" time="0.0556318759918"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve11]" time="0.00733208656311"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve12]" time="0.00312972068787"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve13]" time="0.00591492652893"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve14]" time="0.00749826431274"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve15]" time="0.00975203514099"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve16]" time="0.0120027065277"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve17]" time="0.0144939422607"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve0]" time="0.00323963165283"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve1]" time="0.00353980064392"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve2]" time="0.00512075424194"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve3]" time="0.00592303276062"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve4]" time="0.0070059299469"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve5]" time="0.00516605377197"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve6]" time="0.00187373161316"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve7]" time="0.00328898429871"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve8]" time="0.0128078460693"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve9]" time="0.0203371047974"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve10]" time="0.0566308498383"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve11]" time="0.00713706016541"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve12]" time="0.00321173667908"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve13]" time="0.0058331489563"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve14]" time="0.00738120079041"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve15]" time="0.0104393959045"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve16]" time="0.0121910572052"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve17]" time="0.0146300792694"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve0]" time="0.00351405143738"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve1]" time="0.0033323764801"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve2]" time="0.00660586357117"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve3]" time="0.00637006759644"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve4]" time="0.00739693641663"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve5]" time="0.00562310218811"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve6]" time="0.00206995010376"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve7]" time="0.00340104103088"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve8]" time="0.0135133266449"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve9]" time="0.0191869735718"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve10]" time="0.0581660270691"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve11]" time="0.00748372077942"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve12]" time="0.00329208374023"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve13]" time="0.0058262348175"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve14]" time="0.00802898406982"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve15]" time="0.0102491378784"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve16]" time="0.0120387077332"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve17]" time="0.0141370296478"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve0]" time="0.0032479763031"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve1]" time="0.00327324867249"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve2]" time="0.00513505935669"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve3]" time="0.00611734390259"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve4]" time="0.00710487365723"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve5]" time="0.00525283813477"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve6]" time="0.00186705589294"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve7]" time="0.00272297859192"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve8]" time="0.0130851268768"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve9]" time="0.0202322006226"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve10]" time="0.0570831298828"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve11]" time="0.00745892524719"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve12]" time="0.00331926345825"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve13]" time="0.00612282752991"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve14]" time="0.00808691978455"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve15]" time="0.00977301597595"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve16]" time="0.0119380950928"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="994" name="test_pairwise_dot_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve17]" time="0.0137085914612"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[0-picklable_vector_array_without_reserve0]" time="0.00182604789734"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[0-picklable_vector_array_without_reserve1]" time="0.00313091278076"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[0-picklable_vector_array_without_reserve2]" time="0.0012629032135"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[0-picklable_vector_array_without_reserve3]" time="0.00131630897522"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[0-picklable_vector_array_without_reserve4]" time="0.00120091438293"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[0-picklable_vector_array_without_reserve5]" time="0.00149011611938"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[0-picklable_vector_array_without_reserve6]" time="0.00103974342346"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[0-picklable_vector_array_without_reserve7]" time="0.00155782699585"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[0-picklable_vector_array_without_reserve8]" time="0.00438380241394"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[0-picklable_vector_array_without_reserve9]" time="0.00933122634888"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[0-picklable_vector_array_without_reserve10]" time="0.00167202949524"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[0-picklable_vector_array_without_reserve11]" time="0.00163602828979"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[0-picklable_vector_array_without_reserve12]" time="0.00180268287659"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[0-picklable_vector_array_without_reserve13]" time="0.00141596794128"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[0-picklable_vector_array_without_reserve14]" time="0.00165390968323"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[0-picklable_vector_array_without_reserve15]" time="0.00214767456055"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[0-picklable_vector_array_without_reserve16]" time="0.00174999237061"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[1-picklable_vector_array_without_reserve0]" time="0.00123906135559"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[1-picklable_vector_array_without_reserve1]" time="0.00117206573486"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[1-picklable_vector_array_without_reserve2]" time="0.00123286247253"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[1-picklable_vector_array_without_reserve3]" time="0.0015230178833"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[1-picklable_vector_array_without_reserve4]" time="0.00115704536438"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[1-picklable_vector_array_without_reserve5]" time="0.00108408927917"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[1-picklable_vector_array_without_reserve6]" time="0.0010461807251"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[1-picklable_vector_array_without_reserve7]" time="0.00121307373047"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[1-picklable_vector_array_without_reserve8]" time="0.00601720809937"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[1-picklable_vector_array_without_reserve9]" time="0.0142087936401"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[1-picklable_vector_array_without_reserve10]" time="0.00183200836182"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[1-picklable_vector_array_without_reserve11]" time="0.00167226791382"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[1-picklable_vector_array_without_reserve12]" time="0.00165104866028"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[1-picklable_vector_array_without_reserve13]" time="0.00135016441345"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[1-picklable_vector_array_without_reserve14]" time="0.00166630744934"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[1-picklable_vector_array_without_reserve15]" time="0.00228595733643"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[1-picklable_vector_array_without_reserve16]" time="0.0017569065094"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[2-picklable_vector_array_without_reserve0]" time="0.00123381614685"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[2-picklable_vector_array_without_reserve1]" time="0.00133085250854"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[2-picklable_vector_array_without_reserve2]" time="0.00120186805725"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[2-picklable_vector_array_without_reserve3]" time="0.00149202346802"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[2-picklable_vector_array_without_reserve4]" time="0.00117373466492"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[2-picklable_vector_array_without_reserve5]" time="0.000982761383057"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[2-picklable_vector_array_without_reserve6]" time="0.00112080574036"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[2-picklable_vector_array_without_reserve7]" time="0.00131511688232"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[2-picklable_vector_array_without_reserve8]" time="0.00569319725037"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[2-picklable_vector_array_without_reserve9]" time="0.0147123336792"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[2-picklable_vector_array_without_reserve10]" time="0.00257420539856"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[2-picklable_vector_array_without_reserve11]" time="0.00183010101318"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[2-picklable_vector_array_without_reserve12]" time="0.0014910697937"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[2-picklable_vector_array_without_reserve13]" time="0.00135207176208"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[2-picklable_vector_array_without_reserve14]" time="0.00151205062866"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[2-picklable_vector_array_without_reserve15]" time="0.00219893455505"></testcase><testcase classname="src.pymortests.vectorarray" file="src/pymortests/vectorarray.py" line="1002" name="test_pickle[2-picklable_vector_array_without_reserve16]" time="0.00173997879028"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve0]" time="0.00893592834473"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve1]" time="0.00299096107483"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve2]" time="0.0267241001129"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve3]" time="0.0291109085083"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve4]" time="0.0354189872742"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve5]" time="0.0369007587433"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve6]" time="0.00825500488281"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve7]" time="0.00265312194824"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve8]" time="0.0347661972046"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve9]" time="0.0516409873962"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve10]" time="0.134850978851"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve11]" time="0.041157245636"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve12]" time="0.0271620750427"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve13]" time="0.00699090957642"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve14]" time="0.0382719039917"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve15]" time="0.0595510005951"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve16]" time="0.0642681121826"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve17]" time="0.0855493545532"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve0]" time="0.010675907135"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve1]" time="0.00298118591309"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve2]" time="0.0261552333832"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve3]" time="0.0295941829681"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve4]" time="0.0368149280548"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve5]" time="0.038446187973"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve6]" time="0.00905895233154"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve7]" time="0.00266194343567"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve8]" time="0.0349137783051"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve9]" time="0.0521249771118"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve10]" time="0.137928962708"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve11]" time="0.0418210029602"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve12]" time="0.0269689559937"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve13]" time="0.00713586807251"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve14]" time="0.0377511978149"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve15]" time="0.0577220916748"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve16]" time="0.0651869773865"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve17]" time="0.0853199958801"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve0]" time="0.0109720230103"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve1]" time="0.00429606437683"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve2]" time="0.0254416465759"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve3]" time="0.0295469760895"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve4]" time="0.0367736816406"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve5]" time="0.0386457443237"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve6]" time="0.00925326347351"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve7]" time="0.00254106521606"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve8]" time="0.0356733798981"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve9]" time="0.0526669025421"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve10]" time="0.136528730392"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve11]" time="0.0411067008972"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve12]" time="0.0267708301544"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve13]" time="0.00701117515564"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve14]" time="0.0384178161621"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve15]" time="0.0576910972595"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve16]" time="0.0652318000793"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve17]" time="0.0846898555756"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve0]" time="0.0105369091034"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve1]" time="0.00371313095093"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve2]" time="0.0265965461731"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve3]" time="0.0286538600922"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve4]" time="0.0364937782288"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve5]" time="0.0379180908203"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve6]" time="0.00854992866516"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve7]" time="0.00307440757751"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve8]" time="0.0346019268036"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve9]" time="0.0521881580353"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve10]" time="0.135432004929"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve11]" time="0.0417680740356"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve12]" time="0.0266420841217"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve13]" time="0.00710105895996"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve14]" time="0.0374042987823"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve15]" time="0.0585570335388"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve16]" time="0.0636739730835"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve17]" time="0.0840530395508"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve0]" time="0.0109560489655"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve1]" time="0.00317239761353"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve2]" time="0.0272150039673"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve3]" time="0.0295069217682"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve4]" time="0.0360856056213"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve5]" time="0.0383341312408"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve6]" time="0.00862503051758"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve7]" time="0.00274014472961"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve8]" time="0.0347509384155"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve9]" time="0.0520949363708"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve10]" time="0.138615131378"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve11]" time="0.0429220199585"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve12]" time="0.0267400741577"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve13]" time="0.007319688797"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve14]" time="0.0374662876129"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve15]" time="0.0573990345001"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve16]" time="0.0643367767334"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve17]" time="0.0869450569153"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve0]" time="0.0104279518127"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve1]" time="0.0030951499939"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve2]" time="0.0250420570374"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve3]" time="0.0289421081543"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve4]" time="0.0361409187317"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve5]" time="0.317743778229"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve6]" time="0.00912618637085"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve7]" time="0.00418591499329"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve8]" time="0.0349678993225"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve9]" time="0.0517270565033"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve10]" time="0.138350725174"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve11]" time="0.0416247844696"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve12]" time="0.0270640850067"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve13]" time="0.0070481300354"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve14]" time="0.0371990203857"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve15]" time="0.0582549571991"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve16]" time="0.0643091201782"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve17]" time="0.0859658718109"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve0]" time="0.0106348991394"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve1]" time="0.00439977645874"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve2]" time="0.025958776474"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve3]" time="0.0296969413757"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve4]" time="0.0374848842621"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve5]" time="0.0371289253235"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve6]" time="0.00901031494141"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve7]" time="0.00254511833191"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve8]" time="0.0357129573822"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve9]" time="0.0526061058044"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve10]" time="0.135458946228"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve11]" time="0.0409207344055"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve12]" time="0.0266010761261"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve13]" time="0.00687193870544"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve14]" time="0.0375170707703"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve15]" time="0.058849811554"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve16]" time="0.0655539035797"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve17]" time="0.0846071243286"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve0]" time="0.0109300613403"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve1]" time="0.00470280647278"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve2]" time="0.0261750221252"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve3]" time="0.0294787883759"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve4]" time="0.0362343788147"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve5]" time="0.0387799739838"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve6]" time="0.00860285758972"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve7]" time="0.00280499458313"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve8]" time="0.0346341133118"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve9]" time="0.0514671802521"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve10]" time="0.136485099792"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve11]" time="0.0421781539917"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve12]" time="0.0267729759216"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve13]" time="0.00752687454224"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve14]" time="0.0373167991638"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve15]" time="0.0581440925598"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve16]" time="0.0640077590942"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve17]" time="0.0844528675079"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve0]" time="0.010324716568"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve1]" time="0.00315928459167"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve2]" time="0.0265793800354"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve3]" time="0.0292603969574"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve4]" time="0.037269115448"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve5]" time="0.0383787155151"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve6]" time="0.00908279418945"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve7]" time="0.0026171207428"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve8]" time="0.0357530117035"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve9]" time="0.0518660545349"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve10]" time="0.137786149979"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve11]" time="0.040842294693"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve12]" time="0.025955915451"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve13]" time="0.00712203979492"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve14]" time="0.0382800102234"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve15]" time="0.0588939189911"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve16]" time="0.0627181529999"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="21" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve17]" time="0.081613779068"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products0]" time="0.0833270549774"><system-err>18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 L2ProductP1: Integrate the products of the shape functions on each element
18:10 L2ProductP1: Determine global dofs ...
18:10 L2ProductP1: Boundary treatment ...
18:10 L2ProductP1: Assemble system matrix ...
18:10 L2ProductP1: Integrate the products of the shape functions on each element
18:10 L2ProductP1: Determine global dofs ...
18:10 L2ProductP1: Boundary treatment ...
18:10 L2ProductP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products1]" time="0.0784220695496"><system-err>18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 L2ProductP1: Integrate the products of the shape functions on each element
18:10 L2ProductP1: Determine global dofs ...
18:10 L2ProductP1: Boundary treatment ...
18:10 L2ProductP1: Assemble system matrix ...
18:10 L2ProductP1: Integrate the products of the shape functions on each element
18:10 L2ProductP1: Determine global dofs ...
18:10 L2ProductP1: Boundary treatment ...
18:10 L2ProductP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products2]" time="0.084043264389"><system-err>18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 L2ProductP1: Integrate the products of the shape functions on each element
18:10 L2ProductP1: Determine global dofs ...
18:10 L2ProductP1: Boundary treatment ...
18:10 L2ProductP1: Assemble system matrix ...
18:10 L2ProductP1: Integrate the products of the shape functions on each element
18:10 L2ProductP1: Determine global dofs ...
18:10 L2ProductP1: Boundary treatment ...
18:10 L2ProductP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products3]" time="0.081757068634"><system-err>18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 L2ProductP1: Integrate the products of the shape functions on each element
18:10 L2ProductP1: Determine global dofs ...
18:10 L2ProductP1: Boundary treatment ...
18:10 L2ProductP1: Assemble system matrix ...
18:10 L2ProductP1: Integrate the products of the shape functions on each element
18:10 L2ProductP1: Determine global dofs ...
18:10 L2ProductP1: Boundary treatment ...
18:10 L2ProductP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products4]" time="0.0836970806122"><system-err>18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 L2ProductP1: Integrate the products of the shape functions on each element
18:10 L2ProductP1: Determine global dofs ...
18:10 L2ProductP1: Boundary treatment ...
18:10 L2ProductP1: Assemble system matrix ...
18:10 L2ProductP1: Integrate the products of the shape functions on each element
18:10 L2ProductP1: Determine global dofs ...
18:10 L2ProductP1: Boundary treatment ...
18:10 L2ProductP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products5]" time="0.0813648700714"><system-err>18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 L2ProductP1: Integrate the products of the shape functions on each element
18:10 L2ProductP1: Determine global dofs ...
18:10 L2ProductP1: Boundary treatment ...
18:10 L2ProductP1: Assemble system matrix ...
18:10 L2ProductP1: Integrate the products of the shape functions on each element
18:10 L2ProductP1: Determine global dofs ...
18:10 L2ProductP1: Boundary treatment ...
18:10 L2ProductP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products6]" time="0.0834312438965"><system-err>18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
18:10 L2ProductP1: Integrate the products of the shape functions on each element
18:10 L2ProductP1: Determine global dofs ...
18:10 L2ProductP1: Boundary treatment ...
18:10 L2ProductP1: Assemble system matrix ...
18:10 L2ProductP1: Integrate the products of the shape functions on each element
18:10 L2ProductP1: Determine global dofs ...
18:10 L2ProductP1: Boundary treatment ...
18:10 L2ProductP1: Assemble system matrix ...
18:10 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:10 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:10 DiffusionOperatorP1: Determine global dofs ...
18:10 DiffusionOperatorP1: Boundary treatment ...
18:10 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products7]" time="0.0793809890747"><system-err>18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 L2ProductP1: Integrate the products of the shape functions on each element
18:11 L2ProductP1: Determine global dofs ...
18:11 L2ProductP1: Boundary treatment ...
18:11 L2ProductP1: Assemble system matrix ...
18:11 L2ProductP1: Integrate the products of the shape functions on each element
18:11 L2ProductP1: Determine global dofs ...
18:11 L2ProductP1: Boundary treatment ...
18:11 L2ProductP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products8]" time="0.0835471153259"><system-err>18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 L2ProductP1: Integrate the products of the shape functions on each element
18:11 L2ProductP1: Determine global dofs ...
18:11 L2ProductP1: Boundary treatment ...
18:11 L2ProductP1: Assemble system matrix ...
18:11 L2ProductP1: Integrate the products of the shape functions on each element
18:11 L2ProductP1: Determine global dofs ...
18:11 L2ProductP1: Boundary treatment ...
18:11 L2ProductP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products9]" time="0.0804603099823"><system-err>18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 L2ProductP1: Integrate the products of the shape functions on each element
18:11 L2ProductP1: Determine global dofs ...
18:11 L2ProductP1: Boundary treatment ...
18:11 L2ProductP1: Assemble system matrix ...
18:11 L2ProductP1: Integrate the products of the shape functions on each element
18:11 L2ProductP1: Determine global dofs ...
18:11 L2ProductP1: Boundary treatment ...
18:11 L2ProductP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products10]" time="0.0833916664124"><system-err>18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 L2ProductP1: Integrate the products of the shape functions on each element
18:11 L2ProductP1: Determine global dofs ...
18:11 L2ProductP1: Boundary treatment ...
18:11 L2ProductP1: Assemble system matrix ...
18:11 L2ProductP1: Integrate the products of the shape functions on each element
18:11 L2ProductP1: Determine global dofs ...
18:11 L2ProductP1: Boundary treatment ...
18:11 L2ProductP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products11]" time="0.0784878730774"><system-err>18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 L2ProductP1: Integrate the products of the shape functions on each element
18:11 L2ProductP1: Determine global dofs ...
18:11 L2ProductP1: Boundary treatment ...
18:11 L2ProductP1: Assemble system matrix ...
18:11 L2ProductP1: Integrate the products of the shape functions on each element
18:11 L2ProductP1: Determine global dofs ...
18:11 L2ProductP1: Boundary treatment ...
18:11 L2ProductP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products12]" time="0.0798559188843"><system-err>18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 L2ProductP1: Integrate the products of the shape functions on each element
18:11 L2ProductP1: Determine global dofs ...
18:11 L2ProductP1: Boundary treatment ...
18:11 L2ProductP1: Assemble system matrix ...
18:11 L2ProductP1: Integrate the products of the shape functions on each element
18:11 L2ProductP1: Determine global dofs ...
18:11 L2ProductP1: Boundary treatment ...
18:11 L2ProductP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products13]" time="0.0753788948059"><system-err>18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 L2ProductP1: Integrate the products of the shape functions on each element
18:11 L2ProductP1: Determine global dofs ...
18:11 L2ProductP1: Boundary treatment ...
18:11 L2ProductP1: Assemble system matrix ...
18:11 L2ProductP1: Integrate the products of the shape functions on each element
18:11 L2ProductP1: Determine global dofs ...
18:11 L2ProductP1: Boundary treatment ...
18:11 L2ProductP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products14]" time="0.0827486515045"><system-err>18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 L2ProductP1: Integrate the products of the shape functions on each element
18:11 L2ProductP1: Determine global dofs ...
18:11 L2ProductP1: Boundary treatment ...
18:11 L2ProductP1: Assemble system matrix ...
18:11 L2ProductP1: Integrate the products of the shape functions on each element
18:11 L2ProductP1: Determine global dofs ...
18:11 L2ProductP1: Boundary treatment ...
18:11 L2ProductP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products15]" time="0.0783317089081"><system-err>18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 L2ProductP1: Integrate the products of the shape functions on each element
18:11 L2ProductP1: Determine global dofs ...
18:11 L2ProductP1: Boundary treatment ...
18:11 L2ProductP1: Assemble system matrix ...
18:11 L2ProductP1: Integrate the products of the shape functions on each element
18:11 L2ProductP1: Determine global dofs ...
18:11 L2ProductP1: Boundary treatment ...
18:11 L2ProductP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products16]" time="0.0742919445038"><system-err>18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 L2ProductP1: Integrate the products of the shape functions on each element
18:11 L2ProductP1: Determine global dofs ...
18:11 L2ProductP1: Boundary treatment ...
18:11 L2ProductP1: Assemble system matrix ...
18:11 L2ProductP1: Integrate the products of the shape functions on each element
18:11 L2ProductP1: Determine global dofs ...
18:11 L2ProductP1: Boundary treatment ...
18:11 L2ProductP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products17]" time="0.0702841281891"><system-err>18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 L2ProductP1: Integrate the products of the shape functions on each element
18:11 L2ProductP1: Determine global dofs ...
18:11 L2ProductP1: Boundary treatment ...
18:11 L2ProductP1: Assemble system matrix ...
18:11 L2ProductP1: Integrate the products of the shape functions on each element
18:11 L2ProductP1: Determine global dofs ...
18:11 L2ProductP1: Boundary treatment ...
18:11 L2ProductP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products18]" time="0.0826768875122"><system-err>18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
18:11 L2ProductP1: Integrate the products of the shape functions on each element
18:11 L2ProductP1: Determine global dofs ...
18:11 L2ProductP1: Boundary treatment ...
18:11 L2ProductP1: Assemble system matrix ...
18:11 L2ProductP1: Integrate the products of the shape functions on each element
18:11 L2ProductP1: Determine global dofs ...
18:11 L2ProductP1: Boundary treatment ...
18:11 L2ProductP1: Assemble system matrix ...
18:11 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:11 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:11 DiffusionOperatorP1: Determine global dofs ...
18:11 DiffusionOperatorP1: Boundary treatment ...
18:11 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products19]" time="0.0781230926514"><system-err>18:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:12 DiffusionOperatorP1: Determine global dofs ...
18:12 DiffusionOperatorP1: Boundary treatment ...
18:12 DiffusionOperatorP1: Assemble system matrix ...
18:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:12 DiffusionOperatorP1: Determine global dofs ...
18:12 DiffusionOperatorP1: Boundary treatment ...
18:12 DiffusionOperatorP1: Assemble system matrix ...
18:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:12 DiffusionOperatorP1: Determine global dofs ...
18:12 DiffusionOperatorP1: Boundary treatment ...
18:12 DiffusionOperatorP1: Assemble system matrix ...
18:12 L2ProductP1: Integrate the products of the shape functions on each element
18:12 L2ProductP1: Determine global dofs ...
18:12 L2ProductP1: Boundary treatment ...
18:12 L2ProductP1: Assemble system matrix ...
18:12 L2ProductP1: Integrate the products of the shape functions on each element
18:12 L2ProductP1: Determine global dofs ...
18:12 L2ProductP1: Boundary treatment ...
18:12 L2ProductP1: Assemble system matrix ...
18:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:12 DiffusionOperatorP1: Determine global dofs ...
18:12 DiffusionOperatorP1: Boundary treatment ...
18:12 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products20]" time="0.0818440914154"><system-err>18:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:12 DiffusionOperatorP1: Determine global dofs ...
18:12 DiffusionOperatorP1: Boundary treatment ...
18:12 DiffusionOperatorP1: Assemble system matrix ...
18:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:12 DiffusionOperatorP1: Determine global dofs ...
18:12 DiffusionOperatorP1: Boundary treatment ...
18:12 DiffusionOperatorP1: Assemble system matrix ...
18:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:12 DiffusionOperatorP1: Determine global dofs ...
18:12 DiffusionOperatorP1: Boundary treatment ...
18:12 DiffusionOperatorP1: Assemble system matrix ...
18:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:12 DiffusionOperatorP1: Determine global dofs ...
18:12 DiffusionOperatorP1: Boundary treatment ...
18:12 DiffusionOperatorP1: Assemble system matrix ...
18:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:12 DiffusionOperatorP1: Determine global dofs ...
18:12 DiffusionOperatorP1: Boundary treatment ...
18:12 DiffusionOperatorP1: Assemble system matrix ...
18:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:12 DiffusionOperatorP1: Determine global dofs ...
18:12 DiffusionOperatorP1: Boundary treatment ...
18:12 DiffusionOperatorP1: Assemble system matrix ...
18:12 L2ProductP1: Integrate the products of the shape functions on each element
18:12 L2ProductP1: Determine global dofs ...
18:12 L2ProductP1: Boundary treatment ...
18:12 L2ProductP1: Assemble system matrix ...
18:12 L2ProductP1: Integrate the products of the shape functions on each element
18:12 L2ProductP1: Determine global dofs ...
18:12 L2ProductP1: Boundary treatment ...
18:12 L2ProductP1: Assemble system matrix ...
18:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:12 DiffusionOperatorP1: Determine global dofs ...
18:12 DiffusionOperatorP1: Boundary treatment ...
18:12 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products21]" time="0.0800421237946"><system-err>18:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:12 DiffusionOperatorP1: Determine global dofs ...
18:12 DiffusionOperatorP1: Boundary treatment ...
18:12 DiffusionOperatorP1: Assemble system matrix ...
18:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:12 DiffusionOperatorP1: Determine global dofs ...
18:12 DiffusionOperatorP1: Boundary treatment ...
18:12 DiffusionOperatorP1: Assemble system matrix ...
18:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:12 DiffusionOperatorP1: Determine global dofs ...
18:12 DiffusionOperatorP1: Boundary treatment ...
18:12 DiffusionOperatorP1: Assemble system matrix ...
18:12 L2ProductP1: Integrate the products of the shape functions on each element
18:12 L2ProductP1: Determine global dofs ...
18:12 L2ProductP1: Boundary treatment ...
18:12 L2ProductP1: Assemble system matrix ...
18:12 L2ProductP1: Integrate the products of the shape functions on each element
18:12 L2ProductP1: Determine global dofs ...
18:12 L2ProductP1: Boundary treatment ...
18:12 L2ProductP1: Assemble system matrix ...
18:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:12 DiffusionOperatorP1: Determine global dofs ...
18:12 DiffusionOperatorP1: Boundary treatment ...
18:12 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products22]" time="0.084988117218"><system-err>18:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:12 DiffusionOperatorP1: Determine global dofs ...
18:12 DiffusionOperatorP1: Boundary treatment ...
18:12 DiffusionOperatorP1: Assemble system matrix ...
18:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:12 DiffusionOperatorP1: Determine global dofs ...
18:12 DiffusionOperatorP1: Boundary treatment ...
18:12 DiffusionOperatorP1: Assemble system matrix ...
18:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:12 DiffusionOperatorP1: Determine global dofs ...
18:12 DiffusionOperatorP1: Boundary treatment ...
18:12 DiffusionOperatorP1: Assemble system matrix ...
18:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:12 DiffusionOperatorP1: Determine global dofs ...
18:12 DiffusionOperatorP1: Boundary treatment ...
18:12 DiffusionOperatorP1: Assemble system matrix ...
18:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:12 DiffusionOperatorP1: Determine global dofs ...
18:12 DiffusionOperatorP1: Boundary treatment ...
18:12 DiffusionOperatorP1: Assemble system matrix ...
18:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:12 DiffusionOperatorP1: Determine global dofs ...
18:12 DiffusionOperatorP1: Boundary treatment ...
18:12 DiffusionOperatorP1: Assemble system matrix ...
18:12 L2ProductP1: Integrate the products of the shape functions on each element
18:12 L2ProductP1: Determine global dofs ...
18:12 L2ProductP1: Boundary treatment ...
18:12 L2ProductP1: Assemble system matrix ...
18:12 L2ProductP1: Integrate the products of the shape functions on each element
18:12 L2ProductP1: Determine global dofs ...
18:12 L2ProductP1: Boundary treatment ...
18:12 L2ProductP1: Assemble system matrix ...
18:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:12 DiffusionOperatorP1: Determine global dofs ...
18:12 DiffusionOperatorP1: Boundary treatment ...
18:12 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products23]" time="0.0810389518738"><system-err>18:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:12 DiffusionOperatorP1: Determine global dofs ...
18:12 DiffusionOperatorP1: Boundary treatment ...
18:12 DiffusionOperatorP1: Assemble system matrix ...
18:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:12 DiffusionOperatorP1: Determine global dofs ...
18:12 DiffusionOperatorP1: Boundary treatment ...
18:12 DiffusionOperatorP1: Assemble system matrix ...
18:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:12 DiffusionOperatorP1: Determine global dofs ...
18:12 DiffusionOperatorP1: Boundary treatment ...
18:12 DiffusionOperatorP1: Assemble system matrix ...
18:12 L2ProductP1: Integrate the products of the shape functions on each element
18:12 L2ProductP1: Determine global dofs ...
18:12 L2ProductP1: Boundary treatment ...
18:12 L2ProductP1: Assemble system matrix ...
18:12 L2ProductP1: Integrate the products of the shape functions on each element
18:12 L2ProductP1: Determine global dofs ...
18:12 L2ProductP1: Boundary treatment ...
18:12 L2ProductP1: Assemble system matrix ...
18:12 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:12 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:12 DiffusionOperatorP1: Determine global dofs ...
18:12 DiffusionOperatorP1: Boundary treatment ...
18:12 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products24]" time="0.0848350524902"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products25]" time="0.0832538604736"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products26]" time="0.085780620575"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products27]" time="0.0766980648041"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products28]" time="0.0781400203705"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products29]" time="0.0766031742096"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products30]" time="0.0772020816803"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products31]" time="0.0780458450317"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products32]" time="0.206893205643"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products33]" time="0.170380830765"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="39" name="test_almost_equal_product[operator_with_arrays_and_products34]" time="0.0857689380646"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[0-vector_array_without_reserve0]" time="0.0278730392456"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[0-vector_array_without_reserve1]" time="0.0298731327057"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[0-vector_array_without_reserve2]" time="0.168751001358"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[0-vector_array_without_reserve3]" time="0.247325181961"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[0-vector_array_without_reserve4]" time="0.0397298336029"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[0-vector_array_without_reserve5]" time="0.0157198905945"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[0-vector_array_without_reserve6]" time="0.0151629447937"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[0-vector_array_without_reserve7]" time="0.235661029816"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[0-vector_array_without_reserve8]" time="1.45904779434"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[0-vector_array_without_reserve9]" time="0.239177942276"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[0-vector_array_without_reserve10]" time="0.0389592647552"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[0-vector_array_without_reserve11]" time="0.454872131348"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[0-vector_array_without_reserve12]" time="0.0654149055481"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[0-vector_array_without_reserve13]" time="0.251806974411"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[0-vector_array_without_reserve14]" time="0.439242124557"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[0-vector_array_without_reserve15]" time="0.713452100754"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[0-vector_array_without_reserve16]" time="0.766544818878"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[1-vector_array_without_reserve0]" time="0.0190558433533"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[1-vector_array_without_reserve1]" time="0.0202569961548"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[1-vector_array_without_reserve2]" time="0.158692121506"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[1-vector_array_without_reserve3]" time="0.246907711029"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[1-vector_array_without_reserve4]" time="0.0411670207977"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[1-vector_array_without_reserve5]" time="0.0155389308929"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[1-vector_array_without_reserve6]" time="0.0155348777771"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[1-vector_array_without_reserve7]" time="0.23854470253"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[1-vector_array_without_reserve8]" time="1.44700217247"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[1-vector_array_without_reserve9]" time="0.236804008484"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[1-vector_array_without_reserve10]" time="0.0391108989716"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[1-vector_array_without_reserve11]" time="0.449407815933"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[1-vector_array_without_reserve12]" time="0.0650029182434"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[1-vector_array_without_reserve13]" time="0.250591039658"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[1-vector_array_without_reserve14]" time="0.443419218063"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[1-vector_array_without_reserve15]" time="0.698945999146"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[1-vector_array_without_reserve16]" time="0.770277023315"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[2-vector_array_without_reserve0]" time="0.0204617977142"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[2-vector_array_without_reserve1]" time="0.0217068195343"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[2-vector_array_without_reserve2]" time="0.167125701904"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[2-vector_array_without_reserve3]" time="0.245287895203"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[2-vector_array_without_reserve4]" time="0.0400698184967"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[2-vector_array_without_reserve5]" time="0.0155687332153"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[2-vector_array_without_reserve6]" time="0.0152442455292"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[2-vector_array_without_reserve7]" time="0.237793684006"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[2-vector_array_without_reserve8]" time="1.4767241478"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[2-vector_array_without_reserve9]" time="0.239459037781"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[2-vector_array_without_reserve10]" time="0.0387020111084"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[2-vector_array_without_reserve11]" time="0.461406946182"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[2-vector_array_without_reserve12]" time="0.067195892334"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[2-vector_array_without_reserve13]" time="0.254585981369"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[2-vector_array_without_reserve14]" time="0.444469928741"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[2-vector_array_without_reserve15]" time="0.703739881516"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="62" name="test_almost_equal_self[2-vector_array_without_reserve16]" time="0.7716319561"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products0]" time="0.329198122025"><system-err>18:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:29 DiffusionOperatorP1: Determine global dofs ...
18:29 DiffusionOperatorP1: Boundary treatment ...
18:29 DiffusionOperatorP1: Assemble system matrix ...
18:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:29 DiffusionOperatorP1: Determine global dofs ...
18:29 DiffusionOperatorP1: Boundary treatment ...
18:29 DiffusionOperatorP1: Assemble system matrix ...
18:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:29 DiffusionOperatorP1: Determine global dofs ...
18:29 DiffusionOperatorP1: Boundary treatment ...
18:29 DiffusionOperatorP1: Assemble system matrix ...
18:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:29 DiffusionOperatorP1: Determine global dofs ...
18:29 DiffusionOperatorP1: Boundary treatment ...
18:29 DiffusionOperatorP1: Assemble system matrix ...
18:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:29 DiffusionOperatorP1: Determine global dofs ...
18:29 DiffusionOperatorP1: Boundary treatment ...
18:29 DiffusionOperatorP1: Assemble system matrix ...
18:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:29 DiffusionOperatorP1: Determine global dofs ...
18:29 DiffusionOperatorP1: Boundary treatment ...
18:29 DiffusionOperatorP1: Assemble system matrix ...
18:29 L2ProductP1: Integrate the products of the shape functions on each element
18:29 L2ProductP1: Determine global dofs ...
18:29 L2ProductP1: Boundary treatment ...
18:29 L2ProductP1: Assemble system matrix ...
18:29 L2ProductP1: Integrate the products of the shape functions on each element
18:29 L2ProductP1: Determine global dofs ...
18:29 L2ProductP1: Boundary treatment ...
18:29 L2ProductP1: Assemble system matrix ...
18:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:29 DiffusionOperatorP1: Determine global dofs ...
18:29 DiffusionOperatorP1: Boundary treatment ...
18:29 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products1]" time="0.335516214371"><system-err>18:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:29 DiffusionOperatorP1: Determine global dofs ...
18:29 DiffusionOperatorP1: Boundary treatment ...
18:29 DiffusionOperatorP1: Assemble system matrix ...
18:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:29 DiffusionOperatorP1: Determine global dofs ...
18:29 DiffusionOperatorP1: Boundary treatment ...
18:29 DiffusionOperatorP1: Assemble system matrix ...
18:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:29 DiffusionOperatorP1: Determine global dofs ...
18:29 DiffusionOperatorP1: Boundary treatment ...
18:29 DiffusionOperatorP1: Assemble system matrix ...
18:29 L2ProductP1: Integrate the products of the shape functions on each element
18:29 L2ProductP1: Determine global dofs ...
18:29 L2ProductP1: Boundary treatment ...
18:29 L2ProductP1: Assemble system matrix ...
18:29 L2ProductP1: Integrate the products of the shape functions on each element
18:29 L2ProductP1: Determine global dofs ...
18:29 L2ProductP1: Boundary treatment ...
18:29 L2ProductP1: Assemble system matrix ...
18:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:29 DiffusionOperatorP1: Determine global dofs ...
18:29 DiffusionOperatorP1: Boundary treatment ...
18:29 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products2]" time="0.333495855331"><system-err>18:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:29 DiffusionOperatorP1: Determine global dofs ...
18:29 DiffusionOperatorP1: Boundary treatment ...
18:29 DiffusionOperatorP1: Assemble system matrix ...
18:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:29 DiffusionOperatorP1: Determine global dofs ...
18:29 DiffusionOperatorP1: Boundary treatment ...
18:29 DiffusionOperatorP1: Assemble system matrix ...
18:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:29 DiffusionOperatorP1: Determine global dofs ...
18:29 DiffusionOperatorP1: Boundary treatment ...
18:29 DiffusionOperatorP1: Assemble system matrix ...
18:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:29 DiffusionOperatorP1: Determine global dofs ...
18:29 DiffusionOperatorP1: Boundary treatment ...
18:29 DiffusionOperatorP1: Assemble system matrix ...
18:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:29 DiffusionOperatorP1: Determine global dofs ...
18:29 DiffusionOperatorP1: Boundary treatment ...
18:29 DiffusionOperatorP1: Assemble system matrix ...
18:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:29 DiffusionOperatorP1: Determine global dofs ...
18:29 DiffusionOperatorP1: Boundary treatment ...
18:29 DiffusionOperatorP1: Assemble system matrix ...
18:29 L2ProductP1: Integrate the products of the shape functions on each element
18:29 L2ProductP1: Determine global dofs ...
18:29 L2ProductP1: Boundary treatment ...
18:29 L2ProductP1: Assemble system matrix ...
18:29 L2ProductP1: Integrate the products of the shape functions on each element
18:29 L2ProductP1: Determine global dofs ...
18:29 L2ProductP1: Boundary treatment ...
18:29 L2ProductP1: Assemble system matrix ...
18:29 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:29 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:29 DiffusionOperatorP1: Determine global dofs ...
18:29 DiffusionOperatorP1: Boundary treatment ...
18:29 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products3]" time="0.339276790619"><system-err>18:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:30 DiffusionOperatorP1: Determine global dofs ...
18:30 DiffusionOperatorP1: Boundary treatment ...
18:30 DiffusionOperatorP1: Assemble system matrix ...
18:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:30 DiffusionOperatorP1: Determine global dofs ...
18:30 DiffusionOperatorP1: Boundary treatment ...
18:30 DiffusionOperatorP1: Assemble system matrix ...
18:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:30 DiffusionOperatorP1: Determine global dofs ...
18:30 DiffusionOperatorP1: Boundary treatment ...
18:30 DiffusionOperatorP1: Assemble system matrix ...
18:30 L2ProductP1: Integrate the products of the shape functions on each element
18:30 L2ProductP1: Determine global dofs ...
18:30 L2ProductP1: Boundary treatment ...
18:30 L2ProductP1: Assemble system matrix ...
18:30 L2ProductP1: Integrate the products of the shape functions on each element
18:30 L2ProductP1: Determine global dofs ...
18:30 L2ProductP1: Boundary treatment ...
18:30 L2ProductP1: Assemble system matrix ...
18:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:30 DiffusionOperatorP1: Determine global dofs ...
18:30 DiffusionOperatorP1: Boundary treatment ...
18:30 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products4]" time="0.331121206284"><system-err>18:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:30 DiffusionOperatorP1: Determine global dofs ...
18:30 DiffusionOperatorP1: Boundary treatment ...
18:30 DiffusionOperatorP1: Assemble system matrix ...
18:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:30 DiffusionOperatorP1: Determine global dofs ...
18:30 DiffusionOperatorP1: Boundary treatment ...
18:30 DiffusionOperatorP1: Assemble system matrix ...
18:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:30 DiffusionOperatorP1: Determine global dofs ...
18:30 DiffusionOperatorP1: Boundary treatment ...
18:30 DiffusionOperatorP1: Assemble system matrix ...
18:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:30 DiffusionOperatorP1: Determine global dofs ...
18:30 DiffusionOperatorP1: Boundary treatment ...
18:30 DiffusionOperatorP1: Assemble system matrix ...
18:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:30 DiffusionOperatorP1: Determine global dofs ...
18:30 DiffusionOperatorP1: Boundary treatment ...
18:30 DiffusionOperatorP1: Assemble system matrix ...
18:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:30 DiffusionOperatorP1: Determine global dofs ...
18:30 DiffusionOperatorP1: Boundary treatment ...
18:30 DiffusionOperatorP1: Assemble system matrix ...
18:30 L2ProductP1: Integrate the products of the shape functions on each element
18:30 L2ProductP1: Determine global dofs ...
18:30 L2ProductP1: Boundary treatment ...
18:30 L2ProductP1: Assemble system matrix ...
18:30 L2ProductP1: Integrate the products of the shape functions on each element
18:30 L2ProductP1: Determine global dofs ...
18:30 L2ProductP1: Boundary treatment ...
18:30 L2ProductP1: Assemble system matrix ...
18:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:30 DiffusionOperatorP1: Determine global dofs ...
18:30 DiffusionOperatorP1: Boundary treatment ...
18:30 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products5]" time="0.339174985886"><system-err>18:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:30 DiffusionOperatorP1: Determine global dofs ...
18:30 DiffusionOperatorP1: Boundary treatment ...
18:30 DiffusionOperatorP1: Assemble system matrix ...
18:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:30 DiffusionOperatorP1: Determine global dofs ...
18:30 DiffusionOperatorP1: Boundary treatment ...
18:30 DiffusionOperatorP1: Assemble system matrix ...
18:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:30 DiffusionOperatorP1: Determine global dofs ...
18:30 DiffusionOperatorP1: Boundary treatment ...
18:30 DiffusionOperatorP1: Assemble system matrix ...
18:30 L2ProductP1: Integrate the products of the shape functions on each element
18:30 L2ProductP1: Determine global dofs ...
18:30 L2ProductP1: Boundary treatment ...
18:30 L2ProductP1: Assemble system matrix ...
18:30 L2ProductP1: Integrate the products of the shape functions on each element
18:30 L2ProductP1: Determine global dofs ...
18:30 L2ProductP1: Boundary treatment ...
18:30 L2ProductP1: Assemble system matrix ...
18:30 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:30 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:30 DiffusionOperatorP1: Determine global dofs ...
18:30 DiffusionOperatorP1: Boundary treatment ...
18:30 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products6]" time="0.333150148392"><system-err>18:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:31 DiffusionOperatorP1: Determine global dofs ...
18:31 DiffusionOperatorP1: Boundary treatment ...
18:31 DiffusionOperatorP1: Assemble system matrix ...
18:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:31 DiffusionOperatorP1: Determine global dofs ...
18:31 DiffusionOperatorP1: Boundary treatment ...
18:31 DiffusionOperatorP1: Assemble system matrix ...
18:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:31 DiffusionOperatorP1: Determine global dofs ...
18:31 DiffusionOperatorP1: Boundary treatment ...
18:31 DiffusionOperatorP1: Assemble system matrix ...
18:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:31 DiffusionOperatorP1: Determine global dofs ...
18:31 DiffusionOperatorP1: Boundary treatment ...
18:31 DiffusionOperatorP1: Assemble system matrix ...
18:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:31 DiffusionOperatorP1: Determine global dofs ...
18:31 DiffusionOperatorP1: Boundary treatment ...
18:31 DiffusionOperatorP1: Assemble system matrix ...
18:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:31 DiffusionOperatorP1: Determine global dofs ...
18:31 DiffusionOperatorP1: Boundary treatment ...
18:31 DiffusionOperatorP1: Assemble system matrix ...
18:31 L2ProductP1: Integrate the products of the shape functions on each element
18:31 L2ProductP1: Determine global dofs ...
18:31 L2ProductP1: Boundary treatment ...
18:31 L2ProductP1: Assemble system matrix ...
18:31 L2ProductP1: Integrate the products of the shape functions on each element
18:31 L2ProductP1: Determine global dofs ...
18:31 L2ProductP1: Boundary treatment ...
18:31 L2ProductP1: Assemble system matrix ...
18:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:31 DiffusionOperatorP1: Determine global dofs ...
18:31 DiffusionOperatorP1: Boundary treatment ...
18:31 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products7]" time="0.329143762589"><system-err>18:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:31 DiffusionOperatorP1: Determine global dofs ...
18:31 DiffusionOperatorP1: Boundary treatment ...
18:31 DiffusionOperatorP1: Assemble system matrix ...
18:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:31 DiffusionOperatorP1: Determine global dofs ...
18:31 DiffusionOperatorP1: Boundary treatment ...
18:31 DiffusionOperatorP1: Assemble system matrix ...
18:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:31 DiffusionOperatorP1: Determine global dofs ...
18:31 DiffusionOperatorP1: Boundary treatment ...
18:31 DiffusionOperatorP1: Assemble system matrix ...
18:31 L2ProductP1: Integrate the products of the shape functions on each element
18:31 L2ProductP1: Determine global dofs ...
18:31 L2ProductP1: Boundary treatment ...
18:31 L2ProductP1: Assemble system matrix ...
18:31 L2ProductP1: Integrate the products of the shape functions on each element
18:31 L2ProductP1: Determine global dofs ...
18:31 L2ProductP1: Boundary treatment ...
18:31 L2ProductP1: Assemble system matrix ...
18:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:31 DiffusionOperatorP1: Determine global dofs ...
18:31 DiffusionOperatorP1: Boundary treatment ...
18:31 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products8]" time="0.329983711243"><system-err>18:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:31 DiffusionOperatorP1: Determine global dofs ...
18:31 DiffusionOperatorP1: Boundary treatment ...
18:31 DiffusionOperatorP1: Assemble system matrix ...
18:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:31 DiffusionOperatorP1: Determine global dofs ...
18:31 DiffusionOperatorP1: Boundary treatment ...
18:31 DiffusionOperatorP1: Assemble system matrix ...
18:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:31 DiffusionOperatorP1: Determine global dofs ...
18:31 DiffusionOperatorP1: Boundary treatment ...
18:31 DiffusionOperatorP1: Assemble system matrix ...
18:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:31 DiffusionOperatorP1: Determine global dofs ...
18:31 DiffusionOperatorP1: Boundary treatment ...
18:31 DiffusionOperatorP1: Assemble system matrix ...
18:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:31 DiffusionOperatorP1: Determine global dofs ...
18:31 DiffusionOperatorP1: Boundary treatment ...
18:31 DiffusionOperatorP1: Assemble system matrix ...
18:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:31 DiffusionOperatorP1: Determine global dofs ...
18:31 DiffusionOperatorP1: Boundary treatment ...
18:31 DiffusionOperatorP1: Assemble system matrix ...
18:31 L2ProductP1: Integrate the products of the shape functions on each element
18:31 L2ProductP1: Determine global dofs ...
18:31 L2ProductP1: Boundary treatment ...
18:31 L2ProductP1: Assemble system matrix ...
18:31 L2ProductP1: Integrate the products of the shape functions on each element
18:31 L2ProductP1: Determine global dofs ...
18:31 L2ProductP1: Boundary treatment ...
18:31 L2ProductP1: Assemble system matrix ...
18:31 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:31 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:31 DiffusionOperatorP1: Determine global dofs ...
18:31 DiffusionOperatorP1: Boundary treatment ...
18:31 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products9]" time="0.333055973053"><system-err>18:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:32 DiffusionOperatorP1: Determine global dofs ...
18:32 DiffusionOperatorP1: Boundary treatment ...
18:32 DiffusionOperatorP1: Assemble system matrix ...
18:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:32 DiffusionOperatorP1: Determine global dofs ...
18:32 DiffusionOperatorP1: Boundary treatment ...
18:32 DiffusionOperatorP1: Assemble system matrix ...
18:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:32 DiffusionOperatorP1: Determine global dofs ...
18:32 DiffusionOperatorP1: Boundary treatment ...
18:32 DiffusionOperatorP1: Assemble system matrix ...
18:32 L2ProductP1: Integrate the products of the shape functions on each element
18:32 L2ProductP1: Determine global dofs ...
18:32 L2ProductP1: Boundary treatment ...
18:32 L2ProductP1: Assemble system matrix ...
18:32 L2ProductP1: Integrate the products of the shape functions on each element
18:32 L2ProductP1: Determine global dofs ...
18:32 L2ProductP1: Boundary treatment ...
18:32 L2ProductP1: Assemble system matrix ...
18:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:32 DiffusionOperatorP1: Determine global dofs ...
18:32 DiffusionOperatorP1: Boundary treatment ...
18:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products10]" time="0.338333845139"><system-err>18:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:32 DiffusionOperatorP1: Determine global dofs ...
18:32 DiffusionOperatorP1: Boundary treatment ...
18:32 DiffusionOperatorP1: Assemble system matrix ...
18:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:32 DiffusionOperatorP1: Determine global dofs ...
18:32 DiffusionOperatorP1: Boundary treatment ...
18:32 DiffusionOperatorP1: Assemble system matrix ...
18:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:32 DiffusionOperatorP1: Determine global dofs ...
18:32 DiffusionOperatorP1: Boundary treatment ...
18:32 DiffusionOperatorP1: Assemble system matrix ...
18:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:32 DiffusionOperatorP1: Determine global dofs ...
18:32 DiffusionOperatorP1: Boundary treatment ...
18:32 DiffusionOperatorP1: Assemble system matrix ...
18:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:32 DiffusionOperatorP1: Determine global dofs ...
18:32 DiffusionOperatorP1: Boundary treatment ...
18:32 DiffusionOperatorP1: Assemble system matrix ...
18:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:32 DiffusionOperatorP1: Determine global dofs ...
18:32 DiffusionOperatorP1: Boundary treatment ...
18:32 DiffusionOperatorP1: Assemble system matrix ...
18:32 L2ProductP1: Integrate the products of the shape functions on each element
18:32 L2ProductP1: Determine global dofs ...
18:32 L2ProductP1: Boundary treatment ...
18:32 L2ProductP1: Assemble system matrix ...
18:32 L2ProductP1: Integrate the products of the shape functions on each element
18:32 L2ProductP1: Determine global dofs ...
18:32 L2ProductP1: Boundary treatment ...
18:32 L2ProductP1: Assemble system matrix ...
18:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:32 DiffusionOperatorP1: Determine global dofs ...
18:32 DiffusionOperatorP1: Boundary treatment ...
18:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products11]" time="0.336688995361"><system-err>18:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:32 DiffusionOperatorP1: Determine global dofs ...
18:32 DiffusionOperatorP1: Boundary treatment ...
18:32 DiffusionOperatorP1: Assemble system matrix ...
18:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:32 DiffusionOperatorP1: Determine global dofs ...
18:32 DiffusionOperatorP1: Boundary treatment ...
18:32 DiffusionOperatorP1: Assemble system matrix ...
18:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:32 DiffusionOperatorP1: Determine global dofs ...
18:32 DiffusionOperatorP1: Boundary treatment ...
18:32 DiffusionOperatorP1: Assemble system matrix ...
18:32 L2ProductP1: Integrate the products of the shape functions on each element
18:32 L2ProductP1: Determine global dofs ...
18:32 L2ProductP1: Boundary treatment ...
18:32 L2ProductP1: Assemble system matrix ...
18:32 L2ProductP1: Integrate the products of the shape functions on each element
18:32 L2ProductP1: Determine global dofs ...
18:32 L2ProductP1: Boundary treatment ...
18:32 L2ProductP1: Assemble system matrix ...
18:32 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:32 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:32 DiffusionOperatorP1: Determine global dofs ...
18:32 DiffusionOperatorP1: Boundary treatment ...
18:32 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products12]" time="0.311494112015"><system-err>18:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:33 DiffusionOperatorP1: Determine global dofs ...
18:33 DiffusionOperatorP1: Boundary treatment ...
18:33 DiffusionOperatorP1: Assemble system matrix ...
18:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:33 DiffusionOperatorP1: Determine global dofs ...
18:33 DiffusionOperatorP1: Boundary treatment ...
18:33 DiffusionOperatorP1: Assemble system matrix ...
18:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:33 DiffusionOperatorP1: Determine global dofs ...
18:33 DiffusionOperatorP1: Boundary treatment ...
18:33 DiffusionOperatorP1: Assemble system matrix ...
18:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:33 DiffusionOperatorP1: Determine global dofs ...
18:33 DiffusionOperatorP1: Boundary treatment ...
18:33 DiffusionOperatorP1: Assemble system matrix ...
18:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:33 DiffusionOperatorP1: Determine global dofs ...
18:33 DiffusionOperatorP1: Boundary treatment ...
18:33 DiffusionOperatorP1: Assemble system matrix ...
18:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:33 DiffusionOperatorP1: Determine global dofs ...
18:33 DiffusionOperatorP1: Boundary treatment ...
18:33 DiffusionOperatorP1: Assemble system matrix ...
18:33 L2ProductP1: Integrate the products of the shape functions on each element
18:33 L2ProductP1: Determine global dofs ...
18:33 L2ProductP1: Boundary treatment ...
18:33 L2ProductP1: Assemble system matrix ...
18:33 L2ProductP1: Integrate the products of the shape functions on each element
18:33 L2ProductP1: Determine global dofs ...
18:33 L2ProductP1: Boundary treatment ...
18:33 L2ProductP1: Assemble system matrix ...
18:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:33 DiffusionOperatorP1: Determine global dofs ...
18:33 DiffusionOperatorP1: Boundary treatment ...
18:33 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products13]" time="0.308891296387"><system-err>18:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:33 DiffusionOperatorP1: Determine global dofs ...
18:33 DiffusionOperatorP1: Boundary treatment ...
18:33 DiffusionOperatorP1: Assemble system matrix ...
18:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:33 DiffusionOperatorP1: Determine global dofs ...
18:33 DiffusionOperatorP1: Boundary treatment ...
18:33 DiffusionOperatorP1: Assemble system matrix ...
18:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:33 DiffusionOperatorP1: Determine global dofs ...
18:33 DiffusionOperatorP1: Boundary treatment ...
18:33 DiffusionOperatorP1: Assemble system matrix ...
18:33 L2ProductP1: Integrate the products of the shape functions on each element
18:33 L2ProductP1: Determine global dofs ...
18:33 L2ProductP1: Boundary treatment ...
18:33 L2ProductP1: Assemble system matrix ...
18:33 L2ProductP1: Integrate the products of the shape functions on each element
18:33 L2ProductP1: Determine global dofs ...
18:33 L2ProductP1: Boundary treatment ...
18:33 L2ProductP1: Assemble system matrix ...
18:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:33 DiffusionOperatorP1: Determine global dofs ...
18:33 DiffusionOperatorP1: Boundary treatment ...
18:33 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products14]" time="0.331449985504"><system-err>18:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:33 DiffusionOperatorP1: Determine global dofs ...
18:33 DiffusionOperatorP1: Boundary treatment ...
18:33 DiffusionOperatorP1: Assemble system matrix ...
18:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:33 DiffusionOperatorP1: Determine global dofs ...
18:33 DiffusionOperatorP1: Boundary treatment ...
18:33 DiffusionOperatorP1: Assemble system matrix ...
18:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:33 DiffusionOperatorP1: Determine global dofs ...
18:33 DiffusionOperatorP1: Boundary treatment ...
18:33 DiffusionOperatorP1: Assemble system matrix ...
18:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:33 DiffusionOperatorP1: Determine global dofs ...
18:33 DiffusionOperatorP1: Boundary treatment ...
18:33 DiffusionOperatorP1: Assemble system matrix ...
18:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:33 DiffusionOperatorP1: Determine global dofs ...
18:33 DiffusionOperatorP1: Boundary treatment ...
18:33 DiffusionOperatorP1: Assemble system matrix ...
18:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:33 DiffusionOperatorP1: Determine global dofs ...
18:33 DiffusionOperatorP1: Boundary treatment ...
18:33 DiffusionOperatorP1: Assemble system matrix ...
18:33 L2ProductP1: Integrate the products of the shape functions on each element
18:33 L2ProductP1: Determine global dofs ...
18:33 L2ProductP1: Boundary treatment ...
18:33 L2ProductP1: Assemble system matrix ...
18:33 L2ProductP1: Integrate the products of the shape functions on each element
18:33 L2ProductP1: Determine global dofs ...
18:33 L2ProductP1: Boundary treatment ...
18:33 L2ProductP1: Assemble system matrix ...
18:33 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:33 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:33 DiffusionOperatorP1: Determine global dofs ...
18:33 DiffusionOperatorP1: Boundary treatment ...
18:33 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products15]" time="0.336003065109"><system-err>18:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:34 DiffusionOperatorP1: Determine global dofs ...
18:34 DiffusionOperatorP1: Boundary treatment ...
18:34 DiffusionOperatorP1: Assemble system matrix ...
18:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:34 DiffusionOperatorP1: Determine global dofs ...
18:34 DiffusionOperatorP1: Boundary treatment ...
18:34 DiffusionOperatorP1: Assemble system matrix ...
18:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:34 DiffusionOperatorP1: Determine global dofs ...
18:34 DiffusionOperatorP1: Boundary treatment ...
18:34 DiffusionOperatorP1: Assemble system matrix ...
18:34 L2ProductP1: Integrate the products of the shape functions on each element
18:34 L2ProductP1: Determine global dofs ...
18:34 L2ProductP1: Boundary treatment ...
18:34 L2ProductP1: Assemble system matrix ...
18:34 L2ProductP1: Integrate the products of the shape functions on each element
18:34 L2ProductP1: Determine global dofs ...
18:34 L2ProductP1: Boundary treatment ...
18:34 L2ProductP1: Assemble system matrix ...
18:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:34 DiffusionOperatorP1: Determine global dofs ...
18:34 DiffusionOperatorP1: Boundary treatment ...
18:34 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products16]" time="0.287315130234"><system-err>18:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:34 DiffusionOperatorP1: Determine global dofs ...
18:34 DiffusionOperatorP1: Boundary treatment ...
18:34 DiffusionOperatorP1: Assemble system matrix ...
18:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:34 DiffusionOperatorP1: Determine global dofs ...
18:34 DiffusionOperatorP1: Boundary treatment ...
18:34 DiffusionOperatorP1: Assemble system matrix ...
18:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:34 DiffusionOperatorP1: Determine global dofs ...
18:34 DiffusionOperatorP1: Boundary treatment ...
18:34 DiffusionOperatorP1: Assemble system matrix ...
18:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:34 DiffusionOperatorP1: Determine global dofs ...
18:34 DiffusionOperatorP1: Boundary treatment ...
18:34 DiffusionOperatorP1: Assemble system matrix ...
18:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:34 DiffusionOperatorP1: Determine global dofs ...
18:34 DiffusionOperatorP1: Boundary treatment ...
18:34 DiffusionOperatorP1: Assemble system matrix ...
18:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:34 DiffusionOperatorP1: Determine global dofs ...
18:34 DiffusionOperatorP1: Boundary treatment ...
18:34 DiffusionOperatorP1: Assemble system matrix ...
18:34 L2ProductP1: Integrate the products of the shape functions on each element
18:34 L2ProductP1: Determine global dofs ...
18:34 L2ProductP1: Boundary treatment ...
18:34 L2ProductP1: Assemble system matrix ...
18:34 L2ProductP1: Integrate the products of the shape functions on each element
18:34 L2ProductP1: Determine global dofs ...
18:34 L2ProductP1: Boundary treatment ...
18:34 L2ProductP1: Assemble system matrix ...
18:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:34 DiffusionOperatorP1: Determine global dofs ...
18:34 DiffusionOperatorP1: Boundary treatment ...
18:34 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products17]" time="0.281818151474"><system-err>18:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:34 DiffusionOperatorP1: Determine global dofs ...
18:34 DiffusionOperatorP1: Boundary treatment ...
18:34 DiffusionOperatorP1: Assemble system matrix ...
18:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:34 DiffusionOperatorP1: Determine global dofs ...
18:34 DiffusionOperatorP1: Boundary treatment ...
18:34 DiffusionOperatorP1: Assemble system matrix ...
18:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:34 DiffusionOperatorP1: Determine global dofs ...
18:34 DiffusionOperatorP1: Boundary treatment ...
18:34 DiffusionOperatorP1: Assemble system matrix ...
18:34 L2ProductP1: Integrate the products of the shape functions on each element
18:34 L2ProductP1: Determine global dofs ...
18:34 L2ProductP1: Boundary treatment ...
18:34 L2ProductP1: Assemble system matrix ...
18:34 L2ProductP1: Integrate the products of the shape functions on each element
18:34 L2ProductP1: Determine global dofs ...
18:34 L2ProductP1: Boundary treatment ...
18:34 L2ProductP1: Assemble system matrix ...
18:34 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:34 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:34 DiffusionOperatorP1: Determine global dofs ...
18:34 DiffusionOperatorP1: Boundary treatment ...
18:34 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products18]" time="0.333154678345"><system-err>18:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:35 DiffusionOperatorP1: Determine global dofs ...
18:35 DiffusionOperatorP1: Boundary treatment ...
18:35 DiffusionOperatorP1: Assemble system matrix ...
18:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:35 DiffusionOperatorP1: Determine global dofs ...
18:35 DiffusionOperatorP1: Boundary treatment ...
18:35 DiffusionOperatorP1: Assemble system matrix ...
18:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:35 DiffusionOperatorP1: Determine global dofs ...
18:35 DiffusionOperatorP1: Boundary treatment ...
18:35 DiffusionOperatorP1: Assemble system matrix ...
18:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:35 DiffusionOperatorP1: Determine global dofs ...
18:35 DiffusionOperatorP1: Boundary treatment ...
18:35 DiffusionOperatorP1: Assemble system matrix ...
18:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:35 DiffusionOperatorP1: Determine global dofs ...
18:35 DiffusionOperatorP1: Boundary treatment ...
18:35 DiffusionOperatorP1: Assemble system matrix ...
18:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:35 DiffusionOperatorP1: Determine global dofs ...
18:35 DiffusionOperatorP1: Boundary treatment ...
18:35 DiffusionOperatorP1: Assemble system matrix ...
18:35 L2ProductP1: Integrate the products of the shape functions on each element
18:35 L2ProductP1: Determine global dofs ...
18:35 L2ProductP1: Boundary treatment ...
18:35 L2ProductP1: Assemble system matrix ...
18:35 L2ProductP1: Integrate the products of the shape functions on each element
18:35 L2ProductP1: Determine global dofs ...
18:35 L2ProductP1: Boundary treatment ...
18:35 L2ProductP1: Assemble system matrix ...
18:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:35 DiffusionOperatorP1: Determine global dofs ...
18:35 DiffusionOperatorP1: Boundary treatment ...
18:35 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products19]" time="0.330136299133"><system-err>18:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:35 DiffusionOperatorP1: Determine global dofs ...
18:35 DiffusionOperatorP1: Boundary treatment ...
18:35 DiffusionOperatorP1: Assemble system matrix ...
18:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:35 DiffusionOperatorP1: Determine global dofs ...
18:35 DiffusionOperatorP1: Boundary treatment ...
18:35 DiffusionOperatorP1: Assemble system matrix ...
18:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:35 DiffusionOperatorP1: Determine global dofs ...
18:35 DiffusionOperatorP1: Boundary treatment ...
18:35 DiffusionOperatorP1: Assemble system matrix ...
18:35 L2ProductP1: Integrate the products of the shape functions on each element
18:35 L2ProductP1: Determine global dofs ...
18:35 L2ProductP1: Boundary treatment ...
18:35 L2ProductP1: Assemble system matrix ...
18:35 L2ProductP1: Integrate the products of the shape functions on each element
18:35 L2ProductP1: Determine global dofs ...
18:35 L2ProductP1: Boundary treatment ...
18:35 L2ProductP1: Assemble system matrix ...
18:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:35 DiffusionOperatorP1: Determine global dofs ...
18:35 DiffusionOperatorP1: Boundary treatment ...
18:35 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products20]" time="0.327425956726"><system-err>18:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:35 DiffusionOperatorP1: Determine global dofs ...
18:35 DiffusionOperatorP1: Boundary treatment ...
18:35 DiffusionOperatorP1: Assemble system matrix ...
18:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:35 DiffusionOperatorP1: Determine global dofs ...
18:35 DiffusionOperatorP1: Boundary treatment ...
18:35 DiffusionOperatorP1: Assemble system matrix ...
18:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:35 DiffusionOperatorP1: Determine global dofs ...
18:35 DiffusionOperatorP1: Boundary treatment ...
18:35 DiffusionOperatorP1: Assemble system matrix ...
18:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:35 DiffusionOperatorP1: Determine global dofs ...
18:35 DiffusionOperatorP1: Boundary treatment ...
18:35 DiffusionOperatorP1: Assemble system matrix ...
18:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:35 DiffusionOperatorP1: Determine global dofs ...
18:35 DiffusionOperatorP1: Boundary treatment ...
18:35 DiffusionOperatorP1: Assemble system matrix ...
18:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:35 DiffusionOperatorP1: Determine global dofs ...
18:35 DiffusionOperatorP1: Boundary treatment ...
18:35 DiffusionOperatorP1: Assemble system matrix ...
18:35 L2ProductP1: Integrate the products of the shape functions on each element
18:35 L2ProductP1: Determine global dofs ...
18:35 L2ProductP1: Boundary treatment ...
18:35 L2ProductP1: Assemble system matrix ...
18:35 L2ProductP1: Integrate the products of the shape functions on each element
18:35 L2ProductP1: Determine global dofs ...
18:35 L2ProductP1: Boundary treatment ...
18:35 L2ProductP1: Assemble system matrix ...
18:35 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:35 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:35 DiffusionOperatorP1: Determine global dofs ...
18:35 DiffusionOperatorP1: Boundary treatment ...
18:35 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products21]" time="0.330326795578"><system-err>18:36 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:36 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:36 DiffusionOperatorP1: Determine global dofs ...
18:36 DiffusionOperatorP1: Boundary treatment ...
18:36 DiffusionOperatorP1: Assemble system matrix ...
18:36 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:36 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:36 DiffusionOperatorP1: Determine global dofs ...
18:36 DiffusionOperatorP1: Boundary treatment ...
18:36 DiffusionOperatorP1: Assemble system matrix ...
18:36 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:36 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:36 DiffusionOperatorP1: Determine global dofs ...
18:36 DiffusionOperatorP1: Boundary treatment ...
18:36 DiffusionOperatorP1: Assemble system matrix ...
18:36 L2ProductP1: Integrate the products of the shape functions on each element
18:36 L2ProductP1: Determine global dofs ...
18:36 L2ProductP1: Boundary treatment ...
18:36 L2ProductP1: Assemble system matrix ...
18:36 L2ProductP1: Integrate the products of the shape functions on each element
18:36 L2ProductP1: Determine global dofs ...
18:36 L2ProductP1: Boundary treatment ...
18:36 L2ProductP1: Assemble system matrix ...
18:36 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:36 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:36 DiffusionOperatorP1: Determine global dofs ...
18:36 DiffusionOperatorP1: Boundary treatment ...
18:36 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products22]" time="0.326157808304"><system-err>18:36 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:36 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:36 DiffusionOperatorP1: Determine global dofs ...
18:36 DiffusionOperatorP1: Boundary treatment ...
18:36 DiffusionOperatorP1: Assemble system matrix ...
18:36 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:36 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:36 DiffusionOperatorP1: Determine global dofs ...
18:36 DiffusionOperatorP1: Boundary treatment ...
18:36 DiffusionOperatorP1: Assemble system matrix ...
18:36 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:36 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:36 DiffusionOperatorP1: Determine global dofs ...
18:36 DiffusionOperatorP1: Boundary treatment ...
18:36 DiffusionOperatorP1: Assemble system matrix ...
18:36 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:36 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:36 DiffusionOperatorP1: Determine global dofs ...
18:36 DiffusionOperatorP1: Boundary treatment ...
18:36 DiffusionOperatorP1: Assemble system matrix ...
18:36 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:36 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:36 DiffusionOperatorP1: Determine global dofs ...
18:36 DiffusionOperatorP1: Boundary treatment ...
18:36 DiffusionOperatorP1: Assemble system matrix ...
18:36 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:36 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:36 DiffusionOperatorP1: Determine global dofs ...
18:36 DiffusionOperatorP1: Boundary treatment ...
18:36 DiffusionOperatorP1: Assemble system matrix ...
18:36 L2ProductP1: Integrate the products of the shape functions on each element
18:36 L2ProductP1: Determine global dofs ...
18:36 L2ProductP1: Boundary treatment ...
18:36 L2ProductP1: Assemble system matrix ...
18:36 L2ProductP1: Integrate the products of the shape functions on each element
18:36 L2ProductP1: Determine global dofs ...
18:36 L2ProductP1: Boundary treatment ...
18:36 L2ProductP1: Assemble system matrix ...
18:36 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:36 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:36 DiffusionOperatorP1: Determine global dofs ...
18:36 DiffusionOperatorP1: Boundary treatment ...
18:36 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products23]" time="0.327053070068"><system-err>18:36 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:36 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:36 DiffusionOperatorP1: Determine global dofs ...
18:36 DiffusionOperatorP1: Boundary treatment ...
18:36 DiffusionOperatorP1: Assemble system matrix ...
18:36 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:36 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:36 DiffusionOperatorP1: Determine global dofs ...
18:36 DiffusionOperatorP1: Boundary treatment ...
18:36 DiffusionOperatorP1: Assemble system matrix ...
18:36 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:36 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:36 DiffusionOperatorP1: Determine global dofs ...
18:36 DiffusionOperatorP1: Boundary treatment ...
18:36 DiffusionOperatorP1: Assemble system matrix ...
18:36 L2ProductP1: Integrate the products of the shape functions on each element
18:36 L2ProductP1: Determine global dofs ...
18:36 L2ProductP1: Boundary treatment ...
18:36 L2ProductP1: Assemble system matrix ...
18:36 L2ProductP1: Integrate the products of the shape functions on each element
18:36 L2ProductP1: Determine global dofs ...
18:36 L2ProductP1: Boundary treatment ...
18:36 L2ProductP1: Assemble system matrix ...
18:36 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:36 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:36 DiffusionOperatorP1: Determine global dofs ...
18:36 DiffusionOperatorP1: Boundary treatment ...
18:36 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products24]" time="0.470054149628"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products25]" time="0.470860004425"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products26]" time="0.466202020645"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products27]" time="0.300854206085"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products28]" time="0.303480148315"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products29]" time="0.309261083603"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products30]" time="0.308543920517"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products31]" time="0.303742170334"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products32]" time="0.91522693634"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products33]" time="0.716897964478"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="102" name="test_almost_equal_self_product[operator_with_arrays_and_products34]" time="0.468945980072"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="155" name="test_almost_equal_incompatible[incompatible_vector_array_pair0]" time="0.00626492500305"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="155" name="test_almost_equal_incompatible[incompatible_vector_array_pair1]" time="0.00167727470398"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="155" name="test_almost_equal_incompatible[incompatible_vector_array_pair2]" time="0.0102159976959"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="155" name="test_almost_equal_incompatible[incompatible_vector_array_pair3]" time="0.00809812545776"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="155" name="test_almost_equal_incompatible[incompatible_vector_array_pair4]" time="0.00846576690674"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="155" name="test_almost_equal_incompatible[incompatible_vector_array_pair5]" time="0.00378108024597"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="155" name="test_almost_equal_incompatible[incompatible_vector_array_pair6]" time="0.00153684616089"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="155" name="test_almost_equal_incompatible[incompatible_vector_array_pair7]" time="0.0099081993103"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="155" name="test_almost_equal_incompatible[incompatible_vector_array_pair8]" time="0.0203108787537"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="155" name="test_almost_equal_incompatible[incompatible_vector_array_pair9]" time="0.0330851078033"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="155" name="test_almost_equal_incompatible[incompatible_vector_array_pair10]" time="0.00731611251831"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="155" name="test_almost_equal_incompatible[incompatible_vector_array_pair11]" time="0.00157189369202"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="155" name="test_almost_equal_incompatible[incompatible_vector_array_pair12]" time="0.0157570838928"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="155" name="test_almost_equal_incompatible[incompatible_vector_array_pair13]" time="0.0113637447357"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="155" name="test_almost_equal_incompatible[incompatible_vector_array_pair14]" time="0.0137827396393"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve0]" time="0.00515389442444"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve1]" time="0.00323700904846"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve2]" time="0.0055239200592"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve3]" time="0.00794410705566"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve4]" time="0.00779819488525"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve5]" time="0.00593113899231"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve6]" time="0.00307011604309"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve7]" time="0.00307106971741"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve8]" time="0.0168929100037"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve9]" time="0.0345010757446"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve10]" time="0.115303993225"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve11]" time="0.00881028175354"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve12]" time="0.00684690475464"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve13]" time="0.00949001312256"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve14]" time="0.00821113586426"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve15]" time="0.00950574874878"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve16]" time="0.0142052173615"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve17]" time="0.0143971443176"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve0]" time="0.00518107414246"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve1]" time="0.00348615646362"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve2]" time="0.00561499595642"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve3]" time="0.00828981399536"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve4]" time="0.00816130638123"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve5]" time="0.00590705871582"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve6]" time="0.00319600105286"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve7]" time="0.00325512886047"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve8]" time="0.0174057483673"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve9]" time="0.0356757640839"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve10]" time="0.115965127945"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve11]" time="0.00894498825073"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve12]" time="0.00683403015137"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve13]" time="0.00978016853333"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve14]" time="0.0078649520874"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve15]" time="0.00915813446045"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve16]" time="0.0135610103607"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve17]" time="0.014310836792"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve0]" time="0.00517630577087"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve1]" time="0.00334310531616"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve2]" time="0.00556778907776"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve3]" time="0.00826716423035"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve4]" time="0.00805306434631"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve5]" time="0.0061399936676"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve6]" time="0.00335955619812"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve7]" time="0.00326609611511"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve8]" time="0.0174219608307"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve9]" time="0.035059928894"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve10]" time="0.115931987762"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve11]" time="0.00862097740173"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve12]" time="0.00522923469543"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve13]" time="0.0110251903534"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve14]" time="0.00788116455078"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve15]" time="0.0092339515686"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve16]" time="0.0136370658875"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve17]" time="0.0157611370087"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve0]" time="0.00520205497742"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve1]" time="0.00346708297729"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve2]" time="0.00753116607666"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve3]" time="0.00774812698364"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve4]" time="0.00823998451233"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve5]" time="0.00584721565247"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve6]" time="0.0032057762146"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve7]" time="0.0033130645752"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve8]" time="0.0178370475769"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve9]" time="0.0368571281433"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve10]" time="0.112430810928"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve11]" time="0.0084400177002"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve12]" time="0.00530338287354"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve13]" time="0.00929379463196"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve14]" time="0.00761675834656"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve15]" time="0.00938987731934"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve16]" time="0.0140147209167"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve17]" time="0.0158360004425"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve0]" time="0.00521087646484"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve1]" time="0.00326013565063"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve2]" time="0.0059449672699"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve3]" time="0.00860190391541"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve4]" time="0.00813817977905"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve5]" time="0.00602006912231"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve6]" time="0.00318193435669"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve7]" time="0.00325703620911"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve8]" time="0.0175948143005"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve9]" time="0.0368301868439"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve10]" time="0.117151260376"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve11]" time="0.00891494750977"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve12]" time="0.00562715530396"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve13]" time="0.00990629196167"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve14]" time="0.00786304473877"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve15]" time="0.00968313217163"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve16]" time="0.0144791603088"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve17]" time="0.0143983364105"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve0]" time="0.00523710250854"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve1]" time="0.00366568565369"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve2]" time="0.00591206550598"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve3]" time="0.00814199447632"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve4]" time="0.00817084312439"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve5]" time="0.00593709945679"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve6]" time="0.00324487686157"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve7]" time="0.00493383407593"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve8]" time="0.0172250270844"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve9]" time="0.0360677242279"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve10]" time="0.11615896225"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve11]" time="0.00896096229553"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve12]" time="0.00696110725403"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve13]" time="0.00998187065125"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve14]" time="0.00802326202393"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve15]" time="0.0096390247345"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve16]" time="0.0140969753265"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve17]" time="0.0147614479065"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve0]" time="0.00541758537292"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve1]" time="0.00343608856201"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve2]" time="0.00584816932678"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve3]" time="0.0082585811615"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve4]" time="0.00813484191895"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve5]" time="0.00597882270813"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve6]" time="0.00337505340576"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve7]" time="0.00347399711609"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve8]" time="0.0177149772644"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve9]" time="0.0367667675018"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve10]" time="0.117469787598"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve11]" time="0.00921177864075"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve12]" time="0.00673699378967"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve13]" time="0.00974011421204"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve14]" time="0.00801277160645"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve15]" time="0.00925207138062"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve16]" time="0.0137610435486"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve17]" time="0.0137722492218"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve0]" time="0.00526022911072"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve1]" time="0.0032958984375"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve2]" time="0.00594210624695"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve3]" time="0.00788497924805"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve4]" time="0.00846004486084"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve5]" time="0.00561213493347"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve6]" time="0.00314593315125"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve7]" time="0.00327968597412"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve8]" time="0.0172681808472"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve9]" time="0.0363709926605"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve10]" time="0.116586923599"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve11]" time="0.00907802581787"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve12]" time="0.00689005851746"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve13]" time="0.00989508628845"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve14]" time="0.00819611549377"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve15]" time="0.00967192649841"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve16]" time="0.0139639377594"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve17]" time="0.0145518779755"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve0]" time="0.00534677505493"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve1]" time="0.00348496437073"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve2]" time="0.00584602355957"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve3]" time="0.00816702842712"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve4]" time="0.00790810585022"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve5]" time="0.00606918334961"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve6]" time="0.00328207015991"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve7]" time="0.00352215766907"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve8]" time="0.016743183136"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve9]" time="0.0360858440399"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve10]" time="0.112939596176"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve11]" time="0.0088038444519"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve12]" time="0.00536274909973"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve13]" time="0.00966882705688"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve14]" time="0.00760507583618"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve15]" time="0.00909781455994"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve16]" time="0.0134842395782"></testcase><testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="164" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve17]" time="0.0155382156372"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[0-vector_array_without_reserve0]" time="0.00294589996338"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[0-vector_array_without_reserve1]" time="0.00184035301208"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[0-vector_array_without_reserve2]" time="0.00221991539001"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[0-vector_array_without_reserve3]" time="0.124152898788"><system-err>18:45 gram_schmidt: Orthonormalizing vector 31 again
18:45 gram_schmidt: Removing linear dependent vector 32
18:45 gram_schmidt: Removing linear dependent vector 33
18:45 gram_schmidt: Removing linear dependent vector 34
18:45 gram_schmidt: Removing linear dependent vector 35
18:45 gram_schmidt: Removing linear dependent vector 36
18:45 gram_schmidt: Removing linear dependent vector 37
18:45 gram_schmidt: Removing linear dependent vector 38
18:45 gram_schmidt: Removing linear dependent vector 39
18:45 gram_schmidt: Removing linear dependent vector 40
18:45 gram_schmidt: Removing linear dependent vector 41
18:45 gram_schmidt: Removing linear dependent vector 42
18:45 gram_schmidt: Orthonormalizing vector 31 again
18:45 gram_schmidt: Removing linear dependent vector 32
18:45 gram_schmidt: Removing linear dependent vector 33
18:45 gram_schmidt: Removing linear dependent vector 34
18:45 gram_schmidt: Removing linear dependent vector 35
18:45 gram_schmidt: Removing linear dependent vector 36
18:45 gram_schmidt: Removing linear dependent vector 37
18:45 gram_schmidt: Removing linear dependent vector 38
18:45 gram_schmidt: Removing linear dependent vector 39
18:45 gram_schmidt: Removing linear dependent vector 40
18:45 gram_schmidt: Removing linear dependent vector 41
18:45 gram_schmidt: Removing linear dependent vector 42
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[0-vector_array_without_reserve4]" time="0.0273928642273"><system-err>18:45 gram_schmidt: Removing vector 0 of norm 0.0
18:45 gram_schmidt: Removing vector 1 of norm 0.0
18:45 gram_schmidt: Removing vector 2 of norm 0.0
18:45 gram_schmidt: Removing vector 3 of norm 0.0
18:45 gram_schmidt: Removing vector 4 of norm 0.0
18:45 gram_schmidt: Removing vector 5 of norm 0.0
18:45 gram_schmidt: Removing vector 6 of norm 0.0
18:45 gram_schmidt: Removing vector 7 of norm 0.0
18:45 gram_schmidt: Removing vector 8 of norm 0.0
18:45 gram_schmidt: Removing vector 9 of norm 0.0
18:45 gram_schmidt: Removing vector 10 of norm 0.0
18:45 gram_schmidt: Removing vector 11 of norm 0.0
18:45 gram_schmidt: Removing vector 12 of norm 0.0
18:45 gram_schmidt: Removing vector 13 of norm 0.0
18:45 gram_schmidt: Removing vector 14 of norm 0.0
18:45 gram_schmidt: Removing vector 15 of norm 0.0
18:45 gram_schmidt: Removing vector 16 of norm 0.0
18:45 gram_schmidt: Removing vector 17 of norm 0.0
18:45 gram_schmidt: Removing vector 18 of norm 0.0
18:45 gram_schmidt: Removing vector 19 of norm 0.0
18:45 gram_schmidt: Removing vector 20 of norm 0.0
18:45 gram_schmidt: Removing vector 21 of norm 0.0
18:45 gram_schmidt: Removing vector 22 of norm 0.0
18:45 gram_schmidt: Removing vector 23 of norm 0.0
18:45 gram_schmidt: Removing vector 24 of norm 0.0
18:45 gram_schmidt: Removing vector 25 of norm 0.0
18:45 gram_schmidt: Removing vector 26 of norm 0.0
18:45 gram_schmidt: Removing vector 27 of norm 0.0
18:45 gram_schmidt: Removing vector 28 of norm 0.0
18:45 gram_schmidt: Removing vector 29 of norm 0.0
18:45 gram_schmidt: Removing vector 30 of norm 0.0
18:45 gram_schmidt: Removing vector 31 of norm 0.0
18:45 gram_schmidt: Removing vector 32 of norm 0.0
18:45 gram_schmidt: Removing vector 33 of norm 0.0
18:45 gram_schmidt: Removing vector 34 of norm 0.0
18:45 gram_schmidt: Removing vector 35 of norm 0.0
18:45 gram_schmidt: Removing vector 36 of norm 0.0
18:45 gram_schmidt: Removing vector 37 of norm 0.0
18:45 gram_schmidt: Removing vector 38 of norm 0.0
18:45 gram_schmidt: Removing vector 39 of norm 0.0
18:45 gram_schmidt: Removing vector 40 of norm 0.0
18:45 gram_schmidt: Removing vector 41 of norm 0.0
18:45 gram_schmidt: Removing vector 42 of norm 0.0
18:45 gram_schmidt: Removing vector 43 of norm 0.0
18:45 gram_schmidt: Removing vector 44 of norm 0.0
18:45 gram_schmidt: Removing vector 45 of norm 0.0
18:45 gram_schmidt: Removing vector 46 of norm 0.0
18:45 gram_schmidt: Removing vector 47 of norm 0.0
18:45 gram_schmidt: Removing vector 48 of norm 0.0
18:45 gram_schmidt: Removing vector 49 of norm 0.0
18:45 gram_schmidt: Removing vector 50 of norm 0.0
18:45 gram_schmidt: Removing vector 51 of norm 0.0
18:45 gram_schmidt: Removing vector 52 of norm 0.0
18:45 gram_schmidt: Removing vector 53 of norm 0.0
18:45 gram_schmidt: Removing vector 54 of norm 0.0
18:45 gram_schmidt: Removing vector 55 of norm 0.0
18:45 gram_schmidt: Removing vector 56 of norm 0.0
18:45 gram_schmidt: Removing vector 57 of norm 0.0
18:45 gram_schmidt: Removing vector 58 of norm 0.0
18:45 gram_schmidt: Removing vector 59 of norm 0.0
18:45 gram_schmidt: Removing vector 60 of norm 0.0
18:45 gram_schmidt: Removing vector 61 of norm 0.0
18:45 gram_schmidt: Removing vector 62 of norm 0.0
18:45 gram_schmidt: Removing vector 63 of norm 0.0
18:45 gram_schmidt: Removing vector 64 of norm 0.0
18:45 gram_schmidt: Removing vector 65 of norm 0.0
18:45 gram_schmidt: Removing vector 66 of norm 0.0
18:45 gram_schmidt: Removing vector 67 of norm 0.0
18:45 gram_schmidt: Removing vector 68 of norm 0.0
18:45 gram_schmidt: Removing vector 69 of norm 0.0
18:45 gram_schmidt: Removing vector 70 of norm 0.0
18:45 gram_schmidt: Removing vector 71 of norm 0.0
18:45 gram_schmidt: Removing vector 72 of norm 0.0
18:45 gram_schmidt: Removing vector 73 of norm 0.0
18:45 gram_schmidt: Removing vector 74 of norm 0.0
18:45 gram_schmidt: Removing vector 75 of norm 0.0
18:45 gram_schmidt: Removing vector 76 of norm 0.0
18:45 gram_schmidt: Removing vector 77 of norm 0.0
18:45 gram_schmidt: Removing vector 78 of norm 0.0
18:45 gram_schmidt: Removing vector 79 of norm 0.0
18:45 gram_schmidt: Removing vector 80 of norm 0.0
18:45 gram_schmidt: Removing vector 81 of norm 0.0
18:45 gram_schmidt: Removing vector 82 of norm 0.0
18:45 gram_schmidt: Removing vector 83 of norm 0.0
18:45 gram_schmidt: Removing vector 84 of norm 0.0
18:45 gram_schmidt: Removing vector 85 of norm 0.0
18:45 gram_schmidt: Removing vector 86 of norm 0.0
18:45 gram_schmidt: Removing vector 87 of norm 0.0
18:45 gram_schmidt: Removing vector 88 of norm 0.0
18:45 gram_schmidt: Removing vector 89 of norm 0.0
18:45 gram_schmidt: Removing vector 90 of norm 0.0
18:45 gram_schmidt: Removing vector 91 of norm 0.0
18:45 gram_schmidt: Removing vector 92 of norm 0.0
18:45 gram_schmidt: Removing vector 93 of norm 0.0
18:45 gram_schmidt: Removing vector 94 of norm 0.0
18:45 gram_schmidt: Removing vector 95 of norm 0.0
18:45 gram_schmidt: Removing vector 96 of norm 0.0
18:45 gram_schmidt: Removing vector 97 of norm 0.0
18:45 gram_schmidt: Removing vector 98 of norm 0.0
18:45 gram_schmidt: Removing vector 99 of norm 0.0
18:45 gram_schmidt: Removing vector 100 of norm 0.0
18:45 gram_schmidt: Removing vector 101 of norm 0.0
18:45 gram_schmidt: Removing vector 0 of norm 0.0
18:45 gram_schmidt: Removing vector 1 of norm 0.0
18:45 gram_schmidt: Removing vector 2 of norm 0.0
18:45 gram_schmidt: Removing vector 3 of norm 0.0
18:45 gram_schmidt: Removing vector 4 of norm 0.0
18:45 gram_schmidt: Removing vector 5 of norm 0.0
18:45 gram_schmidt: Removing vector 6 of norm 0.0
18:45 gram_schmidt: Removing vector 7 of norm 0.0
18:45 gram_schmidt: Removing vector 8 of norm 0.0
18:45 gram_schmidt: Removing vector 9 of norm 0.0
18:45 gram_schmidt: Removing vector 10 of norm 0.0
18:45 gram_schmidt: Removing vector 11 of norm 0.0
18:45 gram_schmidt: Removing vector 12 of norm 0.0
18:45 gram_schmidt: Removing vector 13 of norm 0.0
18:45 gram_schmidt: Removing vector 14 of norm 0.0
18:45 gram_schmidt: Removing vector 15 of norm 0.0
18:45 gram_schmidt: Removing vector 16 of norm 0.0
18:45 gram_schmidt: Removing vector 17 of norm 0.0
18:45 gram_schmidt: Removing vector 18 of norm 0.0
18:45 gram_schmidt: Removing vector 19 of norm 0.0
18:45 gram_schmidt: Removing vector 20 of norm 0.0
18:45 gram_schmidt: Removing vector 21 of norm 0.0
18:45 gram_schmidt: Removing vector 22 of norm 0.0
18:45 gram_schmidt: Removing vector 23 of norm 0.0
18:45 gram_schmidt: Removing vector 24 of norm 0.0
18:45 gram_schmidt: Removing vector 25 of norm 0.0
18:45 gram_schmidt: Removing vector 26 of norm 0.0
18:45 gram_schmidt: Removing vector 27 of norm 0.0
18:45 gram_schmidt: Removing vector 28 of norm 0.0
18:45 gram_schmidt: Removing vector 29 of norm 0.0
18:45 gram_schmidt: Removing vector 30 of norm 0.0
18:45 gram_schmidt: Removing vector 31 of norm 0.0
18:45 gram_schmidt: Removing vector 32 of norm 0.0
18:45 gram_schmidt: Removing vector 33 of norm 0.0
18:45 gram_schmidt: Removing vector 34 of norm 0.0
18:45 gram_schmidt: Removing vector 35 of norm 0.0
18:45 gram_schmidt: Removing vector 36 of norm 0.0
18:45 gram_schmidt: Removing vector 37 of norm 0.0
18:45 gram_schmidt: Removing vector 38 of norm 0.0
18:45 gram_schmidt: Removing vector 39 of norm 0.0
18:45 gram_schmidt: Removing vector 40 of norm 0.0
18:45 gram_schmidt: Removing vector 41 of norm 0.0
18:45 gram_schmidt: Removing vector 42 of norm 0.0
18:45 gram_schmidt: Removing vector 43 of norm 0.0
18:45 gram_schmidt: Removing vector 44 of norm 0.0
18:45 gram_schmidt: Removing vector 45 of norm 0.0
18:45 gram_schmidt: Removing vector 46 of norm 0.0
18:45 gram_schmidt: Removing vector 47 of norm 0.0
18:45 gram_schmidt: Removing vector 48 of norm 0.0
18:45 gram_schmidt: Removing vector 49 of norm 0.0
18:45 gram_schmidt: Removing vector 50 of norm 0.0
18:45 gram_schmidt: Removing vector 51 of norm 0.0
18:45 gram_schmidt: Removing vector 52 of norm 0.0
18:45 gram_schmidt: Removing vector 53 of norm 0.0
18:45 gram_schmidt: Removing vector 54 of norm 0.0
18:45 gram_schmidt: Removing vector 55 of norm 0.0
18:45 gram_schmidt: Removing vector 56 of norm 0.0
18:45 gram_schmidt: Removing vector 57 of norm 0.0
18:45 gram_schmidt: Removing vector 58 of norm 0.0
18:45 gram_schmidt: Removing vector 59 of norm 0.0
18:45 gram_schmidt: Removing vector 60 of norm 0.0
18:45 gram_schmidt: Removing vector 61 of norm 0.0
18:45 gram_schmidt: Removing vector 62 of norm 0.0
18:45 gram_schmidt: Removing vector 63 of norm 0.0
18:45 gram_schmidt: Removing vector 64 of norm 0.0
18:45 gram_schmidt: Removing vector 65 of norm 0.0
18:45 gram_schmidt: Removing vector 66 of norm 0.0
18:45 gram_schmidt: Removing vector 67 of norm 0.0
18:45 gram_schmidt: Removing vector 68 of norm 0.0
18:45 gram_schmidt: Removing vector 69 of norm 0.0
18:45 gram_schmidt: Removing vector 70 of norm 0.0
18:45 gram_schmidt: Removing vector 71 of norm 0.0
18:45 gram_schmidt: Removing vector 72 of norm 0.0
18:45 gram_schmidt: Removing vector 73 of norm 0.0
18:45 gram_schmidt: Removing vector 74 of norm 0.0
18:45 gram_schmidt: Removing vector 75 of norm 0.0
18:45 gram_schmidt: Removing vector 76 of norm 0.0
18:45 gram_schmidt: Removing vector 77 of norm 0.0
18:45 gram_schmidt: Removing vector 78 of norm 0.0
18:45 gram_schmidt: Removing vector 79 of norm 0.0
18:45 gram_schmidt: Removing vector 80 of norm 0.0
18:45 gram_schmidt: Removing vector 81 of norm 0.0
18:45 gram_schmidt: Removing vector 82 of norm 0.0
18:45 gram_schmidt: Removing vector 83 of norm 0.0
18:45 gram_schmidt: Removing vector 84 of norm 0.0
18:45 gram_schmidt: Removing vector 85 of norm 0.0
18:45 gram_schmidt: Removing vector 86 of norm 0.0
18:45 gram_schmidt: Removing vector 87 of norm 0.0
18:45 gram_schmidt: Removing vector 88 of norm 0.0
18:45 gram_schmidt: Removing vector 89 of norm 0.0
18:45 gram_schmidt: Removing vector 90 of norm 0.0
18:45 gram_schmidt: Removing vector 91 of norm 0.0
18:45 gram_schmidt: Removing vector 92 of norm 0.0
18:45 gram_schmidt: Removing vector 93 of norm 0.0
18:45 gram_schmidt: Removing vector 94 of norm 0.0
18:45 gram_schmidt: Removing vector 95 of norm 0.0
18:45 gram_schmidt: Removing vector 96 of norm 0.0
18:45 gram_schmidt: Removing vector 97 of norm 0.0
18:45 gram_schmidt: Removing vector 98 of norm 0.0
18:45 gram_schmidt: Removing vector 99 of norm 0.0
18:45 gram_schmidt: Removing vector 100 of norm 0.0
18:45 gram_schmidt: Removing vector 101 of norm 0.0
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[0-vector_array_without_reserve5]" time="0.00246810913086"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[0-vector_array_without_reserve6]" time="0.00159168243408"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[0-vector_array_without_reserve7]" time="0.00209999084473"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[0-vector_array_without_reserve8]" time="0.226007938385"><system-err>18:45 gram_schmidt: Orthonormalizing vector 31 again
18:45 gram_schmidt: Removing linear dependent vector 32
18:45 gram_schmidt: Removing linear dependent vector 33
18:45 gram_schmidt: Removing linear dependent vector 34
18:45 gram_schmidt: Removing linear dependent vector 35
18:45 gram_schmidt: Removing linear dependent vector 36
18:45 gram_schmidt: Removing linear dependent vector 37
18:45 gram_schmidt: Removing linear dependent vector 38
18:45 gram_schmidt: Removing linear dependent vector 39
18:45 gram_schmidt: Removing linear dependent vector 40
18:45 gram_schmidt: Removing linear dependent vector 41
18:45 gram_schmidt: Removing linear dependent vector 42
18:45 gram_schmidt: Orthonormalizing vector 31 again
18:45 gram_schmidt: Removing linear dependent vector 32
18:45 gram_schmidt: Removing linear dependent vector 33
18:45 gram_schmidt: Removing linear dependent vector 34
18:45 gram_schmidt: Removing linear dependent vector 35
18:45 gram_schmidt: Removing linear dependent vector 36
18:45 gram_schmidt: Removing linear dependent vector 37
18:45 gram_schmidt: Removing linear dependent vector 38
18:45 gram_schmidt: Removing linear dependent vector 39
18:45 gram_schmidt: Removing linear dependent vector 40
18:45 gram_schmidt: Removing linear dependent vector 41
18:45 gram_schmidt: Removing linear dependent vector 42
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[0-vector_array_without_reserve9]" time="0.0316569805145"><system-err>18:45 gram_schmidt: Removing vector 0 of norm 0.0
18:45 gram_schmidt: Removing vector 1 of norm 0.0
18:45 gram_schmidt: Removing vector 2 of norm 0.0
18:45 gram_schmidt: Removing vector 3 of norm 0.0
18:45 gram_schmidt: Removing vector 4 of norm 0.0
18:45 gram_schmidt: Removing vector 5 of norm 0.0
18:45 gram_schmidt: Removing vector 6 of norm 0.0
18:45 gram_schmidt: Removing vector 7 of norm 0.0
18:45 gram_schmidt: Removing vector 8 of norm 0.0
18:45 gram_schmidt: Removing vector 9 of norm 0.0
18:45 gram_schmidt: Removing vector 10 of norm 0.0
18:45 gram_schmidt: Removing vector 11 of norm 0.0
18:45 gram_schmidt: Removing vector 12 of norm 0.0
18:45 gram_schmidt: Removing vector 13 of norm 0.0
18:45 gram_schmidt: Removing vector 14 of norm 0.0
18:45 gram_schmidt: Removing vector 15 of norm 0.0
18:45 gram_schmidt: Removing vector 16 of norm 0.0
18:45 gram_schmidt: Removing vector 17 of norm 0.0
18:45 gram_schmidt: Removing vector 18 of norm 0.0
18:45 gram_schmidt: Removing vector 19 of norm 0.0
18:45 gram_schmidt: Removing vector 20 of norm 0.0
18:45 gram_schmidt: Removing vector 21 of norm 0.0
18:45 gram_schmidt: Removing vector 22 of norm 0.0
18:45 gram_schmidt: Removing vector 23 of norm 0.0
18:45 gram_schmidt: Removing vector 24 of norm 0.0
18:45 gram_schmidt: Removing vector 25 of norm 0.0
18:45 gram_schmidt: Removing vector 26 of norm 0.0
18:45 gram_schmidt: Removing vector 27 of norm 0.0
18:45 gram_schmidt: Removing vector 28 of norm 0.0
18:45 gram_schmidt: Removing vector 29 of norm 0.0
18:45 gram_schmidt: Removing vector 30 of norm 0.0
18:45 gram_schmidt: Removing vector 31 of norm 0.0
18:45 gram_schmidt: Removing vector 32 of norm 0.0
18:45 gram_schmidt: Removing vector 33 of norm 0.0
18:45 gram_schmidt: Removing vector 34 of norm 0.0
18:45 gram_schmidt: Removing vector 35 of norm 0.0
18:45 gram_schmidt: Removing vector 36 of norm 0.0
18:45 gram_schmidt: Removing vector 37 of norm 0.0
18:45 gram_schmidt: Removing vector 38 of norm 0.0
18:45 gram_schmidt: Removing vector 39 of norm 0.0
18:45 gram_schmidt: Removing vector 40 of norm 0.0
18:45 gram_schmidt: Removing vector 41 of norm 0.0
18:45 gram_schmidt: Removing vector 42 of norm 0.0
18:45 gram_schmidt: Removing vector 43 of norm 0.0
18:45 gram_schmidt: Removing vector 44 of norm 0.0
18:45 gram_schmidt: Removing vector 45 of norm 0.0
18:45 gram_schmidt: Removing vector 46 of norm 0.0
18:45 gram_schmidt: Removing vector 47 of norm 0.0
18:45 gram_schmidt: Removing vector 48 of norm 0.0
18:45 gram_schmidt: Removing vector 49 of norm 0.0
18:45 gram_schmidt: Removing vector 50 of norm 0.0
18:45 gram_schmidt: Removing vector 51 of norm 0.0
18:45 gram_schmidt: Removing vector 52 of norm 0.0
18:45 gram_schmidt: Removing vector 53 of norm 0.0
18:45 gram_schmidt: Removing vector 54 of norm 0.0
18:45 gram_schmidt: Removing vector 55 of norm 0.0
18:45 gram_schmidt: Removing vector 56 of norm 0.0
18:45 gram_schmidt: Removing vector 57 of norm 0.0
18:45 gram_schmidt: Removing vector 58 of norm 0.0
18:45 gram_schmidt: Removing vector 59 of norm 0.0
18:45 gram_schmidt: Removing vector 60 of norm 0.0
18:45 gram_schmidt: Removing vector 61 of norm 0.0
18:45 gram_schmidt: Removing vector 62 of norm 0.0
18:45 gram_schmidt: Removing vector 63 of norm 0.0
18:45 gram_schmidt: Removing vector 64 of norm 0.0
18:45 gram_schmidt: Removing vector 65 of norm 0.0
18:45 gram_schmidt: Removing vector 66 of norm 0.0
18:45 gram_schmidt: Removing vector 67 of norm 0.0
18:45 gram_schmidt: Removing vector 68 of norm 0.0
18:45 gram_schmidt: Removing vector 69 of norm 0.0
18:45 gram_schmidt: Removing vector 70 of norm 0.0
18:45 gram_schmidt: Removing vector 71 of norm 0.0
18:45 gram_schmidt: Removing vector 72 of norm 0.0
18:45 gram_schmidt: Removing vector 73 of norm 0.0
18:45 gram_schmidt: Removing vector 74 of norm 0.0
18:45 gram_schmidt: Removing vector 75 of norm 0.0
18:45 gram_schmidt: Removing vector 76 of norm 0.0
18:45 gram_schmidt: Removing vector 77 of norm 0.0
18:45 gram_schmidt: Removing vector 78 of norm 0.0
18:45 gram_schmidt: Removing vector 79 of norm 0.0
18:45 gram_schmidt: Removing vector 80 of norm 0.0
18:45 gram_schmidt: Removing vector 81 of norm 0.0
18:45 gram_schmidt: Removing vector 82 of norm 0.0
18:45 gram_schmidt: Removing vector 83 of norm 0.0
18:45 gram_schmidt: Removing vector 84 of norm 0.0
18:45 gram_schmidt: Removing vector 85 of norm 0.0
18:45 gram_schmidt: Removing vector 86 of norm 0.0
18:45 gram_schmidt: Removing vector 87 of norm 0.0
18:45 gram_schmidt: Removing vector 88 of norm 0.0
18:45 gram_schmidt: Removing vector 89 of norm 0.0
18:45 gram_schmidt: Removing vector 90 of norm 0.0
18:45 gram_schmidt: Removing vector 91 of norm 0.0
18:45 gram_schmidt: Removing vector 92 of norm 0.0
18:45 gram_schmidt: Removing vector 93 of norm 0.0
18:45 gram_schmidt: Removing vector 94 of norm 0.0
18:45 gram_schmidt: Removing vector 95 of norm 0.0
18:45 gram_schmidt: Removing vector 96 of norm 0.0
18:45 gram_schmidt: Removing vector 97 of norm 0.0
18:45 gram_schmidt: Removing vector 98 of norm 0.0
18:45 gram_schmidt: Removing vector 99 of norm 0.0
18:45 gram_schmidt: Removing vector 100 of norm 0.0
18:45 gram_schmidt: Removing vector 101 of norm 0.0
18:45 gram_schmidt: Removing vector 0 of norm 0.0
18:45 gram_schmidt: Removing vector 1 of norm 0.0
18:45 gram_schmidt: Removing vector 2 of norm 0.0
18:45 gram_schmidt: Removing vector 3 of norm 0.0
18:45 gram_schmidt: Removing vector 4 of norm 0.0
18:45 gram_schmidt: Removing vector 5 of norm 0.0
18:45 gram_schmidt: Removing vector 6 of norm 0.0
18:45 gram_schmidt: Removing vector 7 of norm 0.0
18:45 gram_schmidt: Removing vector 8 of norm 0.0
18:45 gram_schmidt: Removing vector 9 of norm 0.0
18:45 gram_schmidt: Removing vector 10 of norm 0.0
18:45 gram_schmidt: Removing vector 11 of norm 0.0
18:45 gram_schmidt: Removing vector 12 of norm 0.0
18:45 gram_schmidt: Removing vector 13 of norm 0.0
18:45 gram_schmidt: Removing vector 14 of norm 0.0
18:45 gram_schmidt: Removing vector 15 of norm 0.0
18:45 gram_schmidt: Removing vector 16 of norm 0.0
18:45 gram_schmidt: Removing vector 17 of norm 0.0
18:45 gram_schmidt: Removing vector 18 of norm 0.0
18:45 gram_schmidt: Removing vector 19 of norm 0.0
18:45 gram_schmidt: Removing vector 20 of norm 0.0
18:45 gram_schmidt: Removing vector 21 of norm 0.0
18:45 gram_schmidt: Removing vector 22 of norm 0.0
18:45 gram_schmidt: Removing vector 23 of norm 0.0
18:45 gram_schmidt: Removing vector 24 of norm 0.0
18:45 gram_schmidt: Removing vector 25 of norm 0.0
18:45 gram_schmidt: Removing vector 26 of norm 0.0
18:45 gram_schmidt: Removing vector 27 of norm 0.0
18:45 gram_schmidt: Removing vector 28 of norm 0.0
18:45 gram_schmidt: Removing vector 29 of norm 0.0
18:45 gram_schmidt: Removing vector 30 of norm 0.0
18:45 gram_schmidt: Removing vector 31 of norm 0.0
18:45 gram_schmidt: Removing vector 32 of norm 0.0
18:45 gram_schmidt: Removing vector 33 of norm 0.0
18:45 gram_schmidt: Removing vector 34 of norm 0.0
18:45 gram_schmidt: Removing vector 35 of norm 0.0
18:45 gram_schmidt: Removing vector 36 of norm 0.0
18:45 gram_schmidt: Removing vector 37 of norm 0.0
18:45 gram_schmidt: Removing vector 38 of norm 0.0
18:45 gram_schmidt: Removing vector 39 of norm 0.0
18:45 gram_schmidt: Removing vector 40 of norm 0.0
18:45 gram_schmidt: Removing vector 41 of norm 0.0
18:45 gram_schmidt: Removing vector 42 of norm 0.0
18:45 gram_schmidt: Removing vector 43 of norm 0.0
18:45 gram_schmidt: Removing vector 44 of norm 0.0
18:45 gram_schmidt: Removing vector 45 of norm 0.0
18:45 gram_schmidt: Removing vector 46 of norm 0.0
18:45 gram_schmidt: Removing vector 47 of norm 0.0
18:45 gram_schmidt: Removing vector 48 of norm 0.0
18:45 gram_schmidt: Removing vector 49 of norm 0.0
18:45 gram_schmidt: Removing vector 50 of norm 0.0
18:45 gram_schmidt: Removing vector 51 of norm 0.0
18:45 gram_schmidt: Removing vector 52 of norm 0.0
18:45 gram_schmidt: Removing vector 53 of norm 0.0
18:45 gram_schmidt: Removing vector 54 of norm 0.0
18:45 gram_schmidt: Removing vector 55 of norm 0.0
18:45 gram_schmidt: Removing vector 56 of norm 0.0
18:45 gram_schmidt: Removing vector 57 of norm 0.0
18:45 gram_schmidt: Removing vector 58 of norm 0.0
18:45 gram_schmidt: Removing vector 59 of norm 0.0
18:45 gram_schmidt: Removing vector 60 of norm 0.0
18:45 gram_schmidt: Removing vector 61 of norm 0.0
18:45 gram_schmidt: Removing vector 62 of norm 0.0
18:45 gram_schmidt: Removing vector 63 of norm 0.0
18:45 gram_schmidt: Removing vector 64 of norm 0.0
18:45 gram_schmidt: Removing vector 65 of norm 0.0
18:45 gram_schmidt: Removing vector 66 of norm 0.0
18:45 gram_schmidt: Removing vector 67 of norm 0.0
18:45 gram_schmidt: Removing vector 68 of norm 0.0
18:45 gram_schmidt: Removing vector 69 of norm 0.0
18:45 gram_schmidt: Removing vector 70 of norm 0.0
18:45 gram_schmidt: Removing vector 71 of norm 0.0
18:45 gram_schmidt: Removing vector 72 of norm 0.0
18:45 gram_schmidt: Removing vector 73 of norm 0.0
18:45 gram_schmidt: Removing vector 74 of norm 0.0
18:45 gram_schmidt: Removing vector 75 of norm 0.0
18:45 gram_schmidt: Removing vector 76 of norm 0.0
18:45 gram_schmidt: Removing vector 77 of norm 0.0
18:45 gram_schmidt: Removing vector 78 of norm 0.0
18:45 gram_schmidt: Removing vector 79 of norm 0.0
18:45 gram_schmidt: Removing vector 80 of norm 0.0
18:45 gram_schmidt: Removing vector 81 of norm 0.0
18:45 gram_schmidt: Removing vector 82 of norm 0.0
18:45 gram_schmidt: Removing vector 83 of norm 0.0
18:45 gram_schmidt: Removing vector 84 of norm 0.0
18:45 gram_schmidt: Removing vector 85 of norm 0.0
18:45 gram_schmidt: Removing vector 86 of norm 0.0
18:45 gram_schmidt: Removing vector 87 of norm 0.0
18:45 gram_schmidt: Removing vector 88 of norm 0.0
18:45 gram_schmidt: Removing vector 89 of norm 0.0
18:45 gram_schmidt: Removing vector 90 of norm 0.0
18:45 gram_schmidt: Removing vector 91 of norm 0.0
18:45 gram_schmidt: Removing vector 92 of norm 0.0
18:45 gram_schmidt: Removing vector 93 of norm 0.0
18:45 gram_schmidt: Removing vector 94 of norm 0.0
18:45 gram_schmidt: Removing vector 95 of norm 0.0
18:45 gram_schmidt: Removing vector 96 of norm 0.0
18:45 gram_schmidt: Removing vector 97 of norm 0.0
18:45 gram_schmidt: Removing vector 98 of norm 0.0
18:45 gram_schmidt: Removing vector 99 of norm 0.0
18:45 gram_schmidt: Removing vector 100 of norm 0.0
18:45 gram_schmidt: Removing vector 101 of norm 0.0
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[0-vector_array_without_reserve10]" time="0.00307989120483"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[0-vector_array_without_reserve11]" time="0.00674676895142"><system-err>18:45 gram_schmidt: Removing linear dependent vector 3
18:45 gram_schmidt: Removing linear dependent vector 3
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[0-vector_array_without_reserve12]" time="0.00331521034241"><system-err>18:45 gram_schmidt: Removing vector 0 of norm 0.0
18:45 gram_schmidt: Removing vector 1 of norm 0.0
18:45 gram_schmidt: Removing vector 2 of norm 0.0
18:45 gram_schmidt: Removing vector 0 of norm 0.0
18:45 gram_schmidt: Removing vector 1 of norm 0.0
18:45 gram_schmidt: Removing vector 2 of norm 0.0
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[0-vector_array_without_reserve13]" time="0.00230503082275"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[0-vector_array_without_reserve14]" time="0.00526928901672"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[0-vector_array_without_reserve15]" time="0.509840011597"><system-err>18:45 gram_schmidt: Removing linear dependent vector 36
18:45 gram_schmidt: Removing linear dependent vector 37
18:45 gram_schmidt: Removing linear dependent vector 38
18:45 gram_schmidt: Removing linear dependent vector 39
18:45 gram_schmidt: Removing linear dependent vector 40
18:45 gram_schmidt: Removing linear dependent vector 41
18:45 gram_schmidt: Removing linear dependent vector 42
18:45 gram_schmidt: Removing linear dependent vector 36
18:45 gram_schmidt: Removing linear dependent vector 37
18:45 gram_schmidt: Removing linear dependent vector 38
18:45 gram_schmidt: Removing linear dependent vector 39
18:45 gram_schmidt: Removing linear dependent vector 40
18:45 gram_schmidt: Removing linear dependent vector 41
18:45 gram_schmidt: Removing linear dependent vector 42
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[0-vector_array_without_reserve16]" time="0.285700798035"><system-err>18:45 gram_schmidt: Removing linear dependent vector 3
18:45 gram_schmidt: Removing linear dependent vector 4
18:45 gram_schmidt: Removing linear dependent vector 5
18:46 gram_schmidt: Removing linear dependent vector 6
18:46 gram_schmidt: Removing linear dependent vector 7
18:46 gram_schmidt: Removing linear dependent vector 8
18:46 gram_schmidt: Removing linear dependent vector 9
18:46 gram_schmidt: Removing linear dependent vector 10
18:46 gram_schmidt: Removing linear dependent vector 11
18:46 gram_schmidt: Removing linear dependent vector 12
18:46 gram_schmidt: Removing linear dependent vector 13
18:46 gram_schmidt: Removing linear dependent vector 14
18:46 gram_schmidt: Removing linear dependent vector 15
18:46 gram_schmidt: Removing linear dependent vector 16
18:46 gram_schmidt: Removing linear dependent vector 17
18:46 gram_schmidt: Removing linear dependent vector 18
18:46 gram_schmidt: Removing linear dependent vector 19
18:46 gram_schmidt: Removing linear dependent vector 20
18:46 gram_schmidt: Removing linear dependent vector 21
18:46 gram_schmidt: Removing linear dependent vector 22
18:46 gram_schmidt: Removing linear dependent vector 23
18:46 gram_schmidt: Removing linear dependent vector 24
18:46 gram_schmidt: Removing linear dependent vector 25
18:46 gram_schmidt: Removing linear dependent vector 26
18:46 gram_schmidt: Removing linear dependent vector 27
18:46 gram_schmidt: Removing linear dependent vector 28
18:46 gram_schmidt: Removing linear dependent vector 29
18:46 gram_schmidt: Removing linear dependent vector 30
18:46 gram_schmidt: Removing linear dependent vector 31
18:46 gram_schmidt: Removing linear dependent vector 32
18:46 gram_schmidt: Removing linear dependent vector 33
18:46 gram_schmidt: Removing linear dependent vector 34
18:46 gram_schmidt: Removing linear dependent vector 35
18:46 gram_schmidt: Removing linear dependent vector 36
18:46 gram_schmidt: Removing linear dependent vector 37
18:46 gram_schmidt: Removing linear dependent vector 38
18:46 gram_schmidt: Removing linear dependent vector 39
18:46 gram_schmidt: Removing linear dependent vector 40
18:46 gram_schmidt: Removing linear dependent vector 41
18:46 gram_schmidt: Removing linear dependent vector 42
18:46 gram_schmidt: Removing linear dependent vector 43
18:46 gram_schmidt: Removing linear dependent vector 44
18:46 gram_schmidt: Removing linear dependent vector 45
18:46 gram_schmidt: Removing linear dependent vector 46
18:46 gram_schmidt: Removing linear dependent vector 47
18:46 gram_schmidt: Removing linear dependent vector 48
18:46 gram_schmidt: Removing linear dependent vector 49
18:46 gram_schmidt: Removing linear dependent vector 50
18:46 gram_schmidt: Removing linear dependent vector 51
18:46 gram_schmidt: Removing linear dependent vector 52
18:46 gram_schmidt: Removing linear dependent vector 53
18:46 gram_schmidt: Removing linear dependent vector 54
18:46 gram_schmidt: Removing linear dependent vector 55
18:46 gram_schmidt: Removing linear dependent vector 56
18:46 gram_schmidt: Removing linear dependent vector 57
18:46 gram_schmidt: Removing linear dependent vector 58
18:46 gram_schmidt: Removing linear dependent vector 59
18:46 gram_schmidt: Removing linear dependent vector 60
18:46 gram_schmidt: Removing linear dependent vector 61
18:46 gram_schmidt: Removing linear dependent vector 62
18:46 gram_schmidt: Removing linear dependent vector 63
18:46 gram_schmidt: Removing linear dependent vector 64
18:46 gram_schmidt: Removing linear dependent vector 65
18:46 gram_schmidt: Removing linear dependent vector 66
18:46 gram_schmidt: Removing linear dependent vector 67
18:46 gram_schmidt: Removing linear dependent vector 68
18:46 gram_schmidt: Removing linear dependent vector 69
18:46 gram_schmidt: Removing linear dependent vector 70
18:46 gram_schmidt: Removing linear dependent vector 71
18:46 gram_schmidt: Removing linear dependent vector 72
18:46 gram_schmidt: Removing linear dependent vector 73
18:46 gram_schmidt: Removing linear dependent vector 74
18:46 gram_schmidt: Removing linear dependent vector 75
18:46 gram_schmidt: Removing linear dependent vector 76
18:46 gram_schmidt: Removing linear dependent vector 77
18:46 gram_schmidt: Removing linear dependent vector 78
18:46 gram_schmidt: Removing linear dependent vector 79
18:46 gram_schmidt: Removing linear dependent vector 80
18:46 gram_schmidt: Removing linear dependent vector 81
18:46 gram_schmidt: Removing linear dependent vector 82
18:46 gram_schmidt: Removing linear dependent vector 83
18:46 gram_schmidt: Removing linear dependent vector 84
18:46 gram_schmidt: Removing linear dependent vector 85
18:46 gram_schmidt: Removing linear dependent vector 86
18:46 gram_schmidt: Removing linear dependent vector 87
18:46 gram_schmidt: Removing linear dependent vector 88
18:46 gram_schmidt: Removing linear dependent vector 89
18:46 gram_schmidt: Removing linear dependent vector 90
18:46 gram_schmidt: Removing linear dependent vector 91
18:46 gram_schmidt: Removing linear dependent vector 92
18:46 gram_schmidt: Removing linear dependent vector 93
18:46 gram_schmidt: Removing linear dependent vector 94
18:46 gram_schmidt: Removing linear dependent vector 95
18:46 gram_schmidt: Removing linear dependent vector 96
18:46 gram_schmidt: Removing linear dependent vector 97
18:46 gram_schmidt: Removing linear dependent vector 98
18:46 gram_schmidt: Removing linear dependent vector 99
18:46 gram_schmidt: Removing linear dependent vector 100
18:46 gram_schmidt: Removing linear dependent vector 101
18:46 gram_schmidt: Removing linear dependent vector 3
18:46 gram_schmidt: Removing linear dependent vector 4
18:46 gram_schmidt: Removing linear dependent vector 5
18:46 gram_schmidt: Removing linear dependent vector 6
18:46 gram_schmidt: Removing linear dependent vector 7
18:46 gram_schmidt: Removing linear dependent vector 8
18:46 gram_schmidt: Removing linear dependent vector 9
18:46 gram_schmidt: Removing linear dependent vector 10
18:46 gram_schmidt: Removing linear dependent vector 11
18:46 gram_schmidt: Removing linear dependent vector 12
18:46 gram_schmidt: Removing linear dependent vector 13
18:46 gram_schmidt: Removing linear dependent vector 14
18:46 gram_schmidt: Removing linear dependent vector 15
18:46 gram_schmidt: Removing linear dependent vector 16
18:46 gram_schmidt: Removing linear dependent vector 17
18:46 gram_schmidt: Removing linear dependent vector 18
18:46 gram_schmidt: Removing linear dependent vector 19
18:46 gram_schmidt: Removing linear dependent vector 20
18:46 gram_schmidt: Removing linear dependent vector 21
18:46 gram_schmidt: Removing linear dependent vector 22
18:46 gram_schmidt: Removing linear dependent vector 23
18:46 gram_schmidt: Removing linear dependent vector 24
18:46 gram_schmidt: Removing linear dependent vector 25
18:46 gram_schmidt: Removing linear dependent vector 26
18:46 gram_schmidt: Removing linear dependent vector 27
18:46 gram_schmidt: Removing linear dependent vector 28
18:46 gram_schmidt: Removing linear dependent vector 29
18:46 gram_schmidt: Removing linear dependent vector 30
18:46 gram_schmidt: Removing linear dependent vector 31
18:46 gram_schmidt: Removing linear dependent vector 32
18:46 gram_schmidt: Removing linear dependent vector 33
18:46 gram_schmidt: Removing linear dependent vector 34
18:46 gram_schmidt: Removing linear dependent vector 35
18:46 gram_schmidt: Removing linear dependent vector 36
18:46 gram_schmidt: Removing linear dependent vector 37
18:46 gram_schmidt: Removing linear dependent vector 38
18:46 gram_schmidt: Removing linear dependent vector 39
18:46 gram_schmidt: Removing linear dependent vector 40
18:46 gram_schmidt: Removing linear dependent vector 41
18:46 gram_schmidt: Removing linear dependent vector 42
18:46 gram_schmidt: Removing linear dependent vector 43
18:46 gram_schmidt: Removing linear dependent vector 44
18:46 gram_schmidt: Removing linear dependent vector 45
18:46 gram_schmidt: Removing linear dependent vector 46
18:46 gram_schmidt: Removing linear dependent vector 47
18:46 gram_schmidt: Removing linear dependent vector 48
18:46 gram_schmidt: Removing linear dependent vector 49
18:46 gram_schmidt: Removing linear dependent vector 50
18:46 gram_schmidt: Removing linear dependent vector 51
18:46 gram_schmidt: Removing linear dependent vector 52
18:46 gram_schmidt: Removing linear dependent vector 53
18:46 gram_schmidt: Removing linear dependent vector 54
18:46 gram_schmidt: Removing linear dependent vector 55
18:46 gram_schmidt: Removing linear dependent vector 56
18:46 gram_schmidt: Removing linear dependent vector 57
18:46 gram_schmidt: Removing linear dependent vector 58
18:46 gram_schmidt: Removing linear dependent vector 59
18:46 gram_schmidt: Removing linear dependent vector 60
18:46 gram_schmidt: Removing linear dependent vector 61
18:46 gram_schmidt: Removing linear dependent vector 62
18:46 gram_schmidt: Removing linear dependent vector 63
18:46 gram_schmidt: Removing linear dependent vector 64
18:46 gram_schmidt: Removing linear dependent vector 65
18:46 gram_schmidt: Removing linear dependent vector 66
18:46 gram_schmidt: Removing linear dependent vector 67
18:46 gram_schmidt: Removing linear dependent vector 68
18:46 gram_schmidt: Removing linear dependent vector 69
18:46 gram_schmidt: Removing linear dependent vector 70
18:46 gram_schmidt: Removing linear dependent vector 71
18:46 gram_schmidt: Removing linear dependent vector 72
18:46 gram_schmidt: Removing linear dependent vector 73
18:46 gram_schmidt: Removing linear dependent vector 74
18:46 gram_schmidt: Removing linear dependent vector 75
18:46 gram_schmidt: Removing linear dependent vector 76
18:46 gram_schmidt: Removing linear dependent vector 77
18:46 gram_schmidt: Removing linear dependent vector 78
18:46 gram_schmidt: Removing linear dependent vector 79
18:46 gram_schmidt: Removing linear dependent vector 80
18:46 gram_schmidt: Removing linear dependent vector 81
18:46 gram_schmidt: Removing linear dependent vector 82
18:46 gram_schmidt: Removing linear dependent vector 83
18:46 gram_schmidt: Removing linear dependent vector 84
18:46 gram_schmidt: Removing linear dependent vector 85
18:46 gram_schmidt: Removing linear dependent vector 86
18:46 gram_schmidt: Removing linear dependent vector 87
18:46 gram_schmidt: Removing linear dependent vector 88
18:46 gram_schmidt: Removing linear dependent vector 89
18:46 gram_schmidt: Removing linear dependent vector 90
18:46 gram_schmidt: Removing linear dependent vector 91
18:46 gram_schmidt: Removing linear dependent vector 92
18:46 gram_schmidt: Removing linear dependent vector 93
18:46 gram_schmidt: Removing linear dependent vector 94
18:46 gram_schmidt: Removing linear dependent vector 95
18:46 gram_schmidt: Removing linear dependent vector 96
18:46 gram_schmidt: Removing linear dependent vector 97
18:46 gram_schmidt: Removing linear dependent vector 98
18:46 gram_schmidt: Removing linear dependent vector 99
18:46 gram_schmidt: Removing linear dependent vector 100
18:46 gram_schmidt: Removing linear dependent vector 101
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[1-vector_array_without_reserve0]" time="0.00271797180176"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[1-vector_array_without_reserve1]" time="0.00169515609741"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[1-vector_array_without_reserve2]" time="0.00194478034973"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[1-vector_array_without_reserve3]" time="0.125343799591"><system-err>18:46 gram_schmidt: Orthonormalizing vector 31 again
18:46 gram_schmidt: Removing linear dependent vector 32
18:46 gram_schmidt: Removing linear dependent vector 33
18:46 gram_schmidt: Removing linear dependent vector 34
18:46 gram_schmidt: Removing linear dependent vector 35
18:46 gram_schmidt: Removing linear dependent vector 36
18:46 gram_schmidt: Removing linear dependent vector 37
18:46 gram_schmidt: Removing linear dependent vector 38
18:46 gram_schmidt: Removing linear dependent vector 39
18:46 gram_schmidt: Removing linear dependent vector 40
18:46 gram_schmidt: Removing linear dependent vector 41
18:46 gram_schmidt: Removing linear dependent vector 42
18:46 gram_schmidt: Orthonormalizing vector 31 again
18:46 gram_schmidt: Removing linear dependent vector 32
18:46 gram_schmidt: Removing linear dependent vector 33
18:46 gram_schmidt: Removing linear dependent vector 34
18:46 gram_schmidt: Removing linear dependent vector 35
18:46 gram_schmidt: Removing linear dependent vector 36
18:46 gram_schmidt: Removing linear dependent vector 37
18:46 gram_schmidt: Removing linear dependent vector 38
18:46 gram_schmidt: Removing linear dependent vector 39
18:46 gram_schmidt: Removing linear dependent vector 40
18:46 gram_schmidt: Removing linear dependent vector 41
18:46 gram_schmidt: Removing linear dependent vector 42
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[1-vector_array_without_reserve4]" time="0.0273051261902"><system-err>18:46 gram_schmidt: Removing vector 0 of norm 0.0
18:46 gram_schmidt: Removing vector 1 of norm 0.0
18:46 gram_schmidt: Removing vector 2 of norm 0.0
18:46 gram_schmidt: Removing vector 3 of norm 0.0
18:46 gram_schmidt: Removing vector 4 of norm 0.0
18:46 gram_schmidt: Removing vector 5 of norm 0.0
18:46 gram_schmidt: Removing vector 6 of norm 0.0
18:46 gram_schmidt: Removing vector 7 of norm 0.0
18:46 gram_schmidt: Removing vector 8 of norm 0.0
18:46 gram_schmidt: Removing vector 9 of norm 0.0
18:46 gram_schmidt: Removing vector 10 of norm 0.0
18:46 gram_schmidt: Removing vector 11 of norm 0.0
18:46 gram_schmidt: Removing vector 12 of norm 0.0
18:46 gram_schmidt: Removing vector 13 of norm 0.0
18:46 gram_schmidt: Removing vector 14 of norm 0.0
18:46 gram_schmidt: Removing vector 15 of norm 0.0
18:46 gram_schmidt: Removing vector 16 of norm 0.0
18:46 gram_schmidt: Removing vector 17 of norm 0.0
18:46 gram_schmidt: Removing vector 18 of norm 0.0
18:46 gram_schmidt: Removing vector 19 of norm 0.0
18:46 gram_schmidt: Removing vector 20 of norm 0.0
18:46 gram_schmidt: Removing vector 21 of norm 0.0
18:46 gram_schmidt: Removing vector 22 of norm 0.0
18:46 gram_schmidt: Removing vector 23 of norm 0.0
18:46 gram_schmidt: Removing vector 24 of norm 0.0
18:46 gram_schmidt: Removing vector 25 of norm 0.0
18:46 gram_schmidt: Removing vector 26 of norm 0.0
18:46 gram_schmidt: Removing vector 27 of norm 0.0
18:46 gram_schmidt: Removing vector 28 of norm 0.0
18:46 gram_schmidt: Removing vector 29 of norm 0.0
18:46 gram_schmidt: Removing vector 30 of norm 0.0
18:46 gram_schmidt: Removing vector 31 of norm 0.0
18:46 gram_schmidt: Removing vector 32 of norm 0.0
18:46 gram_schmidt: Removing vector 33 of norm 0.0
18:46 gram_schmidt: Removing vector 34 of norm 0.0
18:46 gram_schmidt: Removing vector 35 of norm 0.0
18:46 gram_schmidt: Removing vector 36 of norm 0.0
18:46 gram_schmidt: Removing vector 37 of norm 0.0
18:46 gram_schmidt: Removing vector 38 of norm 0.0
18:46 gram_schmidt: Removing vector 39 of norm 0.0
18:46 gram_schmidt: Removing vector 40 of norm 0.0
18:46 gram_schmidt: Removing vector 41 of norm 0.0
18:46 gram_schmidt: Removing vector 42 of norm 0.0
18:46 gram_schmidt: Removing vector 43 of norm 0.0
18:46 gram_schmidt: Removing vector 44 of norm 0.0
18:46 gram_schmidt: Removing vector 45 of norm 0.0
18:46 gram_schmidt: Removing vector 46 of norm 0.0
18:46 gram_schmidt: Removing vector 47 of norm 0.0
18:46 gram_schmidt: Removing vector 48 of norm 0.0
18:46 gram_schmidt: Removing vector 49 of norm 0.0
18:46 gram_schmidt: Removing vector 50 of norm 0.0
18:46 gram_schmidt: Removing vector 51 of norm 0.0
18:46 gram_schmidt: Removing vector 52 of norm 0.0
18:46 gram_schmidt: Removing vector 53 of norm 0.0
18:46 gram_schmidt: Removing vector 54 of norm 0.0
18:46 gram_schmidt: Removing vector 55 of norm 0.0
18:46 gram_schmidt: Removing vector 56 of norm 0.0
18:46 gram_schmidt: Removing vector 57 of norm 0.0
18:46 gram_schmidt: Removing vector 58 of norm 0.0
18:46 gram_schmidt: Removing vector 59 of norm 0.0
18:46 gram_schmidt: Removing vector 60 of norm 0.0
18:46 gram_schmidt: Removing vector 61 of norm 0.0
18:46 gram_schmidt: Removing vector 62 of norm 0.0
18:46 gram_schmidt: Removing vector 63 of norm 0.0
18:46 gram_schmidt: Removing vector 64 of norm 0.0
18:46 gram_schmidt: Removing vector 65 of norm 0.0
18:46 gram_schmidt: Removing vector 66 of norm 0.0
18:46 gram_schmidt: Removing vector 67 of norm 0.0
18:46 gram_schmidt: Removing vector 68 of norm 0.0
18:46 gram_schmidt: Removing vector 69 of norm 0.0
18:46 gram_schmidt: Removing vector 70 of norm 0.0
18:46 gram_schmidt: Removing vector 71 of norm 0.0
18:46 gram_schmidt: Removing vector 72 of norm 0.0
18:46 gram_schmidt: Removing vector 73 of norm 0.0
18:46 gram_schmidt: Removing vector 74 of norm 0.0
18:46 gram_schmidt: Removing vector 75 of norm 0.0
18:46 gram_schmidt: Removing vector 76 of norm 0.0
18:46 gram_schmidt: Removing vector 77 of norm 0.0
18:46 gram_schmidt: Removing vector 78 of norm 0.0
18:46 gram_schmidt: Removing vector 79 of norm 0.0
18:46 gram_schmidt: Removing vector 80 of norm 0.0
18:46 gram_schmidt: Removing vector 81 of norm 0.0
18:46 gram_schmidt: Removing vector 82 of norm 0.0
18:46 gram_schmidt: Removing vector 83 of norm 0.0
18:46 gram_schmidt: Removing vector 84 of norm 0.0
18:46 gram_schmidt: Removing vector 85 of norm 0.0
18:46 gram_schmidt: Removing vector 86 of norm 0.0
18:46 gram_schmidt: Removing vector 87 of norm 0.0
18:46 gram_schmidt: Removing vector 88 of norm 0.0
18:46 gram_schmidt: Removing vector 89 of norm 0.0
18:46 gram_schmidt: Removing vector 90 of norm 0.0
18:46 gram_schmidt: Removing vector 91 of norm 0.0
18:46 gram_schmidt: Removing vector 92 of norm 0.0
18:46 gram_schmidt: Removing vector 93 of norm 0.0
18:46 gram_schmidt: Removing vector 94 of norm 0.0
18:46 gram_schmidt: Removing vector 95 of norm 0.0
18:46 gram_schmidt: Removing vector 96 of norm 0.0
18:46 gram_schmidt: Removing vector 97 of norm 0.0
18:46 gram_schmidt: Removing vector 98 of norm 0.0
18:46 gram_schmidt: Removing vector 99 of norm 0.0
18:46 gram_schmidt: Removing vector 100 of norm 0.0
18:46 gram_schmidt: Removing vector 101 of norm 0.0
18:46 gram_schmidt: Removing vector 0 of norm 0.0
18:46 gram_schmidt: Removing vector 1 of norm 0.0
18:46 gram_schmidt: Removing vector 2 of norm 0.0
18:46 gram_schmidt: Removing vector 3 of norm 0.0
18:46 gram_schmidt: Removing vector 4 of norm 0.0
18:46 gram_schmidt: Removing vector 5 of norm 0.0
18:46 gram_schmidt: Removing vector 6 of norm 0.0
18:46 gram_schmidt: Removing vector 7 of norm 0.0
18:46 gram_schmidt: Removing vector 8 of norm 0.0
18:46 gram_schmidt: Removing vector 9 of norm 0.0
18:46 gram_schmidt: Removing vector 10 of norm 0.0
18:46 gram_schmidt: Removing vector 11 of norm 0.0
18:46 gram_schmidt: Removing vector 12 of norm 0.0
18:46 gram_schmidt: Removing vector 13 of norm 0.0
18:46 gram_schmidt: Removing vector 14 of norm 0.0
18:46 gram_schmidt: Removing vector 15 of norm 0.0
18:46 gram_schmidt: Removing vector 16 of norm 0.0
18:46 gram_schmidt: Removing vector 17 of norm 0.0
18:46 gram_schmidt: Removing vector 18 of norm 0.0
18:46 gram_schmidt: Removing vector 19 of norm 0.0
18:46 gram_schmidt: Removing vector 20 of norm 0.0
18:46 gram_schmidt: Removing vector 21 of norm 0.0
18:46 gram_schmidt: Removing vector 22 of norm 0.0
18:46 gram_schmidt: Removing vector 23 of norm 0.0
18:46 gram_schmidt: Removing vector 24 of norm 0.0
18:46 gram_schmidt: Removing vector 25 of norm 0.0
18:46 gram_schmidt: Removing vector 26 of norm 0.0
18:46 gram_schmidt: Removing vector 27 of norm 0.0
18:46 gram_schmidt: Removing vector 28 of norm 0.0
18:46 gram_schmidt: Removing vector 29 of norm 0.0
18:46 gram_schmidt: Removing vector 30 of norm 0.0
18:46 gram_schmidt: Removing vector 31 of norm 0.0
18:46 gram_schmidt: Removing vector 32 of norm 0.0
18:46 gram_schmidt: Removing vector 33 of norm 0.0
18:46 gram_schmidt: Removing vector 34 of norm 0.0
18:46 gram_schmidt: Removing vector 35 of norm 0.0
18:46 gram_schmidt: Removing vector 36 of norm 0.0
18:46 gram_schmidt: Removing vector 37 of norm 0.0
18:46 gram_schmidt: Removing vector 38 of norm 0.0
18:46 gram_schmidt: Removing vector 39 of norm 0.0
18:46 gram_schmidt: Removing vector 40 of norm 0.0
18:46 gram_schmidt: Removing vector 41 of norm 0.0
18:46 gram_schmidt: Removing vector 42 of norm 0.0
18:46 gram_schmidt: Removing vector 43 of norm 0.0
18:46 gram_schmidt: Removing vector 44 of norm 0.0
18:46 gram_schmidt: Removing vector 45 of norm 0.0
18:46 gram_schmidt: Removing vector 46 of norm 0.0
18:46 gram_schmidt: Removing vector 47 of norm 0.0
18:46 gram_schmidt: Removing vector 48 of norm 0.0
18:46 gram_schmidt: Removing vector 49 of norm 0.0
18:46 gram_schmidt: Removing vector 50 of norm 0.0
18:46 gram_schmidt: Removing vector 51 of norm 0.0
18:46 gram_schmidt: Removing vector 52 of norm 0.0
18:46 gram_schmidt: Removing vector 53 of norm 0.0
18:46 gram_schmidt: Removing vector 54 of norm 0.0
18:46 gram_schmidt: Removing vector 55 of norm 0.0
18:46 gram_schmidt: Removing vector 56 of norm 0.0
18:46 gram_schmidt: Removing vector 57 of norm 0.0
18:46 gram_schmidt: Removing vector 58 of norm 0.0
18:46 gram_schmidt: Removing vector 59 of norm 0.0
18:46 gram_schmidt: Removing vector 60 of norm 0.0
18:46 gram_schmidt: Removing vector 61 of norm 0.0
18:46 gram_schmidt: Removing vector 62 of norm 0.0
18:46 gram_schmidt: Removing vector 63 of norm 0.0
18:46 gram_schmidt: Removing vector 64 of norm 0.0
18:46 gram_schmidt: Removing vector 65 of norm 0.0
18:46 gram_schmidt: Removing vector 66 of norm 0.0
18:46 gram_schmidt: Removing vector 67 of norm 0.0
18:46 gram_schmidt: Removing vector 68 of norm 0.0
18:46 gram_schmidt: Removing vector 69 of norm 0.0
18:46 gram_schmidt: Removing vector 70 of norm 0.0
18:46 gram_schmidt: Removing vector 71 of norm 0.0
18:46 gram_schmidt: Removing vector 72 of norm 0.0
18:46 gram_schmidt: Removing vector 73 of norm 0.0
18:46 gram_schmidt: Removing vector 74 of norm 0.0
18:46 gram_schmidt: Removing vector 75 of norm 0.0
18:46 gram_schmidt: Removing vector 76 of norm 0.0
18:46 gram_schmidt: Removing vector 77 of norm 0.0
18:46 gram_schmidt: Removing vector 78 of norm 0.0
18:46 gram_schmidt: Removing vector 79 of norm 0.0
18:46 gram_schmidt: Removing vector 80 of norm 0.0
18:46 gram_schmidt: Removing vector 81 of norm 0.0
18:46 gram_schmidt: Removing vector 82 of norm 0.0
18:46 gram_schmidt: Removing vector 83 of norm 0.0
18:46 gram_schmidt: Removing vector 84 of norm 0.0
18:46 gram_schmidt: Removing vector 85 of norm 0.0
18:46 gram_schmidt: Removing vector 86 of norm 0.0
18:46 gram_schmidt: Removing vector 87 of norm 0.0
18:46 gram_schmidt: Removing vector 88 of norm 0.0
18:46 gram_schmidt: Removing vector 89 of norm 0.0
18:46 gram_schmidt: Removing vector 90 of norm 0.0
18:46 gram_schmidt: Removing vector 91 of norm 0.0
18:46 gram_schmidt: Removing vector 92 of norm 0.0
18:46 gram_schmidt: Removing vector 93 of norm 0.0
18:46 gram_schmidt: Removing vector 94 of norm 0.0
18:46 gram_schmidt: Removing vector 95 of norm 0.0
18:46 gram_schmidt: Removing vector 96 of norm 0.0
18:46 gram_schmidt: Removing vector 97 of norm 0.0
18:46 gram_schmidt: Removing vector 98 of norm 0.0
18:46 gram_schmidt: Removing vector 99 of norm 0.0
18:46 gram_schmidt: Removing vector 100 of norm 0.0
18:46 gram_schmidt: Removing vector 101 of norm 0.0
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[1-vector_array_without_reserve5]" time="0.00247097015381"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[1-vector_array_without_reserve6]" time="0.00150084495544"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[1-vector_array_without_reserve7]" time="0.00243997573853"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[1-vector_array_without_reserve8]" time="0.228605985641"><system-err>18:46 gram_schmidt: Orthonormalizing vector 31 again
18:46 gram_schmidt: Removing linear dependent vector 32
18:46 gram_schmidt: Removing linear dependent vector 33
18:46 gram_schmidt: Removing linear dependent vector 34
18:46 gram_schmidt: Removing linear dependent vector 35
18:46 gram_schmidt: Removing linear dependent vector 36
18:46 gram_schmidt: Removing linear dependent vector 37
18:46 gram_schmidt: Removing linear dependent vector 38
18:46 gram_schmidt: Removing linear dependent vector 39
18:46 gram_schmidt: Removing linear dependent vector 40
18:46 gram_schmidt: Removing linear dependent vector 41
18:46 gram_schmidt: Removing linear dependent vector 42
18:46 gram_schmidt: Orthonormalizing vector 31 again
18:46 gram_schmidt: Removing linear dependent vector 32
18:46 gram_schmidt: Removing linear dependent vector 33
18:46 gram_schmidt: Removing linear dependent vector 34
18:46 gram_schmidt: Removing linear dependent vector 35
18:46 gram_schmidt: Removing linear dependent vector 36
18:46 gram_schmidt: Removing linear dependent vector 37
18:46 gram_schmidt: Removing linear dependent vector 38
18:46 gram_schmidt: Removing linear dependent vector 39
18:46 gram_schmidt: Removing linear dependent vector 40
18:46 gram_schmidt: Removing linear dependent vector 41
18:46 gram_schmidt: Removing linear dependent vector 42
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[1-vector_array_without_reserve9]" time="0.0322787761688"><system-err>18:46 gram_schmidt: Removing vector 0 of norm 0.0
18:46 gram_schmidt: Removing vector 1 of norm 0.0
18:46 gram_schmidt: Removing vector 2 of norm 0.0
18:46 gram_schmidt: Removing vector 3 of norm 0.0
18:46 gram_schmidt: Removing vector 4 of norm 0.0
18:46 gram_schmidt: Removing vector 5 of norm 0.0
18:46 gram_schmidt: Removing vector 6 of norm 0.0
18:46 gram_schmidt: Removing vector 7 of norm 0.0
18:46 gram_schmidt: Removing vector 8 of norm 0.0
18:46 gram_schmidt: Removing vector 9 of norm 0.0
18:46 gram_schmidt: Removing vector 10 of norm 0.0
18:46 gram_schmidt: Removing vector 11 of norm 0.0
18:46 gram_schmidt: Removing vector 12 of norm 0.0
18:46 gram_schmidt: Removing vector 13 of norm 0.0
18:46 gram_schmidt: Removing vector 14 of norm 0.0
18:46 gram_schmidt: Removing vector 15 of norm 0.0
18:46 gram_schmidt: Removing vector 16 of norm 0.0
18:46 gram_schmidt: Removing vector 17 of norm 0.0
18:46 gram_schmidt: Removing vector 18 of norm 0.0
18:46 gram_schmidt: Removing vector 19 of norm 0.0
18:46 gram_schmidt: Removing vector 20 of norm 0.0
18:46 gram_schmidt: Removing vector 21 of norm 0.0
18:46 gram_schmidt: Removing vector 22 of norm 0.0
18:46 gram_schmidt: Removing vector 23 of norm 0.0
18:46 gram_schmidt: Removing vector 24 of norm 0.0
18:46 gram_schmidt: Removing vector 25 of norm 0.0
18:46 gram_schmidt: Removing vector 26 of norm 0.0
18:46 gram_schmidt: Removing vector 27 of norm 0.0
18:46 gram_schmidt: Removing vector 28 of norm 0.0
18:46 gram_schmidt: Removing vector 29 of norm 0.0
18:46 gram_schmidt: Removing vector 30 of norm 0.0
18:46 gram_schmidt: Removing vector 31 of norm 0.0
18:46 gram_schmidt: Removing vector 32 of norm 0.0
18:46 gram_schmidt: Removing vector 33 of norm 0.0
18:46 gram_schmidt: Removing vector 34 of norm 0.0
18:46 gram_schmidt: Removing vector 35 of norm 0.0
18:46 gram_schmidt: Removing vector 36 of norm 0.0
18:46 gram_schmidt: Removing vector 37 of norm 0.0
18:46 gram_schmidt: Removing vector 38 of norm 0.0
18:46 gram_schmidt: Removing vector 39 of norm 0.0
18:46 gram_schmidt: Removing vector 40 of norm 0.0
18:46 gram_schmidt: Removing vector 41 of norm 0.0
18:46 gram_schmidt: Removing vector 42 of norm 0.0
18:46 gram_schmidt: Removing vector 43 of norm 0.0
18:46 gram_schmidt: Removing vector 44 of norm 0.0
18:46 gram_schmidt: Removing vector 45 of norm 0.0
18:46 gram_schmidt: Removing vector 46 of norm 0.0
18:46 gram_schmidt: Removing vector 47 of norm 0.0
18:46 gram_schmidt: Removing vector 48 of norm 0.0
18:46 gram_schmidt: Removing vector 49 of norm 0.0
18:46 gram_schmidt: Removing vector 50 of norm 0.0
18:46 gram_schmidt: Removing vector 51 of norm 0.0
18:46 gram_schmidt: Removing vector 52 of norm 0.0
18:46 gram_schmidt: Removing vector 53 of norm 0.0
18:46 gram_schmidt: Removing vector 54 of norm 0.0
18:46 gram_schmidt: Removing vector 55 of norm 0.0
18:46 gram_schmidt: Removing vector 56 of norm 0.0
18:46 gram_schmidt: Removing vector 57 of norm 0.0
18:46 gram_schmidt: Removing vector 58 of norm 0.0
18:46 gram_schmidt: Removing vector 59 of norm 0.0
18:46 gram_schmidt: Removing vector 60 of norm 0.0
18:46 gram_schmidt: Removing vector 61 of norm 0.0
18:46 gram_schmidt: Removing vector 62 of norm 0.0
18:46 gram_schmidt: Removing vector 63 of norm 0.0
18:46 gram_schmidt: Removing vector 64 of norm 0.0
18:46 gram_schmidt: Removing vector 65 of norm 0.0
18:46 gram_schmidt: Removing vector 66 of norm 0.0
18:46 gram_schmidt: Removing vector 67 of norm 0.0
18:46 gram_schmidt: Removing vector 68 of norm 0.0
18:46 gram_schmidt: Removing vector 69 of norm 0.0
18:46 gram_schmidt: Removing vector 70 of norm 0.0
18:46 gram_schmidt: Removing vector 71 of norm 0.0
18:46 gram_schmidt: Removing vector 72 of norm 0.0
18:46 gram_schmidt: Removing vector 73 of norm 0.0
18:46 gram_schmidt: Removing vector 74 of norm 0.0
18:46 gram_schmidt: Removing vector 75 of norm 0.0
18:46 gram_schmidt: Removing vector 76 of norm 0.0
18:46 gram_schmidt: Removing vector 77 of norm 0.0
18:46 gram_schmidt: Removing vector 78 of norm 0.0
18:46 gram_schmidt: Removing vector 79 of norm 0.0
18:46 gram_schmidt: Removing vector 80 of norm 0.0
18:46 gram_schmidt: Removing vector 81 of norm 0.0
18:46 gram_schmidt: Removing vector 82 of norm 0.0
18:46 gram_schmidt: Removing vector 83 of norm 0.0
18:46 gram_schmidt: Removing vector 84 of norm 0.0
18:46 gram_schmidt: Removing vector 85 of norm 0.0
18:46 gram_schmidt: Removing vector 86 of norm 0.0
18:46 gram_schmidt: Removing vector 87 of norm 0.0
18:46 gram_schmidt: Removing vector 88 of norm 0.0
18:46 gram_schmidt: Removing vector 89 of norm 0.0
18:46 gram_schmidt: Removing vector 90 of norm 0.0
18:46 gram_schmidt: Removing vector 91 of norm 0.0
18:46 gram_schmidt: Removing vector 92 of norm 0.0
18:46 gram_schmidt: Removing vector 93 of norm 0.0
18:46 gram_schmidt: Removing vector 94 of norm 0.0
18:46 gram_schmidt: Removing vector 95 of norm 0.0
18:46 gram_schmidt: Removing vector 96 of norm 0.0
18:46 gram_schmidt: Removing vector 97 of norm 0.0
18:46 gram_schmidt: Removing vector 98 of norm 0.0
18:46 gram_schmidt: Removing vector 99 of norm 0.0
18:46 gram_schmidt: Removing vector 100 of norm 0.0
18:46 gram_schmidt: Removing vector 101 of norm 0.0
18:46 gram_schmidt: Removing vector 0 of norm 0.0
18:46 gram_schmidt: Removing vector 1 of norm 0.0
18:46 gram_schmidt: Removing vector 2 of norm 0.0
18:46 gram_schmidt: Removing vector 3 of norm 0.0
18:46 gram_schmidt: Removing vector 4 of norm 0.0
18:46 gram_schmidt: Removing vector 5 of norm 0.0
18:46 gram_schmidt: Removing vector 6 of norm 0.0
18:46 gram_schmidt: Removing vector 7 of norm 0.0
18:46 gram_schmidt: Removing vector 8 of norm 0.0
18:46 gram_schmidt: Removing vector 9 of norm 0.0
18:46 gram_schmidt: Removing vector 10 of norm 0.0
18:46 gram_schmidt: Removing vector 11 of norm 0.0
18:46 gram_schmidt: Removing vector 12 of norm 0.0
18:46 gram_schmidt: Removing vector 13 of norm 0.0
18:46 gram_schmidt: Removing vector 14 of norm 0.0
18:46 gram_schmidt: Removing vector 15 of norm 0.0
18:46 gram_schmidt: Removing vector 16 of norm 0.0
18:46 gram_schmidt: Removing vector 17 of norm 0.0
18:46 gram_schmidt: Removing vector 18 of norm 0.0
18:46 gram_schmidt: Removing vector 19 of norm 0.0
18:46 gram_schmidt: Removing vector 20 of norm 0.0
18:46 gram_schmidt: Removing vector 21 of norm 0.0
18:46 gram_schmidt: Removing vector 22 of norm 0.0
18:46 gram_schmidt: Removing vector 23 of norm 0.0
18:46 gram_schmidt: Removing vector 24 of norm 0.0
18:46 gram_schmidt: Removing vector 25 of norm 0.0
18:46 gram_schmidt: Removing vector 26 of norm 0.0
18:46 gram_schmidt: Removing vector 27 of norm 0.0
18:46 gram_schmidt: Removing vector 28 of norm 0.0
18:46 gram_schmidt: Removing vector 29 of norm 0.0
18:46 gram_schmidt: Removing vector 30 of norm 0.0
18:46 gram_schmidt: Removing vector 31 of norm 0.0
18:46 gram_schmidt: Removing vector 32 of norm 0.0
18:46 gram_schmidt: Removing vector 33 of norm 0.0
18:46 gram_schmidt: Removing vector 34 of norm 0.0
18:46 gram_schmidt: Removing vector 35 of norm 0.0
18:46 gram_schmidt: Removing vector 36 of norm 0.0
18:46 gram_schmidt: Removing vector 37 of norm 0.0
18:46 gram_schmidt: Removing vector 38 of norm 0.0
18:46 gram_schmidt: Removing vector 39 of norm 0.0
18:46 gram_schmidt: Removing vector 40 of norm 0.0
18:46 gram_schmidt: Removing vector 41 of norm 0.0
18:46 gram_schmidt: Removing vector 42 of norm 0.0
18:46 gram_schmidt: Removing vector 43 of norm 0.0
18:46 gram_schmidt: Removing vector 44 of norm 0.0
18:46 gram_schmidt: Removing vector 45 of norm 0.0
18:46 gram_schmidt: Removing vector 46 of norm 0.0
18:46 gram_schmidt: Removing vector 47 of norm 0.0
18:46 gram_schmidt: Removing vector 48 of norm 0.0
18:46 gram_schmidt: Removing vector 49 of norm 0.0
18:46 gram_schmidt: Removing vector 50 of norm 0.0
18:46 gram_schmidt: Removing vector 51 of norm 0.0
18:46 gram_schmidt: Removing vector 52 of norm 0.0
18:46 gram_schmidt: Removing vector 53 of norm 0.0
18:46 gram_schmidt: Removing vector 54 of norm 0.0
18:46 gram_schmidt: Removing vector 55 of norm 0.0
18:46 gram_schmidt: Removing vector 56 of norm 0.0
18:46 gram_schmidt: Removing vector 57 of norm 0.0
18:46 gram_schmidt: Removing vector 58 of norm 0.0
18:46 gram_schmidt: Removing vector 59 of norm 0.0
18:46 gram_schmidt: Removing vector 60 of norm 0.0
18:46 gram_schmidt: Removing vector 61 of norm 0.0
18:46 gram_schmidt: Removing vector 62 of norm 0.0
18:46 gram_schmidt: Removing vector 63 of norm 0.0
18:46 gram_schmidt: Removing vector 64 of norm 0.0
18:46 gram_schmidt: Removing vector 65 of norm 0.0
18:46 gram_schmidt: Removing vector 66 of norm 0.0
18:46 gram_schmidt: Removing vector 67 of norm 0.0
18:46 gram_schmidt: Removing vector 68 of norm 0.0
18:46 gram_schmidt: Removing vector 69 of norm 0.0
18:46 gram_schmidt: Removing vector 70 of norm 0.0
18:46 gram_schmidt: Removing vector 71 of norm 0.0
18:46 gram_schmidt: Removing vector 72 of norm 0.0
18:46 gram_schmidt: Removing vector 73 of norm 0.0
18:46 gram_schmidt: Removing vector 74 of norm 0.0
18:46 gram_schmidt: Removing vector 75 of norm 0.0
18:46 gram_schmidt: Removing vector 76 of norm 0.0
18:46 gram_schmidt: Removing vector 77 of norm 0.0
18:46 gram_schmidt: Removing vector 78 of norm 0.0
18:46 gram_schmidt: Removing vector 79 of norm 0.0
18:46 gram_schmidt: Removing vector 80 of norm 0.0
18:46 gram_schmidt: Removing vector 81 of norm 0.0
18:46 gram_schmidt: Removing vector 82 of norm 0.0
18:46 gram_schmidt: Removing vector 83 of norm 0.0
18:46 gram_schmidt: Removing vector 84 of norm 0.0
18:46 gram_schmidt: Removing vector 85 of norm 0.0
18:46 gram_schmidt: Removing vector 86 of norm 0.0
18:46 gram_schmidt: Removing vector 87 of norm 0.0
18:46 gram_schmidt: Removing vector 88 of norm 0.0
18:46 gram_schmidt: Removing vector 89 of norm 0.0
18:46 gram_schmidt: Removing vector 90 of norm 0.0
18:46 gram_schmidt: Removing vector 91 of norm 0.0
18:46 gram_schmidt: Removing vector 92 of norm 0.0
18:46 gram_schmidt: Removing vector 93 of norm 0.0
18:46 gram_schmidt: Removing vector 94 of norm 0.0
18:46 gram_schmidt: Removing vector 95 of norm 0.0
18:46 gram_schmidt: Removing vector 96 of norm 0.0
18:46 gram_schmidt: Removing vector 97 of norm 0.0
18:46 gram_schmidt: Removing vector 98 of norm 0.0
18:46 gram_schmidt: Removing vector 99 of norm 0.0
18:46 gram_schmidt: Removing vector 100 of norm 0.0
18:46 gram_schmidt: Removing vector 101 of norm 0.0
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[1-vector_array_without_reserve10]" time="0.00355195999146"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[1-vector_array_without_reserve11]" time="0.00703406333923"><system-err>18:46 gram_schmidt: Removing linear dependent vector 3
18:46 gram_schmidt: Removing linear dependent vector 3
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[1-vector_array_without_reserve12]" time="0.00365304946899"><system-err>18:46 gram_schmidt: Removing vector 0 of norm 0.0
18:46 gram_schmidt: Removing vector 1 of norm 0.0
18:46 gram_schmidt: Removing vector 2 of norm 0.0
18:46 gram_schmidt: Removing vector 0 of norm 0.0
18:46 gram_schmidt: Removing vector 1 of norm 0.0
18:46 gram_schmidt: Removing vector 2 of norm 0.0
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[1-vector_array_without_reserve13]" time="0.00247573852539"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[1-vector_array_without_reserve14]" time="0.00514888763428"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[1-vector_array_without_reserve15]" time="0.512876749039"><system-err>18:46 gram_schmidt: Removing linear dependent vector 36
18:46 gram_schmidt: Removing linear dependent vector 37
18:46 gram_schmidt: Removing linear dependent vector 38
18:46 gram_schmidt: Removing linear dependent vector 39
18:46 gram_schmidt: Removing linear dependent vector 40
18:46 gram_schmidt: Removing linear dependent vector 41
18:46 gram_schmidt: Removing linear dependent vector 42
18:47 gram_schmidt: Removing linear dependent vector 36
18:47 gram_schmidt: Removing linear dependent vector 37
18:47 gram_schmidt: Removing linear dependent vector 38
18:47 gram_schmidt: Removing linear dependent vector 39
18:47 gram_schmidt: Removing linear dependent vector 40
18:47 gram_schmidt: Removing linear dependent vector 41
18:47 gram_schmidt: Removing linear dependent vector 42
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[1-vector_array_without_reserve16]" time="0.284100055695"><system-err>18:47 gram_schmidt: Removing linear dependent vector 3
18:47 gram_schmidt: Removing linear dependent vector 4
18:47 gram_schmidt: Removing linear dependent vector 5
18:47 gram_schmidt: Removing linear dependent vector 6
18:47 gram_schmidt: Removing linear dependent vector 7
18:47 gram_schmidt: Removing linear dependent vector 8
18:47 gram_schmidt: Removing linear dependent vector 9
18:47 gram_schmidt: Removing linear dependent vector 10
18:47 gram_schmidt: Removing linear dependent vector 11
18:47 gram_schmidt: Removing linear dependent vector 12
18:47 gram_schmidt: Removing linear dependent vector 13
18:47 gram_schmidt: Removing linear dependent vector 14
18:47 gram_schmidt: Removing linear dependent vector 15
18:47 gram_schmidt: Removing linear dependent vector 16
18:47 gram_schmidt: Removing linear dependent vector 17
18:47 gram_schmidt: Removing linear dependent vector 18
18:47 gram_schmidt: Removing linear dependent vector 19
18:47 gram_schmidt: Removing linear dependent vector 20
18:47 gram_schmidt: Removing linear dependent vector 21
18:47 gram_schmidt: Removing linear dependent vector 22
18:47 gram_schmidt: Removing linear dependent vector 23
18:47 gram_schmidt: Removing linear dependent vector 24
18:47 gram_schmidt: Removing linear dependent vector 25
18:47 gram_schmidt: Removing linear dependent vector 26
18:47 gram_schmidt: Removing linear dependent vector 27
18:47 gram_schmidt: Removing linear dependent vector 28
18:47 gram_schmidt: Removing linear dependent vector 29
18:47 gram_schmidt: Removing linear dependent vector 30
18:47 gram_schmidt: Removing linear dependent vector 31
18:47 gram_schmidt: Removing linear dependent vector 32
18:47 gram_schmidt: Removing linear dependent vector 33
18:47 gram_schmidt: Removing linear dependent vector 34
18:47 gram_schmidt: Removing linear dependent vector 35
18:47 gram_schmidt: Removing linear dependent vector 36
18:47 gram_schmidt: Removing linear dependent vector 37
18:47 gram_schmidt: Removing linear dependent vector 38
18:47 gram_schmidt: Removing linear dependent vector 39
18:47 gram_schmidt: Removing linear dependent vector 40
18:47 gram_schmidt: Removing linear dependent vector 41
18:47 gram_schmidt: Removing linear dependent vector 42
18:47 gram_schmidt: Removing linear dependent vector 43
18:47 gram_schmidt: Removing linear dependent vector 44
18:47 gram_schmidt: Removing linear dependent vector 45
18:47 gram_schmidt: Removing linear dependent vector 46
18:47 gram_schmidt: Removing linear dependent vector 47
18:47 gram_schmidt: Removing linear dependent vector 48
18:47 gram_schmidt: Removing linear dependent vector 49
18:47 gram_schmidt: Removing linear dependent vector 50
18:47 gram_schmidt: Removing linear dependent vector 51
18:47 gram_schmidt: Removing linear dependent vector 52
18:47 gram_schmidt: Removing linear dependent vector 53
18:47 gram_schmidt: Removing linear dependent vector 54
18:47 gram_schmidt: Removing linear dependent vector 55
18:47 gram_schmidt: Removing linear dependent vector 56
18:47 gram_schmidt: Removing linear dependent vector 57
18:47 gram_schmidt: Removing linear dependent vector 58
18:47 gram_schmidt: Removing linear dependent vector 59
18:47 gram_schmidt: Removing linear dependent vector 60
18:47 gram_schmidt: Removing linear dependent vector 61
18:47 gram_schmidt: Removing linear dependent vector 62
18:47 gram_schmidt: Removing linear dependent vector 63
18:47 gram_schmidt: Removing linear dependent vector 64
18:47 gram_schmidt: Removing linear dependent vector 65
18:47 gram_schmidt: Removing linear dependent vector 66
18:47 gram_schmidt: Removing linear dependent vector 67
18:47 gram_schmidt: Removing linear dependent vector 68
18:47 gram_schmidt: Removing linear dependent vector 69
18:47 gram_schmidt: Removing linear dependent vector 70
18:47 gram_schmidt: Removing linear dependent vector 71
18:47 gram_schmidt: Removing linear dependent vector 72
18:47 gram_schmidt: Removing linear dependent vector 73
18:47 gram_schmidt: Removing linear dependent vector 74
18:47 gram_schmidt: Removing linear dependent vector 75
18:47 gram_schmidt: Removing linear dependent vector 76
18:47 gram_schmidt: Removing linear dependent vector 77
18:47 gram_schmidt: Removing linear dependent vector 78
18:47 gram_schmidt: Removing linear dependent vector 79
18:47 gram_schmidt: Removing linear dependent vector 80
18:47 gram_schmidt: Removing linear dependent vector 81
18:47 gram_schmidt: Removing linear dependent vector 82
18:47 gram_schmidt: Removing linear dependent vector 83
18:47 gram_schmidt: Removing linear dependent vector 84
18:47 gram_schmidt: Removing linear dependent vector 85
18:47 gram_schmidt: Removing linear dependent vector 86
18:47 gram_schmidt: Removing linear dependent vector 87
18:47 gram_schmidt: Removing linear dependent vector 88
18:47 gram_schmidt: Removing linear dependent vector 89
18:47 gram_schmidt: Removing linear dependent vector 90
18:47 gram_schmidt: Removing linear dependent vector 91
18:47 gram_schmidt: Removing linear dependent vector 92
18:47 gram_schmidt: Removing linear dependent vector 93
18:47 gram_schmidt: Removing linear dependent vector 94
18:47 gram_schmidt: Removing linear dependent vector 95
18:47 gram_schmidt: Removing linear dependent vector 96
18:47 gram_schmidt: Removing linear dependent vector 97
18:47 gram_schmidt: Removing linear dependent vector 98
18:47 gram_schmidt: Removing linear dependent vector 99
18:47 gram_schmidt: Removing linear dependent vector 100
18:47 gram_schmidt: Removing linear dependent vector 101
18:47 gram_schmidt: Removing linear dependent vector 3
18:47 gram_schmidt: Removing linear dependent vector 4
18:47 gram_schmidt: Removing linear dependent vector 5
18:47 gram_schmidt: Removing linear dependent vector 6
18:47 gram_schmidt: Removing linear dependent vector 7
18:47 gram_schmidt: Removing linear dependent vector 8
18:47 gram_schmidt: Removing linear dependent vector 9
18:47 gram_schmidt: Removing linear dependent vector 10
18:47 gram_schmidt: Removing linear dependent vector 11
18:47 gram_schmidt: Removing linear dependent vector 12
18:47 gram_schmidt: Removing linear dependent vector 13
18:47 gram_schmidt: Removing linear dependent vector 14
18:47 gram_schmidt: Removing linear dependent vector 15
18:47 gram_schmidt: Removing linear dependent vector 16
18:47 gram_schmidt: Removing linear dependent vector 17
18:47 gram_schmidt: Removing linear dependent vector 18
18:47 gram_schmidt: Removing linear dependent vector 19
18:47 gram_schmidt: Removing linear dependent vector 20
18:47 gram_schmidt: Removing linear dependent vector 21
18:47 gram_schmidt: Removing linear dependent vector 22
18:47 gram_schmidt: Removing linear dependent vector 23
18:47 gram_schmidt: Removing linear dependent vector 24
18:47 gram_schmidt: Removing linear dependent vector 25
18:47 gram_schmidt: Removing linear dependent vector 26
18:47 gram_schmidt: Removing linear dependent vector 27
18:47 gram_schmidt: Removing linear dependent vector 28
18:47 gram_schmidt: Removing linear dependent vector 29
18:47 gram_schmidt: Removing linear dependent vector 30
18:47 gram_schmidt: Removing linear dependent vector 31
18:47 gram_schmidt: Removing linear dependent vector 32
18:47 gram_schmidt: Removing linear dependent vector 33
18:47 gram_schmidt: Removing linear dependent vector 34
18:47 gram_schmidt: Removing linear dependent vector 35
18:47 gram_schmidt: Removing linear dependent vector 36
18:47 gram_schmidt: Removing linear dependent vector 37
18:47 gram_schmidt: Removing linear dependent vector 38
18:47 gram_schmidt: Removing linear dependent vector 39
18:47 gram_schmidt: Removing linear dependent vector 40
18:47 gram_schmidt: Removing linear dependent vector 41
18:47 gram_schmidt: Removing linear dependent vector 42
18:47 gram_schmidt: Removing linear dependent vector 43
18:47 gram_schmidt: Removing linear dependent vector 44
18:47 gram_schmidt: Removing linear dependent vector 45
18:47 gram_schmidt: Removing linear dependent vector 46
18:47 gram_schmidt: Removing linear dependent vector 47
18:47 gram_schmidt: Removing linear dependent vector 48
18:47 gram_schmidt: Removing linear dependent vector 49
18:47 gram_schmidt: Removing linear dependent vector 50
18:47 gram_schmidt: Removing linear dependent vector 51
18:47 gram_schmidt: Removing linear dependent vector 52
18:47 gram_schmidt: Removing linear dependent vector 53
18:47 gram_schmidt: Removing linear dependent vector 54
18:47 gram_schmidt: Removing linear dependent vector 55
18:47 gram_schmidt: Removing linear dependent vector 56
18:47 gram_schmidt: Removing linear dependent vector 57
18:47 gram_schmidt: Removing linear dependent vector 58
18:47 gram_schmidt: Removing linear dependent vector 59
18:47 gram_schmidt: Removing linear dependent vector 60
18:47 gram_schmidt: Removing linear dependent vector 61
18:47 gram_schmidt: Removing linear dependent vector 62
18:47 gram_schmidt: Removing linear dependent vector 63
18:47 gram_schmidt: Removing linear dependent vector 64
18:47 gram_schmidt: Removing linear dependent vector 65
18:47 gram_schmidt: Removing linear dependent vector 66
18:47 gram_schmidt: Removing linear dependent vector 67
18:47 gram_schmidt: Removing linear dependent vector 68
18:47 gram_schmidt: Removing linear dependent vector 69
18:47 gram_schmidt: Removing linear dependent vector 70
18:47 gram_schmidt: Removing linear dependent vector 71
18:47 gram_schmidt: Removing linear dependent vector 72
18:47 gram_schmidt: Removing linear dependent vector 73
18:47 gram_schmidt: Removing linear dependent vector 74
18:47 gram_schmidt: Removing linear dependent vector 75
18:47 gram_schmidt: Removing linear dependent vector 76
18:47 gram_schmidt: Removing linear dependent vector 77
18:47 gram_schmidt: Removing linear dependent vector 78
18:47 gram_schmidt: Removing linear dependent vector 79
18:47 gram_schmidt: Removing linear dependent vector 80
18:47 gram_schmidt: Removing linear dependent vector 81
18:47 gram_schmidt: Removing linear dependent vector 82
18:47 gram_schmidt: Removing linear dependent vector 83
18:47 gram_schmidt: Removing linear dependent vector 84
18:47 gram_schmidt: Removing linear dependent vector 85
18:47 gram_schmidt: Removing linear dependent vector 86
18:47 gram_schmidt: Removing linear dependent vector 87
18:47 gram_schmidt: Removing linear dependent vector 88
18:47 gram_schmidt: Removing linear dependent vector 89
18:47 gram_schmidt: Removing linear dependent vector 90
18:47 gram_schmidt: Removing linear dependent vector 91
18:47 gram_schmidt: Removing linear dependent vector 92
18:47 gram_schmidt: Removing linear dependent vector 93
18:47 gram_schmidt: Removing linear dependent vector 94
18:47 gram_schmidt: Removing linear dependent vector 95
18:47 gram_schmidt: Removing linear dependent vector 96
18:47 gram_schmidt: Removing linear dependent vector 97
18:47 gram_schmidt: Removing linear dependent vector 98
18:47 gram_schmidt: Removing linear dependent vector 99
18:47 gram_schmidt: Removing linear dependent vector 100
18:47 gram_schmidt: Removing linear dependent vector 101
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[2-vector_array_without_reserve0]" time="0.00269174575806"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[2-vector_array_without_reserve1]" time="0.00168395042419"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[2-vector_array_without_reserve2]" time="0.00193691253662"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[2-vector_array_without_reserve3]" time="0.127836942673"><system-err>18:47 gram_schmidt: Orthonormalizing vector 31 again
18:47 gram_schmidt: Removing linear dependent vector 32
18:47 gram_schmidt: Removing linear dependent vector 33
18:47 gram_schmidt: Removing linear dependent vector 34
18:47 gram_schmidt: Removing linear dependent vector 35
18:47 gram_schmidt: Removing linear dependent vector 36
18:47 gram_schmidt: Removing linear dependent vector 37
18:47 gram_schmidt: Removing linear dependent vector 38
18:47 gram_schmidt: Removing linear dependent vector 39
18:47 gram_schmidt: Removing linear dependent vector 40
18:47 gram_schmidt: Removing linear dependent vector 41
18:47 gram_schmidt: Removing linear dependent vector 42
18:47 gram_schmidt: Orthonormalizing vector 31 again
18:47 gram_schmidt: Removing linear dependent vector 32
18:47 gram_schmidt: Removing linear dependent vector 33
18:47 gram_schmidt: Removing linear dependent vector 34
18:47 gram_schmidt: Removing linear dependent vector 35
18:47 gram_schmidt: Removing linear dependent vector 36
18:47 gram_schmidt: Removing linear dependent vector 37
18:47 gram_schmidt: Removing linear dependent vector 38
18:47 gram_schmidt: Removing linear dependent vector 39
18:47 gram_schmidt: Removing linear dependent vector 40
18:47 gram_schmidt: Removing linear dependent vector 41
18:47 gram_schmidt: Removing linear dependent vector 42
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[2-vector_array_without_reserve4]" time="0.0289928913116"><system-err>18:47 gram_schmidt: Removing vector 0 of norm 0.0
18:47 gram_schmidt: Removing vector 1 of norm 0.0
18:47 gram_schmidt: Removing vector 2 of norm 0.0
18:47 gram_schmidt: Removing vector 3 of norm 0.0
18:47 gram_schmidt: Removing vector 4 of norm 0.0
18:47 gram_schmidt: Removing vector 5 of norm 0.0
18:47 gram_schmidt: Removing vector 6 of norm 0.0
18:47 gram_schmidt: Removing vector 7 of norm 0.0
18:47 gram_schmidt: Removing vector 8 of norm 0.0
18:47 gram_schmidt: Removing vector 9 of norm 0.0
18:47 gram_schmidt: Removing vector 10 of norm 0.0
18:47 gram_schmidt: Removing vector 11 of norm 0.0
18:47 gram_schmidt: Removing vector 12 of norm 0.0
18:47 gram_schmidt: Removing vector 13 of norm 0.0
18:47 gram_schmidt: Removing vector 14 of norm 0.0
18:47 gram_schmidt: Removing vector 15 of norm 0.0
18:47 gram_schmidt: Removing vector 16 of norm 0.0
18:47 gram_schmidt: Removing vector 17 of norm 0.0
18:47 gram_schmidt: Removing vector 18 of norm 0.0
18:47 gram_schmidt: Removing vector 19 of norm 0.0
18:47 gram_schmidt: Removing vector 20 of norm 0.0
18:47 gram_schmidt: Removing vector 21 of norm 0.0
18:47 gram_schmidt: Removing vector 22 of norm 0.0
18:47 gram_schmidt: Removing vector 23 of norm 0.0
18:47 gram_schmidt: Removing vector 24 of norm 0.0
18:47 gram_schmidt: Removing vector 25 of norm 0.0
18:47 gram_schmidt: Removing vector 26 of norm 0.0
18:47 gram_schmidt: Removing vector 27 of norm 0.0
18:47 gram_schmidt: Removing vector 28 of norm 0.0
18:47 gram_schmidt: Removing vector 29 of norm 0.0
18:47 gram_schmidt: Removing vector 30 of norm 0.0
18:47 gram_schmidt: Removing vector 31 of norm 0.0
18:47 gram_schmidt: Removing vector 32 of norm 0.0
18:47 gram_schmidt: Removing vector 33 of norm 0.0
18:47 gram_schmidt: Removing vector 34 of norm 0.0
18:47 gram_schmidt: Removing vector 35 of norm 0.0
18:47 gram_schmidt: Removing vector 36 of norm 0.0
18:47 gram_schmidt: Removing vector 37 of norm 0.0
18:47 gram_schmidt: Removing vector 38 of norm 0.0
18:47 gram_schmidt: Removing vector 39 of norm 0.0
18:47 gram_schmidt: Removing vector 40 of norm 0.0
18:47 gram_schmidt: Removing vector 41 of norm 0.0
18:47 gram_schmidt: Removing vector 42 of norm 0.0
18:47 gram_schmidt: Removing vector 43 of norm 0.0
18:47 gram_schmidt: Removing vector 44 of norm 0.0
18:47 gram_schmidt: Removing vector 45 of norm 0.0
18:47 gram_schmidt: Removing vector 46 of norm 0.0
18:47 gram_schmidt: Removing vector 47 of norm 0.0
18:47 gram_schmidt: Removing vector 48 of norm 0.0
18:47 gram_schmidt: Removing vector 49 of norm 0.0
18:47 gram_schmidt: Removing vector 50 of norm 0.0
18:47 gram_schmidt: Removing vector 51 of norm 0.0
18:47 gram_schmidt: Removing vector 52 of norm 0.0
18:47 gram_schmidt: Removing vector 53 of norm 0.0
18:47 gram_schmidt: Removing vector 54 of norm 0.0
18:47 gram_schmidt: Removing vector 55 of norm 0.0
18:47 gram_schmidt: Removing vector 56 of norm 0.0
18:47 gram_schmidt: Removing vector 57 of norm 0.0
18:47 gram_schmidt: Removing vector 58 of norm 0.0
18:47 gram_schmidt: Removing vector 59 of norm 0.0
18:47 gram_schmidt: Removing vector 60 of norm 0.0
18:47 gram_schmidt: Removing vector 61 of norm 0.0
18:47 gram_schmidt: Removing vector 62 of norm 0.0
18:47 gram_schmidt: Removing vector 63 of norm 0.0
18:47 gram_schmidt: Removing vector 64 of norm 0.0
18:47 gram_schmidt: Removing vector 65 of norm 0.0
18:47 gram_schmidt: Removing vector 66 of norm 0.0
18:47 gram_schmidt: Removing vector 67 of norm 0.0
18:47 gram_schmidt: Removing vector 68 of norm 0.0
18:47 gram_schmidt: Removing vector 69 of norm 0.0
18:47 gram_schmidt: Removing vector 70 of norm 0.0
18:47 gram_schmidt: Removing vector 71 of norm 0.0
18:47 gram_schmidt: Removing vector 72 of norm 0.0
18:47 gram_schmidt: Removing vector 73 of norm 0.0
18:47 gram_schmidt: Removing vector 74 of norm 0.0
18:47 gram_schmidt: Removing vector 75 of norm 0.0
18:47 gram_schmidt: Removing vector 76 of norm 0.0
18:47 gram_schmidt: Removing vector 77 of norm 0.0
18:47 gram_schmidt: Removing vector 78 of norm 0.0
18:47 gram_schmidt: Removing vector 79 of norm 0.0
18:47 gram_schmidt: Removing vector 80 of norm 0.0
18:47 gram_schmidt: Removing vector 81 of norm 0.0
18:47 gram_schmidt: Removing vector 82 of norm 0.0
18:47 gram_schmidt: Removing vector 83 of norm 0.0
18:47 gram_schmidt: Removing vector 84 of norm 0.0
18:47 gram_schmidt: Removing vector 85 of norm 0.0
18:47 gram_schmidt: Removing vector 86 of norm 0.0
18:47 gram_schmidt: Removing vector 87 of norm 0.0
18:47 gram_schmidt: Removing vector 88 of norm 0.0
18:47 gram_schmidt: Removing vector 89 of norm 0.0
18:47 gram_schmidt: Removing vector 90 of norm 0.0
18:47 gram_schmidt: Removing vector 91 of norm 0.0
18:47 gram_schmidt: Removing vector 92 of norm 0.0
18:47 gram_schmidt: Removing vector 93 of norm 0.0
18:47 gram_schmidt: Removing vector 94 of norm 0.0
18:47 gram_schmidt: Removing vector 95 of norm 0.0
18:47 gram_schmidt: Removing vector 96 of norm 0.0
18:47 gram_schmidt: Removing vector 97 of norm 0.0
18:47 gram_schmidt: Removing vector 98 of norm 0.0
18:47 gram_schmidt: Removing vector 99 of norm 0.0
18:47 gram_schmidt: Removing vector 100 of norm 0.0
18:47 gram_schmidt: Removing vector 101 of norm 0.0
18:47 gram_schmidt: Removing vector 0 of norm 0.0
18:47 gram_schmidt: Removing vector 1 of norm 0.0
18:47 gram_schmidt: Removing vector 2 of norm 0.0
18:47 gram_schmidt: Removing vector 3 of norm 0.0
18:47 gram_schmidt: Removing vector 4 of norm 0.0
18:47 gram_schmidt: Removing vector 5 of norm 0.0
18:47 gram_schmidt: Removing vector 6 of norm 0.0
18:47 gram_schmidt: Removing vector 7 of norm 0.0
18:47 gram_schmidt: Removing vector 8 of norm 0.0
18:47 gram_schmidt: Removing vector 9 of norm 0.0
18:47 gram_schmidt: Removing vector 10 of norm 0.0
18:47 gram_schmidt: Removing vector 11 of norm 0.0
18:47 gram_schmidt: Removing vector 12 of norm 0.0
18:47 gram_schmidt: Removing vector 13 of norm 0.0
18:47 gram_schmidt: Removing vector 14 of norm 0.0
18:47 gram_schmidt: Removing vector 15 of norm 0.0
18:47 gram_schmidt: Removing vector 16 of norm 0.0
18:47 gram_schmidt: Removing vector 17 of norm 0.0
18:47 gram_schmidt: Removing vector 18 of norm 0.0
18:47 gram_schmidt: Removing vector 19 of norm 0.0
18:47 gram_schmidt: Removing vector 20 of norm 0.0
18:47 gram_schmidt: Removing vector 21 of norm 0.0
18:47 gram_schmidt: Removing vector 22 of norm 0.0
18:47 gram_schmidt: Removing vector 23 of norm 0.0
18:47 gram_schmidt: Removing vector 24 of norm 0.0
18:47 gram_schmidt: Removing vector 25 of norm 0.0
18:47 gram_schmidt: Removing vector 26 of norm 0.0
18:47 gram_schmidt: Removing vector 27 of norm 0.0
18:47 gram_schmidt: Removing vector 28 of norm 0.0
18:47 gram_schmidt: Removing vector 29 of norm 0.0
18:47 gram_schmidt: Removing vector 30 of norm 0.0
18:47 gram_schmidt: Removing vector 31 of norm 0.0
18:47 gram_schmidt: Removing vector 32 of norm 0.0
18:47 gram_schmidt: Removing vector 33 of norm 0.0
18:47 gram_schmidt: Removing vector 34 of norm 0.0
18:47 gram_schmidt: Removing vector 35 of norm 0.0
18:47 gram_schmidt: Removing vector 36 of norm 0.0
18:47 gram_schmidt: Removing vector 37 of norm 0.0
18:47 gram_schmidt: Removing vector 38 of norm 0.0
18:47 gram_schmidt: Removing vector 39 of norm 0.0
18:47 gram_schmidt: Removing vector 40 of norm 0.0
18:47 gram_schmidt: Removing vector 41 of norm 0.0
18:47 gram_schmidt: Removing vector 42 of norm 0.0
18:47 gram_schmidt: Removing vector 43 of norm 0.0
18:47 gram_schmidt: Removing vector 44 of norm 0.0
18:47 gram_schmidt: Removing vector 45 of norm 0.0
18:47 gram_schmidt: Removing vector 46 of norm 0.0
18:47 gram_schmidt: Removing vector 47 of norm 0.0
18:47 gram_schmidt: Removing vector 48 of norm 0.0
18:47 gram_schmidt: Removing vector 49 of norm 0.0
18:47 gram_schmidt: Removing vector 50 of norm 0.0
18:47 gram_schmidt: Removing vector 51 of norm 0.0
18:47 gram_schmidt: Removing vector 52 of norm 0.0
18:47 gram_schmidt: Removing vector 53 of norm 0.0
18:47 gram_schmidt: Removing vector 54 of norm 0.0
18:47 gram_schmidt: Removing vector 55 of norm 0.0
18:47 gram_schmidt: Removing vector 56 of norm 0.0
18:47 gram_schmidt: Removing vector 57 of norm 0.0
18:47 gram_schmidt: Removing vector 58 of norm 0.0
18:47 gram_schmidt: Removing vector 59 of norm 0.0
18:47 gram_schmidt: Removing vector 60 of norm 0.0
18:47 gram_schmidt: Removing vector 61 of norm 0.0
18:47 gram_schmidt: Removing vector 62 of norm 0.0
18:47 gram_schmidt: Removing vector 63 of norm 0.0
18:47 gram_schmidt: Removing vector 64 of norm 0.0
18:47 gram_schmidt: Removing vector 65 of norm 0.0
18:47 gram_schmidt: Removing vector 66 of norm 0.0
18:47 gram_schmidt: Removing vector 67 of norm 0.0
18:47 gram_schmidt: Removing vector 68 of norm 0.0
18:47 gram_schmidt: Removing vector 69 of norm 0.0
18:47 gram_schmidt: Removing vector 70 of norm 0.0
18:47 gram_schmidt: Removing vector 71 of norm 0.0
18:47 gram_schmidt: Removing vector 72 of norm 0.0
18:47 gram_schmidt: Removing vector 73 of norm 0.0
18:47 gram_schmidt: Removing vector 74 of norm 0.0
18:47 gram_schmidt: Removing vector 75 of norm 0.0
18:47 gram_schmidt: Removing vector 76 of norm 0.0
18:47 gram_schmidt: Removing vector 77 of norm 0.0
18:47 gram_schmidt: Removing vector 78 of norm 0.0
18:47 gram_schmidt: Removing vector 79 of norm 0.0
18:47 gram_schmidt: Removing vector 80 of norm 0.0
18:47 gram_schmidt: Removing vector 81 of norm 0.0
18:47 gram_schmidt: Removing vector 82 of norm 0.0
18:47 gram_schmidt: Removing vector 83 of norm 0.0
18:47 gram_schmidt: Removing vector 84 of norm 0.0
18:47 gram_schmidt: Removing vector 85 of norm 0.0
18:47 gram_schmidt: Removing vector 86 of norm 0.0
18:47 gram_schmidt: Removing vector 87 of norm 0.0
18:47 gram_schmidt: Removing vector 88 of norm 0.0
18:47 gram_schmidt: Removing vector 89 of norm 0.0
18:47 gram_schmidt: Removing vector 90 of norm 0.0
18:47 gram_schmidt: Removing vector 91 of norm 0.0
18:47 gram_schmidt: Removing vector 92 of norm 0.0
18:47 gram_schmidt: Removing vector 93 of norm 0.0
18:47 gram_schmidt: Removing vector 94 of norm 0.0
18:47 gram_schmidt: Removing vector 95 of norm 0.0
18:47 gram_schmidt: Removing vector 96 of norm 0.0
18:47 gram_schmidt: Removing vector 97 of norm 0.0
18:47 gram_schmidt: Removing vector 98 of norm 0.0
18:47 gram_schmidt: Removing vector 99 of norm 0.0
18:47 gram_schmidt: Removing vector 100 of norm 0.0
18:47 gram_schmidt: Removing vector 101 of norm 0.0
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[2-vector_array_without_reserve5]" time="0.00237822532654"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[2-vector_array_without_reserve6]" time="0.00163459777832"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[2-vector_array_without_reserve7]" time="0.00213694572449"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[2-vector_array_without_reserve8]" time="0.22909283638"><system-err>18:47 gram_schmidt: Orthonormalizing vector 31 again
18:47 gram_schmidt: Removing linear dependent vector 32
18:47 gram_schmidt: Removing linear dependent vector 33
18:47 gram_schmidt: Removing linear dependent vector 34
18:47 gram_schmidt: Removing linear dependent vector 35
18:47 gram_schmidt: Removing linear dependent vector 36
18:47 gram_schmidt: Removing linear dependent vector 37
18:47 gram_schmidt: Removing linear dependent vector 38
18:47 gram_schmidt: Removing linear dependent vector 39
18:47 gram_schmidt: Removing linear dependent vector 40
18:47 gram_schmidt: Removing linear dependent vector 41
18:47 gram_schmidt: Removing linear dependent vector 42
18:47 gram_schmidt: Orthonormalizing vector 31 again
18:47 gram_schmidt: Removing linear dependent vector 32
18:47 gram_schmidt: Removing linear dependent vector 33
18:47 gram_schmidt: Removing linear dependent vector 34
18:47 gram_schmidt: Removing linear dependent vector 35
18:47 gram_schmidt: Removing linear dependent vector 36
18:47 gram_schmidt: Removing linear dependent vector 37
18:47 gram_schmidt: Removing linear dependent vector 38
18:47 gram_schmidt: Removing linear dependent vector 39
18:47 gram_schmidt: Removing linear dependent vector 40
18:47 gram_schmidt: Removing linear dependent vector 41
18:47 gram_schmidt: Removing linear dependent vector 42
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[2-vector_array_without_reserve9]" time="0.0326867103577"><system-err>18:47 gram_schmidt: Removing vector 0 of norm 0.0
18:47 gram_schmidt: Removing vector 1 of norm 0.0
18:47 gram_schmidt: Removing vector 2 of norm 0.0
18:47 gram_schmidt: Removing vector 3 of norm 0.0
18:47 gram_schmidt: Removing vector 4 of norm 0.0
18:47 gram_schmidt: Removing vector 5 of norm 0.0
18:47 gram_schmidt: Removing vector 6 of norm 0.0
18:47 gram_schmidt: Removing vector 7 of norm 0.0
18:47 gram_schmidt: Removing vector 8 of norm 0.0
18:47 gram_schmidt: Removing vector 9 of norm 0.0
18:47 gram_schmidt: Removing vector 10 of norm 0.0
18:47 gram_schmidt: Removing vector 11 of norm 0.0
18:47 gram_schmidt: Removing vector 12 of norm 0.0
18:47 gram_schmidt: Removing vector 13 of norm 0.0
18:47 gram_schmidt: Removing vector 14 of norm 0.0
18:47 gram_schmidt: Removing vector 15 of norm 0.0
18:47 gram_schmidt: Removing vector 16 of norm 0.0
18:47 gram_schmidt: Removing vector 17 of norm 0.0
18:47 gram_schmidt: Removing vector 18 of norm 0.0
18:47 gram_schmidt: Removing vector 19 of norm 0.0
18:47 gram_schmidt: Removing vector 20 of norm 0.0
18:47 gram_schmidt: Removing vector 21 of norm 0.0
18:47 gram_schmidt: Removing vector 22 of norm 0.0
18:47 gram_schmidt: Removing vector 23 of norm 0.0
18:47 gram_schmidt: Removing vector 24 of norm 0.0
18:47 gram_schmidt: Removing vector 25 of norm 0.0
18:47 gram_schmidt: Removing vector 26 of norm 0.0
18:47 gram_schmidt: Removing vector 27 of norm 0.0
18:47 gram_schmidt: Removing vector 28 of norm 0.0
18:47 gram_schmidt: Removing vector 29 of norm 0.0
18:47 gram_schmidt: Removing vector 30 of norm 0.0
18:47 gram_schmidt: Removing vector 31 of norm 0.0
18:47 gram_schmidt: Removing vector 32 of norm 0.0
18:47 gram_schmidt: Removing vector 33 of norm 0.0
18:47 gram_schmidt: Removing vector 34 of norm 0.0
18:47 gram_schmidt: Removing vector 35 of norm 0.0
18:47 gram_schmidt: Removing vector 36 of norm 0.0
18:47 gram_schmidt: Removing vector 37 of norm 0.0
18:47 gram_schmidt: Removing vector 38 of norm 0.0
18:47 gram_schmidt: Removing vector 39 of norm 0.0
18:47 gram_schmidt: Removing vector 40 of norm 0.0
18:47 gram_schmidt: Removing vector 41 of norm 0.0
18:47 gram_schmidt: Removing vector 42 of norm 0.0
18:47 gram_schmidt: Removing vector 43 of norm 0.0
18:47 gram_schmidt: Removing vector 44 of norm 0.0
18:47 gram_schmidt: Removing vector 45 of norm 0.0
18:47 gram_schmidt: Removing vector 46 of norm 0.0
18:47 gram_schmidt: Removing vector 47 of norm 0.0
18:47 gram_schmidt: Removing vector 48 of norm 0.0
18:47 gram_schmidt: Removing vector 49 of norm 0.0
18:47 gram_schmidt: Removing vector 50 of norm 0.0
18:47 gram_schmidt: Removing vector 51 of norm 0.0
18:47 gram_schmidt: Removing vector 52 of norm 0.0
18:47 gram_schmidt: Removing vector 53 of norm 0.0
18:47 gram_schmidt: Removing vector 54 of norm 0.0
18:47 gram_schmidt: Removing vector 55 of norm 0.0
18:47 gram_schmidt: Removing vector 56 of norm 0.0
18:47 gram_schmidt: Removing vector 57 of norm 0.0
18:47 gram_schmidt: Removing vector 58 of norm 0.0
18:47 gram_schmidt: Removing vector 59 of norm 0.0
18:47 gram_schmidt: Removing vector 60 of norm 0.0
18:47 gram_schmidt: Removing vector 61 of norm 0.0
18:47 gram_schmidt: Removing vector 62 of norm 0.0
18:47 gram_schmidt: Removing vector 63 of norm 0.0
18:47 gram_schmidt: Removing vector 64 of norm 0.0
18:47 gram_schmidt: Removing vector 65 of norm 0.0
18:47 gram_schmidt: Removing vector 66 of norm 0.0
18:47 gram_schmidt: Removing vector 67 of norm 0.0
18:47 gram_schmidt: Removing vector 68 of norm 0.0
18:47 gram_schmidt: Removing vector 69 of norm 0.0
18:47 gram_schmidt: Removing vector 70 of norm 0.0
18:47 gram_schmidt: Removing vector 71 of norm 0.0
18:47 gram_schmidt: Removing vector 72 of norm 0.0
18:47 gram_schmidt: Removing vector 73 of norm 0.0
18:47 gram_schmidt: Removing vector 74 of norm 0.0
18:47 gram_schmidt: Removing vector 75 of norm 0.0
18:47 gram_schmidt: Removing vector 76 of norm 0.0
18:47 gram_schmidt: Removing vector 77 of norm 0.0
18:47 gram_schmidt: Removing vector 78 of norm 0.0
18:47 gram_schmidt: Removing vector 79 of norm 0.0
18:47 gram_schmidt: Removing vector 80 of norm 0.0
18:47 gram_schmidt: Removing vector 81 of norm 0.0
18:47 gram_schmidt: Removing vector 82 of norm 0.0
18:47 gram_schmidt: Removing vector 83 of norm 0.0
18:47 gram_schmidt: Removing vector 84 of norm 0.0
18:47 gram_schmidt: Removing vector 85 of norm 0.0
18:47 gram_schmidt: Removing vector 86 of norm 0.0
18:47 gram_schmidt: Removing vector 87 of norm 0.0
18:47 gram_schmidt: Removing vector 88 of norm 0.0
18:47 gram_schmidt: Removing vector 89 of norm 0.0
18:47 gram_schmidt: Removing vector 90 of norm 0.0
18:47 gram_schmidt: Removing vector 91 of norm 0.0
18:47 gram_schmidt: Removing vector 92 of norm 0.0
18:47 gram_schmidt: Removing vector 93 of norm 0.0
18:47 gram_schmidt: Removing vector 94 of norm 0.0
18:47 gram_schmidt: Removing vector 95 of norm 0.0
18:47 gram_schmidt: Removing vector 96 of norm 0.0
18:47 gram_schmidt: Removing vector 97 of norm 0.0
18:47 gram_schmidt: Removing vector 98 of norm 0.0
18:47 gram_schmidt: Removing vector 99 of norm 0.0
18:47 gram_schmidt: Removing vector 100 of norm 0.0
18:47 gram_schmidt: Removing vector 101 of norm 0.0
18:47 gram_schmidt: Removing vector 0 of norm 0.0
18:47 gram_schmidt: Removing vector 1 of norm 0.0
18:47 gram_schmidt: Removing vector 2 of norm 0.0
18:47 gram_schmidt: Removing vector 3 of norm 0.0
18:47 gram_schmidt: Removing vector 4 of norm 0.0
18:47 gram_schmidt: Removing vector 5 of norm 0.0
18:47 gram_schmidt: Removing vector 6 of norm 0.0
18:47 gram_schmidt: Removing vector 7 of norm 0.0
18:47 gram_schmidt: Removing vector 8 of norm 0.0
18:47 gram_schmidt: Removing vector 9 of norm 0.0
18:47 gram_schmidt: Removing vector 10 of norm 0.0
18:47 gram_schmidt: Removing vector 11 of norm 0.0
18:47 gram_schmidt: Removing vector 12 of norm 0.0
18:47 gram_schmidt: Removing vector 13 of norm 0.0
18:47 gram_schmidt: Removing vector 14 of norm 0.0
18:47 gram_schmidt: Removing vector 15 of norm 0.0
18:47 gram_schmidt: Removing vector 16 of norm 0.0
18:47 gram_schmidt: Removing vector 17 of norm 0.0
18:47 gram_schmidt: Removing vector 18 of norm 0.0
18:47 gram_schmidt: Removing vector 19 of norm 0.0
18:47 gram_schmidt: Removing vector 20 of norm 0.0
18:47 gram_schmidt: Removing vector 21 of norm 0.0
18:47 gram_schmidt: Removing vector 22 of norm 0.0
18:47 gram_schmidt: Removing vector 23 of norm 0.0
18:47 gram_schmidt: Removing vector 24 of norm 0.0
18:47 gram_schmidt: Removing vector 25 of norm 0.0
18:47 gram_schmidt: Removing vector 26 of norm 0.0
18:47 gram_schmidt: Removing vector 27 of norm 0.0
18:47 gram_schmidt: Removing vector 28 of norm 0.0
18:47 gram_schmidt: Removing vector 29 of norm 0.0
18:47 gram_schmidt: Removing vector 30 of norm 0.0
18:47 gram_schmidt: Removing vector 31 of norm 0.0
18:47 gram_schmidt: Removing vector 32 of norm 0.0
18:47 gram_schmidt: Removing vector 33 of norm 0.0
18:47 gram_schmidt: Removing vector 34 of norm 0.0
18:47 gram_schmidt: Removing vector 35 of norm 0.0
18:47 gram_schmidt: Removing vector 36 of norm 0.0
18:47 gram_schmidt: Removing vector 37 of norm 0.0
18:47 gram_schmidt: Removing vector 38 of norm 0.0
18:47 gram_schmidt: Removing vector 39 of norm 0.0
18:47 gram_schmidt: Removing vector 40 of norm 0.0
18:47 gram_schmidt: Removing vector 41 of norm 0.0
18:47 gram_schmidt: Removing vector 42 of norm 0.0
18:47 gram_schmidt: Removing vector 43 of norm 0.0
18:47 gram_schmidt: Removing vector 44 of norm 0.0
18:47 gram_schmidt: Removing vector 45 of norm 0.0
18:47 gram_schmidt: Removing vector 46 of norm 0.0
18:47 gram_schmidt: Removing vector 47 of norm 0.0
18:47 gram_schmidt: Removing vector 48 of norm 0.0
18:47 gram_schmidt: Removing vector 49 of norm 0.0
18:47 gram_schmidt: Removing vector 50 of norm 0.0
18:47 gram_schmidt: Removing vector 51 of norm 0.0
18:47 gram_schmidt: Removing vector 52 of norm 0.0
18:47 gram_schmidt: Removing vector 53 of norm 0.0
18:47 gram_schmidt: Removing vector 54 of norm 0.0
18:47 gram_schmidt: Removing vector 55 of norm 0.0
18:47 gram_schmidt: Removing vector 56 of norm 0.0
18:47 gram_schmidt: Removing vector 57 of norm 0.0
18:47 gram_schmidt: Removing vector 58 of norm 0.0
18:47 gram_schmidt: Removing vector 59 of norm 0.0
18:47 gram_schmidt: Removing vector 60 of norm 0.0
18:47 gram_schmidt: Removing vector 61 of norm 0.0
18:47 gram_schmidt: Removing vector 62 of norm 0.0
18:47 gram_schmidt: Removing vector 63 of norm 0.0
18:47 gram_schmidt: Removing vector 64 of norm 0.0
18:47 gram_schmidt: Removing vector 65 of norm 0.0
18:47 gram_schmidt: Removing vector 66 of norm 0.0
18:47 gram_schmidt: Removing vector 67 of norm 0.0
18:47 gram_schmidt: Removing vector 68 of norm 0.0
18:47 gram_schmidt: Removing vector 69 of norm 0.0
18:47 gram_schmidt: Removing vector 70 of norm 0.0
18:47 gram_schmidt: Removing vector 71 of norm 0.0
18:47 gram_schmidt: Removing vector 72 of norm 0.0
18:47 gram_schmidt: Removing vector 73 of norm 0.0
18:47 gram_schmidt: Removing vector 74 of norm 0.0
18:47 gram_schmidt: Removing vector 75 of norm 0.0
18:47 gram_schmidt: Removing vector 76 of norm 0.0
18:47 gram_schmidt: Removing vector 77 of norm 0.0
18:47 gram_schmidt: Removing vector 78 of norm 0.0
18:47 gram_schmidt: Removing vector 79 of norm 0.0
18:47 gram_schmidt: Removing vector 80 of norm 0.0
18:47 gram_schmidt: Removing vector 81 of norm 0.0
18:47 gram_schmidt: Removing vector 82 of norm 0.0
18:47 gram_schmidt: Removing vector 83 of norm 0.0
18:47 gram_schmidt: Removing vector 84 of norm 0.0
18:47 gram_schmidt: Removing vector 85 of norm 0.0
18:47 gram_schmidt: Removing vector 86 of norm 0.0
18:47 gram_schmidt: Removing vector 87 of norm 0.0
18:47 gram_schmidt: Removing vector 88 of norm 0.0
18:47 gram_schmidt: Removing vector 89 of norm 0.0
18:47 gram_schmidt: Removing vector 90 of norm 0.0
18:47 gram_schmidt: Removing vector 91 of norm 0.0
18:47 gram_schmidt: Removing vector 92 of norm 0.0
18:47 gram_schmidt: Removing vector 93 of norm 0.0
18:47 gram_schmidt: Removing vector 94 of norm 0.0
18:47 gram_schmidt: Removing vector 95 of norm 0.0
18:47 gram_schmidt: Removing vector 96 of norm 0.0
18:47 gram_schmidt: Removing vector 97 of norm 0.0
18:47 gram_schmidt: Removing vector 98 of norm 0.0
18:47 gram_schmidt: Removing vector 99 of norm 0.0
18:47 gram_schmidt: Removing vector 100 of norm 0.0
18:47 gram_schmidt: Removing vector 101 of norm 0.0
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[2-vector_array_without_reserve10]" time="0.00328016281128"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[2-vector_array_without_reserve11]" time="0.00690603256226"><system-err>18:47 gram_schmidt: Removing linear dependent vector 3
18:47 gram_schmidt: Removing linear dependent vector 3
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[2-vector_array_without_reserve12]" time="0.00365591049194"><system-err>18:48 gram_schmidt: Removing vector 0 of norm 0.0
18:48 gram_schmidt: Removing vector 1 of norm 0.0
18:48 gram_schmidt: Removing vector 2 of norm 0.0
18:48 gram_schmidt: Removing vector 0 of norm 0.0
18:48 gram_schmidt: Removing vector 1 of norm 0.0
18:48 gram_schmidt: Removing vector 2 of norm 0.0
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[2-vector_array_without_reserve13]" time="0.00228309631348"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[2-vector_array_without_reserve14]" time="0.00579023361206"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[2-vector_array_without_reserve15]" time="0.514072179794"><system-err>18:48 gram_schmidt: Removing linear dependent vector 36
18:48 gram_schmidt: Removing linear dependent vector 37
18:48 gram_schmidt: Removing linear dependent vector 38
18:48 gram_schmidt: Removing linear dependent vector 39
18:48 gram_schmidt: Removing linear dependent vector 40
18:48 gram_schmidt: Removing linear dependent vector 41
18:48 gram_schmidt: Removing linear dependent vector 42
18:48 gram_schmidt: Removing linear dependent vector 36
18:48 gram_schmidt: Removing linear dependent vector 37
18:48 gram_schmidt: Removing linear dependent vector 38
18:48 gram_schmidt: Removing linear dependent vector 39
18:48 gram_schmidt: Removing linear dependent vector 40
18:48 gram_schmidt: Removing linear dependent vector 41
18:48 gram_schmidt: Removing linear dependent vector 42
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="15" name="test_gram_schmidt[2-vector_array_without_reserve16]" time="0.287102937698"><system-err>18:48 gram_schmidt: Removing linear dependent vector 3
18:48 gram_schmidt: Removing linear dependent vector 4
18:48 gram_schmidt: Removing linear dependent vector 5
18:48 gram_schmidt: Removing linear dependent vector 6
18:48 gram_schmidt: Removing linear dependent vector 7
18:48 gram_schmidt: Removing linear dependent vector 8
18:48 gram_schmidt: Removing linear dependent vector 9
18:48 gram_schmidt: Removing linear dependent vector 10
18:48 gram_schmidt: Removing linear dependent vector 11
18:48 gram_schmidt: Removing linear dependent vector 12
18:48 gram_schmidt: Removing linear dependent vector 13
18:48 gram_schmidt: Removing linear dependent vector 14
18:48 gram_schmidt: Removing linear dependent vector 15
18:48 gram_schmidt: Removing linear dependent vector 16
18:48 gram_schmidt: Removing linear dependent vector 17
18:48 gram_schmidt: Removing linear dependent vector 18
18:48 gram_schmidt: Removing linear dependent vector 19
18:48 gram_schmidt: Removing linear dependent vector 20
18:48 gram_schmidt: Removing linear dependent vector 21
18:48 gram_schmidt: Removing linear dependent vector 22
18:48 gram_schmidt: Removing linear dependent vector 23
18:48 gram_schmidt: Removing linear dependent vector 24
18:48 gram_schmidt: Removing linear dependent vector 25
18:48 gram_schmidt: Removing linear dependent vector 26
18:48 gram_schmidt: Removing linear dependent vector 27
18:48 gram_schmidt: Removing linear dependent vector 28
18:48 gram_schmidt: Removing linear dependent vector 29
18:48 gram_schmidt: Removing linear dependent vector 30
18:48 gram_schmidt: Removing linear dependent vector 31
18:48 gram_schmidt: Removing linear dependent vector 32
18:48 gram_schmidt: Removing linear dependent vector 33
18:48 gram_schmidt: Removing linear dependent vector 34
18:48 gram_schmidt: Removing linear dependent vector 35
18:48 gram_schmidt: Removing linear dependent vector 36
18:48 gram_schmidt: Removing linear dependent vector 37
18:48 gram_schmidt: Removing linear dependent vector 38
18:48 gram_schmidt: Removing linear dependent vector 39
18:48 gram_schmidt: Removing linear dependent vector 40
18:48 gram_schmidt: Removing linear dependent vector 41
18:48 gram_schmidt: Removing linear dependent vector 42
18:48 gram_schmidt: Removing linear dependent vector 43
18:48 gram_schmidt: Removing linear dependent vector 44
18:48 gram_schmidt: Removing linear dependent vector 45
18:48 gram_schmidt: Removing linear dependent vector 46
18:48 gram_schmidt: Removing linear dependent vector 47
18:48 gram_schmidt: Removing linear dependent vector 48
18:48 gram_schmidt: Removing linear dependent vector 49
18:48 gram_schmidt: Removing linear dependent vector 50
18:48 gram_schmidt: Removing linear dependent vector 51
18:48 gram_schmidt: Removing linear dependent vector 52
18:48 gram_schmidt: Removing linear dependent vector 53
18:48 gram_schmidt: Removing linear dependent vector 54
18:48 gram_schmidt: Removing linear dependent vector 55
18:48 gram_schmidt: Removing linear dependent vector 56
18:48 gram_schmidt: Removing linear dependent vector 57
18:48 gram_schmidt: Removing linear dependent vector 58
18:48 gram_schmidt: Removing linear dependent vector 59
18:48 gram_schmidt: Removing linear dependent vector 60
18:48 gram_schmidt: Removing linear dependent vector 61
18:48 gram_schmidt: Removing linear dependent vector 62
18:48 gram_schmidt: Removing linear dependent vector 63
18:48 gram_schmidt: Removing linear dependent vector 64
18:48 gram_schmidt: Removing linear dependent vector 65
18:48 gram_schmidt: Removing linear dependent vector 66
18:48 gram_schmidt: Removing linear dependent vector 67
18:48 gram_schmidt: Removing linear dependent vector 68
18:48 gram_schmidt: Removing linear dependent vector 69
18:48 gram_schmidt: Removing linear dependent vector 70
18:48 gram_schmidt: Removing linear dependent vector 71
18:48 gram_schmidt: Removing linear dependent vector 72
18:48 gram_schmidt: Removing linear dependent vector 73
18:48 gram_schmidt: Removing linear dependent vector 74
18:48 gram_schmidt: Removing linear dependent vector 75
18:48 gram_schmidt: Removing linear dependent vector 76
18:48 gram_schmidt: Removing linear dependent vector 77
18:48 gram_schmidt: Removing linear dependent vector 78
18:48 gram_schmidt: Removing linear dependent vector 79
18:48 gram_schmidt: Removing linear dependent vector 80
18:48 gram_schmidt: Removing linear dependent vector 81
18:48 gram_schmidt: Removing linear dependent vector 82
18:48 gram_schmidt: Removing linear dependent vector 83
18:48 gram_schmidt: Removing linear dependent vector 84
18:48 gram_schmidt: Removing linear dependent vector 85
18:48 gram_schmidt: Removing linear dependent vector 86
18:48 gram_schmidt: Removing linear dependent vector 87
18:48 gram_schmidt: Removing linear dependent vector 88
18:48 gram_schmidt: Removing linear dependent vector 89
18:48 gram_schmidt: Removing linear dependent vector 90
18:48 gram_schmidt: Removing linear dependent vector 91
18:48 gram_schmidt: Removing linear dependent vector 92
18:48 gram_schmidt: Removing linear dependent vector 93
18:48 gram_schmidt: Removing linear dependent vector 94
18:48 gram_schmidt: Removing linear dependent vector 95
18:48 gram_schmidt: Removing linear dependent vector 96
18:48 gram_schmidt: Removing linear dependent vector 97
18:48 gram_schmidt: Removing linear dependent vector 98
18:48 gram_schmidt: Removing linear dependent vector 99
18:48 gram_schmidt: Removing linear dependent vector 100
18:48 gram_schmidt: Removing linear dependent vector 101
18:48 gram_schmidt: Removing linear dependent vector 3
18:48 gram_schmidt: Removing linear dependent vector 4
18:48 gram_schmidt: Removing linear dependent vector 5
18:48 gram_schmidt: Removing linear dependent vector 6
18:48 gram_schmidt: Removing linear dependent vector 7
18:48 gram_schmidt: Removing linear dependent vector 8
18:48 gram_schmidt: Removing linear dependent vector 9
18:48 gram_schmidt: Removing linear dependent vector 10
18:48 gram_schmidt: Removing linear dependent vector 11
18:48 gram_schmidt: Removing linear dependent vector 12
18:48 gram_schmidt: Removing linear dependent vector 13
18:48 gram_schmidt: Removing linear dependent vector 14
18:48 gram_schmidt: Removing linear dependent vector 15
18:48 gram_schmidt: Removing linear dependent vector 16
18:48 gram_schmidt: Removing linear dependent vector 17
18:48 gram_schmidt: Removing linear dependent vector 18
18:48 gram_schmidt: Removing linear dependent vector 19
18:48 gram_schmidt: Removing linear dependent vector 20
18:48 gram_schmidt: Removing linear dependent vector 21
18:48 gram_schmidt: Removing linear dependent vector 22
18:48 gram_schmidt: Removing linear dependent vector 23
18:48 gram_schmidt: Removing linear dependent vector 24
18:48 gram_schmidt: Removing linear dependent vector 25
18:48 gram_schmidt: Removing linear dependent vector 26
18:48 gram_schmidt: Removing linear dependent vector 27
18:48 gram_schmidt: Removing linear dependent vector 28
18:48 gram_schmidt: Removing linear dependent vector 29
18:48 gram_schmidt: Removing linear dependent vector 30
18:48 gram_schmidt: Removing linear dependent vector 31
18:48 gram_schmidt: Removing linear dependent vector 32
18:48 gram_schmidt: Removing linear dependent vector 33
18:48 gram_schmidt: Removing linear dependent vector 34
18:48 gram_schmidt: Removing linear dependent vector 35
18:48 gram_schmidt: Removing linear dependent vector 36
18:48 gram_schmidt: Removing linear dependent vector 37
18:48 gram_schmidt: Removing linear dependent vector 38
18:48 gram_schmidt: Removing linear dependent vector 39
18:48 gram_schmidt: Removing linear dependent vector 40
18:48 gram_schmidt: Removing linear dependent vector 41
18:48 gram_schmidt: Removing linear dependent vector 42
18:48 gram_schmidt: Removing linear dependent vector 43
18:48 gram_schmidt: Removing linear dependent vector 44
18:48 gram_schmidt: Removing linear dependent vector 45
18:48 gram_schmidt: Removing linear dependent vector 46
18:48 gram_schmidt: Removing linear dependent vector 47
18:48 gram_schmidt: Removing linear dependent vector 48
18:48 gram_schmidt: Removing linear dependent vector 49
18:48 gram_schmidt: Removing linear dependent vector 50
18:48 gram_schmidt: Removing linear dependent vector 51
18:48 gram_schmidt: Removing linear dependent vector 52
18:48 gram_schmidt: Removing linear dependent vector 53
18:48 gram_schmidt: Removing linear dependent vector 54
18:48 gram_schmidt: Removing linear dependent vector 55
18:48 gram_schmidt: Removing linear dependent vector 56
18:48 gram_schmidt: Removing linear dependent vector 57
18:48 gram_schmidt: Removing linear dependent vector 58
18:48 gram_schmidt: Removing linear dependent vector 59
18:48 gram_schmidt: Removing linear dependent vector 60
18:48 gram_schmidt: Removing linear dependent vector 61
18:48 gram_schmidt: Removing linear dependent vector 62
18:48 gram_schmidt: Removing linear dependent vector 63
18:48 gram_schmidt: Removing linear dependent vector 64
18:48 gram_schmidt: Removing linear dependent vector 65
18:48 gram_schmidt: Removing linear dependent vector 66
18:48 gram_schmidt: Removing linear dependent vector 67
18:48 gram_schmidt: Removing linear dependent vector 68
18:48 gram_schmidt: Removing linear dependent vector 69
18:48 gram_schmidt: Removing linear dependent vector 70
18:48 gram_schmidt: Removing linear dependent vector 71
18:48 gram_schmidt: Removing linear dependent vector 72
18:48 gram_schmidt: Removing linear dependent vector 73
18:48 gram_schmidt: Removing linear dependent vector 74
18:48 gram_schmidt: Removing linear dependent vector 75
18:48 gram_schmidt: Removing linear dependent vector 76
18:48 gram_schmidt: Removing linear dependent vector 77
18:48 gram_schmidt: Removing linear dependent vector 78
18:48 gram_schmidt: Removing linear dependent vector 79
18:48 gram_schmidt: Removing linear dependent vector 80
18:48 gram_schmidt: Removing linear dependent vector 81
18:48 gram_schmidt: Removing linear dependent vector 82
18:48 gram_schmidt: Removing linear dependent vector 83
18:48 gram_schmidt: Removing linear dependent vector 84
18:48 gram_schmidt: Removing linear dependent vector 85
18:48 gram_schmidt: Removing linear dependent vector 86
18:48 gram_schmidt: Removing linear dependent vector 87
18:48 gram_schmidt: Removing linear dependent vector 88
18:48 gram_schmidt: Removing linear dependent vector 89
18:48 gram_schmidt: Removing linear dependent vector 90
18:48 gram_schmidt: Removing linear dependent vector 91
18:48 gram_schmidt: Removing linear dependent vector 92
18:48 gram_schmidt: Removing linear dependent vector 93
18:48 gram_schmidt: Removing linear dependent vector 94
18:48 gram_schmidt: Removing linear dependent vector 95
18:48 gram_schmidt: Removing linear dependent vector 96
18:48 gram_schmidt: Removing linear dependent vector 97
18:48 gram_schmidt: Removing linear dependent vector 98
18:48 gram_schmidt: Removing linear dependent vector 99
18:48 gram_schmidt: Removing linear dependent vector 100
18:48 gram_schmidt: Removing linear dependent vector 101
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products0]" time="0.0404422283173"><system-err>18:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:48 DiffusionOperatorP1: Determine global dofs ...
18:48 DiffusionOperatorP1: Boundary treatment ...
18:48 DiffusionOperatorP1: Assemble system matrix ...
18:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:48 DiffusionOperatorP1: Determine global dofs ...
18:48 DiffusionOperatorP1: Boundary treatment ...
18:48 DiffusionOperatorP1: Assemble system matrix ...
18:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:48 DiffusionOperatorP1: Determine global dofs ...
18:48 DiffusionOperatorP1: Boundary treatment ...
18:48 DiffusionOperatorP1: Assemble system matrix ...
18:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:48 DiffusionOperatorP1: Determine global dofs ...
18:48 DiffusionOperatorP1: Boundary treatment ...
18:48 DiffusionOperatorP1: Assemble system matrix ...
18:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:48 DiffusionOperatorP1: Determine global dofs ...
18:48 DiffusionOperatorP1: Boundary treatment ...
18:48 DiffusionOperatorP1: Assemble system matrix ...
18:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:48 DiffusionOperatorP1: Determine global dofs ...
18:48 DiffusionOperatorP1: Boundary treatment ...
18:48 DiffusionOperatorP1: Assemble system matrix ...
18:48 L2ProductP1: Integrate the products of the shape functions on each element
18:48 L2ProductP1: Determine global dofs ...
18:48 L2ProductP1: Boundary treatment ...
18:48 L2ProductP1: Assemble system matrix ...
18:48 L2ProductP1: Integrate the products of the shape functions on each element
18:48 L2ProductP1: Determine global dofs ...
18:48 L2ProductP1: Boundary treatment ...
18:48 L2ProductP1: Assemble system matrix ...
18:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:48 DiffusionOperatorP1: Determine global dofs ...
18:48 DiffusionOperatorP1: Boundary treatment ...
18:48 DiffusionOperatorP1: Assemble system matrix ...
18:48 gram_schmidt: Orthonormalizing vector 3 again
18:48 gram_schmidt: Orthonormalizing vector 4 again
18:48 gram_schmidt: Orthonormalizing vector 3 again
18:48 gram_schmidt: Orthonormalizing vector 4 again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products1]" time="0.0361149311066"><system-err>18:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:48 DiffusionOperatorP1: Determine global dofs ...
18:48 DiffusionOperatorP1: Boundary treatment ...
18:48 DiffusionOperatorP1: Assemble system matrix ...
18:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:48 DiffusionOperatorP1: Determine global dofs ...
18:48 DiffusionOperatorP1: Boundary treatment ...
18:48 DiffusionOperatorP1: Assemble system matrix ...
18:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:48 DiffusionOperatorP1: Determine global dofs ...
18:48 DiffusionOperatorP1: Boundary treatment ...
18:48 DiffusionOperatorP1: Assemble system matrix ...
18:48 L2ProductP1: Integrate the products of the shape functions on each element
18:48 L2ProductP1: Determine global dofs ...
18:48 L2ProductP1: Boundary treatment ...
18:48 L2ProductP1: Assemble system matrix ...
18:48 L2ProductP1: Integrate the products of the shape functions on each element
18:48 L2ProductP1: Determine global dofs ...
18:48 L2ProductP1: Boundary treatment ...
18:48 L2ProductP1: Assemble system matrix ...
18:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:48 DiffusionOperatorP1: Determine global dofs ...
18:48 DiffusionOperatorP1: Boundary treatment ...
18:48 DiffusionOperatorP1: Assemble system matrix ...
18:48 gram_schmidt: Orthonormalizing vector 1 again
18:48 gram_schmidt: Orthonormalizing vector 2 again
18:48 gram_schmidt: Orthonormalizing vector 3 again
18:48 gram_schmidt: Orthonormalizing vector 4 again
18:48 gram_schmidt: Orthonormalizing vector 1 again
18:48 gram_schmidt: Orthonormalizing vector 2 again
18:48 gram_schmidt: Orthonormalizing vector 3 again
18:48 gram_schmidt: Orthonormalizing vector 4 again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products2]" time="0.0399169921875"><system-err>18:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:48 DiffusionOperatorP1: Determine global dofs ...
18:48 DiffusionOperatorP1: Boundary treatment ...
18:48 DiffusionOperatorP1: Assemble system matrix ...
18:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:48 DiffusionOperatorP1: Determine global dofs ...
18:48 DiffusionOperatorP1: Boundary treatment ...
18:48 DiffusionOperatorP1: Assemble system matrix ...
18:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:48 DiffusionOperatorP1: Determine global dofs ...
18:48 DiffusionOperatorP1: Boundary treatment ...
18:48 DiffusionOperatorP1: Assemble system matrix ...
18:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:48 DiffusionOperatorP1: Determine global dofs ...
18:48 DiffusionOperatorP1: Boundary treatment ...
18:48 DiffusionOperatorP1: Assemble system matrix ...
18:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:48 DiffusionOperatorP1: Determine global dofs ...
18:48 DiffusionOperatorP1: Boundary treatment ...
18:48 DiffusionOperatorP1: Assemble system matrix ...
18:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:48 DiffusionOperatorP1: Determine global dofs ...
18:48 DiffusionOperatorP1: Boundary treatment ...
18:48 DiffusionOperatorP1: Assemble system matrix ...
18:48 L2ProductP1: Integrate the products of the shape functions on each element
18:48 L2ProductP1: Determine global dofs ...
18:48 L2ProductP1: Boundary treatment ...
18:48 L2ProductP1: Assemble system matrix ...
18:48 L2ProductP1: Integrate the products of the shape functions on each element
18:48 L2ProductP1: Determine global dofs ...
18:48 L2ProductP1: Boundary treatment ...
18:48 L2ProductP1: Assemble system matrix ...
18:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:48 DiffusionOperatorP1: Determine global dofs ...
18:48 DiffusionOperatorP1: Boundary treatment ...
18:48 DiffusionOperatorP1: Assemble system matrix ...
18:48 gram_schmidt: Orthonormalizing vector 3 again
18:48 gram_schmidt: Orthonormalizing vector 4 again
18:48 gram_schmidt: Orthonormalizing vector 3 again
18:48 gram_schmidt: Orthonormalizing vector 4 again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products3]" time="0.0374450683594"><system-err>18:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:48 DiffusionOperatorP1: Determine global dofs ...
18:48 DiffusionOperatorP1: Boundary treatment ...
18:48 DiffusionOperatorP1: Assemble system matrix ...
18:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:48 DiffusionOperatorP1: Determine global dofs ...
18:48 DiffusionOperatorP1: Boundary treatment ...
18:48 DiffusionOperatorP1: Assemble system matrix ...
18:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:48 DiffusionOperatorP1: Determine global dofs ...
18:48 DiffusionOperatorP1: Boundary treatment ...
18:48 DiffusionOperatorP1: Assemble system matrix ...
18:48 L2ProductP1: Integrate the products of the shape functions on each element
18:48 L2ProductP1: Determine global dofs ...
18:48 L2ProductP1: Boundary treatment ...
18:48 L2ProductP1: Assemble system matrix ...
18:48 L2ProductP1: Integrate the products of the shape functions on each element
18:48 L2ProductP1: Determine global dofs ...
18:48 L2ProductP1: Boundary treatment ...
18:48 L2ProductP1: Assemble system matrix ...
18:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:48 DiffusionOperatorP1: Determine global dofs ...
18:48 DiffusionOperatorP1: Boundary treatment ...
18:48 DiffusionOperatorP1: Assemble system matrix ...
18:48 gram_schmidt: Orthonormalizing vector 1 again
18:48 gram_schmidt: Orthonormalizing vector 2 again
18:48 gram_schmidt: Orthonormalizing vector 3 again
18:48 gram_schmidt: Orthonormalizing vector 4 again
18:48 gram_schmidt: Orthonormalizing vector 1 again
18:48 gram_schmidt: Orthonormalizing vector 2 again
18:48 gram_schmidt: Orthonormalizing vector 3 again
18:48 gram_schmidt: Orthonormalizing vector 4 again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products4]" time="0.0386726856232"><system-err>18:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:48 DiffusionOperatorP1: Determine global dofs ...
18:48 DiffusionOperatorP1: Boundary treatment ...
18:48 DiffusionOperatorP1: Assemble system matrix ...
18:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:48 DiffusionOperatorP1: Determine global dofs ...
18:48 DiffusionOperatorP1: Boundary treatment ...
18:48 DiffusionOperatorP1: Assemble system matrix ...
18:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:48 DiffusionOperatorP1: Determine global dofs ...
18:48 DiffusionOperatorP1: Boundary treatment ...
18:48 DiffusionOperatorP1: Assemble system matrix ...
18:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:48 DiffusionOperatorP1: Determine global dofs ...
18:48 DiffusionOperatorP1: Boundary treatment ...
18:48 DiffusionOperatorP1: Assemble system matrix ...
18:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:48 DiffusionOperatorP1: Determine global dofs ...
18:48 DiffusionOperatorP1: Boundary treatment ...
18:48 DiffusionOperatorP1: Assemble system matrix ...
18:48 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:48 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:48 DiffusionOperatorP1: Determine global dofs ...
18:48 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products5]" time="0.037260055542"><system-err>18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products6]" time="0.0398232936859"><system-err>18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products7]" time="0.0375242233276"><system-err>18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products8]" time="0.040675163269"><system-err>18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products9]" time="0.0371849536896"><system-err>18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products10]" time="0.0400068759918"><system-err>18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products11]" time="0.0380628108978"><system-err>18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products12]" time="0.0409872531891"><system-err>18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 gram_schmidt: Removing linear dependent vector 5
18:49 gram_schmidt: Removing linear dependent vector 6
18:49 gram_schmidt: Removing linear dependent vector 5
18:49 gram_schmidt: Removing linear dependent vector 6
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products13]" time="0.0387649536133"><system-err>18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Removing linear dependent vector 5
18:49 gram_schmidt: Removing linear dependent vector 6
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Removing linear dependent vector 5
18:49 gram_schmidt: Removing linear dependent vector 6
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products14]" time="0.0431478023529"><system-err>18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
18:49 gram_schmidt: Removing linear dependent vector 5
18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
18:49 gram_schmidt: Removing linear dependent vector 5
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products15]" time="0.0405178070068"><system-err>18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
18:49 gram_schmidt: Orthonormalizing vector 5 again
18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
18:49 gram_schmidt: Orthonormalizing vector 5 again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products16]" time="0.0370678901672"><system-err>18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 gram_schmidt: Removing linear dependent vector 1
18:49 gram_schmidt: Removing linear dependent vector 2
18:49 gram_schmidt: Removing linear dependent vector 3
18:49 gram_schmidt: Removing linear dependent vector 4
18:49 gram_schmidt: Removing linear dependent vector 5
18:49 gram_schmidt: Removing linear dependent vector 6
18:49 gram_schmidt: Removing linear dependent vector 1
18:49 gram_schmidt: Removing linear dependent vector 2
18:49 gram_schmidt: Removing linear dependent vector 3
18:49 gram_schmidt: Removing linear dependent vector 4
18:49 gram_schmidt: Removing linear dependent vector 5
18:49 gram_schmidt: Removing linear dependent vector 6
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products17]" time="0.0339021682739"><system-err>18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 gram_schmidt: Removing linear dependent vector 1
18:49 gram_schmidt: Removing linear dependent vector 2
18:49 gram_schmidt: Removing linear dependent vector 3
18:49 gram_schmidt: Removing linear dependent vector 4
18:49 gram_schmidt: Removing linear dependent vector 5
18:49 gram_schmidt: Removing linear dependent vector 6
18:49 gram_schmidt: Removing linear dependent vector 1
18:49 gram_schmidt: Removing linear dependent vector 2
18:49 gram_schmidt: Removing linear dependent vector 3
18:49 gram_schmidt: Removing linear dependent vector 4
18:49 gram_schmidt: Removing linear dependent vector 5
18:49 gram_schmidt: Removing linear dependent vector 6
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products18]" time="0.0435109138489"><system-err>18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
18:49 gram_schmidt: Removing linear dependent vector 5
18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
18:49 gram_schmidt: Removing linear dependent vector 5
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products19]" time="0.0406210422516"><system-err>18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
18:49 gram_schmidt: Orthonormalizing vector 5 again
18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
18:49 gram_schmidt: Orthonormalizing vector 5 again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products20]" time="0.0447211265564"><system-err>18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
18:49 gram_schmidt: Removing linear dependent vector 5
18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
18:49 gram_schmidt: Removing linear dependent vector 5
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products21]" time="0.0409359931946"><system-err>18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
18:49 gram_schmidt: Orthonormalizing vector 5 again
18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
18:49 gram_schmidt: Orthonormalizing vector 5 again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products22]" time="0.0405671596527"><system-err>18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products23]" time="0.0377447605133"><system-err>18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 L2ProductP1: Integrate the products of the shape functions on each element
18:49 L2ProductP1: Determine global dofs ...
18:49 L2ProductP1: Boundary treatment ...
18:49 L2ProductP1: Assemble system matrix ...
18:49 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:49 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:49 DiffusionOperatorP1: Determine global dofs ...
18:49 DiffusionOperatorP1: Boundary treatment ...
18:49 DiffusionOperatorP1: Assemble system matrix ...
18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 4 again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products24]" time="0.0145778656006"><system-err>18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products25]" time="0.014573097229"><system-err>18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products26]" time="0.014310836792"><system-err>18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products27]" time="0.00786113739014"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products28]" time="0.010174036026"><system-err>18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products29]" time="0.00922703742981"><system-err>18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products30]" time="0.00922799110413"><system-err>18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products31]" time="0.00950813293457"><system-err>18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products32]" time="0.0352070331573"><system-err>18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products33]" time="0.0268287658691"><system-err>18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="29" name="test_gram_schmidt_with_product[operator_with_arrays_and_products34]" time="0.0145282745361"><system-err>18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
18:49 gram_schmidt: Orthonormalizing vector 1 again
18:49 gram_schmidt: Orthonormalizing vector 2 again
18:49 gram_schmidt: Orthonormalizing vector 3 again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[0-vector_array_without_reserve0]" time="0.00137519836426"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[0-vector_array_without_reserve1]" time="0.00130701065063"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[0-vector_array_without_reserve2]" time="0.00136089324951"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[0-vector_array_without_reserve3]" time="0.105904817581"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[0-vector_array_without_reserve4]" time="0.00129389762878"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[0-vector_array_without_reserve5]" time="0.0013599395752"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[0-vector_array_without_reserve6]" time="0.00112891197205"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[0-vector_array_without_reserve7]" time="0.000894069671631"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[0-vector_array_without_reserve8]" time="0.121418237686"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[0-vector_array_without_reserve9]" time="0.00194120407104"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[0-vector_array_without_reserve10]" time="0.00118398666382"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[0-vector_array_without_reserve11]" time="0.00636577606201"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[0-vector_array_without_reserve12]" time="0.00099778175354"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[0-vector_array_without_reserve13]" time="0.00130701065063"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[0-vector_array_without_reserve14]" time="0.00423121452332"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[0-vector_array_without_reserve15]" time="0.237240076065"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[0-vector_array_without_reserve16]" time="0.00950598716736"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[1-vector_array_without_reserve0]" time="0.00128793716431"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[1-vector_array_without_reserve1]" time="0.00111293792725"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[1-vector_array_without_reserve2]" time="0.000808238983154"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[1-vector_array_without_reserve3]" time="0.0652139186859"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[1-vector_array_without_reserve4]" time="0.00139093399048"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[1-vector_array_without_reserve5]" time="0.00119185447693"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[1-vector_array_without_reserve6]" time="0.000896215438843"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[1-vector_array_without_reserve7]" time="0.00112199783325"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[1-vector_array_without_reserve8]" time="0.119832038879"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[1-vector_array_without_reserve9]" time="0.00292491912842"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[1-vector_array_without_reserve10]" time="0.00100183486938"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[1-vector_array_without_reserve11]" time="0.00630474090576"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[1-vector_array_without_reserve12]" time="0.0010678768158"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[1-vector_array_without_reserve13]" time="0.000970363616943"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[1-vector_array_without_reserve14]" time="0.00466799736023"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[1-vector_array_without_reserve15]" time="0.233276844025"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[1-vector_array_without_reserve16]" time="0.00969481468201"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[2-vector_array_without_reserve0]" time="0.000888347625732"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[2-vector_array_without_reserve1]" time="0.000876903533936"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[2-vector_array_without_reserve2]" time="0.00111675262451"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[2-vector_array_without_reserve3]" time="0.0620577335358"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[2-vector_array_without_reserve4]" time="0.00129580497742"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[2-vector_array_without_reserve5]" time="0.00130105018616"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[2-vector_array_without_reserve6]" time="0.000916004180908"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[2-vector_array_without_reserve7]" time="0.000849008560181"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[2-vector_array_without_reserve8]" time="0.120595932007"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[2-vector_array_without_reserve9]" time="0.00293111801147"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[2-vector_array_without_reserve10]" time="0.00107288360596"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[2-vector_array_without_reserve11]" time="0.00634479522705"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[2-vector_array_without_reserve12]" time="0.00111889839172"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[2-vector_array_without_reserve13]" time="0.000998020172119"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[2-vector_array_without_reserve14]" time="0.00437998771667"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[2-vector_array_without_reserve15]" time="0.239121198654"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="43" name="test_gram_schmidt_biorth[2-vector_array_without_reserve16]" time="0.0097188949585"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products0]" time="0.0350170135498"><system-err>18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products1]" time="0.0312170982361"><system-err>18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 gram_schmidt_biorth: Projecting vector V[1] again
18:51 gram_schmidt_biorth: Projecting vector W[1] again
18:51 gram_schmidt_biorth: Projecting vector V[1] again
18:51 gram_schmidt_biorth: Projecting vector W[1] again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products2]" time="0.0358688831329"><system-err>18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products3]" time="0.0318388938904"><system-err>18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 gram_schmidt_biorth: Projecting vector V[1] again
18:51 gram_schmidt_biorth: Projecting vector W[1] again
18:51 gram_schmidt_biorth: Projecting vector V[1] again
18:51 gram_schmidt_biorth: Projecting vector W[1] again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products4]" time="0.0354719161987"><system-err>18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products5]" time="0.0315039157867"><system-err>18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 gram_schmidt_biorth: Projecting vector V[1] again
18:51 gram_schmidt_biorth: Projecting vector W[1] again
18:51 gram_schmidt_biorth: Projecting vector V[1] again
18:51 gram_schmidt_biorth: Projecting vector W[1] again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products6]" time="0.0346686840057"><system-err>18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products7]" time="0.0310173034668"><system-err>18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 gram_schmidt_biorth: Projecting vector V[1] again
18:51 gram_schmidt_biorth: Projecting vector W[1] again
18:51 gram_schmidt_biorth: Projecting vector V[1] again
18:51 gram_schmidt_biorth: Projecting vector W[1] again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products8]" time="0.0351767539978"><system-err>18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products9]" time="0.0322270393372"><system-err>18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 gram_schmidt_biorth: Projecting vector V[1] again
18:51 gram_schmidt_biorth: Projecting vector W[1] again
18:51 gram_schmidt_biorth: Projecting vector V[1] again
18:51 gram_schmidt_biorth: Projecting vector W[1] again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products10]" time="0.0351912975311"><system-err>18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products11]" time="0.0312788486481"><system-err>18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 gram_schmidt_biorth: Projecting vector V[1] again
18:51 gram_schmidt_biorth: Projecting vector W[1] again
18:51 gram_schmidt_biorth: Projecting vector V[1] again
18:51 gram_schmidt_biorth: Projecting vector W[1] again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products12]" time="0.0356018543243"><system-err>18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products13]" time="0.0313329696655"><system-err>18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products14]" time="0.039605140686"><system-err>18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 gram_schmidt_biorth: Projecting vector V[1] again
18:51 gram_schmidt_biorth: Projecting vector V[2] again
18:51 gram_schmidt_biorth: Projecting vector W[2] again
18:51 gram_schmidt_biorth: Projecting vector V[1] again
18:51 gram_schmidt_biorth: Projecting vector V[2] again
18:51 gram_schmidt_biorth: Projecting vector W[2] again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products15]" time="0.0353670120239"><system-err>18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 L2ProductP1: Integrate the products of the shape functions on each element
18:51 L2ProductP1: Determine global dofs ...
18:51 L2ProductP1: Boundary treatment ...
18:51 L2ProductP1: Assemble system matrix ...
18:51 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:51 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:51 DiffusionOperatorP1: Determine global dofs ...
18:51 DiffusionOperatorP1: Boundary treatment ...
18:51 DiffusionOperatorP1: Assemble system matrix ...
18:52 gram_schmidt_biorth: Projecting vector V[1] again
18:52 gram_schmidt_biorth: Projecting vector W[1] again
18:52 gram_schmidt_biorth: Projecting vector V[2] again
18:52 gram_schmidt_biorth: Projecting vector W[2] again
18:52 gram_schmidt_biorth: Projecting vector V[1] again
18:52 gram_schmidt_biorth: Projecting vector W[1] again
18:52 gram_schmidt_biorth: Projecting vector V[2] again
18:52 gram_schmidt_biorth: Projecting vector W[2] again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products16]" time="0.0306620597839"><system-err>18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 L2ProductP1: Integrate the products of the shape functions on each element
18:52 L2ProductP1: Determine global dofs ...
18:52 L2ProductP1: Boundary treatment ...
18:52 L2ProductP1: Assemble system matrix ...
18:52 L2ProductP1: Integrate the products of the shape functions on each element
18:52 L2ProductP1: Determine global dofs ...
18:52 L2ProductP1: Boundary treatment ...
18:52 L2ProductP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products17]" time="0.0253648757935"><system-err>18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 L2ProductP1: Integrate the products of the shape functions on each element
18:52 L2ProductP1: Determine global dofs ...
18:52 L2ProductP1: Boundary treatment ...
18:52 L2ProductP1: Assemble system matrix ...
18:52 L2ProductP1: Integrate the products of the shape functions on each element
18:52 L2ProductP1: Determine global dofs ...
18:52 L2ProductP1: Boundary treatment ...
18:52 L2ProductP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products18]" time="0.0393252372742"><system-err>18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 L2ProductP1: Integrate the products of the shape functions on each element
18:52 L2ProductP1: Determine global dofs ...
18:52 L2ProductP1: Boundary treatment ...
18:52 L2ProductP1: Assemble system matrix ...
18:52 L2ProductP1: Integrate the products of the shape functions on each element
18:52 L2ProductP1: Determine global dofs ...
18:52 L2ProductP1: Boundary treatment ...
18:52 L2ProductP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 gram_schmidt_biorth: Projecting vector V[1] again
18:52 gram_schmidt_biorth: Projecting vector V[2] again
18:52 gram_schmidt_biorth: Projecting vector W[2] again
18:52 gram_schmidt_biorth: Projecting vector V[1] again
18:52 gram_schmidt_biorth: Projecting vector V[2] again
18:52 gram_schmidt_biorth: Projecting vector W[2] again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products19]" time="0.036633014679"><system-err>18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 L2ProductP1: Integrate the products of the shape functions on each element
18:52 L2ProductP1: Determine global dofs ...
18:52 L2ProductP1: Boundary treatment ...
18:52 L2ProductP1: Assemble system matrix ...
18:52 L2ProductP1: Integrate the products of the shape functions on each element
18:52 L2ProductP1: Determine global dofs ...
18:52 L2ProductP1: Boundary treatment ...
18:52 L2ProductP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 gram_schmidt_biorth: Projecting vector V[1] again
18:52 gram_schmidt_biorth: Projecting vector W[1] again
18:52 gram_schmidt_biorth: Projecting vector V[2] again
18:52 gram_schmidt_biorth: Projecting vector W[2] again
18:52 gram_schmidt_biorth: Projecting vector V[1] again
18:52 gram_schmidt_biorth: Projecting vector W[1] again
18:52 gram_schmidt_biorth: Projecting vector V[2] again
18:52 gram_schmidt_biorth: Projecting vector W[2] again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products20]" time="0.040830373764"><system-err>18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 L2ProductP1: Integrate the products of the shape functions on each element
18:52 L2ProductP1: Determine global dofs ...
18:52 L2ProductP1: Boundary treatment ...
18:52 L2ProductP1: Assemble system matrix ...
18:52 L2ProductP1: Integrate the products of the shape functions on each element
18:52 L2ProductP1: Determine global dofs ...
18:52 L2ProductP1: Boundary treatment ...
18:52 L2ProductP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 gram_schmidt_biorth: Projecting vector V[1] again
18:52 gram_schmidt_biorth: Projecting vector V[2] again
18:52 gram_schmidt_biorth: Projecting vector W[2] again
18:52 gram_schmidt_biorth: Projecting vector V[1] again
18:52 gram_schmidt_biorth: Projecting vector V[2] again
18:52 gram_schmidt_biorth: Projecting vector W[2] again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products21]" time="0.0356900691986"><system-err>18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 L2ProductP1: Integrate the products of the shape functions on each element
18:52 L2ProductP1: Determine global dofs ...
18:52 L2ProductP1: Boundary treatment ...
18:52 L2ProductP1: Assemble system matrix ...
18:52 L2ProductP1: Integrate the products of the shape functions on each element
18:52 L2ProductP1: Determine global dofs ...
18:52 L2ProductP1: Boundary treatment ...
18:52 L2ProductP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 gram_schmidt_biorth: Projecting vector V[1] again
18:52 gram_schmidt_biorth: Projecting vector W[1] again
18:52 gram_schmidt_biorth: Projecting vector V[2] again
18:52 gram_schmidt_biorth: Projecting vector W[2] again
18:52 gram_schmidt_biorth: Projecting vector V[1] again
18:52 gram_schmidt_biorth: Projecting vector W[1] again
18:52 gram_schmidt_biorth: Projecting vector V[2] again
18:52 gram_schmidt_biorth: Projecting vector W[2] again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products22]" time="0.0356283187866"><system-err>18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 L2ProductP1: Integrate the products of the shape functions on each element
18:52 L2ProductP1: Determine global dofs ...
18:52 L2ProductP1: Boundary treatment ...
18:52 L2ProductP1: Assemble system matrix ...
18:52 L2ProductP1: Integrate the products of the shape functions on each element
18:52 L2ProductP1: Determine global dofs ...
18:52 L2ProductP1: Boundary treatment ...
18:52 L2ProductP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products23]" time="0.0332262516022"><system-err>18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 L2ProductP1: Integrate the products of the shape functions on each element
18:52 L2ProductP1: Determine global dofs ...
18:52 L2ProductP1: Boundary treatment ...
18:52 L2ProductP1: Assemble system matrix ...
18:52 L2ProductP1: Integrate the products of the shape functions on each element
18:52 L2ProductP1: Determine global dofs ...
18:52 L2ProductP1: Boundary treatment ...
18:52 L2ProductP1: Assemble system matrix ...
18:52 DiffusionOperatorP1: Calulate gradients of shape functions transformed by reference map ...
18:52 DiffusionOperatorP1: Calculate all local scalar products beween gradients ...
18:52 DiffusionOperatorP1: Determine global dofs ...
18:52 DiffusionOperatorP1: Boundary treatment ...
18:52 DiffusionOperatorP1: Assemble system matrix ...
18:52 gram_schmidt_biorth: Projecting vector V[1] again
18:52 gram_schmidt_biorth: Projecting vector W[1] again
18:52 gram_schmidt_biorth: Projecting vector V[1] again
18:52 gram_schmidt_biorth: Projecting vector W[1] again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products24]" time="0.0120289325714"><system-err>18:52 gram_schmidt_biorth: Projecting vector V[1] again
18:52 gram_schmidt_biorth: Projecting vector W[1] again
18:52 gram_schmidt_biorth: Projecting vector V[1] again
18:52 gram_schmidt_biorth: Projecting vector W[1] again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products25]" time="0.0116989612579"><system-err>18:52 gram_schmidt_biorth: Projecting vector V[1] again
18:52 gram_schmidt_biorth: Projecting vector W[1] again
18:52 gram_schmidt_biorth: Projecting vector V[1] again
18:52 gram_schmidt_biorth: Projecting vector W[1] again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products26]" time="0.0115292072296"><system-err>18:52 gram_schmidt_biorth: Projecting vector V[1] again
18:52 gram_schmidt_biorth: Projecting vector W[1] again
18:52 gram_schmidt_biorth: Projecting vector V[1] again
18:52 gram_schmidt_biorth: Projecting vector W[1] again
</system-err></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products27]" time="0.00695276260376"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products28]" time="0.00659918785095"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products29]" time="0.00556015968323"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products30]" time="0.00552082061768"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products31]" time="0.00564479827881"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products32]" time="0.0265350341797"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products33]" time="0.0198559761047"></testcase><testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="71" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products34]" time="0.0119800567627"><system-err>18:52 gram_schmidt_biorth: Projecting vector V[1] again
18:52 gram_schmidt_biorth: Projecting vector W[1] again
18:52 gram_schmidt_biorth: Projecting vector V[1] again
18:52 gram_schmidt_biorth: Projecting vector W[1] again
</system-err></testcase><testcase classname="src.pymortests.algorithms.stuff" file="src/pymortests/algorithms/stuff.py" line="23" name="test_newton[1]" time="0.00247406959534"><system-err>18:52 newton:       Initial Residual: 1.000000e+00
18:52 newton: Iteration  1: Residual: 0.000000e+00,  Reduction: 0.000000e+00, Total Reduction: 0.000000e+00
18:52 newton: Absolute limit of 1e-15 reached. Stopping.
</system-err></testcase><testcase classname="src.pymortests.algorithms.stuff" file="src/pymortests/algorithms/stuff.py" line="23" name="test_newton[2]" time="0.00228476524353"><system-err>18:52 newton:       Initial Residual: 1.000000e+00
18:52 newton: Iteration  1: Residual: 0.000000e+00,  Reduction: 0.000000e+00, Total Reduction: 0.000000e+00
18:52 newton: Absolute limit of 1e-15 reached. Stopping.
</system-err></testcase><testcase classname="src.pymortests.algorithms.stuff" file="src/pymortests/algorithms/stuff.py" line="23" name="test_newton[3]" time="0.00239896774292"><system-err>18:52 newton:       Initial Residual: 1.000000e+00
18:52 newton: Iteration  1: Residual: 0.000000e+00,  Reduction: 0.000000e+00, Total Reduction: 0.000000e+00
18:52 newton: Absolute limit of 1e-15 reached. Stopping.
</system-err></testcase><testcase classname="src.pymortests.algorithms.stuff" file="src/pymortests/algorithms/stuff.py" line="23" name="test_newton[4]" time="0.00262689590454"><system-err>18:52 newton:       Initial Residual: 1.000000e+00
18:52 newton: Iteration  1: Residual: 0.000000e+00,  Reduction: 0.000000e+00, Total Reduction: 0.000000e+00
18:52 newton: Absolute limit of 1e-15 reached. Stopping.
</system-err></testcase><testcase classname="src.pymortests.algorithms.stuff" file="src/pymortests/algorithms/stuff.py" line="23" name="test_newton[5]" time="0.00226306915283"><system-err>18:52 newton:       Initial Residual: 1.000000e+00
18:52 newton: Iteration  1: Residual: 0.000000e+00,  Reduction: 0.000000e+00, Total Reduction: 0.000000e+00
18:52 newton: Absolute limit of 1e-15 reached. Stopping.
</system-err></testcase><testcase classname="src.pymortests.algorithms.stuff" file="src/pymortests/algorithms/stuff.py" line="23" name="test_newton[6]" time="0.00217795372009"><system-err>18:52 newton:       Initial Residual: 1.000000e+00
18:52 newton: Iteration  1: Residual: 0.000000e+00,  Reduction: 0.000000e+00, Total Reduction: 0.000000e+00
18:52 newton: Absolute limit of 1e-15 reached. Stopping.
</system-err></testcase><testcase classname="src.pymortests.algorithms.stuff" file="src/pymortests/algorithms/stuff.py" line="23" name="test_newton[7]" time="0.00254583358765"><system-err>18:52 newton:       Initial Residual: 1.000000e+00
18:52 newton: Iteration  1: Residual: 0.000000e+00,  Reduction: 0.000000e+00, Total Reduction: 0.000000e+00
18:52 newton: Absolute limit of 1e-15 reached. Stopping.
</system-err></testcase><testcase classname="src.pymortests.algorithms.stuff" file="src/pymortests/algorithms/stuff.py" line="29" name="test_newton_fail" time="0.00646090507507"><system-err>18:52 newton:       Initial Residual: 1.000000e+00
18:52 newton: Iteration  1: Residual: 1.000000e+00,  Reduction: 1.000000e+00, Total Reduction: 1.000000e+00
18:52 newton: Iteration  2: Residual: 1.000000e+00,  Reduction: 1.000000e+00, Total Reduction: 1.000000e+00
18:52 newton: Iteration  3: Residual: 1.000000e+00,  Reduction: 1.000000e+00, Total Reduction: 1.000000e+00
18:52 newton: Iteration  4: Residual: 1.000000e+00,  Reduction: 1.000000e+00, Total Reduction: 1.000000e+00
18:52 newton: Iteration  5: Residual: 1.000000e+00,  Reduction: 1.000000e+00, Total Reduction: 1.000000e+00
18:52 newton: Iteration  6: Residual: 1.000000e+00,  Reduction: 1.000000e+00, Total Reduction: 1.000000e+00
18:52 newton: Iteration  7: Residual: 1.000000e+00,  Reduction: 1.000000e+00, Total Reduction: 1.000000e+00
18:52 newton: Iteration  8: Residual: 1.000000e+00,  Reduction: 1.000000e+00, Total Reduction: 1.000000e+00
18:52 newton: Iteration  9: Residual: 1.000000e+00,  Reduction: 1.000000e+00, Total Reduction: 1.000000e+00
18:52 newton: Iteration 10: Residual: 1.000000e+00,  Reduction: 1.000000e+00, Total Reduction: 1.000000e+00
</system-err></testcase><testcase classname="src.pymortests.core.config" file="src/pymortests/core/config.py" line="11" name="test_repr" time="0.245702981949"></testcase><testcase classname="src.pymortests.core.config" file="src/pymortests/core/config.py" line="15" name="test_entries" time="0.000833988189697"></testcase><testcase classname="src.pymortests.core.config" file="src/pymortests/core/config.py" line="22" name="test_dir" time="0.000800132751465"></testcase><testcase classname="src.pymortests.core.defaults" file="src/pymortests/core/defaults.py" line="17" name="test_defaults" time="0.000880241394043"></testcase><testcase classname="src.pymortests.core.defaults" file="src/pymortests/core/defaults.py" line="33" name="test_print_defaults" time="0.377252101898"><system-out>                                                        defaults affecting state id calcuation                                                        
                                                        ======================================                                                        

path (shortened)                                                       value                                                                    source
---------------------------------------------------------------------  -----------------------------------------------------------------------  ------
basic.almost_equal.atol                                                1e-14                                                                    code  
basic.almost_equal.rtol                                                1e-14                                                                    code  
genericsolvers.apply_inverse.check_finite                              True                                                                     code  
genericsolvers.apply_inverse.default_least_squares_solver              &apos;generic_least_squares_lsmr&apos;                                             code  
genericsolvers.apply_inverse.default_solver                            &apos;generic_lgmres&apos;                                                         code  
genericsolvers.solver_options.least_squares_lsmr_atol                  1e-06                                                                    code  
genericsolvers.solver_options.least_squares_lsmr_btol                  1e-06                                                                    code  
genericsolvers.solver_options.least_squares_lsmr_conlim                100000000.0                                                              code  
genericsolvers.solver_options.least_squares_lsmr_damp                  0.0                                                                      code  
genericsolvers.solver_options.least_squares_lsmr_maxiter               None                                                                     code  
genericsolvers.solver_options.least_squares_lsqr_atol                  1e-06                                                                    code  
genericsolvers.solver_options.least_squares_lsqr_btol                  1e-06                                                                    code  
genericsolvers.solver_options.least_squares_lsqr_conlim                100000000.0                                                              code  
genericsolvers.solver_options.least_squares_lsqr_iter_lim              None                                                                     code  
genericsolvers.solver_options.lgmres_inner_m                           39                                                                       code  
genericsolvers.solver_options.lgmres_maxiter                           1000                                                                     code  
genericsolvers.solver_options.lgmres_outer_k                           3                                                                        code  
genericsolvers.solver_options.lgmres_tol                               1e-05                                                                    code  
gram_schmidt.gram_schmidt.atol                                         1e-13                                                                    code  
gram_schmidt.gram_schmidt.check                                        True                                                                     code  
gram_schmidt.gram_schmidt.check_tol                                    0.001                                                                    code  
gram_schmidt.gram_schmidt.reiterate                                    True                                                                     code  
gram_schmidt.gram_schmidt.reiteration_threshold                        0.1                                                                      code  
gram_schmidt.gram_schmidt.rtol                                         1e-13                                                                    code  
newton.newton.atol                                                     -1.0                                                                     code  
newton.newton.maxiter                                                  100                                                                      code  
newton.newton.miniter                                                  0                                                                        code  
newton.newton.rtol                                                     -1.0                                                                     code  
newton.newton.stagnation_threshold                                     0.9                                                                      code  
newton.newton.stagnation_window                                        3                                                                        code  
pod.pod.atol                                                           0.0                                                                      code  
pod.pod.check                                                          True                                                                     code  
pod.pod.check_tol                                                      1e-10                                                                    code  
pod.pod.l2_err                                                         0.0                                                                      code  
pod.pod.orthonormalize                                                 True                                                                     code  
pod.pod.rtol                                                           4e-08                                                                    code  
pod.pod.symmetrize                                                     False                                                                    code  
text.text_problem.font_name                                            None                                                                     code  
pyamg.apply_inverse.check_finite                                       True                                                                     code  
pyamg.apply_inverse.default_solver                                     &apos;pyamg_solve&apos;                                                            code  
pyamg.solver_options.maxiter                                           400                                                                      code  
pyamg.solver_options.rs_CF                                             &apos;RS&apos;                                                                     code  
pyamg.solver_options.rs_accel                                          None                                                                     code  
pyamg.solver_options.rs_coarse_solver                                  &apos;pinv2&apos;                                                                  code  
pyamg.solver_options.rs_cycle                                          &apos;V&apos;                                                                      code  
pyamg.solver_options.rs_max_coarse                                     500                                                                      code  
pyamg.solver_options.rs_max_levels                                     10                                                                       code  
pyamg.solver_options.rs_maxiter                                        100                                                                      code  
pyamg.solver_options.rs_postsmoother                                   (&apos;gauss_seidel&apos;, {&apos;sweep&apos;: &apos;symmetric&apos;})                                 code  
pyamg.solver_options.rs_strength                                       (&apos;classical&apos;, {&apos;theta&apos;: 0.25})                                           code  
pyamg.solver_options.rs_tol                                            1e-05                                                                    code  
pyamg.solver_options.sa_accel                                          None                                                                     code  
pyamg.solver_options.sa_aggregate                                      &apos;standard&apos;                                                               code  
pyamg.solver_options.sa_coarse_solver                                  &apos;pinv2&apos;                                                                  code  
pyamg.solver_options.sa_cycle                                          &apos;V&apos;                                                                      code  
pyamg.solver_options.sa_diagonal_dominance                             False                                                                    code  
pyamg.solver_options.sa_improve_candidates                             ((&apos;block_gauss_seidel&apos;, {&apos;sweep&apos;: &apos;symmetric&apos;, &apos;iterations&apos;: 4}), None)  code  
pyamg.solver_options.sa_max_coarse                                     500                                                                      code  
pyamg.solver_options.sa_max_levels                                     10                                                                       code  
pyamg.solver_options.sa_maxiter                                        100                                                                      code  
pyamg.solver_options.sa_postsmoother                                   (&apos;block_gauss_seidel&apos;, {&apos;sweep&apos;: &apos;symmetric&apos;})                           code  
pyamg.solver_options.sa_presmoother                                    (&apos;block_gauss_seidel&apos;, {&apos;sweep&apos;: &apos;symmetric&apos;})                           code  
pyamg.solver_options.sa_smooth                                         (&apos;jacobi&apos;, {&apos;omega&apos;: 1.3333333333333333})                                code  
pyamg.solver_options.sa_strength                                       &apos;symmetric&apos;                                                              code  
pyamg.solver_options.sa_symmetry                                       &apos;hermitian&apos;                                                              code  
pyamg.solver_options.sa_tol                                            1e-05                                                                    code  
pyamg.solver_options.tol                                               1e-05                                                                    code  
scipy.apply_inverse.check_finite                                       True                                                                     code  
scipy.apply_inverse.default_least_squares_solver                       &apos;scipy_least_squares_lsmr&apos;                                               code  
scipy.apply_inverse.default_solver                                     &apos;scipy_spsolve&apos;                                                          code  
scipy.solver_options.bicgstab_maxiter                                  None                                                                     code  
scipy.solver_options.bicgstab_tol                                      1e-15                                                                    code  
scipy.solver_options.least_squares_lsmr_atol                           1e-06                                                                    code  
scipy.solver_options.least_squares_lsmr_btol                           1e-06                                                                    code  
scipy.solver_options.least_squares_lsmr_conlim                         100000000.0                                                              code  
scipy.solver_options.least_squares_lsmr_damp                           0.0                                                                      code  
scipy.solver_options.least_squares_lsmr_maxiter                        None                                                                     code  
scipy.solver_options.least_squares_lsqr_atol                           1e-06                                                                    code  
scipy.solver_options.least_squares_lsqr_btol                           1e-06                                                                    code  
scipy.solver_options.least_squares_lsqr_conlim                         100000000.0                                                              code  
scipy.solver_options.least_squares_lsqr_iter_lim                       None                                                                     code  
scipy.solver_options.lgmres_inner_m                                    39                                                                       code  
scipy.solver_options.lgmres_maxiter                                    1000                                                                     code  
scipy.solver_options.lgmres_outer_k                                    3                                                                        code  
scipy.solver_options.lgmres_tol                                        1e-05                                                                    code  
scipy.solver_options.spilu_drop_rule                                   &apos;basic,area&apos;                                                             code  
scipy.solver_options.spilu_drop_tol                                    0.0001                                                                   code  
scipy.solver_options.spilu_fill_factor                                 10                                                                       code  
scipy.solver_options.spilu_permc_spec                                  &apos;COLAMD&apos;                                                                 code  
scipy.solver_options.spsolve_keep_factorization                        True                                                                     code  
scipy.solver_options.spsolve_permc_spec                                &apos;COLAMD&apos;                                                                 code  
constructions.induced_norm.raise_negative                              True                                                                     code  
constructions.induced_norm.tol                                         1e-10                                                                    code  
fv.jacobian_options.delta                                              1e-07                                                                    code  
numpy.NumpyMatrixOperator.apply_inverse.check_finite                   True                                                                     code  
numpy.NumpyMatrixOperator.apply_inverse.default_sparse_solver_backend  &apos;scipy&apos;                                                                  code  
default.new_parallel_pool.allow_mpi                                    True                                                                     code  
default.new_parallel_pool.ipython_num_engines                          None                                                                     code  
default.new_parallel_pool.ipython_profile                              None                                                                     code  
floatcmp.float_cmp.atol                                                1e-14                                                                    code  
floatcmp.float_cmp.rtol                                                1e-14                                                                    code  
mpi.event_loop_settings.auto_launch                                    True                                                                     code  
random.new_random_state.seed                                           42                                                                       code  
defaults.func.c                                                        43                                                                       user  
defaults.func.d                                                        3                                                                        code  



                           defaults not affecting state id calculation                            
                           ===========================================                            

path (shortened)                                       value                                source
-----------------------------------------------------  -----------------------------------  ------
genericsolvers.solver_options.least_squares_lsmr_show  False                                code  
genericsolvers.solver_options.least_squares_lsqr_show  False                                code  
pyamg.solver_options.verb                              False                                code  
scipy.solver_options.least_squares_lsmr_show           False                                code  
scipy.solver_options.least_squares_lsqr_show           False                                code  
cache.default_regions.disk_max_size                    1073741824                           code  
cache.default_regions.disk_path                        &apos;/tmp/pymor.cache.pymor&apos;             code  
cache.default_regions.memory_max_keys                  1000                                 code  
cache.default_regions.persistent_max_size              1073741824                           code  
cache.default_regions.persistent_path                  &apos;/tmp/pymor.persistent.cache.pymor&apos;  code  
logger.getLogger.filename                              &apos;&apos;                                   code  
logger.set_log_format.block_timings                    False                                code  
logger.set_log_format.indent_blocks                    True                                 code  
logger.set_log_format.max_hierarchy_level              1                                    code  
logger.set_log_levels.levels                           None                                 code  
qt.visualize_patch.backend                             &apos;gl&apos;                                 code  
pprint.format_array.compact_print                      False                                code  

</system-out></testcase><testcase classname="src.pymortests.core.defaults" file="src/pymortests/core/defaults.py" line="37" name="test_write_defaults_to_file" time="0.0109238624573"><system-out>Written defaults to file /tmp/tmpC9krEB/defaults.py
</system-out></testcase><testcase classname="src.pymortests.core.defaults" file="src/pymortests/core/defaults.py" line="42" name="test_load_defaults_from_file" time="0.00965905189514"><system-out>Written defaults to file /tmp/tmpvCK1IM/defaults.py
</system-out></testcase><testcase classname="src.pymortests.core.interface.Test_Interface" file="src/pymortests/core/interface.py" line="21" name="testImplementorlist" time="0.000752210617065"></testcase><testcase classname="src.pymortests.core.interface.Test_Interface" file="src/pymortests/core/interface.py" line="27" name="testAbstractMethods" time="0.00127911567688"></testcase><testcase classname="src.pymortests.core.interface.Test_Interface" file="src/pymortests/core/interface.py" line="59" name="testVersion" time="0.000460147857666"></testcase><testcase classname="src.pymortests.core.interface" file="src/pymortests/core/interface.py" line="81" name="test_withcopy_implementors" time="0.00902915000916"></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[RuleTable]" time="0.00140500068665"><system-err>18:53 |WARNING|RuleTable: warning -- logger &lt;logging.Logger object at 0x7f25eacd7e90&gt;
18:53 |ERROR|RuleTable: error -- logger &lt;logging.Logger object at 0x7f25eacd7e90&gt;
18:53 RuleTable: info -- logger &lt;logging.Logger object at 0x7f25eacd7e90&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[PatchVisualizer]" time="0.000921249389648"><system-err>18:53 |WARNING|PatchVisualizer: warning -- logger &lt;logging.Logger object at 0x7f25eacfacd0&gt;
18:53 |ERROR|PatchVisualizer: error -- logger &lt;logging.Logger object at 0x7f25eacfacd0&gt;
18:53 PatchVisualizer: info -- logger &lt;logging.Logger object at 0x7f25eacfacd0&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[OnedVisualizer]" time="0.00111675262451"><system-err>18:53 |WARNING|OnedVisualizer: warning -- logger &lt;logging.Logger object at 0x7f25eacfaf50&gt;
18:53 |ERROR|OnedVisualizer: error -- logger &lt;logging.Logger object at 0x7f25eacfaf50&gt;
18:53 OnedVisualizer: info -- logger &lt;logging.Logger object at 0x7f25eacfaf50&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[BoringTestClass]" time="0.000927209854126"><system-err>18:53 |WARNING|BoringTestClass: warning -- logger &lt;logging.Logger object at 0x7f25e7ca7dd0&gt;
18:53 |ERROR|BoringTestClass: error -- logger &lt;logging.Logger object at 0x7f25e7ca7dd0&gt;
18:53 BoringTestClass: info -- logger &lt;logging.Logger object at 0x7f25e7ca7dd0&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[RemoteObjectManager]" time="0.000913858413696"><system-err>18:53 |WARNING|RemoteObjectManager: warning -- logger &lt;logging.Logger object at 0x7f25e7d78fd0&gt;
18:53 |ERROR|RemoteObjectManager: error -- logger &lt;logging.Logger object at 0x7f25e7d78fd0&gt;
18:53 RemoteObjectManager: info -- logger &lt;logging.Logger object at 0x7f25e7d78fd0&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[AdaptiveSampleSet]" time="0.000946760177612"><system-err>18:53 |WARNING|AdaptiveSampleSet: warning -- logger &lt;logging.Logger object at 0x7f25e7d41310&gt;
18:53 |ERROR|AdaptiveSampleSet: error -- logger &lt;logging.Logger object at 0x7f25e7d41310&gt;
18:53 AdaptiveSampleSet: info -- logger &lt;logging.Logger object at 0x7f25e7d41310&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[GenericRBReductor]" time="0.00101947784424"><system-err>18:53 |WARNING|GenericRBReductor: warning -- logger &lt;logging.Logger object at 0x7f25e7c02850&gt;
18:53 |ERROR|GenericRBReductor: error -- logger &lt;logging.Logger object at 0x7f25e7c02850&gt;
18:53 GenericRBReductor: info -- logger &lt;logging.Logger object at 0x7f25e7c02850&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[ResidualReductor]" time="0.00103378295898"><system-err>18:53 |WARNING|ResidualReductor: warning -- logger &lt;logging.Logger object at 0x7f25e7c09610&gt;
18:53 |ERROR|ResidualReductor: error -- logger &lt;logging.Logger object at 0x7f25e7c09610&gt;
18:53 ResidualReductor: info -- logger &lt;logging.Logger object at 0x7f25e7c09610&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[ImplicitEulerResidualReductor]" time="0.000897169113159"><system-err>18:53 |WARNING|ImplicitEulerResidualReductor: warning -- logger &lt;logging.Logger object at 0x7f25e7c19090&gt;
18:53 |ERROR|ImplicitEulerResidualReductor: error -- logger &lt;logging.Logger object at 0x7f25e7c19090&gt;
18:53 ImplicitEulerResidualReductor: info -- logger &lt;logging.Logger object at 0x7f25e7c19090&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[new_ipcluster_pool]" time="0.00116610527039"><system-err>18:53 |WARNING|new_ipcluster_pool: warning -- logger &lt;logging.Logger object at 0x7f25e632e650&gt;
18:53 |ERROR|new_ipcluster_pool: error -- logger &lt;logging.Logger object at 0x7f25e632e650&gt;
18:53 new_ipcluster_pool: info -- logger &lt;logging.Logger object at 0x7f25e632e650&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[StationaryProblem]" time="0.000945091247559"><system-err>18:53 |WARNING|StationaryProblem: warning -- logger &lt;logging.Logger object at 0x7f25f24857d0&gt;
18:53 |ERROR|StationaryProblem: error -- logger &lt;logging.Logger object at 0x7f25f24857d0&gt;
18:53 StationaryProblem: info -- logger &lt;logging.Logger object at 0x7f25f24857d0&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[InstationaryProblem]" time="0.000949144363403"><system-err>18:53 |WARNING|InstationaryProblem: warning -- logger &lt;logging.Logger object at 0x7f25f2485c50&gt;
18:53 |ERROR|InstationaryProblem: error -- logger &lt;logging.Logger object at 0x7f25f2485c50&gt;
18:53 InstationaryProblem: info -- logger &lt;logging.Logger object at 0x7f25f2485c50&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[InducedNorm]" time="0.00095009803772"><system-err>18:53 |WARNING|InducedNorm: warning -- logger &lt;logging.Logger object at 0x7f25ead5f9d0&gt;
18:53 |ERROR|InducedNorm: error -- logger &lt;logging.Logger object at 0x7f25ead5f9d0&gt;
18:53 InducedNorm: info -- logger &lt;logging.Logger object at 0x7f25ead5f9d0&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[CoerciveRBEstimator]" time="0.000962018966675"><system-err>18:53 |WARNING|CoerciveRBEstimator: warning -- logger &lt;logging.Logger object at 0x7f25e7c19bd0&gt;
18:53 |ERROR|CoerciveRBEstimator: error -- logger &lt;logging.Logger object at 0x7f25e7c19bd0&gt;
18:53 CoerciveRBEstimator: info -- logger &lt;logging.Logger object at 0x7f25e7c19bd0&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[SimpleCoerciveRBEstimator]" time="0.000901222229004"><system-err>18:53 |WARNING|SimpleCoerciveRBEstimator: warning -- logger &lt;logging.Logger object at 0x7f25e7c19fd0&gt;
18:53 |ERROR|SimpleCoerciveRBEstimator: error -- logger &lt;logging.Logger object at 0x7f25e7c19fd0&gt;
18:53 SimpleCoerciveRBEstimator: info -- logger &lt;logging.Logger object at 0x7f25e7c19fd0&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[ParabolicRBEstimator]" time="0.00119972229004"><system-err>18:53 |WARNING|ParabolicRBEstimator: warning -- logger &lt;logging.Logger object at 0x7f25e7c21790&gt;
18:53 |ERROR|ParabolicRBEstimator: error -- logger &lt;logging.Logger object at 0x7f25e7c21790&gt;
18:53 ParabolicRBEstimator: info -- logger &lt;logging.Logger object at 0x7f25e7c21790&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[MPIVisualizer]" time="0.00107502937317"><system-err>18:53 |WARNING|MPIVisualizer: warning -- logger &lt;logging.Logger object at 0x7f25e7cc68d0&gt;
18:53 |ERROR|MPIVisualizer: error -- logger &lt;logging.Logger object at 0x7f25e7cc68d0&gt;
18:53 MPIVisualizer: info -- logger &lt;logging.Logger object at 0x7f25e7cc68d0&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[NumpyVectorArray]" time="0.000999927520752"><system-err>18:53 |WARNING|NumpyVectorArray: warning -- logger &lt;logging.Logger object at 0x7f25f43317d0&gt;
18:53 |ERROR|NumpyVectorArray: error -- logger &lt;logging.Logger object at 0x7f25f43317d0&gt;
18:53 NumpyVectorArray: info -- logger &lt;logging.Logger object at 0x7f25f43317d0&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[BlockVectorArray]" time="0.00101613998413"><system-err>18:53 |WARNING|BlockVectorArray: warning -- logger &lt;logging.Logger object at 0x7f25eaea56d0&gt;
18:53 |ERROR|BlockVectorArray: error -- logger &lt;logging.Logger object at 0x7f25eaea56d0&gt;
18:53 BlockVectorArray: info -- logger &lt;logging.Logger object at 0x7f25eaea56d0&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[ListVectorArray]" time="0.000914812088013"><system-err>18:53 |WARNING|ListVectorArray: warning -- logger &lt;logging.Logger object at 0x7f25e9844490&gt;
18:53 |ERROR|ListVectorArray: error -- logger &lt;logging.Logger object at 0x7f25e9844490&gt;
18:53 ListVectorArray: info -- logger &lt;logging.Logger object at 0x7f25e9844490&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[MPIVectorArray]" time="0.000940084457397"><system-err>18:53 |WARNING|MPIVectorArray: warning -- logger &lt;logging.Logger object at 0x7f25e7b7ded0&gt;
18:53 |ERROR|MPIVectorArray: error -- logger &lt;logging.Logger object at 0x7f25e7b7ded0&gt;
18:53 MPIVectorArray: info -- logger &lt;logging.Logger object at 0x7f25e7b7ded0&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[PreAssembleRules]" time="0.00097918510437"><system-err>18:53 |WARNING|PreAssembleRules: warning -- logger &lt;logging.Logger object at 0x7f25eacdd990&gt;
18:53 |ERROR|PreAssembleRules: error -- logger &lt;logging.Logger object at 0x7f25eacdd990&gt;
18:53 PreAssembleRules: info -- logger &lt;logging.Logger object at 0x7f25eacdd990&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[ProjectRules]" time="0.00182771682739"><system-err>18:53 |WARNING|ProjectRules: warning -- logger &lt;logging.Logger object at 0x7f25ea01e6d0&gt;
18:53 |ERROR|ProjectRules: error -- logger &lt;logging.Logger object at 0x7f25ea01e6d0&gt;
18:53 ProjectRules: info -- logger &lt;logging.Logger object at 0x7f25ea01e6d0&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[ProjectToSubbasisRules]" time="0.000889301300049"><system-err>18:53 |WARNING|ProjectToSubbasisRules: warning -- logger &lt;logging.Logger object at 0x7f25e9f89410&gt;
18:53 |ERROR|ProjectToSubbasisRules: error -- logger &lt;logging.Logger object at 0x7f25e9f89410&gt;
18:53 ProjectToSubbasisRules: info -- logger &lt;logging.Logger object at 0x7f25e9f89410&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[ToMatrixRules]" time="0.00089693069458"><system-err>18:53 |WARNING|ToMatrixRules: warning -- logger &lt;logging.Logger object at 0x7f25e96a8350&gt;
18:53 |ERROR|ToMatrixRules: error -- logger &lt;logging.Logger object at 0x7f25e96a8350&gt;
18:53 ToMatrixRules: info -- logger &lt;logging.Logger object at 0x7f25e96a8350&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[CollectOperatorRangeRules]" time="0.000887632369995"><system-err>18:53 |WARNING|CollectOperatorRangeRules: warning -- logger &lt;logging.Logger object at 0x7f25e7c009d0&gt;
18:53 |ERROR|CollectOperatorRangeRules: error -- logger &lt;logging.Logger object at 0x7f25e7c009d0&gt;
18:53 CollectOperatorRangeRules: info -- logger &lt;logging.Logger object at 0x7f25e7c009d0&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[CollectVectorRangeRules]" time="0.000967264175415"><system-err>18:53 |WARNING|CollectVectorRangeRules: warning -- logger &lt;logging.Logger object at 0x7f25e7c00a10&gt;
18:53 |ERROR|CollectVectorRangeRules: error -- logger &lt;logging.Logger object at 0x7f25e7c00a10&gt;
18:53 CollectVectorRangeRules: info -- logger &lt;logging.Logger object at 0x7f25e7c00a10&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[CopyOnWriteVector]" time="0.000871181488037"><system-err>18:53 |WARNING|CopyOnWriteVector: warning -- logger &lt;logging.Logger object at 0x7f25e98442d0&gt;
18:53 |ERROR|CopyOnWriteVector: error -- logger &lt;logging.Logger object at 0x7f25e98442d0&gt;
18:53 CopyOnWriteVector: info -- logger &lt;logging.Logger object at 0x7f25e98442d0&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[AllDirichletBoundaryInfo]" time="0.00111889839172"><system-err>18:53 |WARNING|AllDirichletBoundaryInfo: warning -- logger &lt;logging.Logger object at 0x7f25e7c3e290&gt;
18:53 |ERROR|AllDirichletBoundaryInfo: error -- logger &lt;logging.Logger object at 0x7f25e7c3e290&gt;
18:53 AllDirichletBoundaryInfo: info -- logger &lt;logging.Logger object at 0x7f25e7c3e290&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[StupidImplementer]" time="0.00091814994812"><system-err>18:53 |WARNING|StupidImplementer: warning -- logger &lt;logging.Logger object at 0x7f25e7c3ed10&gt;
18:53 |ERROR|StupidImplementer: error -- logger &lt;logging.Logger object at 0x7f25e7c3ed10&gt;
18:53 StupidImplementer: info -- logger &lt;logging.Logger object at 0x7f25e7c3ed10&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[AverageImplementer0]" time="0.000996112823486"><system-err>18:53 |WARNING|AverageImplementer: warning -- logger &lt;logging.Logger object at 0x7f25e7c3ef90&gt;
18:53 |ERROR|AverageImplementer: error -- logger &lt;logging.Logger object at 0x7f25e7c3ef90&gt;
18:53 AverageImplementer: info -- logger &lt;logging.Logger object at 0x7f25e7c3ef90&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[FailImplementer]" time="0.000921726226807"><system-err>18:53 |WARNING|FailImplementer: warning -- logger &lt;logging.Logger object at 0x7f25e7ca7850&gt;
18:53 |ERROR|FailImplementer: error -- logger &lt;logging.Logger object at 0x7f25e7ca7850&gt;
18:53 FailImplementer: info -- logger &lt;logging.Logger object at 0x7f25e7ca7850&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[AverageImplementer1]" time="0.00102806091309"><system-err>18:53 |WARNING|AverageImplementer: warning -- logger &lt;logging.Logger object at 0x7f25e7c3ef90&gt;
18:53 |ERROR|AverageImplementer: error -- logger &lt;logging.Logger object at 0x7f25e7c3ef90&gt;
18:53 AverageImplementer: info -- logger &lt;logging.Logger object at 0x7f25e7c3ef90&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[DummyPool]" time="0.000871896743774"><system-err>18:53 |WARNING|DummyPool: warning -- logger &lt;logging.Logger object at 0x7f25e7d787d0&gt;
18:53 |ERROR|DummyPool: error -- logger &lt;logging.Logger object at 0x7f25e7d787d0&gt;
18:53 DummyPool: info -- logger &lt;logging.Logger object at 0x7f25e7d787d0&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[WorkerPoolBase]" time="0.000964164733887"><system-err>18:53 |WARNING|WorkerPoolBase: warning -- logger &lt;logging.Logger object at 0x7f25e7cd62d0&gt;
18:53 |ERROR|WorkerPoolBase: error -- logger &lt;logging.Logger object at 0x7f25e7cd62d0&gt;
18:53 WorkerPoolBase: info -- logger &lt;logging.Logger object at 0x7f25e7cd62d0&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[CoerciveRBReductor]" time="0.00115489959717"><system-err>18:53 |WARNING|CoerciveRBReductor: warning -- logger &lt;logging.Logger object at 0x7f25e7c19990&gt;
18:53 |ERROR|CoerciveRBReductor: error -- logger &lt;logging.Logger object at 0x7f25e7c19990&gt;
18:53 CoerciveRBReductor: info -- logger &lt;logging.Logger object at 0x7f25e7c19990&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[SimpleCoerciveRBReductor]" time="0.000923871994019"><system-err>18:53 |WARNING|SimpleCoerciveRBReductor: warning -- logger &lt;logging.Logger object at 0x7f25e7c19dd0&gt;
18:53 |ERROR|SimpleCoerciveRBReductor: error -- logger &lt;logging.Logger object at 0x7f25e7c19dd0&gt;
18:53 SimpleCoerciveRBReductor: info -- logger &lt;logging.Logger object at 0x7f25e7c19dd0&gt;
</system-err></testcase><testcase classname="src.pymortests.core.logger" file="src/pymortests/core/logger.py" line="23" name="test_logclass[ParabolicRBReductor]" time="0.000942707061768"><system-err>18:53 |WARNING|ParabolicRBReductor: warning -- logger &lt;logging.Logger object at 0x7f25e7c21550&gt;
18:53 |ERROR|ParabolicRBReductor: error -- logger &lt;logging.Logger object at 0x7f25e7c21550&gt;
18:53 ParabolicRBReductor: info -- logger &lt;logging.Logger object at 0x7f25e7c21550&gt;
</system-err></testcase></testsuite>